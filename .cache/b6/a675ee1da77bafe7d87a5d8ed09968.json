{"id":"node_modules/vega-lite/build/src/spec/unit.js","dependencies":[{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/unit.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/package.json","includedInParent":true,"mtime":1570375771013},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isUnitSpec = isUnitSpec;\n\nfunction isUnitSpec(spec) {\n  return !!spec['mark'];\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":56,"column":6},"generated":{"line":8,"column":0}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":56,"column":16},"generated":{"line":8,"column":9}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":56,"column":6},"generated":{"line":8,"column":19}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":56,"column":27},"generated":{"line":8,"column":20}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":56,"column":6},"generated":{"line":8,"column":24}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":56,"column":41},"generated":{"line":8,"column":26}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":57,"column":2},"generated":{"line":9,"column":0}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":57,"column":9},"generated":{"line":9,"column":9}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":57,"column":10},"generated":{"line":9,"column":10}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":57,"column":11},"generated":{"line":9,"column":11}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":57,"column":15},"generated":{"line":9,"column":15}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":57,"column":16},"generated":{"line":9,"column":16}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":57,"column":15},"generated":{"line":9,"column":22}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":57,"column":2},"generated":{"line":9,"column":23}},{"source":"../../../src/spec/unit.ts","name":null,"original":{"line":58,"column":1},"generated":{"line":10,"column":0}}],"sources":{"../../../src/spec/unit.ts":"import {Field} from '../channeldef';\nimport {CompositeEncoding, FacetedCompositeEncoding} from '../compositemark/index';\nimport {Encoding} from '../encoding';\nimport {AnyMark, Mark, MarkDef} from '../mark';\nimport {Projection} from '../projection';\nimport {SelectionDef} from '../selection';\nimport {BaseSpec, GenericCompositionLayoutWithColumns, LayerUnitMixins, ResolveMixins, DataMixins} from './base';\nimport {TopLevel} from './toplevel';\n\n/**\n * Base interface for a unit (single-view) specification.\n */\nexport interface GenericUnitSpec<E extends Encoding<any>, M> extends BaseSpec, LayerUnitMixins {\n  /**\n   * A string describing the mark type (one of `\"bar\"`, `\"circle\"`, `\"square\"`, `\"tick\"`, `\"line\"`,\n   * `\"area\"`, `\"point\"`, `\"rule\"`, `\"geoshape\"`, and `\"text\"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).\n   */\n  mark: M;\n\n  /**\n   * A key-value mapping between encoding channels and definition of fields.\n   */\n  encoding?: E;\n\n  /**\n   * An object defining properties of geographic projection, which will be applied to `shape` path for `\"geoshape\"` marks\n   * and to `latitude` and `\"longitude\"` channels for other marks.\n   */\n  projection?: Projection;\n\n  /**\n   * A key-value mapping between selection names and definitions.\n   */\n  selection?: {[name: string]: SelectionDef};\n}\n\n/**\n * A unit specification without any shortcut/expansion syntax.\n */\nexport type NormalizedUnitSpec = GenericUnitSpec<Encoding<Field>, Mark | MarkDef>;\n\n/**\n * A unit specification, which can contain either [primitive marks or composite marks](https://vega.github.io/vega-lite/docs/mark.html#types).\n */\nexport type UnitSpec = GenericUnitSpec<CompositeEncoding, AnyMark>;\n\n/**\n * Unit spec that can have a composite mark and row or column channels (shorthand for a facet spec).\n */\nexport type FacetedUnitSpec = GenericUnitSpec<FacetedCompositeEncoding, AnyMark> &\n  GenericCompositionLayoutWithColumns &\n  ResolveMixins;\n\nexport type TopLevelUnitSpec = TopLevel<FacetedUnitSpec> & DataMixins;\n\nexport function isUnitSpec(spec: BaseSpec): spec is FacetedUnitSpec | NormalizedUnitSpec {\n  return !!spec['mark'];\n}\n"},"lineCount":null}},"error":null,"hash":"9d2d430fdf9f4830345b5a36b6803d75","cacheData":{"env":{}}}