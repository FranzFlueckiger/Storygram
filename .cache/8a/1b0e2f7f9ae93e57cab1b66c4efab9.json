{"id":"node_modules/vega-lite/build/src/projection.js","dependencies":[{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/projection.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/package.json","includedInParent":true,"mtime":1569326798571},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PROJECTION_PROPERTIES = void 0;\nconst PROJECTION_PROPERTIES = ['type', 'clipAngle', 'clipExtent', 'center', 'rotate', 'precision', 'reflectX', 'reflectY', 'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];\nexports.PROJECTION_PROPERTIES = PROJECTION_PROPERTIES;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":7},"generated":{"line":7,"column":0}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":13},"generated":{"line":7,"column":6}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":34},"generated":{"line":7,"column":27}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":30}},{"source":"../../src/projection.ts","name":null,"original":{"line":80,"column":2},"generated":{"line":7,"column":31}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":37}},{"source":"../../src/projection.ts","name":null,"original":{"line":81,"column":2},"generated":{"line":7,"column":39}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":50}},{"source":"../../src/projection.ts","name":null,"original":{"line":82,"column":2},"generated":{"line":7,"column":52}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":64}},{"source":"../../src/projection.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":7,"column":66}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":74}},{"source":"../../src/projection.ts","name":null,"original":{"line":84,"column":2},"generated":{"line":7,"column":76}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":84}},{"source":"../../src/projection.ts","name":null,"original":{"line":85,"column":2},"generated":{"line":7,"column":86}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":97}},{"source":"../../src/projection.ts","name":null,"original":{"line":86,"column":2},"generated":{"line":7,"column":99}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":109}},{"source":"../../src/projection.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":7,"column":111}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":121}},{"source":"../../src/projection.ts","name":null,"original":{"line":88,"column":2},"generated":{"line":7,"column":123}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":136}},{"source":"../../src/projection.ts","name":null,"original":{"line":89,"column":2},"generated":{"line":7,"column":138}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":148}},{"source":"../../src/projection.ts","name":null,"original":{"line":90,"column":2},"generated":{"line":7,"column":150}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":160}},{"source":"../../src/projection.ts","name":null,"original":{"line":91,"column":2},"generated":{"line":7,"column":162}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":169}},{"source":"../../src/projection.ts","name":null,"original":{"line":92,"column":2},"generated":{"line":7,"column":171}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":181}},{"source":"../../src/projection.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":7,"column":183}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":191}},{"source":"../../src/projection.ts","name":null,"original":{"line":94,"column":2},"generated":{"line":7,"column":193}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":200}},{"source":"../../src/projection.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":7,"column":202}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":211}},{"source":"../../src/projection.ts","name":null,"original":{"line":96,"column":2},"generated":{"line":7,"column":213}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":59},"generated":{"line":7,"column":219}},{"source":"../../src/projection.ts","name":null,"original":{"line":79,"column":7},"generated":{"line":7,"column":220}}],"sources":{"../../src/projection.ts":"import {ProjectionType} from './vega.schema';\n\nexport type ProjectionType = ProjectionType;\n\nexport interface Projection {\n  /**\n   * The cartographic projection to use. This value is case-insensitive, for example `\"albers\"` and `\"Albers\"` indicate the same projection type. You can find all valid projection types [in the documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).\n   *\n   * __Default value:__ `mercator`\n   */\n  type?: ProjectionType;\n\n  /**\n   * Sets the projection's scale (zoom) value, overriding automatic fitting.\n   */\n  scale?: number;\n\n  /**\n   * Sets the projection's translation (pan) value, overriding automatic fitting.\n   */\n  translate?: number[];\n\n  /**\n   * Sets the projection’s clipping circle radius to the specified angle in degrees. If `null`, switches to [antimeridian](http://bl.ocks.org/mbostock/3788999) cutting rather than small-circle clipping.\n   */\n  clipAngle?: number;\n\n  /**\n   * Sets the projection’s viewport clip extent to the specified bounds in pixels. The extent bounds are specified as an array `[[x0, y0], [x1, y1]]`, where `x0` is the left-side of the viewport, `y0` is the top, `x1` is the right and `y1` is the bottom. If `null`, no viewport clipping is performed.\n   */\n  clipExtent?: number[][];\n\n  /**\n   * Sets the projection’s center to the specified center, a two-element array of longitude and latitude in degrees.\n   *\n   * __Default value:__ `[0, 0]`\n   */\n  center?: number[];\n\n  /**\n   * Sets the projection’s three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)\n   *\n   * __Default value:__ `[0, 0, 0]`\n   */\n  rotate?: number[];\n\n  /**\n   * Sets the threshold for the projection’s [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglas–Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projection’s current resampling precision which defaults to `√0.5 ≅ 0.70710…`.\n   */\n  precision?: number;\n  /*\n   * Sets whether or not the x-dimension is reflected (negated) in the output.\n   */\n\n  reflectX?: boolean;\n  /*\n   * Sets whether or not the y-dimension is reflected (negated) in the output.\n   */\n\n  reflectY?: boolean;\n\n  /* The following properties are all supported for specific types of projections. Consult the d3-geo-projection library for more information: https://github.com/d3/d3-geo-projection */\n  coefficient?: number;\n  distance?: number;\n  fraction?: number;\n  lobes?: number;\n  parallel?: number;\n  radius?: number;\n  ratio?: number;\n  spacing?: number;\n  tilt?: number;\n}\n\n/**\n * Any property of Projection can be in config\n */\nexport type ProjectionConfig = Projection;\n\nexport const PROJECTION_PROPERTIES: (keyof Projection)[] = [\n  'type',\n  'clipAngle',\n  'clipExtent',\n  'center',\n  'rotate',\n  'precision',\n  'reflectX',\n  'reflectY',\n  'coefficient',\n  'distance',\n  'fraction',\n  'lobes',\n  'parallel',\n  'radius',\n  'ratio',\n  'spacing',\n  'tilt'\n];\n"},"lineCount":null}},"error":null,"hash":"50009f4e5d535082a07eb1bd604b5eef","cacheData":{"env":{}}}