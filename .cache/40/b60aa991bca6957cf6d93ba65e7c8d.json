{"id":"node_modules/vega-lite/build/src/compile/predicate.js","dependencies":[{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/compile/predicate.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/package.json","includedInParent":true,"mtime":1570375771013},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"vega-util","loc":{"line":1,"column":25},"parent":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/compile/predicate.js","resolved":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/node_modules/vega-util/index.js"},{"name":"../predicate","loc":{"line":2,"column":60},"parent":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/compile/predicate.js","resolved":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/predicate.js"},{"name":"../util","loc":{"line":3,"column":28},"parent":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/compile/predicate.js","resolved":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/util.js"},{"name":"./selection/assemble","loc":{"line":4,"column":43},"parent":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/compile/predicate.js","resolved":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/compile/selection/assemble.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expression = expression;\n\nvar _vegaUtil = require(\"vega-util\");\n\nvar _predicate = require(\"../predicate\");\n\nvar _util = require(\"../util\");\n\nvar _assemble = require(\"./selection/assemble\");\n\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\nfunction expression(model, filterOp, node) {\n  return (0, _util.logicalExpr)(filterOp, predicate => {\n    if ((0, _vegaUtil.isString)(predicate)) {\n      return predicate;\n    } else if ((0, _predicate.isSelectionPredicate)(predicate)) {\n      return (0, _assemble.assembleSelectionPredicate)(model, predicate.selection, node);\n    } else {\n      // Filter Object\n      return (0, _predicate.fieldFilterExpression)(predicate);\n    }\n  });\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":13,"column":6},"generated":{"line":20,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":13,"column":16},"generated":{"line":20,"column":9}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":13,"column":6},"generated":{"line":20,"column":19}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":13,"column":27},"generated":{"line":20,"column":20}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":13,"column":6},"generated":{"line":20,"column":25}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":13,"column":41},"generated":{"line":20,"column":27}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":13,"column":6},"generated":{"line":20,"column":35}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":13,"column":78},"generated":{"line":20,"column":37}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":13,"column":6},"generated":{"line":20,"column":41}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":13,"column":97},"generated":{"line":20,"column":43}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":14,"column":2},"generated":{"line":21,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":14,"column":9},"generated":{"line":21,"column":9}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":14,"column":21},"generated":{"line":21,"column":32}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":14,"column":9},"generated":{"line":21,"column":40}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":14,"column":32},"generated":{"line":21,"column":42}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":14,"column":31},"generated":{"line":21,"column":51}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":14,"column":56},"generated":{"line":21,"column":55}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":15,"column":4},"generated":{"line":22,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":15,"column":8},"generated":{"line":22,"column":8}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":15,"column":17},"generated":{"line":22,"column":32}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":15,"column":8},"generated":{"line":22,"column":41}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":15,"column":4},"generated":{"line":22,"column":42}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":15,"column":29},"generated":{"line":22,"column":44}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":16,"column":6},"generated":{"line":23,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":16,"column":13},"generated":{"line":23,"column":13}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":16,"column":6},"generated":{"line":23,"column":22}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":17,"column":5},"generated":{"line":24,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":15,"column":4},"generated":{"line":24,"column":5}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":17,"column":11},"generated":{"line":24,"column":11}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":17,"column":15},"generated":{"line":24,"column":15}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":17,"column":36},"generated":{"line":24,"column":52}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":17,"column":15},"generated":{"line":24,"column":61}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":17,"column":11},"generated":{"line":24,"column":62}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":17,"column":48},"generated":{"line":24,"column":64}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":18,"column":6},"generated":{"line":25,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":18,"column":13},"generated":{"line":25,"column":13}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":18,"column":40},"generated":{"line":25,"column":55}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":18,"column":13},"generated":{"line":25,"column":60}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":18,"column":47},"generated":{"line":25,"column":62}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":18,"column":56},"generated":{"line":25,"column":71}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":18,"column":57},"generated":{"line":25,"column":72}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":18,"column":13},"generated":{"line":25,"column":81}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":18,"column":68},"generated":{"line":25,"column":83}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":18,"column":13},"generated":{"line":25,"column":87}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":18,"column":6},"generated":{"line":25,"column":88}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":19,"column":5},"generated":{"line":26,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":17,"column":11},"generated":{"line":26,"column":5}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":19,"column":11},"generated":{"line":26,"column":11}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":27,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":28,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":21,"column":13},"generated":{"line":28,"column":13}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":21,"column":35},"generated":{"line":28,"column":51}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":21,"column":13},"generated":{"line":28,"column":60}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":28,"column":61}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":22,"column":5},"generated":{"line":29,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":23,"column":3},"generated":{"line":30,"column":0}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":14,"column":9},"generated":{"line":30,"column":3}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":14,"column":2},"generated":{"line":30,"column":4}},{"source":"../../../src/compile/predicate.ts","name":null,"original":{"line":24,"column":1},"generated":{"line":31,"column":0}}],"sources":{"../../../src/compile/predicate.ts":"import {isString} from 'vega-util';\nimport {LogicalOperand} from '../logical';\nimport {fieldFilterExpression, isSelectionPredicate, Predicate} from '../predicate';\nimport {logicalExpr} from '../util';\nimport {DataFlowNode} from './data/dataflow';\nimport {Model} from './model';\nimport {assembleSelectionPredicate} from './selection/assemble';\n\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\nexport function expression(model: Model, filterOp: LogicalOperand<Predicate>, node?: DataFlowNode): string {\n  return logicalExpr(filterOp, (predicate: Predicate) => {\n    if (isString(predicate)) {\n      return predicate;\n    } else if (isSelectionPredicate(predicate)) {\n      return assembleSelectionPredicate(model, predicate.selection, node);\n    } else {\n      // Filter Object\n      return fieldFilterExpression(predicate);\n    }\n  });\n}\n"},"lineCount":null}},"error":null,"hash":"783fab486af0dd5c362110d2afc72f90","cacheData":{"env":{}}}