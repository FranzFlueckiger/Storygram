{"id":"node_modules/vega-lite/build/src/sort.js","dependencies":[{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/sort.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/package.json","includedInParent":true,"mtime":1570375771013},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"vega-util","loc":{"line":1,"column":24},"parent":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/sort.js","resolved":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/node_modules/vega-util/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSortByEncoding = isSortByEncoding;\nexports.isSortField = isSortField;\nexports.isSortArray = isSortArray;\nexports.DEFAULT_SORT_OP = void 0;\n\nvar _vegaUtil = require(\"vega-util\");\n\nconst DEFAULT_SORT_OP = 'mean';\nexports.DEFAULT_SORT_OP = DEFAULT_SORT_OP;\n\nfunction isSortByEncoding(sort) {\n  return !!sort && !!sort['encoding'];\n}\n\nfunction isSortField(sort) {\n  return !!sort && (sort['op'] === 'count' || !!sort['field']);\n}\n\nfunction isSortArray(sort) {\n  return !!sort && (0, _vegaUtil.isArray)(sort);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/sort.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":11,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":29,"column":7},"generated":{"line":13,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":29,"column":13},"generated":{"line":13,"column":6}},{"source":"../../src/sort.ts","name":null,"original":{"line":29,"column":28},"generated":{"line":13,"column":21}},{"source":"../../src/sort.ts","name":null,"original":{"line":29,"column":31},"generated":{"line":13,"column":24}},{"source":"../../src/sort.ts","name":null,"original":{"line":29,"column":7},"generated":{"line":13,"column":30}},{"source":"../../src/sort.ts","name":null,"original":{"line":75,"column":6},"generated":{"line":16,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":75,"column":16},"generated":{"line":16,"column":9}},{"source":"../../src/sort.ts","name":null,"original":{"line":75,"column":6},"generated":{"line":16,"column":25}},{"source":"../../src/sort.ts","name":null,"original":{"line":75,"column":36},"generated":{"line":16,"column":26}},{"source":"../../src/sort.ts","name":null,"original":{"line":75,"column":6},"generated":{"line":16,"column":30}},{"source":"../../src/sort.ts","name":null,"original":{"line":75,"column":49},"generated":{"line":16,"column":32}},{"source":"../../src/sort.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":17,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":76,"column":9},"generated":{"line":17,"column":9}},{"source":"../../src/sort.ts","name":null,"original":{"line":76,"column":10},"generated":{"line":17,"column":10}},{"source":"../../src/sort.ts","name":null,"original":{"line":76,"column":11},"generated":{"line":17,"column":11}},{"source":"../../src/sort.ts","name":null,"original":{"line":76,"column":9},"generated":{"line":17,"column":15}},{"source":"../../src/sort.ts","name":null,"original":{"line":76,"column":19},"generated":{"line":17,"column":19}},{"source":"../../src/sort.ts","name":null,"original":{"line":76,"column":20},"generated":{"line":17,"column":20}},{"source":"../../src/sort.ts","name":null,"original":{"line":76,"column":21},"generated":{"line":17,"column":21}},{"source":"../../src/sort.ts","name":null,"original":{"line":76,"column":25},"generated":{"line":17,"column":25}},{"source":"../../src/sort.ts","name":null,"original":{"line":76,"column":26},"generated":{"line":17,"column":26}},{"source":"../../src/sort.ts","name":null,"original":{"line":76,"column":25},"generated":{"line":17,"column":36}},{"source":"../../src/sort.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":17,"column":37}},{"source":"../../src/sort.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":18,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":79,"column":6},"generated":{"line":20,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":79,"column":16},"generated":{"line":20,"column":9}},{"source":"../../src/sort.ts","name":null,"original":{"line":79,"column":6},"generated":{"line":20,"column":20}},{"source":"../../src/sort.ts","name":null,"original":{"line":79,"column":31},"generated":{"line":20,"column":21}},{"source":"../../src/sort.ts","name":null,"original":{"line":79,"column":6},"generated":{"line":20,"column":25}},{"source":"../../src/sort.ts","name":null,"original":{"line":79,"column":44},"generated":{"line":20,"column":27}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":2},"generated":{"line":21,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":9},"generated":{"line":21,"column":9}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":10},"generated":{"line":21,"column":10}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":21,"column":11}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":9},"generated":{"line":21,"column":15}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":20},"generated":{"line":21,"column":20}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":24},"generated":{"line":21,"column":24}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":25},"generated":{"line":21,"column":25}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":24},"generated":{"line":21,"column":29}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":20},"generated":{"line":21,"column":30}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":35},"generated":{"line":21,"column":35}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":20},"generated":{"line":21,"column":42}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":46},"generated":{"line":21,"column":46}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":47},"generated":{"line":21,"column":47}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":48},"generated":{"line":21,"column":48}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":52},"generated":{"line":21,"column":52}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":53},"generated":{"line":21,"column":53}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":52},"generated":{"line":21,"column":60}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":9},"generated":{"line":21,"column":61}},{"source":"../../src/sort.ts","name":null,"original":{"line":80,"column":2},"generated":{"line":21,"column":62}},{"source":"../../src/sort.ts","name":null,"original":{"line":81,"column":1},"generated":{"line":22,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":83,"column":6},"generated":{"line":24,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":83,"column":16},"generated":{"line":24,"column":9}},{"source":"../../src/sort.ts","name":null,"original":{"line":83,"column":6},"generated":{"line":24,"column":20}},{"source":"../../src/sort.ts","name":null,"original":{"line":83,"column":31},"generated":{"line":24,"column":21}},{"source":"../../src/sort.ts","name":null,"original":{"line":83,"column":6},"generated":{"line":24,"column":25}},{"source":"../../src/sort.ts","name":null,"original":{"line":83,"column":44},"generated":{"line":24,"column":27}},{"source":"../../src/sort.ts","name":null,"original":{"line":84,"column":2},"generated":{"line":25,"column":0}},{"source":"../../src/sort.ts","name":null,"original":{"line":84,"column":9},"generated":{"line":25,"column":9}},{"source":"../../src/sort.ts","name":null,"original":{"line":84,"column":10},"generated":{"line":25,"column":10}},{"source":"../../src/sort.ts","name":null,"original":{"line":84,"column":11},"generated":{"line":25,"column":11}},{"source":"../../src/sort.ts","name":null,"original":{"line":84,"column":9},"generated":{"line":25,"column":15}},{"source":"../../src/sort.ts","name":null,"original":{"line":84,"column":19},"generated":{"line":25,"column":19}},{"source":"../../src/sort.ts","name":null,"original":{"line":84,"column":27},"generated":{"line":25,"column":42}},{"source":"../../src/sort.ts","name":null,"original":{"line":84,"column":19},"generated":{"line":25,"column":46}},{"source":"../../src/sort.ts","name":null,"original":{"line":84,"column":2},"generated":{"line":25,"column":47}},{"source":"../../src/sort.ts","name":null,"original":{"line":85,"column":1},"generated":{"line":26,"column":0}}],"sources":{"../../src/sort.ts":"import {AggregateOp} from 'vega';\nimport {isArray} from 'vega-util';\nimport {SingleDefUnitChannel} from './channel';\nimport {FieldName} from './channeldef';\nimport {DateTime} from './datetime';\n\nexport type SortOrder = 'ascending' | 'descending';\n\n/**\n * A sort definition for transform\n */\nexport interface SortField {\n  /**\n   * The name of the field to sort.\n   */\n  field: FieldName;\n\n  /**\n   * Whether to sort the field in ascending or descending order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder | null;\n}\n\nexport interface SortFields {\n  field: FieldName[];\n  order?: (SortOrder)[];\n}\n\nexport const DEFAULT_SORT_OP = 'mean';\n\n/**\n * A sort definition for sorting a discrete scale in an encoding field definition.\n */\n\nexport interface EncodingSortField<F> {\n  /**\n   * The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.\n   *\n   * __Default value:__ If unspecified, defaults to the field specified in the outer data reference.\n   */\n  field?: F; // Field is optional because `\"op\": \"count\"` does not require a field.\n  /**\n   * An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to perform on the field prior to sorting (e.g., `\"count\"`, `\"mean\"` and `\"median\"`).\n   * An aggregation is required when there are multiple values of the sort field for each encoded data field.\n   * The input data objects will be aggregated, grouped by the encoded data field.\n   *\n   * For a full list of operations, please see the documentation for [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).\n   *\n   * __Default value:__ `\"sum\"` for stacked plots. Otherwise, `\"mean\"`.\n   */\n  op?: AggregateOp;\n\n  /**\n   * The sort order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder | null;\n}\n\nexport interface SortByEncoding {\n  /**\n   * The [encoding channel](https://vega.github.io/vega-lite/docs/encoding.html#channels) to sort by (e.g., `\"x\"`, `\"y\"`)\n   */\n  encoding: SingleDefUnitChannel;\n\n  /**\n   * The sort order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder | null;\n}\n\nexport type SortArray = number[] | string[] | boolean[] | DateTime[];\n\nexport type Sort<F> = SortArray | SortOrder | EncodingSortField<F> | SortByEncoding | null;\n\nexport function isSortByEncoding<F>(sort: Sort<F>): sort is SortByEncoding {\n  return !!sort && !!sort['encoding'];\n}\n\nexport function isSortField<F>(sort: Sort<F>): sort is EncodingSortField<F> {\n  return !!sort && (sort['op'] === 'count' || !!sort['field']);\n}\n\nexport function isSortArray<F>(sort: Sort<F>): sort is SortArray {\n  return !!sort && isArray(sort);\n}\n"},"lineCount":null}},"error":null,"hash":"acf7f8b5442a530edece5b05039f2691","cacheData":{"env":{}}}