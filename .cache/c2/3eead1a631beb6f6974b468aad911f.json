{"id":"node_modules/vega-lite/build/src/spec/index.js","dependencies":[{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/index.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/package.json","includedInParent":true,"mtime":1570375771013},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"./concat","loc":{"line":7,"column":62},"parent":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/index.js","resolved":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/concat.js"},{"name":"./facet","loc":{"line":8,"column":28},"parent":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/index.js","resolved":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/facet.js"},{"name":"./layer","loc":{"line":9,"column":28},"parent":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/index.js","resolved":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/layer.js"},{"name":"./repeat","loc":{"line":10,"column":29},"parent":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/index.js","resolved":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/repeat.js"},{"name":"./unit","loc":{"line":11,"column":27},"parent":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/index.js","resolved":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/unit.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"isAnyConcatSpec\", {\n  enumerable: true,\n  get: function () {\n    return _concat.isAnyConcatSpec;\n  }\n});\nObject.defineProperty(exports, \"isHConcatSpec\", {\n  enumerable: true,\n  get: function () {\n    return _concat.isHConcatSpec;\n  }\n});\nObject.defineProperty(exports, \"isVConcatSpec\", {\n  enumerable: true,\n  get: function () {\n    return _concat.isVConcatSpec;\n  }\n});\nObject.defineProperty(exports, \"isFacetSpec\", {\n  enumerable: true,\n  get: function () {\n    return _facet.isFacetSpec;\n  }\n});\nObject.defineProperty(exports, \"isLayerSpec\", {\n  enumerable: true,\n  get: function () {\n    return _layer.isLayerSpec;\n  }\n});\nObject.defineProperty(exports, \"isRepeatSpec\", {\n  enumerable: true,\n  get: function () {\n    return _repeat.isRepeatSpec;\n  }\n});\nObject.defineProperty(exports, \"isUnitSpec\", {\n  enumerable: true,\n  get: function () {\n    return _unit.isUnitSpec;\n  }\n});\n\nvar _concat = require(\"./concat\");\n\nvar _facet = require(\"./facet\");\n\nvar _layer = require(\"./layer\");\n\nvar _repeat = require(\"./repeat\");\n\nvar _unit = require(\"./unit\");"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/spec/index.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":49,"column":0}},{"source":"../../../src/spec/index.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":51,"column":0}},{"source":"../../../src/spec/index.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":53,"column":0}},{"source":"../../../src/spec/index.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":55,"column":0}},{"source":"../../../src/spec/index.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":57,"column":0}}],"sources":{"../../../src/spec/index.ts":"/**\n * Definition for specifications in Vega-Lite.  In general, there are 3 variants of specs for each type of specs:\n * - Generic specs are generic versions of specs and they are parameterized differently for internal and external specs.\n * - The external specs (no prefix) would allow composite marks, row/column encodings, and mark macros like point/line overlay.\n * - The internal specs (with `Normalized` prefix) would only support primitive marks and support no macros/shortcuts.\n */\n\nimport {DataMixins} from './base';\nimport {GenericConcatSpec, GenericHConcatSpec, GenericVConcatSpec} from './concat';\nimport {GenericFacetSpec} from './facet';\nimport {GenericLayerSpec, LayerSpec, NormalizedLayerSpec} from './layer';\nimport {GenericRepeatSpec} from './repeat';\nimport {TopLevel} from './toplevel';\nimport {FacetedUnitSpec, GenericUnitSpec, NormalizedUnitSpec, TopLevelUnitSpec} from './unit';\n\nexport {BaseSpec, LayoutSizeMixins} from './base';\nexport {\n  GenericHConcatSpec,\n  GenericVConcatSpec,\n  isAnyConcatSpec,\n  isHConcatSpec,\n  isVConcatSpec,\n  NormalizedConcatSpec\n} from './concat';\nexport {GenericFacetSpec, isFacetSpec, NormalizedFacetSpec} from './facet';\nexport {GenericLayerSpec, isLayerSpec, LayerSpec as ExtendedLayerSpec, NormalizedLayerSpec} from './layer';\nexport {GenericRepeatSpec, isRepeatSpec, NormalizedRepeatSpec} from './repeat';\nexport {TopLevel} from './toplevel';\nexport {FacetedUnitSpec, GenericUnitSpec, isUnitSpec, NormalizedUnitSpec, UnitSpec} from './unit';\n\n/**\n * Any specification in Vega-Lite.\n */\nexport type GenericSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>> =\n  | U\n  | L\n  | GenericFacetSpec<U, L>\n  | GenericRepeatSpec<U, L>\n  | GenericConcatSpec<U, L>\n  | GenericVConcatSpec<U, L>\n  | GenericHConcatSpec<U, L>;\n\n/**\n * Specs with only primitive marks and without other macros.\n */\nexport type NormalizedSpec = GenericSpec<NormalizedUnitSpec, NormalizedLayerSpec>;\n\nexport type TopLevelFacetSpec = TopLevel<GenericFacetSpec<FacetedUnitSpec, LayerSpec>> & DataMixins;\n\n/**\n * A Vega-Lite top-level specification.\n * This is the root class for all Vega-Lite specifications.\n * (The json schema is generated from this type.)\n */\nexport type TopLevelSpec =\n  | TopLevelUnitSpec\n  | TopLevelFacetSpec\n  | TopLevel<LayerSpec>\n  | TopLevel<GenericRepeatSpec<FacetedUnitSpec, LayerSpec>>\n  | TopLevel<GenericConcatSpec<FacetedUnitSpec, LayerSpec>>\n  | TopLevel<GenericVConcatSpec<FacetedUnitSpec, LayerSpec>>\n  | TopLevel<GenericHConcatSpec<FacetedUnitSpec, LayerSpec>>;\n"},"lineCount":null}},"error":null,"hash":"7f877d364de8793e42082ee9ff530aa9","cacheData":{"env":{}}}