{"id":"node_modules/vega-lite/build/src/spec/repeat.js","dependencies":[{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/repeat.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/package.json","includedInParent":true,"mtime":1570375771013},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isRepeatSpec = isRepeatSpec;\n\nfunction isRepeatSpec(spec) {\n  return spec['repeat'] !== undefined;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":44,"column":6},"generated":{"line":8,"column":0}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":44,"column":16},"generated":{"line":8,"column":9}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":44,"column":6},"generated":{"line":8,"column":21}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":44,"column":29},"generated":{"line":8,"column":22}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":44,"column":6},"generated":{"line":8,"column":26}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":44,"column":43},"generated":{"line":8,"column":28}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":2},"generated":{"line":9,"column":0}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":9},"generated":{"line":9,"column":9}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":13},"generated":{"line":9,"column":13}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":14},"generated":{"line":9,"column":14}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":13},"generated":{"line":9,"column":22}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":9},"generated":{"line":9,"column":23}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":28},"generated":{"line":9,"column":28}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":2},"generated":{"line":9,"column":37}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":10,"column":0}}],"sources":{"../../../src/spec/repeat.ts":"import {BaseSpec, GenericCompositionLayoutWithColumns, ResolveMixins} from './base';\nimport {GenericSpec} from './index';\nimport {GenericLayerSpec, NormalizedLayerSpec} from './layer';\nimport {RepeatMapping} from './repeat';\nimport {GenericUnitSpec, NormalizedUnitSpec} from './unit';\n\nexport interface RepeatMapping {\n  /**\n   * An array of fields to be repeated vertically.\n   */\n  row?: string[];\n\n  /**\n   * An array of fields to be repeated horizontally.\n   */\n  column?: string[];\n}\n\n/**\n * Base interface for a repeat specification.\n */\nexport interface GenericRepeatSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    GenericCompositionLayoutWithColumns,\n    ResolveMixins {\n  /**\n   * Definition for fields to be repeated.  One of:\n   * 1) An array of fields to be repeated.  If `\"repeat\"` is an array, the field can be referred using `{\"repeat\": \"repeat\"}`\n   * 2) An object that mapped `\"row\"` and/or `\"column\"` to the listed of fields to be repeated along the particular orientations. The objects `{\"repeat\": \"row\"}` and `{\"repeat\": \"column\"}` can be used to refer to the repeated field respectively.\n   */\n  repeat: string[] | RepeatMapping;\n\n  /**\n   * A specification of the view that gets repeated.\n   */\n  spec: GenericSpec<U, L>;\n}\n\n/**\n * A repeat specification without any shortcut/expansion syntax.\n */\nexport type NormalizedRepeatSpec = GenericRepeatSpec<NormalizedUnitSpec, NormalizedLayerSpec>;\n\nexport function isRepeatSpec(spec: BaseSpec): spec is GenericRepeatSpec<any, any> {\n  return spec['repeat'] !== undefined;\n}\n"},"lineCount":null}},"error":null,"hash":"26efceb4e324babc9a45779d0bbce28a","cacheData":{"env":{}}}