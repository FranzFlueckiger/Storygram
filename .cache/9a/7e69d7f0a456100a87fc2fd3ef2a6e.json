{"id":"node_modules/vega-lite/build/src/spec/facet.js","dependencies":[{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/facet.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/package.json","includedInParent":true,"mtime":1570375771013},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isFacetMapping = isFacetMapping;\nexports.isFacetFieldDef = isFacetFieldDef;\nexports.isFacetSpec = isFacetSpec;\n\nfunction isFacetMapping(f) {\n  return !!f['row'] || !!f['column'];\n}\n\nfunction isFacetFieldDef(channelDef) {\n  return !!channelDef && !!channelDef['header'];\n}\n\nfunction isFacetSpec(spec) {\n  return spec['facet'] !== undefined;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":49,"column":6},"generated":{"line":10,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":49,"column":16},"generated":{"line":10,"column":9}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":49,"column":6},"generated":{"line":10,"column":23}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":49,"column":48},"generated":{"line":10,"column":24}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":49,"column":6},"generated":{"line":10,"column":25}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":49,"column":85},"generated":{"line":10,"column":27}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":2},"generated":{"line":11,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":11,"column":9}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":10},"generated":{"line":11,"column":10}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":11},"generated":{"line":11,"column":11}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":12},"generated":{"line":11,"column":12}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":13},"generated":{"line":11,"column":13}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":12},"generated":{"line":11,"column":18}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":11,"column":19}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":23},"generated":{"line":11,"column":23}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":24},"generated":{"line":11,"column":24}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":25},"generated":{"line":11,"column":25}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":26},"generated":{"line":11,"column":26}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":27},"generated":{"line":11,"column":27}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":26},"generated":{"line":11,"column":35}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":50,"column":2},"generated":{"line":11,"column":36}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":51,"column":1},"generated":{"line":12,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":65,"column":6},"generated":{"line":14,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":65,"column":16},"generated":{"line":14,"column":9}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":65,"column":6},"generated":{"line":14,"column":24}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":65,"column":49},"generated":{"line":14,"column":25}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":65,"column":6},"generated":{"line":14,"column":35}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":65,"column":84},"generated":{"line":14,"column":37}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":66,"column":2},"generated":{"line":15,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":66,"column":9},"generated":{"line":15,"column":9}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":66,"column":10},"generated":{"line":15,"column":10}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":66,"column":11},"generated":{"line":15,"column":11}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":66,"column":9},"generated":{"line":15,"column":21}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":66,"column":25},"generated":{"line":15,"column":25}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":66,"column":26},"generated":{"line":15,"column":26}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":66,"column":27},"generated":{"line":15,"column":27}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":66,"column":37},"generated":{"line":15,"column":37}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":66,"column":38},"generated":{"line":15,"column":38}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":66,"column":37},"generated":{"line":15,"column":46}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":66,"column":2},"generated":{"line":15,"column":47}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":16,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":95,"column":6},"generated":{"line":18,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":95,"column":16},"generated":{"line":18,"column":9}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":95,"column":6},"generated":{"line":18,"column":20}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":95,"column":28},"generated":{"line":18,"column":21}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":95,"column":6},"generated":{"line":18,"column":25}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":95,"column":42},"generated":{"line":18,"column":27}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":96,"column":2},"generated":{"line":19,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":96,"column":9},"generated":{"line":19,"column":9}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":96,"column":13},"generated":{"line":19,"column":13}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":96,"column":14},"generated":{"line":19,"column":14}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":96,"column":13},"generated":{"line":19,"column":21}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":96,"column":9},"generated":{"line":19,"column":22}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":96,"column":27},"generated":{"line":19,"column":27}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":96,"column":2},"generated":{"line":19,"column":36}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":97,"column":1},"generated":{"line":20,"column":0}}],"sources":{"../../../src/spec/facet.ts":"import {BinParams} from '../bin';\nimport {ChannelDef, Field, FieldDef, TypedFieldDef} from '../channeldef';\nimport {Header} from '../header';\nimport {EncodingSortField, SortArray, SortOrder} from '../sort';\nimport {StandardType} from '../type';\nimport {BaseSpec, GenericCompositionLayoutWithColumns, ResolveMixins} from './base';\nimport {FacetMapping} from './facet';\nimport {GenericLayerSpec, NormalizedLayerSpec} from './layer';\nimport {GenericUnitSpec, NormalizedUnitSpec} from './unit';\n\nexport interface FacetFieldDef<F extends Field> extends TypedFieldDef<F, StandardType, boolean | BinParams | null> {\n  /**\n   * An object defining properties of a facet's header.\n   */\n  header?: Header;\n\n  // Note: `\"sort\"` for facet field def is different from encoding field def as it does not support `SortByEncoding`\n\n  /**\n   * Sort order for the encoded field.\n   *\n   * For continuous fields (quantitative or temporal), `sort` can be either `\"ascending\"` or `\"descending\"`.\n   *\n   * For discrete fields, `sort` can be one of the following:\n   * - `\"ascending\"` or `\"descending\"` -- for sorting by the values' natural order in Javascript.\n   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\"month\"` and `\"day\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\"Mon\"`, `\"Tue\"`).\n   * - `null` indicating no sort.\n   *\n   * __Default value:__ `\"ascending\"`\n   *\n   * __Note:__ `null` is not supported for `row` and `column`.\n   */\n  sort?: SortArray | SortOrder | EncodingSortField<F> | null;\n}\n\nexport interface FacetMapping<F extends Field> {\n  /**\n   * A field definition for the vertical facet of trellis plots.\n   */\n  row?: FacetFieldDef<F>;\n\n  /**\n   * A field definition for the horizontal facet of trellis plots.\n   */\n  column?: FacetFieldDef<F>;\n}\n\nexport function isFacetMapping<F extends Field>(f: FacetFieldDef<F> | FacetMapping<F>): f is FacetMapping<F> {\n  return !!f['row'] || !!f['column'];\n}\n\n/**\n * Facet mapping for encoding macro\n */\nexport interface EncodingFacetMapping<F extends Field> extends FacetMapping<F> {\n  /**\n   * A field definition for the (flexible) facet of trellis plots.\n   *\n   * If either `row` or `column` is specified, this channel will be ignored.\n   */\n  facet?: FacetFieldDef<F>;\n}\n\nexport function isFacetFieldDef<F extends Field>(channelDef: ChannelDef<FieldDef<F>>): channelDef is FacetFieldDef<F> {\n  return !!channelDef && !!channelDef['header'];\n}\n\n/**\n * Base interface for a facet specification.\n */\nexport interface GenericFacetSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    GenericCompositionLayoutWithColumns,\n    ResolveMixins {\n  /**\n   * Definition for how to facet the data.  One of:\n   * 1) [a field definition for faceting the plot by one field](https://vega.github.io/vega-lite/docs/facet.html#field-def)\n   * 2) [An object that maps `row` and `column` channels to their field definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)\n   */\n  facet: FacetFieldDef<Field> | FacetMapping<Field>;\n\n  /**\n   * A specification of the view that gets faceted.\n   */\n  spec: L | U;\n  // TODO: replace this with GenericSpec<U> once we support all cases;\n}\n\n/**\n * A facet specification without any shortcut / expansion syntax\n */\nexport type NormalizedFacetSpec = GenericFacetSpec<NormalizedUnitSpec, NormalizedLayerSpec>;\n\nexport function isFacetSpec(spec: BaseSpec): spec is GenericFacetSpec<any, any> {\n  return spec['facet'] !== undefined;\n}\n"},"lineCount":null}},"error":null,"hash":"93bcab02991661a63ba1a4242f2d41d8","cacheData":{"env":{}}}