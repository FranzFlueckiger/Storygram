{"id":"node_modules/vega-lite/build/src/spec/layer.js","dependencies":[{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/src/spec/layer.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/package.json","includedInParent":true,"mtime":1570375771013},{"name":"/Users/franzfluckiger/Documents/Software/knot-diagram/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isLayerSpec = isLayerSpec;\n\nfunction isLayerSpec(spec) {\n  return spec['layer'] !== undefined;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":41,"column":6},"generated":{"line":8,"column":0}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":41,"column":16},"generated":{"line":8,"column":9}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":41,"column":6},"generated":{"line":8,"column":20}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":41,"column":28},"generated":{"line":8,"column":21}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":41,"column":6},"generated":{"line":8,"column":25}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":41,"column":42},"generated":{"line":8,"column":27}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":42,"column":2},"generated":{"line":9,"column":0}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":42,"column":9},"generated":{"line":9,"column":9}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":42,"column":13},"generated":{"line":9,"column":13}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":42,"column":14},"generated":{"line":9,"column":14}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":42,"column":13},"generated":{"line":9,"column":21}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":42,"column":9},"generated":{"line":9,"column":22}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":42,"column":27},"generated":{"line":9,"column":27}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":42,"column":2},"generated":{"line":9,"column":36}},{"source":"../../../src/spec/layer.ts","name":null,"original":{"line":43,"column":1},"generated":{"line":10,"column":0}}],"sources":{"../../../src/spec/layer.ts":"import {CompositeEncoding} from '../compositemark/index';\nimport {Projection} from '../projection';\nimport {BaseSpec, LayerUnitMixins, ResolveMixins} from './base';\nimport {GenericUnitSpec, NormalizedUnitSpec, UnitSpec} from './unit';\n\n/**\n * Base interface for a layer specification.\n */\nexport interface GenericLayerSpec<U extends GenericUnitSpec<any, any>>\n  extends BaseSpec,\n    LayerUnitMixins,\n    ResolveMixins {\n  /**\n   * Layer or single view specifications to be layered.\n   *\n   * __Note__: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. Instead, use the [facet operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a facet.\n   */\n  layer: (GenericLayerSpec<U> | U)[];\n}\n\n/**\n * A full layered plot specification, which may contains `encoding` and `projection` properties that will be applied to underlying unit (single-view) specifications.\n */\nexport interface LayerSpec extends GenericLayerSpec<UnitSpec> {\n  /**\n   * A shared key-value mapping between encoding channels and definition of fields in the underlying layers.\n   */\n  encoding?: CompositeEncoding;\n\n  /**\n   * An object defining properties of the geographic projection shared by underlying layers.\n   */\n  projection?: Projection;\n}\n\n/**\n * A layered specification without any shortcut/expansion syntax.\n */\nexport type NormalizedLayerSpec = GenericLayerSpec<NormalizedUnitSpec>;\n\nexport function isLayerSpec(spec: BaseSpec): spec is GenericLayerSpec<any> {\n  return spec['layer'] !== undefined;\n}\n"},"lineCount":null}},"error":null,"hash":"db83c36d664a22dc565b211dbea01697","cacheData":{"env":{}}}