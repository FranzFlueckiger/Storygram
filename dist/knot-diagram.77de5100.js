// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__extends = __extends;
exports.__rest = __rest;
exports.__decorate = __decorate;
exports.__param = __param;
exports.__metadata = __metadata;
exports.__awaiter = __awaiter;
exports.__generator = __generator;
exports.__exportStar = __exportStar;
exports.__values = __values;
exports.__read = __read;
exports.__spread = __spread;
exports.__spreadArrays = __spreadArrays;
exports.__await = __await;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncValues = __asyncValues;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__importStar = __importStar;
exports.__importDefault = __importDefault;
exports.__assign = void 0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__assign = __assign;

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

function __exportStar(m, exports) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator],
      i = 0;
  if (m) return m.call(o);
  return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}

function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}

function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}

;

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}

;

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}

function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
},{}],"node_modules/d3-selection/src/namespaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.xhtml = void 0;
var xhtml = "http://www.w3.org/1999/xhtml";
exports.xhtml = xhtml;
var _default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};
exports.default = _default;
},{}],"node_modules/d3-selection/src/namespace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespaces = _interopRequireDefault(require("./namespaces"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var prefix = name += "",
      i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return _namespaces.default.hasOwnProperty(prefix) ? {
    space: _namespaces.default[prefix],
    local: name
  } : name;
}
},{"./namespaces":"node_modules/d3-selection/src/namespaces.js"}],"node_modules/d3-selection/src/creator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = require("./namespaces");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function creatorInherit(name) {
  return function () {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === _namespaces.xhtml && document.documentElement.namespaceURI === _namespaces.xhtml ? document.createElement(name) : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function _default(name) {
  var fullname = (0, _namespace.default)(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
},{"./namespace":"node_modules/d3-selection/src/namespace.js","./namespaces":"node_modules/d3-selection/src/namespaces.js"}],"node_modules/d3-selection/src/selector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function none() {}

function _default(selector) {
  return selector == null ? none : function () {
    return this.querySelector(selector);
  };
}
},{}],"node_modules/d3-selection/src/selection/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selector.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"node_modules/d3-selection/src/selection/index.js","../selector":"node_modules/d3-selection/src/selector.js"}],"node_modules/d3-selection/src/selectorAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function empty() {
  return [];
}

function _default(selector) {
  return selector == null ? empty : function () {
    return this.querySelectorAll(selector);
  };
}
},{}],"node_modules/d3-selection/src/selection/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selectorAll = _interopRequireDefault(require("../selectorAll"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selectorAll.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, parents);
}
},{"./index":"node_modules/d3-selection/src/selection/index.js","../selectorAll":"node_modules/d3-selection/src/selectorAll.js"}],"node_modules/d3-selection/src/matcher.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(selector) {
  return function () {
    return this.matches(selector);
  };
}
},{}],"node_modules/d3-selection/src/selection/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _matcher = _interopRequireDefault(require("../matcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(match) {
  if (typeof match !== "function") match = (0, _matcher.default)(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"node_modules/d3-selection/src/selection/index.js","../matcher":"node_modules/d3-selection/src/matcher.js"}],"node_modules/d3-selection/src/selection/sparse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(update) {
  return new Array(update.length);
}
},{}],"node_modules/d3-selection/src/selection/enter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.EnterNode = EnterNode;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._enter || this._groups.map(_sparse.default), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function (child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function (child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function (selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function (selector) {
    return this._parent.querySelectorAll(selector);
  }
};
},{"./sparse":"node_modules/d3-selection/src/selection/sparse.js","./index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-selection/src/selection/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _enter = require("./enter");

var _constant = _interopRequireDefault(require("../constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length; // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.

  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Put any non-null nodes that don’t fit into exit.


  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue; // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.

  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);

      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  } // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.


  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);

    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Add any remaining nodes that were not bound to data to exit.


  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
      exit[i] = node;
    }
  }
}

function _default(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function (d) {
      data[++j] = d;
    });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;
  if (typeof value !== "function") value = (0, _constant.default)(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.

    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;

        while (!(next = updateGroup[i1]) && ++i1 < dataLength);

        previous._next = next || null;
      }
    }
  }

  update = new _index.Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
},{"./index":"node_modules/d3-selection/src/selection/index.js","./enter":"node_modules/d3-selection/src/selection/enter.js","../constant":"node_modules/d3-selection/src/constant.js"}],"node_modules/d3-selection/src/selection/exit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._exit || this._groups.map(_sparse.default), this._parents);
}
},{"./sparse":"node_modules/d3-selection/src/selection/sparse.js","./index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/selection/join.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(onenter, onupdate, onexit) {
  var enter = this.enter(),
      update = this,
      exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove();else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}
},{}],"node_modules/d3-selection/src/selection/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(selection) {
  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index.Selection(merges, this._parents);
}
},{"./index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/selection/order.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}
},{}],"node_modules/d3-selection/src/selection/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }

    sortgroup.sort(compareNode);
  }

  return new _index.Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{"./index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/selection/call.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
},{}],"node_modules/d3-selection/src/selection/nodes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = new Array(this.size()),
      i = -1;
  this.each(function () {
    nodes[++i] = this;
  });
  return nodes;
}
},{}],"node_modules/d3-selection/src/selection/node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}
},{}],"node_modules/d3-selection/src/selection/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.each(function () {
    ++size;
  });
  return size;
}
},{}],"node_modules/d3-selection/src/selection/empty.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return !this.node();
}
},{}],"node_modules/d3-selection/src/selection/each.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}
},{}],"node_modules/d3-selection/src/selection/attr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("../namespace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function () {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function _default(name, value) {
  var fullname = (0, _namespace.default)(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }

  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}
},{"../namespace":"node_modules/d3-selection/src/namespace.js"}],"node_modules/d3-selection/src/window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
  node.document && node // node is a Window
  || node.defaultView; // node is a Document
}
},{}],"node_modules/d3-selection/src/selection/style.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.styleValue = styleValue;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function () {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
  };
}

function _default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name) || (0, _window.default)(node).getComputedStyle(node, null).getPropertyValue(name);
}
},{"../window":"node_modules/d3-selection/src/window.js"}],"node_modules/d3-selection/src/selection/property.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function propertyRemove(name) {
  return function () {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function () {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];else this[name] = v;
  };
}

function _default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}
},{}],"node_modules/d3-selection/src/selection/classed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function (name) {
    var i = this._names.indexOf(name);

    if (i < 0) {
      this._names.push(name);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function (name) {
    var i = this._names.indexOf(name);

    if (i >= 0) {
      this._names.splice(i, 1);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function (name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function () {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function () {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function () {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function _default(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()),
        i = -1,
        n = names.length;

    while (++i < n) if (!list.contains(names[i])) return false;

    return true;
  }

  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
},{}],"node_modules/d3-selection/src/selection/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}
},{}],"node_modules/d3-selection/src/selection/html.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function () {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
},{}],"node_modules/d3-selection/src/selection/raise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function _default() {
  return this.each(raise);
}
},{}],"node_modules/d3-selection/src/selection/lower.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function _default() {
  return this.each(lower);
}
},{}],"node_modules/d3-selection/src/selection/append.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name);
  return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
  });
}
},{"../creator":"node_modules/d3-selection/src/creator.js"}],"node_modules/d3-selection/src/selection/insert.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function constantNull() {
  return null;
}

function _default(name, before) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name),
      select = before == null ? constantNull : typeof before === "function" ? before : (0, _selector.default)(before);
  return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}
},{"../creator":"node_modules/d3-selection/src/creator.js","../selector":"node_modules/d3-selection/src/selector.js"}],"node_modules/d3-selection/src/selection/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function _default() {
  return this.each(remove);
}
},{}],"node_modules/d3-selection/src/selection/clone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function selection_cloneShallow() {
  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
}

function selection_cloneDeep() {
  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
}

function _default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}
},{}],"node_modules/d3-selection/src/selection/datum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
},{}],"node_modules/d3-selection/src/selection/on.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.customEvent = customEvent;
exports.event = void 0;
var filterEvents = {};
var event = null;
exports.event = event;

if (typeof document !== "undefined") {
  var element = document.documentElement;

  if (!("onmouseenter" in element)) {
    filterEvents = {
      mouseenter: "mouseover",
      mouseleave: "mouseout"
    };
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function (event) {
    var related = event.relatedTarget;

    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function (event1) {
    var event0 = event; // Events can be reentrant (e.g., focus).

    exports.event = event = event1;

    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      exports.event = event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {
      type: t,
      name: name
    };
  });
}

function onRemove(typename) {
  return function () {
    var on = this.__on;
    if (!on) return;

    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }

    if (++i) on.length = i;else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function (d, i, group) {
    var on = this.__on,
        o,
        listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {
      type: typename.type,
      name: typename.name,
      value: value,
      listener: listener,
      capture: capture
    };
    if (!on) this.__on = [o];else on.push(o);
  };
}

function _default(typename, value, capture) {
  var typenames = parseTypenames(typename + ""),
      i,
      n = typenames.length,
      t;

  if (arguments.length < 2) {
    var on = this.node().__on;

    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;

  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));

  return this;
}

function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  exports.event = event = event1;

  try {
    return listener.apply(that, args);
  } finally {
    exports.event = event = event0;
  }
}
},{}],"node_modules/d3-selection/src/selection/dispatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dispatchEvent(node, type, params) {
  var window = (0, _window.default)(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function () {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function () {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function _default(type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}
},{"../window":"node_modules/d3-selection/src/window.js"}],"node_modules/d3-selection/src/selection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Selection = Selection;
exports.default = exports.root = void 0;

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _filter = _interopRequireDefault(require("./filter"));

var _data = _interopRequireDefault(require("./data"));

var _enter = _interopRequireDefault(require("./enter"));

var _exit = _interopRequireDefault(require("./exit"));

var _join = _interopRequireDefault(require("./join"));

var _merge = _interopRequireDefault(require("./merge"));

var _order = _interopRequireDefault(require("./order"));

var _sort = _interopRequireDefault(require("./sort"));

var _call = _interopRequireDefault(require("./call"));

var _nodes = _interopRequireDefault(require("./nodes"));

var _node = _interopRequireDefault(require("./node"));

var _size = _interopRequireDefault(require("./size"));

var _empty = _interopRequireDefault(require("./empty"));

var _each = _interopRequireDefault(require("./each"));

var _attr = _interopRequireDefault(require("./attr"));

var _style = _interopRequireDefault(require("./style"));

var _property = _interopRequireDefault(require("./property"));

var _classed = _interopRequireDefault(require("./classed"));

var _text = _interopRequireDefault(require("./text"));

var _html = _interopRequireDefault(require("./html"));

var _raise = _interopRequireDefault(require("./raise"));

var _lower = _interopRequireDefault(require("./lower"));

var _append = _interopRequireDefault(require("./append"));

var _insert = _interopRequireDefault(require("./insert"));

var _remove = _interopRequireDefault(require("./remove"));

var _clone = _interopRequireDefault(require("./clone"));

var _datum = _interopRequireDefault(require("./datum"));

var _on = _interopRequireDefault(require("./on"));

var _dispatch = _interopRequireDefault(require("./dispatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var root = [null];
exports.root = root;

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: _select.default,
  selectAll: _selectAll.default,
  filter: _filter.default,
  data: _data.default,
  enter: _enter.default,
  exit: _exit.default,
  join: _join.default,
  merge: _merge.default,
  order: _order.default,
  sort: _sort.default,
  call: _call.default,
  nodes: _nodes.default,
  node: _node.default,
  size: _size.default,
  empty: _empty.default,
  each: _each.default,
  attr: _attr.default,
  style: _style.default,
  property: _property.default,
  classed: _classed.default,
  text: _text.default,
  html: _html.default,
  raise: _raise.default,
  lower: _lower.default,
  append: _append.default,
  insert: _insert.default,
  remove: _remove.default,
  clone: _clone.default,
  datum: _datum.default,
  on: _on.default,
  dispatch: _dispatch.default
};
var _default = selection;
exports.default = _default;
},{"./select":"node_modules/d3-selection/src/selection/select.js","./selectAll":"node_modules/d3-selection/src/selection/selectAll.js","./filter":"node_modules/d3-selection/src/selection/filter.js","./data":"node_modules/d3-selection/src/selection/data.js","./enter":"node_modules/d3-selection/src/selection/enter.js","./exit":"node_modules/d3-selection/src/selection/exit.js","./join":"node_modules/d3-selection/src/selection/join.js","./merge":"node_modules/d3-selection/src/selection/merge.js","./order":"node_modules/d3-selection/src/selection/order.js","./sort":"node_modules/d3-selection/src/selection/sort.js","./call":"node_modules/d3-selection/src/selection/call.js","./nodes":"node_modules/d3-selection/src/selection/nodes.js","./node":"node_modules/d3-selection/src/selection/node.js","./size":"node_modules/d3-selection/src/selection/size.js","./empty":"node_modules/d3-selection/src/selection/empty.js","./each":"node_modules/d3-selection/src/selection/each.js","./attr":"node_modules/d3-selection/src/selection/attr.js","./style":"node_modules/d3-selection/src/selection/style.js","./property":"node_modules/d3-selection/src/selection/property.js","./classed":"node_modules/d3-selection/src/selection/classed.js","./text":"node_modules/d3-selection/src/selection/text.js","./html":"node_modules/d3-selection/src/selection/html.js","./raise":"node_modules/d3-selection/src/selection/raise.js","./lower":"node_modules/d3-selection/src/selection/lower.js","./append":"node_modules/d3-selection/src/selection/append.js","./insert":"node_modules/d3-selection/src/selection/insert.js","./remove":"node_modules/d3-selection/src/selection/remove.js","./clone":"node_modules/d3-selection/src/selection/clone.js","./datum":"node_modules/d3-selection/src/selection/datum.js","./on":"node_modules/d3-selection/src/selection/on.js","./dispatch":"node_modules/d3-selection/src/selection/dispatch.js"}],"node_modules/d3-selection/src/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([[document.querySelector(selector)]], [document.documentElement]) : new _index.Selection([[selector]], _index.root);
}
},{"./selection/index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/create.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("./creator"));

var _select = _interopRequireDefault(require("./select"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  return (0, _select.default)((0, _creator.default)(name).call(document.documentElement));
}
},{"./creator":"node_modules/d3-selection/src/creator.js","./select":"node_modules/d3-selection/src/select.js"}],"node_modules/d3-selection/src/local.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = local;
var nextId = 0;

function local() {
  return new Local();
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function (node) {
    var id = this._;

    while (!(id in node)) if (!(node = node.parentNode)) return;

    return node[id];
  },
  set: function (node, value) {
    return node[this._] = value;
  },
  remove: function (node) {
    return this._ in node && delete node[this._];
  },
  toString: function () {
    return this._;
  }
};
},{}],"node_modules/d3-selection/src/sourceEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _on = require("./selection/on");

function _default() {
  var current = _on.event,
      source;

  while (source = current.sourceEvent) current = source;

  return current;
}
},{"./selection/on":"node_modules/d3-selection/src/selection/on.js"}],"node_modules/d3-selection/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}
},{}],"node_modules/d3-selection/src/mouse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node) {
  var event = (0, _sourceEvent.default)();
  if (event.changedTouches) event = event.changedTouches[0];
  return (0, _point.default)(node, event);
}
},{"./sourceEvent":"node_modules/d3-selection/src/sourceEvent.js","./point":"node_modules/d3-selection/src/point.js"}],"node_modules/d3-selection/src/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([document.querySelectorAll(selector)], [document.documentElement]) : new _index.Selection([selector == null ? [] : selector], _index.root);
}
},{"./selection/index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/touch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = (0, _sourceEvent.default)().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return (0, _point.default)(node, touch);
    }
  }

  return null;
}
},{"./sourceEvent":"node_modules/d3-selection/src/sourceEvent.js","./point":"node_modules/d3-selection/src/point.js"}],"node_modules/d3-selection/src/touches.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches) {
  if (touches == null) touches = (0, _sourceEvent.default)().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = (0, _point.default)(node, touches[i]);
  }

  return points;
}
},{"./sourceEvent":"node_modules/d3-selection/src/sourceEvent.js","./point":"node_modules/d3-selection/src/point.js"}],"node_modules/d3-selection/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "create", {
  enumerable: true,
  get: function () {
    return _create.default;
  }
});
Object.defineProperty(exports, "creator", {
  enumerable: true,
  get: function () {
    return _creator.default;
  }
});
Object.defineProperty(exports, "local", {
  enumerable: true,
  get: function () {
    return _local.default;
  }
});
Object.defineProperty(exports, "matcher", {
  enumerable: true,
  get: function () {
    return _matcher.default;
  }
});
Object.defineProperty(exports, "mouse", {
  enumerable: true,
  get: function () {
    return _mouse.default;
  }
});
Object.defineProperty(exports, "namespace", {
  enumerable: true,
  get: function () {
    return _namespace.default;
  }
});
Object.defineProperty(exports, "namespaces", {
  enumerable: true,
  get: function () {
    return _namespaces.default;
  }
});
Object.defineProperty(exports, "clientPoint", {
  enumerable: true,
  get: function () {
    return _point.default;
  }
});
Object.defineProperty(exports, "select", {
  enumerable: true,
  get: function () {
    return _select.default;
  }
});
Object.defineProperty(exports, "selectAll", {
  enumerable: true,
  get: function () {
    return _selectAll.default;
  }
});
Object.defineProperty(exports, "selection", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "selector", {
  enumerable: true,
  get: function () {
    return _selector.default;
  }
});
Object.defineProperty(exports, "selectorAll", {
  enumerable: true,
  get: function () {
    return _selectorAll.default;
  }
});
Object.defineProperty(exports, "style", {
  enumerable: true,
  get: function () {
    return _style.styleValue;
  }
});
Object.defineProperty(exports, "touch", {
  enumerable: true,
  get: function () {
    return _touch.default;
  }
});
Object.defineProperty(exports, "touches", {
  enumerable: true,
  get: function () {
    return _touches.default;
  }
});
Object.defineProperty(exports, "window", {
  enumerable: true,
  get: function () {
    return _window.default;
  }
});
Object.defineProperty(exports, "event", {
  enumerable: true,
  get: function () {
    return _on.event;
  }
});
Object.defineProperty(exports, "customEvent", {
  enumerable: true,
  get: function () {
    return _on.customEvent;
  }
});

var _create = _interopRequireDefault(require("./create"));

var _creator = _interopRequireDefault(require("./creator"));

var _local = _interopRequireDefault(require("./local"));

var _matcher = _interopRequireDefault(require("./matcher"));

var _mouse = _interopRequireDefault(require("./mouse"));

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = _interopRequireDefault(require("./namespaces"));

var _point = _interopRequireDefault(require("./point"));

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _index = _interopRequireDefault(require("./selection/index"));

var _selector = _interopRequireDefault(require("./selector"));

var _selectorAll = _interopRequireDefault(require("./selectorAll"));

var _style = require("./selection/style");

var _touch = _interopRequireDefault(require("./touch"));

var _touches = _interopRequireDefault(require("./touches"));

var _window = _interopRequireDefault(require("./window"));

var _on = require("./selection/on");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./create":"node_modules/d3-selection/src/create.js","./creator":"node_modules/d3-selection/src/creator.js","./local":"node_modules/d3-selection/src/local.js","./matcher":"node_modules/d3-selection/src/matcher.js","./mouse":"node_modules/d3-selection/src/mouse.js","./namespace":"node_modules/d3-selection/src/namespace.js","./namespaces":"node_modules/d3-selection/src/namespaces.js","./point":"node_modules/d3-selection/src/point.js","./select":"node_modules/d3-selection/src/select.js","./selectAll":"node_modules/d3-selection/src/selectAll.js","./selection/index":"node_modules/d3-selection/src/selection/index.js","./selector":"node_modules/d3-selection/src/selector.js","./selectorAll":"node_modules/d3-selection/src/selectorAll.js","./selection/style":"node_modules/d3-selection/src/selection/style.js","./touch":"node_modules/d3-selection/src/touch.js","./touches":"node_modules/d3-selection/src/touches.js","./window":"node_modules/d3-selection/src/window.js","./selection/on":"node_modules/d3-selection/src/selection/on.js"}],"node_modules/deepmerge/dist/cjs.js":[function(require,module,exports) {
'use strict';

var isMergeableObject = function isMergeableObject(value) {
  return isNonNullObject(value) && !isSpecial(value);
};

function isNonNullObject(value) {
  return !!value && typeof value === 'object';
}

function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
} // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25


var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}

function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}

function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}

function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function (element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}

function getMergeFunction(key, options) {
  if (!options.customMerge) {
    return deepmerge;
  }

  var customMerge = options.customMerge(key);
  return typeof customMerge === 'function' ? customMerge : deepmerge;
}

function getEnumerableOwnPropertySymbols(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
    return target.propertyIsEnumerable(symbol);
  }) : [];
}

function getKeys(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}

function mergeObject(target, source, options) {
  var destination = {};

  if (options.isMergeableObject(target)) {
    getKeys(target).forEach(function (key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }

  getKeys(source).forEach(function (key) {
    if (!options.isMergeableObject(source[key]) || !target[key]) {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    } else {
      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    }
  });
  return destination;
}

function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}

deepmerge.all = function deepmergeAll(array, options) {
  if (!Array.isArray(array)) {
    throw new Error('first argument should be an array');
  }

  return array.reduce(function (prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};

var deepmerge_1 = deepmerge;
module.exports = deepmerge_1;
},{}],"node_modules/json-stringify-pretty-compact/index.js":[function(require,module,exports) {
"use strict";

// Note: This regex matches even invalid JSON strings, but since we’re
// working on the output of `JSON.stringify` we know that only valid strings
// are present (unless the user supplied a weird `options.indent` but in
// that case we don’t care since the output would be invalid anyway).
var stringOrChar = /("(?:[^\\"]|\\.)*")|[:,]/g;

module.exports = function stringify(passedObj, options) {
  var indent, maxLength, replacer;

  options = options || {};
  indent = JSON.stringify(
    [1],
    undefined,
    options.indent === undefined ? 2 : options.indent
  ).slice(2, -3);
  maxLength =
    indent === ""
      ? Infinity
      : options.maxLength === undefined
      ? 80
      : options.maxLength;
  replacer = options.replacer;

  return (function _stringify(obj, currentIndent, reserved) {
    // prettier-ignore
    var end, index, items, key, keyPart, keys, length, nextIndent, prettified, start, string, value;

    if (obj && typeof obj.toJSON === "function") {
      obj = obj.toJSON();
    }

    string = JSON.stringify(obj, replacer);

    if (string === undefined) {
      return string;
    }

    length = maxLength - currentIndent.length - reserved;

    if (string.length <= length) {
      prettified = string.replace(stringOrChar, function(match, stringLiteral) {
        return stringLiteral || match + " ";
      });
      if (prettified.length <= length) {
        return prettified;
      }
    }

    if (replacer != null) {
      obj = JSON.parse(string);
      replacer = undefined;
    }

    if (typeof obj === "object" && obj !== null) {
      nextIndent = currentIndent + indent;
      items = [];
      index = 0;

      if (Array.isArray(obj)) {
        start = "[";
        end = "]";
        length = obj.length;
        for (; index < length; index++) {
          items.push(
            _stringify(obj[index], nextIndent, index === length - 1 ? 0 : 1) ||
              "null"
          );
        }
      } else {
        start = "{";
        end = "}";
        keys = Object.keys(obj);
        length = keys.length;
        for (; index < length; index++) {
          key = keys[index];
          keyPart = JSON.stringify(key) + ": ";
          value = _stringify(
            obj[key],
            nextIndent,
            keyPart.length + (index === length - 1 ? 0 : 1)
          );
          if (value !== undefined) {
            items.push(keyPart + value);
          }
        }
      }

      if (items.length > 0) {
        return [start, indent + items.join(",\n" + nextIndent), end].join(
          "\n" + currentIndent
        );
      }
    }

    return string;
  })(passedObj, "", 0);
};

},{}],"../../../../../usr/local/lib/node_modules/parcel/node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"node_modules/semver/semver.js":[function(require,module,exports) {
var process = require("process");
exports = module.exports = SemVer;
var debug;
/* istanbul ignore next */

if (typeof process === 'object' && process.env && undefined && /\bsemver\b/i.test(undefined)) {
  debug = function () {
    var args = Array.prototype.slice.call(arguments, 0);
    args.unshift('SEMVER');
    console.log.apply(console, args);
  };
} else {
  debug = function () {};
} // Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.


exports.SEMVER_SPEC_VERSION = '2.0.0';
var MAX_LENGTH = 256;
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
/* istanbul ignore next */
9007199254740991; // Max safe segment length for coercion.

var MAX_SAFE_COMPONENT_LENGTH = 16; // The actual regexps go on exports.re

var re = exports.re = [];
var src = exports.src = [];
var t = exports.tokens = {};
var R = 0;

function tok(n) {
  t[n] = R++;
} // The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.
// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.


tok('NUMERICIDENTIFIER');
src[t.NUMERICIDENTIFIER] = '0|[1-9]\\d*';
tok('NUMERICIDENTIFIERLOOSE');
src[t.NUMERICIDENTIFIERLOOSE] = '[0-9]+'; // ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

tok('NONNUMERICIDENTIFIER');
src[t.NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*'; // ## Main Version
// Three dot-separated numeric identifiers.

tok('MAINVERSION');
src[t.MAINVERSION] = '(' + src[t.NUMERICIDENTIFIER] + ')\\.' + '(' + src[t.NUMERICIDENTIFIER] + ')\\.' + '(' + src[t.NUMERICIDENTIFIER] + ')';
tok('MAINVERSIONLOOSE');
src[t.MAINVERSIONLOOSE] = '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')'; // ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

tok('PRERELEASEIDENTIFIER');
src[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] + '|' + src[t.NONNUMERICIDENTIFIER] + ')';
tok('PRERELEASEIDENTIFIERLOOSE');
src[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] + '|' + src[t.NONNUMERICIDENTIFIER] + ')'; // ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

tok('PRERELEASE');
src[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] + '(?:\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))';
tok('PRERELEASELOOSE');
src[t.PRERELEASELOOSE] = '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] + '(?:\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))'; // ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

tok('BUILDIDENTIFIER');
src[t.BUILDIDENTIFIER] = '[0-9A-Za-z-]+'; // ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

tok('BUILD');
src[t.BUILD] = '(?:\\+(' + src[t.BUILDIDENTIFIER] + '(?:\\.' + src[t.BUILDIDENTIFIER] + ')*))'; // ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.
// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

tok('FULL');
tok('FULLPLAIN');
src[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] + src[t.PRERELEASE] + '?' + src[t.BUILD] + '?';
src[t.FULL] = '^' + src[t.FULLPLAIN] + '$'; // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.

tok('LOOSEPLAIN');
src[t.LOOSEPLAIN] = '[v=\\s]*' + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + '?' + src[t.BUILD] + '?';
tok('LOOSE');
src[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$';
tok('GTLT');
src[t.GTLT] = '((?:<|>)?=?)'; // Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.

tok('XRANGEIDENTIFIERLOOSE');
src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
tok('XRANGEIDENTIFIER');
src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\*';
tok('XRANGEPLAIN');
src[t.XRANGEPLAIN] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:' + src[t.PRERELEASE] + ')?' + src[t.BUILD] + '?' + ')?)?';
tok('XRANGEPLAINLOOSE');
src[t.XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[t.PRERELEASELOOSE] + ')?' + src[t.BUILD] + '?' + ')?)?';
tok('XRANGE');
src[t.XRANGE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAIN] + '$';
tok('XRANGELOOSE');
src[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAINLOOSE] + '$'; // Coercion.
// Extract anything that could conceivably be a part of a valid semver

tok('COERCE');
src[t.COERCE] = '(^|[^\\d])' + '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:$|[^\\d])';
tok('COERCERTL');
re[t.COERCERTL] = new RegExp(src[t.COERCE], 'g'); // Tilde ranges.
// Meaning is "reasonably at or greater than"

tok('LONETILDE');
src[t.LONETILDE] = '(?:~>?)';
tok('TILDETRIM');
src[t.TILDETRIM] = '(\\s*)' + src[t.LONETILDE] + '\\s+';
re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g');
var tildeTrimReplace = '$1~';
tok('TILDE');
src[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$';
tok('TILDELOOSE');
src[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$'; // Caret ranges.
// Meaning is "at least and backwards compatible with"

tok('LONECARET');
src[t.LONECARET] = '(?:\\^)';
tok('CARETTRIM');
src[t.CARETTRIM] = '(\\s*)' + src[t.LONECARET] + '\\s+';
re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g');
var caretTrimReplace = '$1^';
tok('CARET');
src[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$';
tok('CARETLOOSE');
src[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$'; // A simple gt/lt/eq thing, or just "" to indicate "any version"

tok('COMPARATORLOOSE');
src[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + ')$|^$';
tok('COMPARATOR');
src[t.COMPARATOR] = '^' + src[t.GTLT] + '\\s*(' + src[t.FULLPLAIN] + ')$|^$'; // An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`

tok('COMPARATORTRIM');
src[t.COMPARATORTRIM] = '(\\s*)' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')'; // this one has to use the /g flag

re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g');
var comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.

tok('HYPHENRANGE');
src[t.HYPHENRANGE] = '^\\s*(' + src[t.XRANGEPLAIN] + ')' + '\\s+-\\s+' + '(' + src[t.XRANGEPLAIN] + ')' + '\\s*$';
tok('HYPHENRANGELOOSE');
src[t.HYPHENRANGELOOSE] = '^\\s*(' + src[t.XRANGEPLAINLOOSE] + ')' + '\\s+-\\s+' + '(' + src[t.XRANGEPLAINLOOSE] + ')' + '\\s*$'; // Star ranges basically just allow anything at all.

tok('STAR');
src[t.STAR] = '(<|>)?=?\\s*\\*'; // Compile to actual regexp objects.
// All are flag-free, unless they were created above with a flag.

for (var i = 0; i < R; i++) {
  debug(i, src[i]);

  if (!re[i]) {
    re[i] = new RegExp(src[i]);
  }
}

exports.parse = parse;

function parse(version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    };
  }

  if (version instanceof SemVer) {
    return version;
  }

  if (typeof version !== 'string') {
    return null;
  }

  if (version.length > MAX_LENGTH) {
    return null;
  }

  var r = options.loose ? re[t.LOOSE] : re[t.FULL];

  if (!r.test(version)) {
    return null;
  }

  try {
    return new SemVer(version, options);
  } catch (er) {
    return null;
  }
}

exports.valid = valid;

function valid(version, options) {
  var v = parse(version, options);
  return v ? v.version : null;
}

exports.clean = clean;

function clean(version, options) {
  var s = parse(version.trim().replace(/^[=v]+/, ''), options);
  return s ? s.version : null;
}

exports.SemVer = SemVer;

function SemVer(version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    };
  }

  if (version instanceof SemVer) {
    if (version.loose === options.loose) {
      return version;
    } else {
      version = version.version;
    }
  } else if (typeof version !== 'string') {
    throw new TypeError('Invalid Version: ' + version);
  }

  if (version.length > MAX_LENGTH) {
    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');
  }

  if (!(this instanceof SemVer)) {
    return new SemVer(version, options);
  }

  debug('SemVer', version, options);
  this.options = options;
  this.loose = !!options.loose;
  var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);

  if (!m) {
    throw new TypeError('Invalid Version: ' + version);
  }

  this.raw = version; // these are actually numbers

  this.major = +m[1];
  this.minor = +m[2];
  this.patch = +m[3];

  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
    throw new TypeError('Invalid major version');
  }

  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
    throw new TypeError('Invalid minor version');
  }

  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
    throw new TypeError('Invalid patch version');
  } // numberify any prerelease numeric ids


  if (!m[4]) {
    this.prerelease = [];
  } else {
    this.prerelease = m[4].split('.').map(function (id) {
      if (/^[0-9]+$/.test(id)) {
        var num = +id;

        if (num >= 0 && num < MAX_SAFE_INTEGER) {
          return num;
        }
      }

      return id;
    });
  }

  this.build = m[5] ? m[5].split('.') : [];
  this.format();
}

SemVer.prototype.format = function () {
  this.version = this.major + '.' + this.minor + '.' + this.patch;

  if (this.prerelease.length) {
    this.version += '-' + this.prerelease.join('.');
  }

  return this.version;
};

SemVer.prototype.toString = function () {
  return this.version;
};

SemVer.prototype.compare = function (other) {
  debug('SemVer.compare', this.version, this.options, other);

  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options);
  }

  return this.compareMain(other) || this.comparePre(other);
};

SemVer.prototype.compareMain = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options);
  }

  return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
};

SemVer.prototype.comparePre = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options);
  } // NOT having a prerelease is > having one


  if (this.prerelease.length && !other.prerelease.length) {
    return -1;
  } else if (!this.prerelease.length && other.prerelease.length) {
    return 1;
  } else if (!this.prerelease.length && !other.prerelease.length) {
    return 0;
  }

  var i = 0;

  do {
    var a = this.prerelease[i];
    var b = other.prerelease[i];
    debug('prerelease compare', i, a, b);

    if (a === undefined && b === undefined) {
      return 0;
    } else if (b === undefined) {
      return 1;
    } else if (a === undefined) {
      return -1;
    } else if (a === b) {
      continue;
    } else {
      return compareIdentifiers(a, b);
    }
  } while (++i);
};

SemVer.prototype.compareBuild = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options);
  }

  var i = 0;

  do {
    var a = this.build[i];
    var b = other.build[i];
    debug('prerelease compare', i, a, b);

    if (a === undefined && b === undefined) {
      return 0;
    } else if (b === undefined) {
      return 1;
    } else if (a === undefined) {
      return -1;
    } else if (a === b) {
      continue;
    } else {
      return compareIdentifiers(a, b);
    }
  } while (++i);
}; // preminor will bump the version up to the next minor release, and immediately
// down to pre-release. premajor and prepatch work the same way.


SemVer.prototype.inc = function (release, identifier) {
  switch (release) {
    case 'premajor':
      this.prerelease.length = 0;
      this.patch = 0;
      this.minor = 0;
      this.major++;
      this.inc('pre', identifier);
      break;

    case 'preminor':
      this.prerelease.length = 0;
      this.patch = 0;
      this.minor++;
      this.inc('pre', identifier);
      break;

    case 'prepatch':
      // If this is already a prerelease, it will bump to the next version
      // drop any prereleases that might already exist, since they are not
      // relevant at this point.
      this.prerelease.length = 0;
      this.inc('patch', identifier);
      this.inc('pre', identifier);
      break;
    // If the input is a non-prerelease version, this acts the same as
    // prepatch.

    case 'prerelease':
      if (this.prerelease.length === 0) {
        this.inc('patch', identifier);
      }

      this.inc('pre', identifier);
      break;

    case 'major':
      // If this is a pre-major version, bump up to the same major version.
      // Otherwise increment major.
      // 1.0.0-5 bumps to 1.0.0
      // 1.1.0 bumps to 2.0.0
      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
        this.major++;
      }

      this.minor = 0;
      this.patch = 0;
      this.prerelease = [];
      break;

    case 'minor':
      // If this is a pre-minor version, bump up to the same minor version.
      // Otherwise increment minor.
      // 1.2.0-5 bumps to 1.2.0
      // 1.2.1 bumps to 1.3.0
      if (this.patch !== 0 || this.prerelease.length === 0) {
        this.minor++;
      }

      this.patch = 0;
      this.prerelease = [];
      break;

    case 'patch':
      // If this is not a pre-release version, it will increment the patch.
      // If it is a pre-release it will bump up to the same patch version.
      // 1.2.0-5 patches to 1.2.0
      // 1.2.0 patches to 1.2.1
      if (this.prerelease.length === 0) {
        this.patch++;
      }

      this.prerelease = [];
      break;
    // This probably shouldn't be used publicly.
    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.

    case 'pre':
      if (this.prerelease.length === 0) {
        this.prerelease = [0];
      } else {
        var i = this.prerelease.length;

        while (--i >= 0) {
          if (typeof this.prerelease[i] === 'number') {
            this.prerelease[i]++;
            i = -2;
          }
        }

        if (i === -1) {
          // didn't increment anything
          this.prerelease.push(0);
        }
      }

      if (identifier) {
        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
        if (this.prerelease[0] === identifier) {
          if (isNaN(this.prerelease[1])) {
            this.prerelease = [identifier, 0];
          }
        } else {
          this.prerelease = [identifier, 0];
        }
      }

      break;

    default:
      throw new Error('invalid increment argument: ' + release);
  }

  this.format();
  this.raw = this.version;
  return this;
};

exports.inc = inc;

function inc(version, release, loose, identifier) {
  if (typeof loose === 'string') {
    identifier = loose;
    loose = undefined;
  }

  try {
    return new SemVer(version, loose).inc(release, identifier).version;
  } catch (er) {
    return null;
  }
}

exports.diff = diff;

function diff(version1, version2) {
  if (eq(version1, version2)) {
    return null;
  } else {
    var v1 = parse(version1);
    var v2 = parse(version2);
    var prefix = '';

    if (v1.prerelease.length || v2.prerelease.length) {
      prefix = 'pre';
      var defaultResult = 'prerelease';
    }

    for (var key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return prefix + key;
        }
      }
    }

    return defaultResult; // may be undefined
  }
}

exports.compareIdentifiers = compareIdentifiers;
var numeric = /^[0-9]+$/;

function compareIdentifiers(a, b) {
  var anum = numeric.test(a);
  var bnum = numeric.test(b);

  if (anum && bnum) {
    a = +a;
    b = +b;
  }

  return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
}

exports.rcompareIdentifiers = rcompareIdentifiers;

function rcompareIdentifiers(a, b) {
  return compareIdentifiers(b, a);
}

exports.major = major;

function major(a, loose) {
  return new SemVer(a, loose).major;
}

exports.minor = minor;

function minor(a, loose) {
  return new SemVer(a, loose).minor;
}

exports.patch = patch;

function patch(a, loose) {
  return new SemVer(a, loose).patch;
}

exports.compare = compare;

function compare(a, b, loose) {
  return new SemVer(a, loose).compare(new SemVer(b, loose));
}

exports.compareLoose = compareLoose;

function compareLoose(a, b) {
  return compare(a, b, true);
}

exports.compareBuild = compareBuild;

function compareBuild(a, b, loose) {
  var versionA = new SemVer(a, loose);
  var versionB = new SemVer(b, loose);
  return versionA.compare(versionB) || versionA.compareBuild(versionB);
}

exports.rcompare = rcompare;

function rcompare(a, b, loose) {
  return compare(b, a, loose);
}

exports.sort = sort;

function sort(list, loose) {
  return list.sort(function (a, b) {
    return exports.compareBuild(a, b, loose);
  });
}

exports.rsort = rsort;

function rsort(list, loose) {
  return list.sort(function (a, b) {
    return exports.compareBuild(b, a, loose);
  });
}

exports.gt = gt;

function gt(a, b, loose) {
  return compare(a, b, loose) > 0;
}

exports.lt = lt;

function lt(a, b, loose) {
  return compare(a, b, loose) < 0;
}

exports.eq = eq;

function eq(a, b, loose) {
  return compare(a, b, loose) === 0;
}

exports.neq = neq;

function neq(a, b, loose) {
  return compare(a, b, loose) !== 0;
}

exports.gte = gte;

function gte(a, b, loose) {
  return compare(a, b, loose) >= 0;
}

exports.lte = lte;

function lte(a, b, loose) {
  return compare(a, b, loose) <= 0;
}

exports.cmp = cmp;

function cmp(a, op, b, loose) {
  switch (op) {
    case '===':
      if (typeof a === 'object') a = a.version;
      if (typeof b === 'object') b = b.version;
      return a === b;

    case '!==':
      if (typeof a === 'object') a = a.version;
      if (typeof b === 'object') b = b.version;
      return a !== b;

    case '':
    case '=':
    case '==':
      return eq(a, b, loose);

    case '!=':
      return neq(a, b, loose);

    case '>':
      return gt(a, b, loose);

    case '>=':
      return gte(a, b, loose);

    case '<':
      return lt(a, b, loose);

    case '<=':
      return lte(a, b, loose);

    default:
      throw new TypeError('Invalid operator: ' + op);
  }
}

exports.Comparator = Comparator;

function Comparator(comp, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    };
  }

  if (comp instanceof Comparator) {
    if (comp.loose === !!options.loose) {
      return comp;
    } else {
      comp = comp.value;
    }
  }

  if (!(this instanceof Comparator)) {
    return new Comparator(comp, options);
  }

  debug('comparator', comp, options);
  this.options = options;
  this.loose = !!options.loose;
  this.parse(comp);

  if (this.semver === ANY) {
    this.value = '';
  } else {
    this.value = this.operator + this.semver.version;
  }

  debug('comp', this);
}

var ANY = {};

Comparator.prototype.parse = function (comp) {
  var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
  var m = comp.match(r);

  if (!m) {
    throw new TypeError('Invalid comparator: ' + comp);
  }

  this.operator = m[1] !== undefined ? m[1] : '';

  if (this.operator === '=') {
    this.operator = '';
  } // if it literally is just '>' or '' then allow anything.


  if (!m[2]) {
    this.semver = ANY;
  } else {
    this.semver = new SemVer(m[2], this.options.loose);
  }
};

Comparator.prototype.toString = function () {
  return this.value;
};

Comparator.prototype.test = function (version) {
  debug('Comparator.test', version, this.options.loose);

  if (this.semver === ANY || version === ANY) {
    return true;
  }

  if (typeof version === 'string') {
    try {
      version = new SemVer(version, this.options);
    } catch (er) {
      return false;
    }
  }

  return cmp(version, this.operator, this.semver, this.options);
};

Comparator.prototype.intersects = function (comp, options) {
  if (!(comp instanceof Comparator)) {
    throw new TypeError('a Comparator is required');
  }

  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    };
  }

  var rangeTmp;

  if (this.operator === '') {
    if (this.value === '') {
      return true;
    }

    rangeTmp = new Range(comp.value, options);
    return satisfies(this.value, rangeTmp, options);
  } else if (comp.operator === '') {
    if (comp.value === '') {
      return true;
    }

    rangeTmp = new Range(this.value, options);
    return satisfies(comp.semver, rangeTmp, options);
  }

  var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');
  var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');
  var sameSemVer = this.semver.version === comp.semver.version;
  var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');
  var oppositeDirectionsLessThan = cmp(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');
  var oppositeDirectionsGreaterThan = cmp(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');
  return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
};

exports.Range = Range;

function Range(range, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    };
  }

  if (range instanceof Range) {
    if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
      return range;
    } else {
      return new Range(range.raw, options);
    }
  }

  if (range instanceof Comparator) {
    return new Range(range.value, options);
  }

  if (!(this instanceof Range)) {
    return new Range(range, options);
  }

  this.options = options;
  this.loose = !!options.loose;
  this.includePrerelease = !!options.includePrerelease; // First, split based on boolean or ||

  this.raw = range;
  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
    return this.parseRange(range.trim());
  }, this).filter(function (c) {
    // throw out any that are not relevant for whatever reason
    return c.length;
  });

  if (!this.set.length) {
    throw new TypeError('Invalid SemVer Range: ' + range);
  }

  this.format();
}

Range.prototype.format = function () {
  this.range = this.set.map(function (comps) {
    return comps.join(' ').trim();
  }).join('||').trim();
  return this.range;
};

Range.prototype.toString = function () {
  return this.range;
};

Range.prototype.parseRange = function (range) {
  var loose = this.options.loose;
  range = range.trim(); // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`

  var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
  range = range.replace(hr, hyphenReplace);
  debug('hyphen replace', range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`

  range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
  debug('comparator trim', range, re[t.COMPARATORTRIM]); // `~ 1.2.3` => `~1.2.3`

  range = range.replace(re[t.TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`

  range = range.replace(re[t.CARETTRIM], caretTrimReplace); // normalize spaces

  range = range.split(/\s+/).join(' '); // At this point, the range is completely trimmed and
  // ready to be split into comparators.

  var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
  var set = range.split(' ').map(function (comp) {
    return parseComparator(comp, this.options);
  }, this).join(' ').split(/\s+/);

  if (this.options.loose) {
    // in loose mode, throw out any that are not valid comparators
    set = set.filter(function (comp) {
      return !!comp.match(compRe);
    });
  }

  set = set.map(function (comp) {
    return new Comparator(comp, this.options);
  }, this);
  return set;
};

Range.prototype.intersects = function (range, options) {
  if (!(range instanceof Range)) {
    throw new TypeError('a Range is required');
  }

  return this.set.some(function (thisComparators) {
    return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {
      return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {
        return rangeComparators.every(function (rangeComparator) {
          return thisComparator.intersects(rangeComparator, options);
        });
      });
    });
  });
}; // take a set of comparators and determine whether there
// exists a version which can satisfy it


function isSatisfiable(comparators, options) {
  var result = true;
  var remainingComparators = comparators.slice();
  var testComparator = remainingComparators.pop();

  while (result && remainingComparators.length) {
    result = remainingComparators.every(function (otherComparator) {
      return testComparator.intersects(otherComparator, options);
    });
    testComparator = remainingComparators.pop();
  }

  return result;
} // Mostly just for testing and legacy API reasons


exports.toComparators = toComparators;

function toComparators(range, options) {
  return new Range(range, options).set.map(function (comp) {
    return comp.map(function (c) {
      return c.value;
    }).join(' ').trim().split(' ');
  });
} // comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.


function parseComparator(comp, options) {
  debug('comp', comp, options);
  comp = replaceCarets(comp, options);
  debug('caret', comp);
  comp = replaceTildes(comp, options);
  debug('tildes', comp);
  comp = replaceXRanges(comp, options);
  debug('xrange', comp);
  comp = replaceStars(comp, options);
  debug('stars', comp);
  return comp;
}

function isX(id) {
  return !id || id.toLowerCase() === 'x' || id === '*';
} // ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0


function replaceTildes(comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceTilde(comp, options);
  }).join(' ');
}

function replaceTilde(comp, options) {
  var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('tilde', comp, _, M, m, p, pr);
    var ret;

    if (isX(M)) {
      ret = '';
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
    } else if (pr) {
      debug('replaceTilde pr', pr);
      ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0
      ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
    }

    debug('tilde return', ret);
    return ret;
  });
} // ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
// ^1.2.3 --> >=1.2.3 <2.0.0
// ^1.2.0 --> >=1.2.0 <2.0.0


function replaceCarets(comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceCaret(comp, options);
  }).join(' ');
}

function replaceCaret(comp, options) {
  debug('caret', comp, options);
  var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('caret', comp, _, M, m, p, pr);
    var ret;

    if (isX(M)) {
      ret = '';
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    } else if (isX(p)) {
      if (M === '0') {
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      } else {
        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
      }
    } else if (pr) {
      debug('replaceCaret pr', pr);

      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + m + '.' + (+p + 1);
        } else {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + (+M + 1) + '.0.0';
      }
    } else {
      debug('no pr');

      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);
        } else {
          ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';
      }
    }

    debug('caret return', ret);
    return ret;
  });
}

function replaceXRanges(comp, options) {
  debug('replaceXRanges', comp, options);
  return comp.split(/\s+/).map(function (comp) {
    return replaceXRange(comp, options);
  }).join(' ');
}

function replaceXRange(comp, options) {
  comp = comp.trim();
  var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
    debug('xRange', comp, ret, gtlt, M, m, p, pr);
    var xM = isX(M);
    var xm = xM || isX(m);
    var xp = xm || isX(p);
    var anyX = xp;

    if (gtlt === '=' && anyX) {
      gtlt = '';
    } // if we're including prereleases in the match, then we need
    // to fix this to -0, the lowest possible prerelease value


    pr = options.includePrerelease ? '-0' : '';

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0-0';
      } else {
        // nothing is forbidden
        ret = '*';
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0;
      }

      p = 0;

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        // >1.2.3 => >= 1.2.4
        gtlt = '>=';

        if (xm) {
          M = +M + 1;
          m = 0;
          p = 0;
        } else {
          m = +m + 1;
          p = 0;
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<';

        if (xm) {
          M = +M + 1;
        } else {
          m = +m + 1;
        }
      }

      ret = gtlt + M + '.' + m + '.' + p + pr;
    } else if (xm) {
      ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr;
    } else if (xp) {
      ret = '>=' + M + '.' + m + '.0' + pr + ' <' + M + '.' + (+m + 1) + '.0' + pr;
    }

    debug('xRange return', ret);
    return ret;
  });
} // Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.


function replaceStars(comp, options) {
  debug('replaceStars', comp, options); // Looseness is ignored here.  star is always as loose as it gets!

  return comp.trim().replace(re[t.STAR], '');
} // This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0


function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
  if (isX(fM)) {
    from = '';
  } else if (isX(fm)) {
    from = '>=' + fM + '.0.0';
  } else if (isX(fp)) {
    from = '>=' + fM + '.' + fm + '.0';
  } else {
    from = '>=' + from;
  }

  if (isX(tM)) {
    to = '';
  } else if (isX(tm)) {
    to = '<' + (+tM + 1) + '.0.0';
  } else if (isX(tp)) {
    to = '<' + tM + '.' + (+tm + 1) + '.0';
  } else if (tpr) {
    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
  } else {
    to = '<=' + to;
  }

  return (from + ' ' + to).trim();
} // if ANY of the sets match ALL of its comparators, then pass


Range.prototype.test = function (version) {
  if (!version) {
    return false;
  }

  if (typeof version === 'string') {
    try {
      version = new SemVer(version, this.options);
    } catch (er) {
      return false;
    }
  }

  for (var i = 0; i < this.set.length; i++) {
    if (testSet(this.set[i], version, this.options)) {
      return true;
    }
  }

  return false;
};

function testSet(set, version, options) {
  for (var i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false;
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (i = 0; i < set.length; i++) {
      debug(set[i].semver);

      if (set[i].semver === ANY) {
        continue;
      }

      if (set[i].semver.prerelease.length > 0) {
        var allowed = set[i].semver;

        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
          return true;
        }
      }
    } // Version has a -pre, but it's not one of the ones we like.


    return false;
  }

  return true;
}

exports.satisfies = satisfies;

function satisfies(version, range, options) {
  try {
    range = new Range(range, options);
  } catch (er) {
    return false;
  }

  return range.test(version);
}

exports.maxSatisfying = maxSatisfying;

function maxSatisfying(versions, range, options) {
  var max = null;
  var maxSV = null;

  try {
    var rangeObj = new Range(range, options);
  } catch (er) {
    return null;
  }

  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v;
        maxSV = new SemVer(max, options);
      }
    }
  });
  return max;
}

exports.minSatisfying = minSatisfying;

function minSatisfying(versions, range, options) {
  var min = null;
  var minSV = null;

  try {
    var rangeObj = new Range(range, options);
  } catch (er) {
    return null;
  }

  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v;
        minSV = new SemVer(min, options);
      }
    }
  });
  return min;
}

exports.minVersion = minVersion;

function minVersion(range, loose) {
  range = new Range(range, loose);
  var minver = new SemVer('0.0.0');

  if (range.test(minver)) {
    return minver;
  }

  minver = new SemVer('0.0.0-0');

  if (range.test(minver)) {
    return minver;
  }

  minver = null;

  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i];
    comparators.forEach(function (comparator) {
      // Clone to avoid manipulating the comparator's semver object.
      var compver = new SemVer(comparator.semver.version);

      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++;
          } else {
            compver.prerelease.push(0);
          }

          compver.raw = compver.format();

        /* fallthrough */

        case '':
        case '>=':
          if (!minver || gt(minver, compver)) {
            minver = compver;
          }

          break;

        case '<':
        case '<=':
          /* Ignore maximum versions */
          break;

        /* istanbul ignore next */

        default:
          throw new Error('Unexpected operation: ' + comparator.operator);
      }
    });
  }

  if (minver && range.test(minver)) {
    return minver;
  }

  return null;
}

exports.validRange = validRange;

function validRange(range, options) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*';
  } catch (er) {
    return null;
  }
} // Determine if version is less than all the versions possible in the range


exports.ltr = ltr;

function ltr(version, range, options) {
  return outside(version, range, '<', options);
} // Determine if version is greater than all the versions possible in the range.


exports.gtr = gtr;

function gtr(version, range, options) {
  return outside(version, range, '>', options);
}

exports.outside = outside;

function outside(version, range, hilo, options) {
  version = new SemVer(version, options);
  range = new Range(range, options);
  var gtfn, ltefn, ltfn, comp, ecomp;

  switch (hilo) {
    case '>':
      gtfn = gt;
      ltefn = lte;
      ltfn = lt;
      comp = '>';
      ecomp = '>=';
      break;

    case '<':
      gtfn = lt;
      ltefn = gte;
      ltfn = gt;
      comp = '<';
      ecomp = '<=';
      break;

    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"');
  } // If it satisifes the range it is not outside


  if (satisfies(version, range, options)) {
    return false;
  } // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.


  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i];
    var high = null;
    var low = null;
    comparators.forEach(function (comparator) {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0');
      }

      high = high || comparator;
      low = low || comparator;

      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator;
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator;
      }
    }); // If the edge version comparator has a operator then our version
    // isn't outside it

    if (high.operator === comp || high.operator === ecomp) {
      return false;
    } // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range


    if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
      return false;
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false;
    }
  }

  return true;
}

exports.prerelease = prerelease;

function prerelease(version, options) {
  var parsed = parse(version, options);
  return parsed && parsed.prerelease.length ? parsed.prerelease : null;
}

exports.intersects = intersects;

function intersects(r1, r2, options) {
  r1 = new Range(r1, options);
  r2 = new Range(r2, options);
  return r1.intersects(r2);
}

exports.coerce = coerce;

function coerce(version, options) {
  if (version instanceof SemVer) {
    return version;
  }

  if (typeof version === 'number') {
    version = String(version);
  }

  if (typeof version !== 'string') {
    return null;
  }

  options = options || {};
  var match = null;

  if (!options.rtl) {
    match = version.match(re[t.COERCE]);
  } else {
    // Find the right-most coercible string that does not share
    // a terminus with a more left-ward coercible string.
    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
    //
    // Walk through the string checking with a /g regexp
    // Manually set the index so as to pick up overlapping matches.
    // Stop when we get a match that ends at the string end, since no
    // coercible string can be more right-ward without the same terminus.
    var next;

    while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
      if (!match || next.index + next[0].length !== match.index + match[0].length) {
        match = next;
      }

      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
    } // leave it in a clean state


    re[t.COERCERTL].lastIndex = -1;
  }

  if (match === null) {
    return null;
  }

  return parse(match[2] + '.' + (match[3] || '0') + '.' + (match[4] || '0'), options);
}
},{"process":"../../../../../usr/local/lib/node_modules/parcel/node_modules/process/browser.js"}],"node_modules/vega-util/src/accessor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.accessorName = accessorName;
exports.accessorFields = accessorFields;

function _default(fn, fields, name) {
  fn.fields = fields || [];
  fn.fname = name;
  return fn;
}

function accessorName(fn) {
  return fn == null ? null : fn.fname;
}

function accessorFields(fn) {
  return fn == null ? null : fn.fields;
}
},{}],"node_modules/vega-util/src/error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(message) {
  throw Error(message);
}
},{}],"node_modules/vega-util/src/splitAccessPath.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _error = _interopRequireDefault(require("./error"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(p) {
  var path = [],
      q = null,
      b = 0,
      n = p.length,
      s = '',
      i,
      j,
      c;
  p = p + '';

  function push() {
    path.push(s + p.substring(i, j));
    s = '';
    i = j + 1;
  }

  for (i = j = 0; j < n; ++j) {
    c = p[j];

    if (c === '\\') {
      s += p.substring(i, j);
      i = ++j;
    } else if (c === q) {
      push();
      q = null;
      b = -1;
    } else if (q) {
      continue;
    } else if (i === b && c === '"') {
      i = j + 1;
      q = c;
    } else if (i === b && c === "'") {
      i = j + 1;
      q = c;
    } else if (c === '.' && !b) {
      if (j > i) {
        push();
      } else {
        i = j + 1;
      }
    } else if (c === '[') {
      if (j > i) push();
      b = i = j + 1;
    } else if (c === ']') {
      if (!b) (0, _error.default)('Access path missing open bracket: ' + p);
      if (b > 0) push();
      b = 0;
      i = j + 1;
    }
  }

  if (b) (0, _error.default)('Access path missing closing bracket: ' + p);
  if (q) (0, _error.default)('Access path missing closing quote: ' + p);

  if (j > i) {
    j++;
    push();
  }

  return path;
}
},{"./error":"node_modules/vega-util/src/error.js"}],"node_modules/vega-util/src/isArray.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = Array.isArray;
exports.default = _default;
},{}],"node_modules/vega-util/src/isObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return _ === Object(_);
}
},{}],"node_modules/vega-util/src/isString.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return typeof _ === 'string';
}
},{}],"node_modules/vega-util/src/stringValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = $;

var _isArray = _interopRequireDefault(require("./isArray"));

var _isObject = _interopRequireDefault(require("./isObject"));

var _isString = _interopRequireDefault(require("./isString"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function $(x) {
  return (0, _isArray.default)(x) ? '[' + x.map($) + ']' : (0, _isObject.default)(x) || (0, _isString.default)(x) ? // Output valid JSON and JS source strings.
  // See http://timelessrepo.com/json-isnt-a-javascript-subset
  JSON.stringify(x).replace('\u2028', '\\u2028').replace('\u2029', '\\u2029') : x;
}
},{"./isArray":"node_modules/vega-util/src/isArray.js","./isObject":"node_modules/vega-util/src/isObject.js","./isString":"node_modules/vega-util/src/isString.js"}],"node_modules/vega-util/src/field.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _accessor = _interopRequireDefault(require("./accessor"));

var _splitAccessPath = _interopRequireDefault(require("./splitAccessPath"));

var _stringValue = _interopRequireDefault(require("./stringValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(field, name) {
  var path = (0, _splitAccessPath.default)(field),
      code = 'return _[' + path.map(_stringValue.default).join('][') + '];';
  return (0, _accessor.default)(Function('_', code), [field = path.length === 1 ? path[0] : field], name || field);
}
},{"./accessor":"node_modules/vega-util/src/accessor.js","./splitAccessPath":"node_modules/vega-util/src/splitAccessPath.js","./stringValue":"node_modules/vega-util/src/stringValue.js"}],"node_modules/vega-util/src/accessors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.falsy = exports.truthy = exports.one = exports.zero = exports.identity = exports.id = void 0;

var _accessor = _interopRequireDefault(require("./accessor"));

var _field = _interopRequireDefault(require("./field"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var empty = [];
var id = (0, _field.default)('id');
exports.id = id;
var identity = (0, _accessor.default)(function (_) {
  return _;
}, empty, 'identity');
exports.identity = identity;
var zero = (0, _accessor.default)(function () {
  return 0;
}, empty, 'zero');
exports.zero = zero;
var one = (0, _accessor.default)(function () {
  return 1;
}, empty, 'one');
exports.one = one;
var truthy = (0, _accessor.default)(function () {
  return true;
}, empty, 'true');
exports.truthy = truthy;
var falsy = (0, _accessor.default)(function () {
  return false;
}, empty, 'false');
exports.falsy = falsy;
},{"./accessor":"node_modules/vega-util/src/accessor.js","./field":"node_modules/vega-util/src/field.js"}],"node_modules/vega-util/src/logger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.Debug = exports.Info = exports.Warn = exports.Error = exports.None = void 0;

function log(method, level, input) {
  var args = [level].concat([].slice.call(input));
  console[method].apply(console, args); // eslint-disable-line no-console
}

var None = 0;
exports.None = None;
var Error = 1;
exports.Error = Error;
var Warn = 2;
exports.Warn = Warn;
var Info = 3;
exports.Info = Info;
var Debug = 4;
exports.Debug = Debug;

function _default(_, method) {
  var level = _ || None;
  return {
    level: function (_) {
      if (arguments.length) {
        level = +_;
        return this;
      } else {
        return level;
      }
    },
    error: function () {
      if (level >= Error) log(method || 'error', 'ERROR', arguments);
      return this;
    },
    warn: function () {
      if (level >= Warn) log(method || 'warn', 'WARN', arguments);
      return this;
    },
    info: function () {
      if (level >= Info) log(method || 'log', 'INFO', arguments);
      return this;
    },
    debug: function () {
      if (level >= Debug) log(method || 'log', 'DEBUG', arguments);
      return this;
    }
  };
}
},{}],"node_modules/vega-util/src/peek.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array) {
  return array[array.length - 1];
}
},{}],"node_modules/vega-util/src/toNumber.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return _ == null || _ === '' ? null : +_;
}
},{}],"node_modules/vega-util/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.panLinear = panLinear;
exports.panLog = panLog;
exports.panPow = panPow;
exports.panSymlog = panSymlog;
exports.zoomLinear = zoomLinear;
exports.zoomLog = zoomLog;
exports.zoomPow = zoomPow;
exports.zoomSymlog = zoomSymlog;

var _accessors = require("./accessors");

var _peek = _interopRequireDefault(require("./peek"));

var _toNumber = _interopRequireDefault(require("./toNumber"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function exp(sign) {
  return function (x) {
    return sign * Math.exp(x);
  };
}

function log(sign) {
  return function (x) {
    return Math.log(sign * x);
  };
}

function symlog(c) {
  return function (x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function symexp(c) {
  return function (x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function pow(exponent) {
  return function (x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function pan(domain, delta, lift, ground) {
  var d0 = lift(domain[0]),
      d1 = lift((0, _peek.default)(domain)),
      dd = (d1 - d0) * delta;
  return [ground(d0 - dd), ground(d1 - dd)];
}

function panLinear(domain, delta) {
  return pan(domain, delta, _toNumber.default, _accessors.identity);
}

function panLog(domain, delta) {
  var sign = Math.sign(domain[0]);
  return pan(domain, delta, log(sign), exp(sign));
}

function panPow(domain, delta, exponent) {
  return pan(domain, delta, pow(exponent), pow(1 / exponent));
}

function panSymlog(domain, delta, constant) {
  return pan(domain, delta, symlog(constant), symexp(constant));
}

function zoom(domain, anchor, scale, lift, ground) {
  var d0 = lift(domain[0]),
      d1 = lift((0, _peek.default)(domain)),
      da = anchor != null ? lift(anchor) : (d0 + d1) / 2;
  return [ground(da + (d0 - da) * scale), ground(da + (d1 - da) * scale)];
}

function zoomLinear(domain, anchor, scale) {
  return zoom(domain, anchor, scale, _toNumber.default, _accessors.identity);
}

function zoomLog(domain, anchor, scale) {
  var sign = Math.sign(domain[0]);
  return zoom(domain, anchor, scale, log(sign), exp(sign));
}

function zoomPow(domain, anchor, scale, exponent) {
  return zoom(domain, anchor, scale, pow(exponent), pow(1 / exponent));
}

function zoomSymlog(domain, anchor, scale, constant) {
  return zoom(domain, anchor, scale, symlog(constant), symexp(constant));
}
},{"./accessors":"node_modules/vega-util/src/accessors.js","./peek":"node_modules/vega-util/src/peek.js","./toNumber":"node_modules/vega-util/src/toNumber.js"}],"node_modules/vega-util/src/quarter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quarter = quarter;
exports.utcquarter = utcquarter;

function quarter(date) {
  return 1 + ~~(new Date(date).getMonth() / 3);
}

function utcquarter(date) {
  return 1 + ~~(new Date(date).getUTCMonth() / 3);
}
},{}],"node_modules/vega-util/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _isArray = _interopRequireDefault(require("./isArray"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(_) {
  return _ != null ? (0, _isArray.default)(_) ? _ : [_] : [];
}
},{"./isArray":"node_modules/vega-util/src/isArray.js"}],"node_modules/vega-util/src/clampRange.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Span-preserving range clamp. If the span of the input range is less
 * than (max - min) and an endpoint exceeds either the min or max value,
 * the range is translated such that the span is preserved and one
 * endpoint touches the boundary of the min/max range.
 * If the span exceeds (max - min), the range [min, max] is returned.
 */
function _default(range, min, max) {
  var lo = range[0],
      hi = range[1],
      span;

  if (hi < lo) {
    span = hi;
    hi = lo;
    lo = span;
  }

  span = hi - lo;
  return span >= max - min ? [min, max] : [lo = Math.min(Math.max(lo, min), max - span), lo + span];
}
},{}],"node_modules/vega-util/src/isFunction.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return typeof _ === 'function';
}
},{}],"node_modules/vega-util/src/compare.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _accessor = _interopRequireWildcard(require("./accessor"));

var _array = _interopRequireDefault(require("./array"));

var _isFunction = _interopRequireDefault(require("./isFunction"));

var _splitAccessPath = _interopRequireDefault(require("./splitAccessPath"));

var _stringValue = _interopRequireDefault(require("./stringValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _default(fields, orders) {
  var idx = [],
      cmp = (fields = (0, _array.default)(fields)).map(function (f, i) {
    if (f == null) {
      return null;
    } else {
      idx.push(i);
      return (0, _isFunction.default)(f) ? f : (0, _splitAccessPath.default)(f).map(_stringValue.default).join('][');
    }
  }),
      n = idx.length - 1,
      ord = (0, _array.default)(orders),
      code = 'var u,v;return ',
      i,
      j,
      f,
      u,
      v,
      d,
      t,
      lt,
      gt;
  if (n < 0) return null;

  for (j = 0; j <= n; ++j) {
    i = idx[j];
    f = cmp[i];

    if ((0, _isFunction.default)(f)) {
      d = 'f' + i;
      u = '(u=this.' + d + '(a))';
      v = '(v=this.' + d + '(b))';
      (t = t || {})[d] = f;
    } else {
      u = '(u=a[' + f + '])';
      v = '(v=b[' + f + '])';
    }

    d = '((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))';

    if (ord[i] !== 'descending') {
      gt = 1;
      lt = -1;
    } else {
      gt = -1;
      lt = 1;
    }

    code += '(' + u + '<' + v + '||u==null)&&v!=null?' + lt + ':(u>v||v==null)&&u!=null?' + gt + ':' + d + '!==u&&v===v?' + lt + ':v!==v&&u===u?' + gt + (i < n ? ':' : ':0');
  }

  f = Function('a', 'b', code + ';');
  if (t) f = f.bind(t);
  fields = fields.reduce(function (map, field) {
    if ((0, _isFunction.default)(field)) {
      ((0, _accessor.accessorFields)(field) || []).forEach(function (_) {
        map[_] = 1;
      });
    } else if (field != null) {
      map[field + ''] = 1;
    }

    return map;
  }, {});
  return (0, _accessor.default)(f, Object.keys(fields));
}
},{"./accessor":"node_modules/vega-util/src/accessor.js","./array":"node_modules/vega-util/src/array.js","./isFunction":"node_modules/vega-util/src/isFunction.js","./splitAccessPath":"node_modules/vega-util/src/splitAccessPath.js","./stringValue":"node_modules/vega-util/src/stringValue.js"}],"node_modules/vega-util/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _isFunction = _interopRequireDefault(require("./isFunction"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(_) {
  return (0, _isFunction.default)(_) ? _ : function () {
    return _;
  };
}
},{"./isFunction":"node_modules/vega-util/src/isFunction.js"}],"node_modules/vega-util/src/debounce.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(delay, handler) {
  var tid, evt;

  function callback() {
    handler(evt);
    tid = evt = null;
  }

  return function (e) {
    evt = e;
    if (tid) clearTimeout(tid);
    tid = setTimeout(callback, delay);
  };
}
},{}],"node_modules/vega-util/src/extend.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  for (var x, k, i = 1, len = arguments.length; i < len; ++i) {
    x = arguments[i];

    for (k in x) {
      _[k] = x[k];
    }
  }

  return _;
}
},{}],"node_modules/vega-util/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Return an array with minimum and maximum values, in the
 * form [min, max]. Ignores null, undefined, and NaN values.
 */
function _default(array, f) {
  var i = 0,
      n,
      v,
      min,
      max;

  if (array && (n = array.length)) {
    if (f == null) {
      // find first valid value
      for (v = array[i]; v == null || v !== v; v = array[++i]);

      min = max = v; // visit all other values

      for (; i < n; ++i) {
        v = array[i]; // skip null/undefined; NaN will fail all comparisons

        if (v != null) {
          if (v < min) min = v;
          if (v > max) max = v;
        }
      }
    } else {
      // find first valid value
      for (v = f(array[i]); v == null || v !== v; v = f(array[++i]));

      min = max = v; // visit all other values

      for (; i < n; ++i) {
        v = f(array[i]); // skip null/undefined; NaN will fail all comparisons

        if (v != null) {
          if (v < min) min = v;
          if (v > max) max = v;
        }
      }
    }
  }

  return [min, max];
}
},{}],"node_modules/vega-util/src/extentIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, f) {
  var i = -1,
      n = array.length,
      a,
      b,
      c,
      u,
      v;

  if (f == null) {
    while (++i < n) {
      b = array[i];

      if (b != null && b >= b) {
        a = c = b;
        break;
      }
    }

    u = v = i;

    while (++i < n) {
      b = array[i];

      if (b != null) {
        if (a > b) {
          a = b;
          u = i;
        }

        if (c < b) {
          c = b;
          v = i;
        }
      }
    }
  } else {
    while (++i < n) {
      b = f(array[i], i, array);

      if (b != null && b >= b) {
        a = c = b;
        break;
      }
    }

    u = v = i;

    while (++i < n) {
      b = f(array[i], i, array);

      if (b != null) {
        if (a > b) {
          a = b;
          u = i;
        }

        if (c < b) {
          c = b;
          v = i;
        }
      }
    }
  }

  return [u, v];
}
},{}],"node_modules/vega-util/src/hasOwnProperty.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
const hop = Object.prototype.hasOwnProperty;

function _default(object, property) {
  return hop.call(object, property);
}
},{}],"node_modules/vega-util/src/fastmap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _hasOwnProperty = _interopRequireDefault(require("./hasOwnProperty"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NULL = {};

function _default(input) {
  var obj = {},
      map,
      test;

  function has(key) {
    return (0, _hasOwnProperty.default)(obj, key) && obj[key] !== NULL;
  }

  map = {
    size: 0,
    empty: 0,
    object: obj,
    has: has,
    get: function (key) {
      return has(key) ? obj[key] : undefined;
    },
    set: function (key, value) {
      if (!has(key)) {
        ++map.size;
        if (obj[key] === NULL) --map.empty;
      }

      obj[key] = value;
      return this;
    },
    delete: function (key) {
      if (has(key)) {
        --map.size;
        ++map.empty;
        obj[key] = NULL;
      }

      return this;
    },
    clear: function () {
      map.size = map.empty = 0;
      map.object = obj = {};
    },
    test: function (_) {
      if (arguments.length) {
        test = _;
        return map;
      } else {
        return test;
      }
    },
    clean: function () {
      var next = {},
          size = 0,
          key,
          value;

      for (key in obj) {
        value = obj[key];

        if (value !== NULL && (!test || !test(value))) {
          next[key] = value;
          ++size;
        }
      }

      map.size = size;
      map.empty = 0;
      map.object = obj = next;
    }
  };
  if (input) Object.keys(input).forEach(function (key) {
    map.set(key, input[key]);
  });
  return map;
}
},{"./hasOwnProperty":"node_modules/vega-util/src/hasOwnProperty.js"}],"node_modules/vega-util/src/flush.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _peek = _interopRequireDefault(require("./peek"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(range, value, threshold, left, right, center) {
  if (!threshold && threshold !== 0) return center;
  var a = range[0],
      b = (0, _peek.default)(range),
      t = +threshold,
      l,
      r; // swap endpoints if range is reversed

  if (b < a) {
    l = a;
    a = b;
    b = l;
  } // compare value to endpoints


  l = Math.abs(value - a);
  r = Math.abs(b - value); // adjust if value is within threshold distance of endpoint

  return l < r && l <= t ? left : r <= t ? right : center;
}
},{"./peek":"node_modules/vega-util/src/peek.js"}],"node_modules/vega-util/src/inherits.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(child, parent) {
  var proto = child.prototype = Object.create(parent.prototype);
  proto.constructor = child;
  return proto;
}
},{}],"node_modules/vega-util/src/inrange.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Predicate that returns true if the value lies within the span
 * of the given range. The left and right flags control the use
 * of inclusive (true) or exclusive (false) comparisons.
 */
function _default(value, range, left, right) {
  var r0 = range[0],
      r1 = range[range.length - 1],
      t;

  if (r0 > r1) {
    t = r0;
    r0 = r1;
    r1 = t;
  }

  left = left === undefined || left;
  right = right === undefined || right;
  return (left ? r0 <= value : r0 < value) && (right ? value <= r1 : value < r1);
}
},{}],"node_modules/vega-util/src/isBoolean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return typeof _ === 'boolean';
}
},{}],"node_modules/vega-util/src/isDate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return Object.prototype.toString.call(_) === '[object Date]';
}
},{}],"node_modules/vega-util/src/isNumber.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return typeof _ === 'number';
}
},{}],"node_modules/vega-util/src/isRegExp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return Object.prototype.toString.call(_) === '[object RegExp]';
}
},{}],"node_modules/vega-util/src/key.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _accessor = _interopRequireDefault(require("./accessor"));

var _array = _interopRequireDefault(require("./array"));

var _splitAccessPath = _interopRequireDefault(require("./splitAccessPath"));

var _stringValue = _interopRequireDefault(require("./stringValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(fields, flat) {
  if (fields) {
    fields = flat ? (0, _array.default)(fields).map(function (f) {
      return f.replace(/\\(.)/g, '$1');
    }) : (0, _array.default)(fields);
  }

  var fn = !(fields && fields.length) ? function () {
    return '';
  } : Function('_', 'return \'\'+' + fields.map(function (f) {
    return '_[' + (flat ? (0, _stringValue.default)(f) : (0, _splitAccessPath.default)(f).map(_stringValue.default).join('][')) + ']';
  }).join('+\'|\'+') + ';');
  return (0, _accessor.default)(fn, fields, 'key');
}
},{"./accessor":"node_modules/vega-util/src/accessor.js","./array":"node_modules/vega-util/src/array.js","./splitAccessPath":"node_modules/vega-util/src/splitAccessPath.js","./stringValue":"node_modules/vega-util/src/stringValue.js"}],"node_modules/vega-util/src/lerp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _peek = _interopRequireDefault(require("./peek"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, frac) {
  const lo = array[0],
        hi = (0, _peek.default)(array),
        f = +frac;
  return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);
}
},{"./peek":"node_modules/vega-util/src/peek.js"}],"node_modules/vega-util/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(compare, array0, array1, output) {
  var n0 = array0.length,
      n1 = array1.length;
  if (!n1) return array0;
  if (!n0) return array1;
  var merged = output || new array0.constructor(n0 + n1),
      i0 = 0,
      i1 = 0,
      i = 0;

  for (; i0 < n0 && i1 < n1; ++i) {
    merged[i] = compare(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];
  }

  for (; i0 < n0; ++i0, ++i) {
    merged[i] = array0[i0];
  }

  for (; i1 < n1; ++i1, ++i) {
    merged[i] = array1[i1];
  }

  return merged;
}
},{}],"node_modules/vega-util/src/repeat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(str, reps) {
  var s = '';

  while (--reps >= 0) s += str;

  return s;
}
},{}],"node_modules/vega-util/src/pad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _repeat = _interopRequireDefault(require("./repeat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(str, length, padchar, align) {
  var c = padchar || ' ',
      s = str + '',
      n = length - s.length;
  return n <= 0 ? s : align === 'left' ? (0, _repeat.default)(c, n) + s : align === 'center' ? (0, _repeat.default)(c, ~~(n / 2)) + s + (0, _repeat.default)(c, Math.ceil(n / 2)) : s + (0, _repeat.default)(c, n);
}
},{"./repeat":"node_modules/vega-util/src/repeat.js"}],"node_modules/vega-util/src/span.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _peek = _interopRequireDefault(require("./peek"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Return the numerical span of an array: the difference between
 * the last and first values.
 */
function _default(array) {
  return array && (0, _peek.default)(array) - array[0] || 0;
}
},{"./peek":"node_modules/vega-util/src/peek.js"}],"node_modules/vega-util/src/toBoolean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return _ == null || _ === '' ? null : !_ || _ === 'false' || _ === '0' ? false : !!_;
}
},{}],"node_modules/vega-util/src/toDate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _isDate = _interopRequireDefault(require("./isDate"));

var _isNumber = _interopRequireDefault(require("./isNumber"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultParser(_) {
  return (0, _isNumber.default)(_) ? _ : (0, _isDate.default)(_) ? _ : Date.parse(_);
}

function _default(_, parser) {
  parser = parser || defaultParser;
  return _ == null || _ === '' ? null : parser(_);
}
},{"./isDate":"node_modules/vega-util/src/isDate.js","./isNumber":"node_modules/vega-util/src/isNumber.js"}],"node_modules/vega-util/src/toString.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return _ == null || _ === '' ? null : _ + '';
}
},{}],"node_modules/vega-util/src/toSet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  for (var s = {}, i = 0, n = _.length; i < n; ++i) s[_[i]] = true;

  return s;
}
},{}],"node_modules/vega-util/src/truncate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(str, length, align, ellipsis) {
  var e = ellipsis != null ? ellipsis : '\u2026',
      s = str + '',
      n = s.length,
      l = Math.max(0, length - e.length);
  return n <= length ? s : align === 'left' ? e + s.slice(n - l) : align === 'center' ? s.slice(0, Math.ceil(l / 2)) + e + s.slice(n - ~~(l / 2)) : s.slice(0, l) + e;
}
},{}],"node_modules/vega-util/src/visitArray.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, filter, visitor) {
  if (array) {
    var i = 0,
        n = array.length,
        t;

    if (filter) {
      for (; i < n; ++i) {
        if (t = filter(array[i])) visitor(t, i, array);
      }
    } else {
      array.forEach(visitor);
    }
  }
}
},{}],"node_modules/vega-util/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "accessor", {
  enumerable: true,
  get: function () {
    return _accessor.default;
  }
});
Object.defineProperty(exports, "accessorName", {
  enumerable: true,
  get: function () {
    return _accessor.accessorName;
  }
});
Object.defineProperty(exports, "accessorFields", {
  enumerable: true,
  get: function () {
    return _accessor.accessorFields;
  }
});
Object.defineProperty(exports, "id", {
  enumerable: true,
  get: function () {
    return _accessors.id;
  }
});
Object.defineProperty(exports, "identity", {
  enumerable: true,
  get: function () {
    return _accessors.identity;
  }
});
Object.defineProperty(exports, "zero", {
  enumerable: true,
  get: function () {
    return _accessors.zero;
  }
});
Object.defineProperty(exports, "one", {
  enumerable: true,
  get: function () {
    return _accessors.one;
  }
});
Object.defineProperty(exports, "truthy", {
  enumerable: true,
  get: function () {
    return _accessors.truthy;
  }
});
Object.defineProperty(exports, "falsy", {
  enumerable: true,
  get: function () {
    return _accessors.falsy;
  }
});
Object.defineProperty(exports, "logger", {
  enumerable: true,
  get: function () {
    return _logger.default;
  }
});
Object.defineProperty(exports, "None", {
  enumerable: true,
  get: function () {
    return _logger.None;
  }
});
Object.defineProperty(exports, "Error", {
  enumerable: true,
  get: function () {
    return _logger.Error;
  }
});
Object.defineProperty(exports, "Warn", {
  enumerable: true,
  get: function () {
    return _logger.Warn;
  }
});
Object.defineProperty(exports, "Info", {
  enumerable: true,
  get: function () {
    return _logger.Info;
  }
});
Object.defineProperty(exports, "Debug", {
  enumerable: true,
  get: function () {
    return _logger.Debug;
  }
});
Object.defineProperty(exports, "panLinear", {
  enumerable: true,
  get: function () {
    return _transform.panLinear;
  }
});
Object.defineProperty(exports, "panLog", {
  enumerable: true,
  get: function () {
    return _transform.panLog;
  }
});
Object.defineProperty(exports, "panPow", {
  enumerable: true,
  get: function () {
    return _transform.panPow;
  }
});
Object.defineProperty(exports, "panSymlog", {
  enumerable: true,
  get: function () {
    return _transform.panSymlog;
  }
});
Object.defineProperty(exports, "zoomLinear", {
  enumerable: true,
  get: function () {
    return _transform.zoomLinear;
  }
});
Object.defineProperty(exports, "zoomLog", {
  enumerable: true,
  get: function () {
    return _transform.zoomLog;
  }
});
Object.defineProperty(exports, "zoomPow", {
  enumerable: true,
  get: function () {
    return _transform.zoomPow;
  }
});
Object.defineProperty(exports, "zoomSymlog", {
  enumerable: true,
  get: function () {
    return _transform.zoomSymlog;
  }
});
Object.defineProperty(exports, "quarter", {
  enumerable: true,
  get: function () {
    return _quarter.quarter;
  }
});
Object.defineProperty(exports, "utcquarter", {
  enumerable: true,
  get: function () {
    return _quarter.utcquarter;
  }
});
Object.defineProperty(exports, "array", {
  enumerable: true,
  get: function () {
    return _array.default;
  }
});
Object.defineProperty(exports, "clampRange", {
  enumerable: true,
  get: function () {
    return _clampRange.default;
  }
});
Object.defineProperty(exports, "compare", {
  enumerable: true,
  get: function () {
    return _compare.default;
  }
});
Object.defineProperty(exports, "constant", {
  enumerable: true,
  get: function () {
    return _constant.default;
  }
});
Object.defineProperty(exports, "debounce", {
  enumerable: true,
  get: function () {
    return _debounce.default;
  }
});
Object.defineProperty(exports, "error", {
  enumerable: true,
  get: function () {
    return _error.default;
  }
});
Object.defineProperty(exports, "extend", {
  enumerable: true,
  get: function () {
    return _extend.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "extentIndex", {
  enumerable: true,
  get: function () {
    return _extentIndex.default;
  }
});
Object.defineProperty(exports, "fastmap", {
  enumerable: true,
  get: function () {
    return _fastmap.default;
  }
});
Object.defineProperty(exports, "field", {
  enumerable: true,
  get: function () {
    return _field.default;
  }
});
Object.defineProperty(exports, "flush", {
  enumerable: true,
  get: function () {
    return _flush.default;
  }
});
Object.defineProperty(exports, "hasOwnProperty", {
  enumerable: true,
  get: function () {
    return _hasOwnProperty.default;
  }
});
Object.defineProperty(exports, "inherits", {
  enumerable: true,
  get: function () {
    return _inherits.default;
  }
});
Object.defineProperty(exports, "inrange", {
  enumerable: true,
  get: function () {
    return _inrange.default;
  }
});
Object.defineProperty(exports, "isArray", {
  enumerable: true,
  get: function () {
    return _isArray.default;
  }
});
Object.defineProperty(exports, "isBoolean", {
  enumerable: true,
  get: function () {
    return _isBoolean.default;
  }
});
Object.defineProperty(exports, "isDate", {
  enumerable: true,
  get: function () {
    return _isDate.default;
  }
});
Object.defineProperty(exports, "isFunction", {
  enumerable: true,
  get: function () {
    return _isFunction.default;
  }
});
Object.defineProperty(exports, "isNumber", {
  enumerable: true,
  get: function () {
    return _isNumber.default;
  }
});
Object.defineProperty(exports, "isObject", {
  enumerable: true,
  get: function () {
    return _isObject.default;
  }
});
Object.defineProperty(exports, "isRegExp", {
  enumerable: true,
  get: function () {
    return _isRegExp.default;
  }
});
Object.defineProperty(exports, "isString", {
  enumerable: true,
  get: function () {
    return _isString.default;
  }
});
Object.defineProperty(exports, "key", {
  enumerable: true,
  get: function () {
    return _key.default;
  }
});
Object.defineProperty(exports, "lerp", {
  enumerable: true,
  get: function () {
    return _lerp.default;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "pad", {
  enumerable: true,
  get: function () {
    return _pad.default;
  }
});
Object.defineProperty(exports, "peek", {
  enumerable: true,
  get: function () {
    return _peek.default;
  }
});
Object.defineProperty(exports, "repeat", {
  enumerable: true,
  get: function () {
    return _repeat.default;
  }
});
Object.defineProperty(exports, "span", {
  enumerable: true,
  get: function () {
    return _span.default;
  }
});
Object.defineProperty(exports, "splitAccessPath", {
  enumerable: true,
  get: function () {
    return _splitAccessPath.default;
  }
});
Object.defineProperty(exports, "stringValue", {
  enumerable: true,
  get: function () {
    return _stringValue.default;
  }
});
Object.defineProperty(exports, "toBoolean", {
  enumerable: true,
  get: function () {
    return _toBoolean.default;
  }
});
Object.defineProperty(exports, "toDate", {
  enumerable: true,
  get: function () {
    return _toDate.default;
  }
});
Object.defineProperty(exports, "toNumber", {
  enumerable: true,
  get: function () {
    return _toNumber.default;
  }
});
Object.defineProperty(exports, "toString", {
  enumerable: true,
  get: function () {
    return _toString.default;
  }
});
Object.defineProperty(exports, "toSet", {
  enumerable: true,
  get: function () {
    return _toSet.default;
  }
});
Object.defineProperty(exports, "truncate", {
  enumerable: true,
  get: function () {
    return _truncate.default;
  }
});
Object.defineProperty(exports, "visitArray", {
  enumerable: true,
  get: function () {
    return _visitArray.default;
  }
});

var _accessor = _interopRequireWildcard(require("./src/accessor"));

var _accessors = require("./src/accessors");

var _logger = _interopRequireWildcard(require("./src/logger"));

var _transform = require("./src/transform");

var _quarter = require("./src/quarter");

var _array = _interopRequireDefault(require("./src/array"));

var _clampRange = _interopRequireDefault(require("./src/clampRange"));

var _compare = _interopRequireDefault(require("./src/compare"));

var _constant = _interopRequireDefault(require("./src/constant"));

var _debounce = _interopRequireDefault(require("./src/debounce"));

var _error = _interopRequireDefault(require("./src/error"));

var _extend = _interopRequireDefault(require("./src/extend"));

var _extent = _interopRequireDefault(require("./src/extent"));

var _extentIndex = _interopRequireDefault(require("./src/extentIndex"));

var _fastmap = _interopRequireDefault(require("./src/fastmap"));

var _field = _interopRequireDefault(require("./src/field"));

var _flush = _interopRequireDefault(require("./src/flush"));

var _hasOwnProperty = _interopRequireDefault(require("./src/hasOwnProperty"));

var _inherits = _interopRequireDefault(require("./src/inherits"));

var _inrange = _interopRequireDefault(require("./src/inrange"));

var _isArray = _interopRequireDefault(require("./src/isArray"));

var _isBoolean = _interopRequireDefault(require("./src/isBoolean"));

var _isDate = _interopRequireDefault(require("./src/isDate"));

var _isFunction = _interopRequireDefault(require("./src/isFunction"));

var _isNumber = _interopRequireDefault(require("./src/isNumber"));

var _isObject = _interopRequireDefault(require("./src/isObject"));

var _isRegExp = _interopRequireDefault(require("./src/isRegExp"));

var _isString = _interopRequireDefault(require("./src/isString"));

var _key = _interopRequireDefault(require("./src/key"));

var _lerp = _interopRequireDefault(require("./src/lerp"));

var _merge = _interopRequireDefault(require("./src/merge"));

var _pad = _interopRequireDefault(require("./src/pad"));

var _peek = _interopRequireDefault(require("./src/peek"));

var _repeat = _interopRequireDefault(require("./src/repeat"));

var _span = _interopRequireDefault(require("./src/span"));

var _splitAccessPath = _interopRequireDefault(require("./src/splitAccessPath"));

var _stringValue = _interopRequireDefault(require("./src/stringValue"));

var _toBoolean = _interopRequireDefault(require("./src/toBoolean"));

var _toDate = _interopRequireDefault(require("./src/toDate"));

var _toNumber = _interopRequireDefault(require("./src/toNumber"));

var _toString = _interopRequireDefault(require("./src/toString"));

var _toSet = _interopRequireDefault(require("./src/toSet"));

var _truncate = _interopRequireDefault(require("./src/truncate"));

var _visitArray = _interopRequireDefault(require("./src/visitArray"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./src/accessor":"node_modules/vega-util/src/accessor.js","./src/accessors":"node_modules/vega-util/src/accessors.js","./src/logger":"node_modules/vega-util/src/logger.js","./src/transform":"node_modules/vega-util/src/transform.js","./src/quarter":"node_modules/vega-util/src/quarter.js","./src/array":"node_modules/vega-util/src/array.js","./src/clampRange":"node_modules/vega-util/src/clampRange.js","./src/compare":"node_modules/vega-util/src/compare.js","./src/constant":"node_modules/vega-util/src/constant.js","./src/debounce":"node_modules/vega-util/src/debounce.js","./src/error":"node_modules/vega-util/src/error.js","./src/extend":"node_modules/vega-util/src/extend.js","./src/extent":"node_modules/vega-util/src/extent.js","./src/extentIndex":"node_modules/vega-util/src/extentIndex.js","./src/fastmap":"node_modules/vega-util/src/fastmap.js","./src/field":"node_modules/vega-util/src/field.js","./src/flush":"node_modules/vega-util/src/flush.js","./src/hasOwnProperty":"node_modules/vega-util/src/hasOwnProperty.js","./src/inherits":"node_modules/vega-util/src/inherits.js","./src/inrange":"node_modules/vega-util/src/inrange.js","./src/isArray":"node_modules/vega-util/src/isArray.js","./src/isBoolean":"node_modules/vega-util/src/isBoolean.js","./src/isDate":"node_modules/vega-util/src/isDate.js","./src/isFunction":"node_modules/vega-util/src/isFunction.js","./src/isNumber":"node_modules/vega-util/src/isNumber.js","./src/isObject":"node_modules/vega-util/src/isObject.js","./src/isRegExp":"node_modules/vega-util/src/isRegExp.js","./src/isString":"node_modules/vega-util/src/isString.js","./src/key":"node_modules/vega-util/src/key.js","./src/lerp":"node_modules/vega-util/src/lerp.js","./src/merge":"node_modules/vega-util/src/merge.js","./src/pad":"node_modules/vega-util/src/pad.js","./src/peek":"node_modules/vega-util/src/peek.js","./src/repeat":"node_modules/vega-util/src/repeat.js","./src/span":"node_modules/vega-util/src/span.js","./src/splitAccessPath":"node_modules/vega-util/src/splitAccessPath.js","./src/stringValue":"node_modules/vega-util/src/stringValue.js","./src/toBoolean":"node_modules/vega-util/src/toBoolean.js","./src/toDate":"node_modules/vega-util/src/toDate.js","./src/toNumber":"node_modules/vega-util/src/toNumber.js","./src/toString":"node_modules/vega-util/src/toString.js","./src/toSet":"node_modules/vega-util/src/toSet.js","./src/truncate":"node_modules/vega-util/src/truncate.js","./src/visitArray":"node_modules/vega-util/src/visitArray.js"}],"node_modules/vega-dataflow/src/util/UniqueList.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UniqueList;

var _vegaUtil = require("vega-util");

function UniqueList(idFunc) {
  var $ = idFunc || _vegaUtil.identity,
      list = [],
      ids = {};

  list.add = function (_) {
    var id = $(_);

    if (!ids[id]) {
      ids[id] = 1;
      list.push(_);
    }

    return list;
  };

  list.remove = function (_) {
    var id = $(_),
        idx;

    if (ids[id]) {
      ids[id] = 0;

      if ((idx = list.indexOf(_)) >= 0) {
        list.splice(idx, 1);
      }
    }

    return list;
  };

  return list;
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/util/asyncCallback.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Invoke and await a potentially async callback function. If
 * an error occurs, trap it and route to Dataflow.error.
 * @param {Dataflow} df - The dataflow instance
 * @param {function} callback - A callback function to invoke
 *   and then await. The dataflow will be passed as the single
 *   argument to the function.
 */
async function _default(df, callback) {
  try {
    await callback(df);
  } catch (err) {
    df.error(err);
  }
}
},{}],"node_modules/vega-dataflow/src/Tuple.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reset = reset;
exports.isTuple = isTuple;
exports.tupleid = tupleid;
exports.ingest = ingest;
exports.derive = derive;
exports.rederive = rederive;
exports.replace = replace;
exports.stableCompare = stableCompare;
var TUPLE_ID_KEY = Symbol('vega_id'),
    TUPLE_ID = 1;
/**
 * Resets the internal tuple id counter to one.
 */

function reset() {
  TUPLE_ID = 1;
}
/**
 * Checks if an input value is a registered tuple.
 * @param {*} t - The value to check.
 * @return {boolean} True if the input is a tuple, false otherwise.
 */


function isTuple(t) {
  return !!(t && tupleid(t));
}
/**
 * Returns the id of a tuple.
 * @param {object} t - The input tuple.
 * @return {*} the tuple id.
 */


function tupleid(t) {
  return t[TUPLE_ID_KEY];
}
/**
 * Sets the id of a tuple.
 * @param {object} t - The input tuple.
 * @param {*} id - The id value to set.
 * @return {object} the input tuple.
 */


function setid(t, id) {
  t[TUPLE_ID_KEY] = id;
  return t;
}
/**
 * Ingest an object or value as a data tuple.
 * If the input value is an object, an id field will be added to it. For
 * efficiency, the input object is modified directly. A copy is not made.
 * If the input value is a literal, it will be wrapped in a new object
 * instance, with the value accessible as the 'data' property.
 * @param datum - The value to ingest.
 * @return {object} The ingested data tuple.
 */


function ingest(datum) {
  var t = datum === Object(datum) ? datum : {
    data: datum
  };
  return tupleid(t) ? t : setid(t, TUPLE_ID++);
}
/**
 * Given a source tuple, return a derived copy.
 * @param {object} t - The source tuple.
 * @return {object} The derived tuple.
 */


function derive(t) {
  return rederive(t, ingest({}));
}
/**
 * Rederive a derived tuple by copying values from the source tuple.
 * @param {object} t - The source tuple.
 * @param {object} d - The derived tuple.
 * @return {object} The derived tuple.
 */


function rederive(t, d) {
  for (var k in t) d[k] = t[k];

  return d;
}
/**
 * Replace an existing tuple with a new tuple.
 * @param {object} t - The existing data tuple.
 * @param {object} d - The new tuple that replaces the old.
 * @return {object} The new tuple.
 */


function replace(t, d) {
  return setid(d, tupleid(t));
}
/**
 * Generate an augmented comparator function that provides stable
 * sorting by tuple id when the given comparator produces ties.
 * @param {function} cmp - The comparator to augment.
 * @param {function} [f] - Optional tuple accessor function.
 * @return {function} An augmented comparator function.
 */


function stableCompare(cmp, f) {
  return !cmp ? null : f ? (a, b) => cmp(a, b) || tupleid(f(a)) - tupleid(f(b)) : (a, b) => cmp(a, b) || tupleid(a) - tupleid(b);
}
},{}],"node_modules/vega-dataflow/src/ChangeSet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isChangeSet = isChangeSet;
exports.default = changeset;

var _Tuple = require("./Tuple");

var _vegaUtil = require("vega-util");

function isChangeSet(v) {
  return v && v.constructor === changeset;
}

function changeset() {
  var add = [],
      // insert tuples
  rem = [],
      // remove tuples
  mod = [],
      // modify tuples
  remp = [],
      // remove by predicate
  modp = [],
      // modify by predicate
  reflow = false;
  return {
    constructor: changeset,
    insert: function (t) {
      var d = (0, _vegaUtil.array)(t),
          i = 0,
          n = d.length;

      for (; i < n; ++i) add.push(d[i]);

      return this;
    },
    remove: function (t) {
      var a = (0, _vegaUtil.isFunction)(t) ? remp : rem,
          d = (0, _vegaUtil.array)(t),
          i = 0,
          n = d.length;

      for (; i < n; ++i) a.push(d[i]);

      return this;
    },
    modify: function (t, field, value) {
      var m = {
        field: field,
        value: (0, _vegaUtil.constant)(value)
      };

      if ((0, _vegaUtil.isFunction)(t)) {
        m.filter = t;
        modp.push(m);
      } else {
        m.tuple = t;
        mod.push(m);
      }

      return this;
    },
    encode: function (t, set) {
      if ((0, _vegaUtil.isFunction)(t)) modp.push({
        filter: t,
        field: set
      });else mod.push({
        tuple: t,
        field: set
      });
      return this;
    },
    reflow: function () {
      reflow = true;
      return this;
    },
    pulse: function (pulse, tuples) {
      var cur = {},
          out = {},
          i,
          n,
          m,
          f,
          t,
          id; // build lookup table of current tuples

      for (i = 0, n = tuples.length; i < n; ++i) {
        cur[(0, _Tuple.tupleid)(tuples[i])] = 1;
      } // process individual tuples to remove


      for (i = 0, n = rem.length; i < n; ++i) {
        t = rem[i];
        cur[(0, _Tuple.tupleid)(t)] = -1;
      } // process predicate-based removals


      for (i = 0, n = remp.length; i < n; ++i) {
        f = remp[i];
        tuples.forEach(function (t) {
          if (f(t)) cur[(0, _Tuple.tupleid)(t)] = -1;
        });
      } // process all add tuples


      for (i = 0, n = add.length; i < n; ++i) {
        t = add[i];
        id = (0, _Tuple.tupleid)(t);

        if (cur[id]) {
          // tuple already resides in dataset
          // if flagged for both add and remove, cancel
          cur[id] = 1;
        } else {
          // tuple does not reside in dataset, add
          pulse.add.push((0, _Tuple.ingest)(add[i]));
        }
      } // populate pulse rem list


      for (i = 0, n = tuples.length; i < n; ++i) {
        t = tuples[i];
        if (cur[(0, _Tuple.tupleid)(t)] < 0) pulse.rem.push(t);
      } // modify helper method


      function modify(t, f, v) {
        if (v) {
          t[f] = v(t);
        } else {
          pulse.encode = f;
        }

        if (!reflow) out[(0, _Tuple.tupleid)(t)] = t;
      } // process individual tuples to modify


      for (i = 0, n = mod.length; i < n; ++i) {
        m = mod[i];
        t = m.tuple;
        f = m.field;
        id = cur[(0, _Tuple.tupleid)(t)];

        if (id > 0) {
          modify(t, f, m.value);
          pulse.modifies(f);
        }
      } // process predicate-based modifications


      for (i = 0, n = modp.length; i < n; ++i) {
        m = modp[i];
        f = m.filter;
        tuples.forEach(function (t) {
          if (f(t) && cur[(0, _Tuple.tupleid)(t)] > 0) {
            modify(t, m.field, m.value);
          }
        });
        pulse.modifies(m.field);
      } // upon reflow request, populate mod with all non-removed tuples
      // otherwise, populate mod with modified tuples only


      if (reflow) {
        pulse.mod = rem.length || remp.length ? tuples.filter(function (t) {
          return cur[(0, _Tuple.tupleid)(t)] > 0;
        }) : tuples.slice();
      } else {
        for (id in out) pulse.mod.push(out[id]);
      }

      return pulse;
    }
  };
}
},{"./Tuple":"node_modules/vega-dataflow/src/Tuple.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/Parameters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Parameters;

var _vegaUtil = require("vega-util");

var CACHE = '_:mod:_';
/**
 * Hash that tracks modifications to assigned values.
 * Callers *must* use the set method to update values.
 */

function Parameters() {
  Object.defineProperty(this, CACHE, {
    writable: true,
    value: {}
  });
}

var prototype = Parameters.prototype;
/**
 * Set a parameter value. If the parameter value changes, the parameter
 * will be recorded as modified.
 * @param {string} name - The parameter name.
 * @param {number} index - The index into an array-value parameter. Ignored if
 *   the argument is undefined, null or less than zero.
 * @param {*} value - The parameter value to set.
 * @param {boolean} [force=false] - If true, records the parameter as modified
 *   even if the value is unchanged.
 * @return {Parameters} - This parameter object.
 */

prototype.set = function (name, index, value, force) {
  var o = this,
      v = o[name],
      mod = o[CACHE];

  if (index != null && index >= 0) {
    if (v[index] !== value || force) {
      v[index] = value;
      mod[index + ':' + name] = -1;
      mod[name] = -1;
    }
  } else if (v !== value || force) {
    o[name] = value;
    mod[name] = (0, _vegaUtil.isArray)(value) ? 1 + value.length : -1;
  }

  return o;
};
/**
 * Tests if one or more parameters has been modified. If invoked with no
 * arguments, returns true if any parameter value has changed. If the first
 * argument is array, returns trues if any parameter name in the array has
 * changed. Otherwise, tests if the given name and optional array index has
 * changed.
 * @param {string} name - The parameter name to test.
 * @param {number} [index=undefined] - The parameter array index to test.
 * @return {boolean} - Returns true if a queried parameter was modified.
 */


prototype.modified = function (name, index) {
  var mod = this[CACHE],
      k;

  if (!arguments.length) {
    for (k in mod) {
      if (mod[k]) return true;
    }

    return false;
  } else if ((0, _vegaUtil.isArray)(name)) {
    for (k = 0; k < name.length; ++k) {
      if (mod[name[k]]) return true;
    }

    return false;
  }

  return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ':' + name] : !!mod[name];
};
/**
 * Clears the modification records. After calling this method,
 * all parameters are considered unmodified.
 */


prototype.clear = function () {
  this[CACHE] = {};
  return this;
};
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/Operator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Operator;

var _Parameters = _interopRequireDefault(require("./Parameters"));

var _UniqueList = _interopRequireDefault(require("./util/UniqueList"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OP_ID = 0;
var PULSE = 'pulse';
var NO_PARAMS = new _Parameters.default(); // Boolean Flags

var SKIP = 1,
    MODIFIED = 2;
/**
 * An Operator is a processing node in a dataflow graph.
 * Each operator stores a value and an optional value update function.
 * Operators can accept a hash of named parameters. Parameter values can
 * either be direct (JavaScript literals, arrays, objects) or indirect
 * (other operators whose values will be pulled dynamically). Operators
 * included as parameters will have this operator added as a dependency.
 * @constructor
 * @param {*} [init] - The initial value for this operator.
 * @param {function(object, Pulse)} [update] - An update function. Upon
 *   evaluation of this operator, the update function will be invoked and the
 *   return value will be used as the new value of this operator.
 * @param {object} [params] - The parameters for this operator.
 * @param {boolean} [react=true] - Flag indicating if this operator should
 *   listen for changes to upstream operators included as parameters.
 * @see parameters
 */

function Operator(init, update, params, react) {
  this.id = ++OP_ID;
  this.value = init;
  this.stamp = -1;
  this.rank = -1;
  this.qrank = -1;
  this.flags = 0;

  if (update) {
    this._update = update;
  }

  if (params) this.parameters(params, react);
}

var prototype = Operator.prototype;
/**
 * Returns a list of target operators dependent on this operator.
 * If this list does not exist, it is created and then returned.
 * @return {UniqueList}
 */

prototype.targets = function () {
  return this._targets || (this._targets = (0, _UniqueList.default)(_vegaUtil.id));
};
/**
 * Sets the value of this operator.
 * @param {*} value - the value to set.
 * @return {Number} Returns 1 if the operator value has changed
 *   according to strict equality, returns 0 otherwise.
 */


prototype.set = function (value) {
  if (this.value !== value) {
    this.value = value;
    return 1;
  } else {
    return 0;
  }
};

function flag(bit) {
  return function (state) {
    var f = this.flags;
    if (arguments.length === 0) return !!(f & bit);
    this.flags = state ? f | bit : f & ~bit;
    return this;
  };
}
/**
 * Indicates that operator evaluation should be skipped on the next pulse.
 * This operator will still propagate incoming pulses, but its update function
 * will not be invoked. The skip flag is reset after every pulse, so calling
 * this method will affect processing of the next pulse only.
 */


prototype.skip = flag(SKIP);
/**
 * Indicates that this operator's value has been modified on its most recent
 * pulse. Normally modification is checked via strict equality; however, in
 * some cases it is more efficient to update the internal state of an object.
 * In those cases, the modified flag can be used to trigger propagation. Once
 * set, the modification flag persists across pulses until unset. The flag can
 * be used with the last timestamp to test if a modification is recent.
 */

prototype.modified = flag(MODIFIED);
/**
 * Sets the parameters for this operator. The parameter values are analyzed for
 * operator instances. If found, this operator will be added as a dependency
 * of the parameterizing operator. Operator values are dynamically marshalled
 * from each operator parameter prior to evaluation. If a parameter value is
 * an array, the array will also be searched for Operator instances. However,
 * the search does not recurse into sub-arrays or object properties.
 * @param {object} params - A hash of operator parameters.
 * @param {boolean} [react=true] - A flag indicating if this operator should
 *   automatically update (react) when parameter values change. In other words,
 *   this flag determines if the operator registers itself as a listener on
 *   any upstream operators included in the parameters.
 * @param {boolean} [initonly=false] - A flag indicating if this operator
 *   should calculate an update only upon its initiatal evaluation, then
 *   deregister dependencies and suppress all future update invocations.
 * @return {Operator[]} - An array of upstream dependencies.
 */

prototype.parameters = function (params, react, initonly) {
  react = react !== false;
  var self = this,
      argval = self._argval = self._argval || new _Parameters.default(),
      argops = self._argops = self._argops || [],
      deps = [],
      name,
      value,
      n,
      i;

  function add(name, index, value) {
    if (value instanceof Operator) {
      if (value !== self) {
        if (react) value.targets().add(self);
        deps.push(value);
      }

      argops.push({
        op: value,
        name: name,
        index: index
      });
    } else {
      argval.set(name, index, value);
    }
  }

  for (name in params) {
    value = params[name];

    if (name === PULSE) {
      (0, _vegaUtil.array)(value).forEach(function (op) {
        if (!(op instanceof Operator)) {
          (0, _vegaUtil.error)('Pulse parameters must be operator instances.');
        } else if (op !== self) {
          op.targets().add(self);
          deps.push(op);
        }
      });
      self.source = value;
    } else if ((0, _vegaUtil.isArray)(value)) {
      argval.set(name, -1, Array(n = value.length));

      for (i = 0; i < n; ++i) add(name, i, value[i]);
    } else {
      add(name, -1, value);
    }
  }

  this.marshall().clear(); // initialize values

  if (initonly) argops.initonly = true;
  return deps;
};
/**
 * Internal method for marshalling parameter values.
 * Visits each operator dependency to pull the latest value.
 * @return {Parameters} A Parameters object to pass to the update function.
 */


prototype.marshall = function (stamp) {
  var argval = this._argval || NO_PARAMS,
      argops = this._argops,
      item,
      i,
      n,
      op,
      mod;

  if (argops) {
    for (i = 0, n = argops.length; i < n; ++i) {
      item = argops[i];
      op = item.op;
      mod = op.modified() && op.stamp === stamp;
      argval.set(item.name, item.index, op.value, mod);
    }

    if (argops.initonly) {
      for (i = 0; i < n; ++i) {
        item = argops[i];
        item.op.targets().remove(this);
      }

      this._argops = null;
      this._update = null;
    }
  }

  return argval;
};
/**
 * Delegate method to perform operator processing.
 * Subclasses can override this method to perform custom processing.
 * By default, it marshalls parameters and calls the update function
 * if that function is defined. If the update function does not
 * change the operator value then StopPropagation is returned.
 * If no update function is defined, this method does nothing.
 * @param {Pulse} pulse - the current dataflow pulse.
 * @return The output pulse or StopPropagation. A falsy return value
 *   (including undefined) will let the input pulse pass through.
 */


prototype.evaluate = function (pulse) {
  var update = this._update;

  if (update) {
    var params = this.marshall(pulse.stamp),
        v = update.call(this, params, pulse);
    params.clear();

    if (v !== this.value) {
      this.value = v;
    } else if (!this.modified()) {
      return pulse.StopPropagation;
    }
  }
};
/**
 * Run this operator for the current pulse. If this operator has already
 * been run at (or after) the pulse timestamp, returns StopPropagation.
 * Internally, this method calls {@link evaluate} to perform processing.
 * If {@link evaluate} returns a falsy value, the input pulse is returned.
 * This method should NOT be overridden, instead overrride {@link evaluate}.
 * @param {Pulse} pulse - the current dataflow pulse.
 * @return the output pulse for this operator (or StopPropagation)
 */


prototype.run = function (pulse) {
  if (pulse.stamp < this.stamp) return pulse.StopPropagation;
  var rv;

  if (this.skip()) {
    this.skip(false);
    rv = 0;
  } else {
    rv = this.evaluate(pulse);
  }

  return this.pulse = rv || pulse;
};
},{"./Parameters":"node_modules/vega-dataflow/src/Parameters.js","./util/UniqueList":"node_modules/vega-dataflow/src/util/UniqueList.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/dataflow/add.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _Operator = _interopRequireDefault(require("../Operator"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Add an operator to the dataflow graph. This function accepts a
 * variety of input argument types. The basic signature supports an
 * initial value, update function and parameters. If the first parameter
 * is an Operator instance, it will be added directly. If it is a
 * constructor for an Operator subclass, a new instance will be instantiated.
 * Otherwise, if the first parameter is a function instance, it will be used
 * as the update function and a null initial value is assumed.
 * @param {*} init - One of: the operator to add, the initial value of
 *   the operator, an operator class to instantiate, or an update function.
 * @param {function} [update] - The operator update function.
 * @param {object} [params] - The operator parameters.
 * @param {boolean} [react=true] - Flag indicating if this operator should
 *   listen for changes to upstream operators included as parameters.
 * @return {Operator} - The added operator.
 */
function _default(init, update, params, react) {
  var shift = 1,
      op;

  if (init instanceof _Operator.default) {
    op = init;
  } else if (init && init.prototype instanceof _Operator.default) {
    op = new init();
  } else if ((0, _vegaUtil.isFunction)(init)) {
    op = new _Operator.default(null, init);
  } else {
    shift = 0;
    op = new _Operator.default(init, update);
  }

  this.rank(op);

  if (shift) {
    react = params;
    params = update;
  }

  if (params) this.connect(op, op.parameters(params, react));
  this.touch(op);
  return op;
}
},{"../Operator":"node_modules/vega-dataflow/src/Operator.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/dataflow/connect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Connect a target operator as a dependent of source operators.
 * If necessary, this method will rerank the target operator and its
 * dependents to ensure propagation proceeds in a topologically sorted order.
 * @param {Operator} target - The target operator.
 * @param {Array<Operator>} - The source operators that should propagate
 *   to the target operator.
 */
function _default(target, sources) {
  var targetRank = target.rank,
      i,
      n;

  for (i = 0, n = sources.length; i < n; ++i) {
    if (targetRank < sources[i].rank) {
      this.rerank(target);
      return;
    }
  }
}
},{}],"node_modules/vega-dataflow/src/EventStream.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EventStream;
exports.stream = stream;

var _UniqueList = _interopRequireDefault(require("./util/UniqueList"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var STREAM_ID = 0;
/**
 * Models an event stream.
 * @constructor
 * @param {function(Object, number): boolean} [filter] - Filter predicate.
 *   Events pass through when truthy, events are suppressed when falsy.
 * @param {function(Object): *} [apply] - Applied to input events to produce
 *   new event values.
 * @param {function(Object)} [receive] - Event callback function to invoke
 *   upon receipt of a new event. Use to override standard event processing.
 */

function EventStream(filter, apply, receive) {
  this.id = ++STREAM_ID;
  this.value = null;
  if (receive) this.receive = receive;
  if (filter) this._filter = filter;
  if (apply) this._apply = apply;
}
/**
 * Creates a new event stream instance with the provided
 * (optional) filter, apply and receive functions.
 * @param {function(Object, number): boolean} [filter] - Filter predicate.
 *   Events pass through when truthy, events are suppressed when falsy.
 * @param {function(Object): *} [apply] - Applied to input events to produce
 *   new event values.
 * @see EventStream
 */


function stream(filter, apply, receive) {
  return new EventStream(filter, apply, receive);
}

var prototype = EventStream.prototype;
prototype._filter = _vegaUtil.truthy;
prototype._apply = _vegaUtil.identity;

prototype.targets = function () {
  return this._targets || (this._targets = (0, _UniqueList.default)(_vegaUtil.id));
};

prototype.consume = function (_) {
  if (!arguments.length) return !!this._consume;
  this._consume = !!_;
  return this;
};

prototype.receive = function (evt) {
  if (this._filter(evt)) {
    var val = this.value = this._apply(evt),
        trg = this._targets,
        n = trg ? trg.length : 0,
        i = 0;

    for (; i < n; ++i) trg[i].receive(val);

    if (this._consume) {
      evt.preventDefault();
      evt.stopPropagation();
    }
  }
};

prototype.filter = function (filter) {
  var s = stream(filter);
  this.targets().add(s);
  return s;
};

prototype.apply = function (apply) {
  var s = stream(null, apply);
  this.targets().add(s);
  return s;
};

prototype.merge = function () {
  var s = stream();
  this.targets().add(s);

  for (var i = 0, n = arguments.length; i < n; ++i) {
    arguments[i].targets().add(s);
  }

  return s;
};

prototype.throttle = function (pause) {
  var t = -1;
  return this.filter(function () {
    var now = Date.now();

    if (now - t > pause) {
      t = now;
      return 1;
    } else {
      return 0;
    }
  });
};

prototype.debounce = function (delay) {
  var s = stream();
  this.targets().add(stream(null, null, (0, _vegaUtil.debounce)(delay, function (e) {
    var df = e.dataflow;
    s.receive(e);
    if (df && df.run) df.run();
  })));
  return s;
};

prototype.between = function (a, b) {
  var active = false;
  a.targets().add(stream(null, null, function () {
    active = true;
  }));
  b.targets().add(stream(null, null, function () {
    active = false;
  }));
  return this.filter(function () {
    return active;
  });
};
},{"./util/UniqueList":"node_modules/vega-dataflow/src/util/UniqueList.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/dataflow/events.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _EventStream = require("../EventStream");

var _vegaUtil = require("vega-util");

/**
 * Create a new event stream from an event source.
 * @param {object} source - The event source to monitor. The input must
 *  support the addEventListener method.
 * @param {string} type - The event type.
 * @param {function(object): boolean} [filter] - Event filter function.
 * @param {function(object): *} [apply] - Event application function.
 *   If provided, this function will be invoked and the result will be
 *   used as the downstream event value.
 * @return {EventStream}
 */
function _default(source, type, filter, apply) {
  var df = this,
      s = (0, _EventStream.stream)(filter, apply),
      send = function (e) {
    e.dataflow = df;

    try {
      s.receive(e);
    } catch (error) {
      df.error(error);
    } finally {
      df.run();
    }
  },
      sources;

  if (typeof source === 'string' && typeof document !== 'undefined') {
    sources = document.querySelectorAll(source);
  } else {
    sources = (0, _vegaUtil.array)(source);
  }

  for (var i = 0, n = sources.length; i < n; ++i) {
    sources[i].addEventListener(type, send);
  }

  return s;
}
},{"../EventStream":"node_modules/vega-dataflow/src/EventStream.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-loader/src/loader.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

// Matches absolute URLs with optional protocol
//   https://...    file://...    //...
const protocol_re = /^([A-Za-z]+:)?\/\//; // Matches allowed URIs. From https://github.com/cure53/DOMPurify/blob/master/src/regexp.js with added file://

const allowed_re = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i; // eslint-disable-line no-useless-escape

const whitespace_re = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g; // eslint-disable-line no-control-regex
// Special treatment in node.js for the file: protocol

const fileProtocol = 'file://';
/**
 * Factory for a loader constructor that provides methods for requesting
 * files from either the network or disk, and for sanitizing request URIs.
 * @param {function} fetch - The Fetch API for HTTP network requests.
 *   If null or undefined, HTTP loading will be disabled.
 * @param {object} fs - The file system interface for file loading.
 *   If null or undefined, local file loading will be disabled.
 * @return {function} A loader constructor with the following signature:
 *   param {object} [options] - Optional default loading options to use.
 *   return {object} - A new loader instance.
 */

function _default(fetch, fs) {
  return function (options) {
    return {
      options: options || {},
      sanitize: sanitize,
      load: load,
      fileAccess: !!fs,
      file: fileLoader(fs),
      http: httpLoader(fetch)
    };
  };
}
/**
 * Load an external resource, typically either from the web or from the local
 * filesystem. This function uses {@link sanitize} to first sanitize the uri,
 * then calls either {@link http} (for web requests) or {@link file} (for
 * filesystem loading).
 * @param {string} uri - The resource indicator (e.g., URL or filename).
 * @param {object} [options] - Optional loading options. These options will
 *   override any existing default options.
 * @return {Promise} - A promise that resolves to the loaded content.
 */


async function load(uri, options) {
  const opt = await this.sanitize(uri, options),
        url = opt.href;
  return opt.localFile ? this.file(url) : this.http(url, options);
}
/**
 * URI sanitizer function.
 * @param {string} uri - The uri (url or filename) to sanity check.
 * @param {object} options - An options hash.
 * @return {Promise} - A promise that resolves to an object containing
 *  sanitized uri data, or rejects it the input uri is deemed invalid.
 *  The properties of the resolved object are assumed to be
 *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be
 *  provided by the 'href' property of the returned object.
 */


async function sanitize(uri, options) {
  options = (0, _vegaUtil.extend)({}, this.options, options);
  const fileAccess = this.fileAccess,
        result = {
    href: null
  };
  let isFile, loadFile, base;
  const isAllowed = allowed_re.test(uri.replace(whitespace_re, ''));

  if (uri == null || typeof uri !== 'string' || !isAllowed) {
    (0, _vegaUtil.error)('Sanitize failure, invalid URI: ' + (0, _vegaUtil.stringValue)(uri));
  }

  const hasProtocol = protocol_re.test(uri); // if relative url (no protocol/host), prepend baseURL

  if ((base = options.baseURL) && !hasProtocol) {
    // Ensure that there is a slash between the baseURL (e.g. hostname) and url
    if (!uri.startsWith('/') && base[base.length - 1] !== '/') {
      uri = '/' + uri;
    }

    uri = base + uri;
  } // should we load from file system?


  loadFile = (isFile = uri.startsWith(fileProtocol)) || options.mode === 'file' || options.mode !== 'http' && !hasProtocol && fileAccess;

  if (isFile) {
    // strip file protocol
    uri = uri.slice(fileProtocol.length);
  } else if (uri.startsWith('//')) {
    if (options.defaultProtocol === 'file') {
      // if is file, strip protocol and set loadFile flag
      uri = uri.slice(2);
      loadFile = true;
    } else {
      // if relative protocol (starts with '//'), prepend default protocol
      uri = (options.defaultProtocol || 'http') + ':' + uri;
    }
  } // set non-enumerable mode flag to indicate local file load


  Object.defineProperty(result, 'localFile', {
    value: !!loadFile
  }); // set uri

  result.href = uri; // set default result target, if specified

  if (options.target) {
    result.target = options.target + '';
  } // set default result rel, if specified (#1542)


  if (options.rel) {
    result.rel = options.rel + '';
  } // return


  return result;
}
/**
 * File system loader factory.
 * @param {object} fs - The file system interface.
 * @return {function} - A file loader with the following signature:
 *   param {string} filename - The file system path to load.
 *   param {string} filename - The file system path to load.
 *   return {Promise} A promise that resolves to the file contents.
 */


function fileLoader(fs) {
  return fs ? function (filename) {
    return new Promise(function (accept, reject) {
      fs.readFile(filename, function (error, data) {
        if (error) reject(error);else accept(data);
      });
    });
  } : fileReject;
}
/**
 * Default file system loader that simply rejects.
 */


async function fileReject() {
  (0, _vegaUtil.error)('No file system access.');
}
/**
 * HTTP request handler factory.
 * @param {function} fetch - The Fetch API method.
 * @return {function} - An http loader with the following signature:
 *   param {string} url - The url to request.
 *   param {object} options - An options hash.
 *   return {Promise} - A promise that resolves to the file contents.
 */


function httpLoader(fetch) {
  return fetch ? async function (url, options) {
    const opt = (0, _vegaUtil.extend)({}, this.options.http, options),
          type = options && options.response,
          response = await fetch(url, opt);
    return !response.ok ? (0, _vegaUtil.error)(response.status + '' + response.statusText) : (0, _vegaUtil.isFunction)(response[type]) ? response[type]() : response.text();
  } : httpReject;
}
/**
 * Default http request handler that simply rejects.
 */


async function httpReject() {
  (0, _vegaUtil.error)('No HTTP fetch method available.');
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-loader/src/type.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inferType = inferType;
exports.inferTypes = inferTypes;
exports.typeParsers = void 0;

var _vegaUtil = require("vega-util");

var typeParsers = {
  boolean: _vegaUtil.toBoolean,
  integer: _vegaUtil.toNumber,
  number: _vegaUtil.toNumber,
  date: _vegaUtil.toDate,
  string: _vegaUtil.toString,
  unknown: _vegaUtil.identity
};
exports.typeParsers = typeParsers;
var typeTests = [isBoolean, isInteger, isNumber, isDate];
var typeList = ['boolean', 'integer', 'number', 'date'];

function inferType(values, field) {
  if (!values || !values.length) return 'unknown';
  var value,
      i,
      j,
      t = 0,
      n = values.length,
      m = typeTests.length,
      a = typeTests.map(function (_, i) {
    return i + 1;
  });

  for (i = 0, n = values.length; i < n; ++i) {
    value = field ? values[i][field] : values[i];

    for (j = 0; j < m; ++j) {
      if (a[j] && isValid(value) && !typeTests[j](value)) {
        a[j] = 0;
        ++t;
        if (t === typeTests.length) return 'string';
      }
    }
  }

  t = a.reduce(function (u, v) {
    return u === 0 ? v : u;
  }, 0) - 1;
  return typeList[t];
}

function inferTypes(data, fields) {
  return fields.reduce(function (types, field) {
    types[field] = inferType(data, field);
    return types;
  }, {});
} // -- Type Checks ----


function isValid(_) {
  return _ != null && _ === _;
}

function isBoolean(_) {
  return _ === 'true' || _ === 'false' || _ === true || _ === false;
}

function isDate(_) {
  return !isNaN(Date.parse(_));
}

function isNumber(_) {
  return !isNaN(+_) && !(_ instanceof Date);
}

function isInteger(_) {
  return isNumber(_) && (_ = +_) === ~~_;
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/d3-dsv/src/dsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var EOL = {},
    EOF = {},
    QUOTE = 34,
    NEWLINE = 10,
    RETURN = 13;

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function (name, i) {
    return JSON.stringify(name) + ": d[" + i + "]";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function (row, i) {
    return f(object(row), i, columns);
  };
} // Compute unique columns in order of discovery.


function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];
  rows.forEach(function (row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });
  return columns;
}

function pad(value, width) {
  var s = value + "",
      length = s.length;
  return length < width ? new Array(width - length + 1).join(0) + s : s;
}

function formatYear(year) {
  return year < 0 ? "-" + pad(-year, 6) : year > 9999 ? "+" + pad(year, 6) : pad(year, 4);
}

function formatDate(date) {
  var hours = date.getUTCHours(),
      minutes = date.getUTCMinutes(),
      seconds = date.getUTCSeconds(),
      milliseconds = date.getUTCMilliseconds();
  return isNaN(date) ? "Invalid Date" : formatYear(date.getUTCFullYear(), 4) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2) + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z" : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z" : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z" : "");
}

function _default(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      DELIMITER = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert,
        columns,
        rows = parseRows(text, function (row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }

  function parseRows(text, f) {
    var rows = [],
        // output rows
    N = text.length,
        I = 0,
        // current character index
    n = 0,
        // current line number
    t,
        // current token
    eof = N <= 0,
        // current token followed by EOF?
    eol = false; // current token followed by EOL?
    // Strip the trailing newline.

    if (text.charCodeAt(N - 1) === NEWLINE) --N;
    if (text.charCodeAt(N - 1) === RETURN) --N;

    function token() {
      if (eof) return EOF;
      if (eol) return eol = false, EOL; // Unescape quotes.

      var i,
          j = I,
          c;

      if (text.charCodeAt(j) === QUOTE) {
        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);

        if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        }
        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
      } // Find next delimiter or newline.


      while (I < N) {
        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        } else if (c !== DELIMITER) continue;
        return text.slice(j, i);
      } // Return last token before EOF.


      return eof = true, text.slice(j, N);
    }

    while ((t = token()) !== EOF) {
      var row = [];

      while (t !== EOL && t !== EOF) row.push(t), t = token();

      if (f && (row = f(row, n++)) == null) continue;
      rows.push(row);
    }

    return rows;
  }

  function preformatBody(rows, columns) {
    return rows.map(function (row) {
      return columns.map(function (column) {
        return formatValue(row[column]);
      }).join(delimiter);
    });
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }

  function formatBody(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(value) {
    return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\"" : value;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatBody: formatBody,
    formatRows: formatRows
  };
}
},{}],"node_modules/d3-dsv/src/csv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csvFormatRows = exports.csvFormatBody = exports.csvFormat = exports.csvParseRows = exports.csvParse = void 0;

var _dsv = _interopRequireDefault(require("./dsv"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var csv = (0, _dsv.default)(",");
var csvParse = csv.parse;
exports.csvParse = csvParse;
var csvParseRows = csv.parseRows;
exports.csvParseRows = csvParseRows;
var csvFormat = csv.format;
exports.csvFormat = csvFormat;
var csvFormatBody = csv.formatBody;
exports.csvFormatBody = csvFormatBody;
var csvFormatRows = csv.formatRows;
exports.csvFormatRows = csvFormatRows;
},{"./dsv":"node_modules/d3-dsv/src/dsv.js"}],"node_modules/d3-dsv/src/tsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tsvFormatRows = exports.tsvFormatBody = exports.tsvFormat = exports.tsvParseRows = exports.tsvParse = void 0;

var _dsv = _interopRequireDefault(require("./dsv"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tsv = (0, _dsv.default)("\t");
var tsvParse = tsv.parse;
exports.tsvParse = tsvParse;
var tsvParseRows = tsv.parseRows;
exports.tsvParseRows = tsvParseRows;
var tsvFormat = tsv.format;
exports.tsvFormat = tsvFormat;
var tsvFormatBody = tsv.formatBody;
exports.tsvFormatBody = tsvFormatBody;
var tsvFormatRows = tsv.formatRows;
exports.tsvFormatRows = tsvFormatRows;
},{"./dsv":"node_modules/d3-dsv/src/dsv.js"}],"node_modules/d3-dsv/src/autoType.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = autoType;

function autoType(object) {
  for (var key in object) {
    var value = object[key].trim(),
        number;
    if (!value) value = null;else if (value === "true") value = true;else if (value === "false") value = false;else if (value === "NaN") value = NaN;else if (!isNaN(number = +value)) value = number;else if (/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/.test(value)) value = new Date(value);else continue;
    object[key] = value;
  }

  return object;
}
},{}],"node_modules/d3-dsv/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dsvFormat", {
  enumerable: true,
  get: function () {
    return _dsv.default;
  }
});
Object.defineProperty(exports, "csvParse", {
  enumerable: true,
  get: function () {
    return _csv.csvParse;
  }
});
Object.defineProperty(exports, "csvParseRows", {
  enumerable: true,
  get: function () {
    return _csv.csvParseRows;
  }
});
Object.defineProperty(exports, "csvFormat", {
  enumerable: true,
  get: function () {
    return _csv.csvFormat;
  }
});
Object.defineProperty(exports, "csvFormatBody", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatBody;
  }
});
Object.defineProperty(exports, "csvFormatRows", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatRows;
  }
});
Object.defineProperty(exports, "tsvParse", {
  enumerable: true,
  get: function () {
    return _tsv.tsvParse;
  }
});
Object.defineProperty(exports, "tsvParseRows", {
  enumerable: true,
  get: function () {
    return _tsv.tsvParseRows;
  }
});
Object.defineProperty(exports, "tsvFormat", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormat;
  }
});
Object.defineProperty(exports, "tsvFormatBody", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatBody;
  }
});
Object.defineProperty(exports, "tsvFormatRows", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatRows;
  }
});
Object.defineProperty(exports, "autoType", {
  enumerable: true,
  get: function () {
    return _autoType.default;
  }
});

var _dsv = _interopRequireDefault(require("./dsv"));

var _csv = require("./csv");

var _tsv = require("./tsv");

var _autoType = _interopRequireDefault(require("./autoType"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./dsv":"node_modules/d3-dsv/src/dsv.js","./csv":"node_modules/d3-dsv/src/csv.js","./tsv":"node_modules/d3-dsv/src/tsv.js","./autoType":"node_modules/d3-dsv/src/autoType.js"}],"node_modules/vega-loader/src/formats/dsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.delimitedFormat = delimitedFormat;
exports.default = dsv;

var _d3Dsv = require("d3-dsv");

var _vegaUtil = require("vega-util");

function delimitedFormat(delimiter) {
  const parse = function (data, format) {
    const delim = {
      delimiter: delimiter
    };
    return dsv(data, format ? (0, _vegaUtil.extend)(format, delim) : delim);
  };

  parse.responseType = 'text';
  return parse;
}

function dsv(data, format) {
  if (format.header) {
    data = format.header.map(_vegaUtil.stringValue).join(format.delimiter) + '\n' + data;
  }

  return (0, _d3Dsv.dsvFormat)(format.delimiter).parse(data + '');
}

dsv.responseType = 'text';
},{"d3-dsv":"node_modules/d3-dsv/src/index.js","vega-util":"node_modules/vega-util/index.js"}],"../../../../../usr/local/lib/node_modules/parcel/node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"../../../../../usr/local/lib/node_modules/parcel/node_modules/ieee754/index.js":[function(require,module,exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"../../../../../usr/local/lib/node_modules/parcel/node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"../../../../../usr/local/lib/node_modules/parcel/node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"../../../../../usr/local/lib/node_modules/parcel/node_modules/base64-js/index.js","ieee754":"../../../../../usr/local/lib/node_modules/parcel/node_modules/ieee754/index.js","isarray":"../../../../../usr/local/lib/node_modules/parcel/node_modules/isarray/index.js","buffer":"../../../../../usr/local/lib/node_modules/parcel/node_modules/buffer/index.js"}],"node_modules/vega-loader/src/formats/json.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = json;

var _vegaUtil = require("vega-util");

function isBuffer(_) {
  return typeof Buffer === 'function' && (0, _vegaUtil.isFunction)(Buffer.isBuffer) ? Buffer.isBuffer(_) : false;
}

function json(data, format) {
  const prop = format && format.property ? (0, _vegaUtil.field)(format.property) : _vegaUtil.identity;
  return (0, _vegaUtil.isObject)(data) && !isBuffer(data) ? parseJSON(prop(data)) : prop(JSON.parse(data));
}

json.responseType = 'json';

function parseJSON(data, format) {
  return format && format.copy ? JSON.parse(JSON.stringify(data)) : data;
}
},{"vega-util":"node_modules/vega-util/index.js","buffer":"../../../../../usr/local/lib/node_modules/parcel/node_modules/buffer/index.js"}],"node_modules/topojson-client/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/topojson-client/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(transform) {
  if (transform == null) return _identity.default;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function (input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2,
        n = input.length,
        output = new Array(n);
    output[0] = (x0 += input[0]) * kx + dx;
    output[1] = (y0 += input[1]) * ky + dy;

    while (j < n) output[j] = input[j], ++j;

    return output;
  };
}
},{"./identity":"node_modules/topojson-client/src/identity.js"}],"node_modules/topojson-client/src/bbox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology) {
  var t = (0, _transform.default)(topology.transform),
      key,
      x0 = Infinity,
      y0 = x0,
      x1 = -x0,
      y1 = -x0;

  function bboxPoint(p) {
    p = t(p);
    if (p[0] < x0) x0 = p[0];
    if (p[0] > x1) x1 = p[0];
    if (p[1] < y0) y0 = p[1];
    if (p[1] > y1) y1 = p[1];
  }

  function bboxGeometry(o) {
    switch (o.type) {
      case "GeometryCollection":
        o.geometries.forEach(bboxGeometry);
        break;

      case "Point":
        bboxPoint(o.coordinates);
        break;

      case "MultiPoint":
        o.coordinates.forEach(bboxPoint);
        break;
    }
  }

  topology.arcs.forEach(function (arc) {
    var i = -1,
        n = arc.length,
        p;

    while (++i < n) {
      p = t(arc[i], i);
      if (p[0] < x0) x0 = p[0];
      if (p[0] > x1) x1 = p[0];
      if (p[1] < y0) y0 = p[1];
      if (p[1] > y1) y1 = p[1];
    }
  });

  for (key in topology.objects) {
    bboxGeometry(topology.objects[key]);
  }

  return [x0, y0, x1, y1];
}
},{"./transform":"node_modules/topojson-client/src/transform.js"}],"node_modules/topojson-client/src/reverse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, n) {
  var t,
      j = array.length,
      i = j - n;

  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
}
},{}],"node_modules/topojson-client/src/feature.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.feature = feature;
exports.object = object;

var _reverse = _interopRequireDefault(require("./reverse"));

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology, o) {
  return o.type === "GeometryCollection" ? {
    type: "FeatureCollection",
    features: o.geometries.map(function (o) {
      return feature(topology, o);
    })
  } : feature(topology, o);
}

function feature(topology, o) {
  var id = o.id,
      bbox = o.bbox,
      properties = o.properties == null ? {} : o.properties,
      geometry = object(topology, o);
  return id == null && bbox == null ? {
    type: "Feature",
    properties: properties,
    geometry: geometry
  } : bbox == null ? {
    type: "Feature",
    id: id,
    properties: properties,
    geometry: geometry
  } : {
    type: "Feature",
    id: id,
    bbox: bbox,
    properties: properties,
    geometry: geometry
  };
}

function object(topology, o) {
  var transformPoint = (0, _transform.default)(topology.transform),
      arcs = topology.arcs;

  function arc(i, points) {
    if (points.length) points.pop();

    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
      points.push(transformPoint(a[k], k));
    }

    if (i < 0) (0, _reverse.default)(points, n);
  }

  function point(p) {
    return transformPoint(p);
  }

  function line(arcs) {
    var points = [];

    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);

    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.

    return points;
  }

  function ring(arcs) {
    var points = line(arcs);

    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.


    return points;
  }

  function polygon(arcs) {
    return arcs.map(ring);
  }

  function geometry(o) {
    var type = o.type,
        coordinates;

    switch (type) {
      case "GeometryCollection":
        return {
          type: type,
          geometries: o.geometries.map(geometry)
        };

      case "Point":
        coordinates = point(o.coordinates);
        break;

      case "MultiPoint":
        coordinates = o.coordinates.map(point);
        break;

      case "LineString":
        coordinates = line(o.arcs);
        break;

      case "MultiLineString":
        coordinates = o.arcs.map(line);
        break;

      case "Polygon":
        coordinates = polygon(o.arcs);
        break;

      case "MultiPolygon":
        coordinates = o.arcs.map(polygon);
        break;

      default:
        return null;
    }

    return {
      type: type,
      coordinates: coordinates
    };
  }

  return geometry(o);
}
},{"./reverse":"node_modules/topojson-client/src/reverse.js","./transform":"node_modules/topojson-client/src/transform.js"}],"node_modules/topojson-client/src/stitch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(topology, arcs) {
  var stitchedArcs = {},
      fragmentByStart = {},
      fragmentByEnd = {},
      fragments = [],
      emptyIndex = -1; // Stitch empty arcs first, since they may be subsumed by other arcs.

  arcs.forEach(function (i, j) {
    var arc = topology.arcs[i < 0 ? ~i : i],
        t;

    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
    }
  });
  arcs.forEach(function (i) {
    var e = ends(i),
        start = e[0],
        end = e[1],
        f,
        g;

    if (f = fragmentByEnd[start]) {
      delete fragmentByEnd[f.end];
      f.push(i);
      f.end = end;

      if (g = fragmentByStart[end]) {
        delete fragmentByStart[g.start];
        var fg = g === f ? f : f.concat(g);
        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else if (f = fragmentByStart[end]) {
      delete fragmentByStart[f.start];
      f.unshift(i);
      f.start = start;

      if (g = fragmentByEnd[start]) {
        delete fragmentByEnd[g.end];
        var gf = g === f ? f : g.concat(f);
        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else {
      f = [i];
      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
    }
  });

  function ends(i) {
    var arc = topology.arcs[i < 0 ? ~i : i],
        p0 = arc[0],
        p1;
    if (topology.transform) p1 = [0, 0], arc.forEach(function (dp) {
      p1[0] += dp[0], p1[1] += dp[1];
    });else p1 = arc[arc.length - 1];
    return i < 0 ? [p1, p0] : [p0, p1];
  }

  function flush(fragmentByEnd, fragmentByStart) {
    for (var k in fragmentByEnd) {
      var f = fragmentByEnd[k];
      delete fragmentByStart[f.start];
      delete f.start;
      delete f.end;
      f.forEach(function (i) {
        stitchedArcs[i < 0 ? ~i : i] = 1;
      });
      fragments.push(f);
    }
  }

  flush(fragmentByEnd, fragmentByStart);
  flush(fragmentByStart, fragmentByEnd);
  arcs.forEach(function (i) {
    if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
  });
  return fragments;
}
},{}],"node_modules/topojson-client/src/mesh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.meshArcs = meshArcs;

var _feature = require("./feature");

var _stitch = _interopRequireDefault(require("./stitch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology) {
  return (0, _feature.object)(topology, meshArcs.apply(this, arguments));
}

function meshArcs(topology, object, filter) {
  var arcs, i, n;
  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;
  return {
    type: "MultiLineString",
    arcs: (0, _stitch.default)(topology, arcs)
  };
}

function extractArcs(topology, object, filter) {
  var arcs = [],
      geomsByArc = [],
      geom;

  function extract0(i) {
    var j = i < 0 ? ~i : i;
    (geomsByArc[j] || (geomsByArc[j] = [])).push({
      i: i,
      g: geom
    });
  }

  function extract1(arcs) {
    arcs.forEach(extract0);
  }

  function extract2(arcs) {
    arcs.forEach(extract1);
  }

  function extract3(arcs) {
    arcs.forEach(extract2);
  }

  function geometry(o) {
    switch (geom = o, o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);
        break;

      case "LineString":
        extract1(o.arcs);
        break;

      case "MultiLineString":
      case "Polygon":
        extract2(o.arcs);
        break;

      case "MultiPolygon":
        extract3(o.arcs);
        break;
    }
  }

  geometry(object);
  geomsByArc.forEach(filter == null ? function (geoms) {
    arcs.push(geoms[0].i);
  } : function (geoms) {
    if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
  });
  return arcs;
}
},{"./feature":"node_modules/topojson-client/src/feature.js","./stitch":"node_modules/topojson-client/src/stitch.js"}],"node_modules/topojson-client/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.mergeArcs = mergeArcs;

var _feature = require("./feature");

var _stitch = _interopRequireDefault(require("./stitch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function planarRingArea(ring) {
  var i = -1,
      n = ring.length,
      a,
      b = ring[n - 1],
      area = 0;

  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];

  return Math.abs(area); // Note: doubled area!
}

function _default(topology) {
  return (0, _feature.object)(topology, mergeArcs.apply(this, arguments));
}

function mergeArcs(topology, objects) {
  var polygonsByArc = {},
      polygons = [],
      groups = [];
  objects.forEach(geometry);

  function geometry(o) {
    switch (o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);
        break;

      case "Polygon":
        extract(o.arcs);
        break;

      case "MultiPolygon":
        o.arcs.forEach(extract);
        break;
    }
  }

  function extract(polygon) {
    polygon.forEach(function (ring) {
      ring.forEach(function (arc) {
        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
      });
    });
    polygons.push(polygon);
  }

  function area(ring) {
    return planarRingArea((0, _feature.object)(topology, {
      type: "Polygon",
      arcs: [ring]
    }).coordinates[0]);
  }

  polygons.forEach(function (polygon) {
    if (!polygon._) {
      var group = [],
          neighbors = [polygon];
      polygon._ = 1;
      groups.push(group);

      while (polygon = neighbors.pop()) {
        group.push(polygon);
        polygon.forEach(function (ring) {
          ring.forEach(function (arc) {
            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function (polygon) {
              if (!polygon._) {
                polygon._ = 1;
                neighbors.push(polygon);
              }
            });
          });
        });
      }
    }
  });
  polygons.forEach(function (polygon) {
    delete polygon._;
  });
  return {
    type: "MultiPolygon",
    arcs: groups.map(function (polygons) {
      var arcs = [],
          n; // Extract the exterior (unique) arcs.

      polygons.forEach(function (polygon) {
        polygon.forEach(function (ring) {
          ring.forEach(function (arc) {
            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
              arcs.push(arc);
            }
          });
        });
      }); // Stitch the arcs into one or more rings.

      arcs = (0, _stitch.default)(topology, arcs); // If more than one ring is returned,
      // at most one of these rings can be the exterior;
      // choose the one with the greatest absolute area.

      if ((n = arcs.length) > 1) {
        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
          if ((ki = area(arcs[i])) > k) {
            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
          }
        }
      }

      return arcs;
    }).filter(function (arcs) {
      return arcs.length > 0;
    })
  };
}
},{"./feature":"node_modules/topojson-client/src/feature.js","./stitch":"node_modules/topojson-client/src/stitch.js"}],"node_modules/topojson-client/src/bisect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, x) {
  var lo = 0,
      hi = a.length;

  while (lo < hi) {
    var mid = lo + hi >>> 1;
    if (a[mid] < x) lo = mid + 1;else hi = mid;
  }

  return lo;
}
},{}],"node_modules/topojson-client/src/neighbors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _bisect = _interopRequireDefault(require("./bisect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(objects) {
  var indexesByArc = {},
      // arc index -> array of object indexes
  neighbors = objects.map(function () {
    return [];
  });

  function line(arcs, i) {
    arcs.forEach(function (a) {
      if (a < 0) a = ~a;
      var o = indexesByArc[a];
      if (o) o.push(i);else indexesByArc[a] = [i];
    });
  }

  function polygon(arcs, i) {
    arcs.forEach(function (arc) {
      line(arc, i);
    });
  }

  function geometry(o, i) {
    if (o.type === "GeometryCollection") o.geometries.forEach(function (o) {
      geometry(o, i);
    });else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
  }

  var geometryType = {
    LineString: line,
    MultiLineString: polygon,
    Polygon: polygon,
    MultiPolygon: function (arcs, i) {
      arcs.forEach(function (arc) {
        polygon(arc, i);
      });
    }
  };
  objects.forEach(geometry);

  for (var i in indexesByArc) {
    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
      for (var k = j + 1; k < m; ++k) {
        var ij = indexes[j],
            ik = indexes[k],
            n;
        if ((n = neighbors[ij])[i = (0, _bisect.default)(n, ik)] !== ik) n.splice(i, 0, ik);
        if ((n = neighbors[ik])[i = (0, _bisect.default)(n, ij)] !== ij) n.splice(i, 0, ij);
      }
    }
  }

  return neighbors;
}
},{"./bisect":"node_modules/topojson-client/src/bisect.js"}],"node_modules/topojson-client/src/untransform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(transform) {
  if (transform == null) return _identity.default;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function (input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2,
        n = input.length,
        output = new Array(n),
        x1 = Math.round((input[0] - dx) / kx),
        y1 = Math.round((input[1] - dy) / ky);
    output[0] = x1 - x0, x0 = x1;
    output[1] = y1 - y0, y0 = y1;

    while (j < n) output[j] = input[j], ++j;

    return output;
  };
}
},{"./identity":"node_modules/topojson-client/src/identity.js"}],"node_modules/topojson-client/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _bbox = _interopRequireDefault(require("./bbox"));

var _untransform = _interopRequireDefault(require("./untransform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology, transform) {
  if (topology.transform) throw new Error("already quantized");

  if (!transform || !transform.scale) {
    if (!((n = Math.floor(transform)) >= 2)) throw new Error("n must be ≥2");
    box = topology.bbox || (0, _bbox.default)(topology);
    var x0 = box[0],
        y0 = box[1],
        x1 = box[2],
        y1 = box[3],
        n;
    transform = {
      scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1],
      translate: [x0, y0]
    };
  } else {
    box = topology.bbox;
  }

  var t = (0, _untransform.default)(transform),
      box,
      key,
      inputs = topology.objects,
      outputs = {};

  function quantizePoint(point) {
    return t(point);
  }

  function quantizeGeometry(input) {
    var output;

    switch (input.type) {
      case "GeometryCollection":
        output = {
          type: "GeometryCollection",
          geometries: input.geometries.map(quantizeGeometry)
        };
        break;

      case "Point":
        output = {
          type: "Point",
          coordinates: quantizePoint(input.coordinates)
        };
        break;

      case "MultiPoint":
        output = {
          type: "MultiPoint",
          coordinates: input.coordinates.map(quantizePoint)
        };
        break;

      default:
        return input;
    }

    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function quantizeArc(input) {
    var i = 0,
        j = 1,
        n = input.length,
        p,
        output = new Array(n); // pessimistic

    output[0] = t(input[0], 0);

    while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points


    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points

    output.length = j;
    return output;
  }

  for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);

  return {
    type: "Topology",
    bbox: box,
    transform: transform,
    objects: outputs,
    arcs: topology.arcs.map(quantizeArc)
  };
}
},{"./bbox":"node_modules/topojson-client/src/bbox.js","./untransform":"node_modules/topojson-client/src/untransform.js"}],"node_modules/topojson-client/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bbox", {
  enumerable: true,
  get: function () {
    return _bbox.default;
  }
});
Object.defineProperty(exports, "feature", {
  enumerable: true,
  get: function () {
    return _feature.default;
  }
});
Object.defineProperty(exports, "mesh", {
  enumerable: true,
  get: function () {
    return _mesh.default;
  }
});
Object.defineProperty(exports, "meshArcs", {
  enumerable: true,
  get: function () {
    return _mesh.meshArcs;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "mergeArcs", {
  enumerable: true,
  get: function () {
    return _merge.mergeArcs;
  }
});
Object.defineProperty(exports, "neighbors", {
  enumerable: true,
  get: function () {
    return _neighbors.default;
  }
});
Object.defineProperty(exports, "quantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "transform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});
Object.defineProperty(exports, "untransform", {
  enumerable: true,
  get: function () {
    return _untransform.default;
  }
});

var _bbox = _interopRequireDefault(require("./bbox.js"));

var _feature = _interopRequireDefault(require("./feature.js"));

var _mesh = _interopRequireWildcard(require("./mesh.js"));

var _merge = _interopRequireWildcard(require("./merge.js"));

var _neighbors = _interopRequireDefault(require("./neighbors.js"));

var _quantize = _interopRequireDefault(require("./quantize.js"));

var _transform = _interopRequireDefault(require("./transform.js"));

var _untransform = _interopRequireDefault(require("./untransform.js"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./bbox.js":"node_modules/topojson-client/src/bbox.js","./feature.js":"node_modules/topojson-client/src/feature.js","./mesh.js":"node_modules/topojson-client/src/mesh.js","./merge.js":"node_modules/topojson-client/src/merge.js","./neighbors.js":"node_modules/topojson-client/src/neighbors.js","./quantize.js":"node_modules/topojson-client/src/quantize.js","./transform.js":"node_modules/topojson-client/src/transform.js","./untransform.js":"node_modules/topojson-client/src/untransform.js"}],"node_modules/vega-loader/src/formats/topojson.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = topojson;

var _json = _interopRequireDefault(require("./json"));

var _topojsonClient = require("topojson-client");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const filters = {
  interior: (a, b) => a !== b,
  exterior: (a, b) => a === b
};

function topojson(data, format) {
  let method, object, property, filter;
  data = (0, _json.default)(data, format);

  if (format && format.feature) {
    method = _topojsonClient.feature;
    property = format.feature;
  } else if (format && format.mesh) {
    method = _topojsonClient.mesh;
    property = format.mesh;
    filter = filters[format.filter];
  } else {
    (0, _vegaUtil.error)('Missing TopoJSON feature or mesh parameter.');
  }

  object = (object = data.objects[property]) ? method(data, object, filter) : (0, _vegaUtil.error)('Invalid TopoJSON object: ' + property);
  return object && object.features || [object];
}

topojson.responseType = 'json';
},{"./json":"node_modules/vega-loader/src/formats/json.js","topojson-client":"node_modules/topojson-client/src/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-loader/src/formats/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formats = formats;
exports.responseType = responseType;
exports.format = void 0;

var _dsv = _interopRequireWildcard(require("./dsv"));

var _json = _interopRequireDefault(require("./json"));

var _topojson = _interopRequireDefault(require("./topojson"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const format = {
  dsv: _dsv.default,
  csv: (0, _dsv.delimitedFormat)(','),
  tsv: (0, _dsv.delimitedFormat)('\t'),
  json: _json.default,
  topojson: _topojson.default
};
exports.format = format;

function formats(name, reader) {
  if (arguments.length > 1) {
    format[name] = reader;
    return this;
  } else {
    return (0, _vegaUtil.hasOwnProperty)(format, name) ? format[name] : null;
  }
}

function responseType(type) {
  const f = formats(type);
  return f && f.responseType || 'text';
}
},{"./dsv":"node_modules/vega-loader/src/formats/dsv.js","./json":"node_modules/vega-loader/src/formats/json.js","./topojson":"node_modules/vega-loader/src/formats/topojson.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/d3-time/src/interval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = newInterval;
var t0 = new Date(),
    t1 = new Date();

function newInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = new Date(+date)), date;
  }

  interval.floor = interval;

  interval.ceil = function (date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function (date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function (date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function (start, stop, step) {
    var range = [],
        previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

    do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);

    return range;
  };

  interval.filter = function (test) {
    return newInterval(function (date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function (date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

        }
      }
    });
  };

  if (count) {
    interval.count = function (start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function (step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
        return field(d) % step === 0;
      } : function (d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }

  return interval;
}
},{}],"node_modules/d3-time/src/millisecond.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.milliseconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var millisecond = (0, _interval.default)(function () {// noop
}, function (date, step) {
  date.setTime(+date + step);
}, function (start, end) {
  return end - start;
}); // An optimized implementation for this simple case.

millisecond.every = function (k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return (0, _interval.default)(function (date) {
    date.setTime(Math.floor(date / k) * k);
  }, function (date, step) {
    date.setTime(+date + step * k);
  }, function (start, end) {
    return (end - start) / k;
  });
};

var _default = millisecond;
exports.default = _default;
var milliseconds = millisecond.range;
exports.milliseconds = milliseconds;
},{"./interval":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/duration.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.durationWeek = exports.durationDay = exports.durationHour = exports.durationMinute = exports.durationSecond = void 0;
var durationSecond = 1e3;
exports.durationSecond = durationSecond;
var durationMinute = 6e4;
exports.durationMinute = durationMinute;
var durationHour = 36e5;
exports.durationHour = durationHour;
var durationDay = 864e5;
exports.durationDay = durationDay;
var durationWeek = 6048e5;
exports.durationWeek = durationWeek;
},{}],"node_modules/d3-time/src/second.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var second = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds());
}, function (date, step) {
  date.setTime(+date + step * _duration.durationSecond);
}, function (start, end) {
  return (end - start) / _duration.durationSecond;
}, function (date) {
  return date.getUTCSeconds();
});
var _default = second;
exports.default = _default;
var seconds = second.range;
exports.seconds = seconds;
},{"./interval":"node_modules/d3-time/src/interval.js","./duration":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/minute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var minute = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * _duration.durationSecond);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getMinutes();
});
var _default = minute;
exports.default = _default;
var minutes = minute.range;
exports.minutes = minutes;
},{"./interval":"node_modules/d3-time/src/interval.js","./duration":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/hour.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hour = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * _duration.durationSecond - date.getMinutes() * _duration.durationMinute);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getHours();
});
var _default = hour;
exports.default = _default;
var hours = hour.range;
exports.hours = hours;
},{"./interval":"node_modules/d3-time/src/interval.js","./duration":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/day.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.days = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var day = (0, _interval.default)(function (date) {
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setDate(date.getDate() + step);
}, function (start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationDay;
}, function (date) {
  return date.getDate() - 1;
});
var _default = day;
exports.default = _default;
var days = day.range;
exports.days = days;
},{"./interval":"node_modules/d3-time/src/interval.js","./duration":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/week.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saturdays = exports.fridays = exports.thursdays = exports.wednesdays = exports.tuesdays = exports.mondays = exports.sundays = exports.saturday = exports.friday = exports.thursday = exports.wednesday = exports.tuesday = exports.monday = exports.sunday = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function weekday(i) {
  return (0, _interval.default)(function (date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationWeek;
  });
}

var sunday = weekday(0);
exports.sunday = sunday;
var monday = weekday(1);
exports.monday = monday;
var tuesday = weekday(2);
exports.tuesday = tuesday;
var wednesday = weekday(3);
exports.wednesday = wednesday;
var thursday = weekday(4);
exports.thursday = thursday;
var friday = weekday(5);
exports.friday = friday;
var saturday = weekday(6);
exports.saturday = saturday;
var sundays = sunday.range;
exports.sundays = sundays;
var mondays = monday.range;
exports.mondays = mondays;
var tuesdays = tuesday.range;
exports.tuesdays = tuesdays;
var wednesdays = wednesday.range;
exports.wednesdays = wednesdays;
var thursdays = thursday.range;
exports.thursdays = thursdays;
var fridays = friday.range;
exports.fridays = fridays;
var saturdays = saturday.range;
exports.saturdays = saturdays;
},{"./interval":"node_modules/d3-time/src/interval.js","./duration":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/month.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.months = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var month = (0, _interval.default)(function (date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setMonth(date.getMonth() + step);
}, function (start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function (date) {
  return date.getMonth();
});
var _default = month;
exports.default = _default;
var months = month.range;
exports.months = months;
},{"./interval":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/year.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.years = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var year = (0, _interval.default)(function (date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function (start, end) {
  return end.getFullYear() - start.getFullYear();
}, function (date) {
  return date.getFullYear();
}); // An optimized implementation for this simple case.

year.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var _default = year;
exports.default = _default;
var years = year.range;
exports.years = years;
},{"./interval":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/utcMinute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMinutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMinute = (0, _interval.default)(function (date) {
  date.setUTCSeconds(0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getUTCMinutes();
});
var _default = utcMinute;
exports.default = _default;
var utcMinutes = utcMinute.range;
exports.utcMinutes = utcMinutes;
},{"./interval":"node_modules/d3-time/src/interval.js","./duration":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/utcHour.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcHours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcHour = (0, _interval.default)(function (date) {
  date.setUTCMinutes(0, 0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getUTCHours();
});
var _default = utcHour;
exports.default = _default;
var utcHours = utcHour.range;
exports.utcHours = utcHours;
},{"./interval":"node_modules/d3-time/src/interval.js","./duration":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/utcDay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcDays = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcDay = (0, _interval.default)(function (date) {
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function (start, end) {
  return (end - start) / _duration.durationDay;
}, function (date) {
  return date.getUTCDate() - 1;
});
var _default = utcDay;
exports.default = _default;
var utcDays = utcDay.range;
exports.utcDays = utcDays;
},{"./interval":"node_modules/d3-time/src/interval.js","./duration":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/utcWeek.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcSaturdays = exports.utcFridays = exports.utcThursdays = exports.utcWednesdays = exports.utcTuesdays = exports.utcMondays = exports.utcSundays = exports.utcSaturday = exports.utcFriday = exports.utcThursday = exports.utcWednesday = exports.utcTuesday = exports.utcMonday = exports.utcSunday = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function utcWeekday(i) {
  return (0, _interval.default)(function (date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function (start, end) {
    return (end - start) / _duration.durationWeek;
  });
}

var utcSunday = utcWeekday(0);
exports.utcSunday = utcSunday;
var utcMonday = utcWeekday(1);
exports.utcMonday = utcMonday;
var utcTuesday = utcWeekday(2);
exports.utcTuesday = utcTuesday;
var utcWednesday = utcWeekday(3);
exports.utcWednesday = utcWednesday;
var utcThursday = utcWeekday(4);
exports.utcThursday = utcThursday;
var utcFriday = utcWeekday(5);
exports.utcFriday = utcFriday;
var utcSaturday = utcWeekday(6);
exports.utcSaturday = utcSaturday;
var utcSundays = utcSunday.range;
exports.utcSundays = utcSundays;
var utcMondays = utcMonday.range;
exports.utcMondays = utcMondays;
var utcTuesdays = utcTuesday.range;
exports.utcTuesdays = utcTuesdays;
var utcWednesdays = utcWednesday.range;
exports.utcWednesdays = utcWednesdays;
var utcThursdays = utcThursday.range;
exports.utcThursdays = utcThursdays;
var utcFridays = utcFriday.range;
exports.utcFridays = utcFridays;
var utcSaturdays = utcSaturday.range;
exports.utcSaturdays = utcSaturdays;
},{"./interval":"node_modules/d3-time/src/interval.js","./duration":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/utcMonth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMonths = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMonth = (0, _interval.default)(function (date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function (start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function (date) {
  return date.getUTCMonth();
});
var _default = utcMonth;
exports.default = _default;
var utcMonths = utcMonth.range;
exports.utcMonths = utcMonths;
},{"./interval":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/utcYear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcYears = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcYear = (0, _interval.default)(function (date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function (start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function (date) {
  return date.getUTCFullYear();
}); // An optimized implementation for this simple case.

utcYear.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

var _default = utcYear;
exports.default = _default;
var utcYears = utcYear.range;
exports.utcYears = utcYears;
},{"./interval":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeInterval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});
Object.defineProperty(exports, "timeMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "timeMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "utcMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "utcMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "timeSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "timeSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "utcSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "utcSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "timeMinute", {
  enumerable: true,
  get: function () {
    return _minute.default;
  }
});
Object.defineProperty(exports, "timeMinutes", {
  enumerable: true,
  get: function () {
    return _minute.minutes;
  }
});
Object.defineProperty(exports, "timeHour", {
  enumerable: true,
  get: function () {
    return _hour.default;
  }
});
Object.defineProperty(exports, "timeHours", {
  enumerable: true,
  get: function () {
    return _hour.hours;
  }
});
Object.defineProperty(exports, "timeDay", {
  enumerable: true,
  get: function () {
    return _day.default;
  }
});
Object.defineProperty(exports, "timeDays", {
  enumerable: true,
  get: function () {
    return _day.days;
  }
});
Object.defineProperty(exports, "timeWeek", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeWeeks", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeSunday", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeSundays", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeMonday", {
  enumerable: true,
  get: function () {
    return _week.monday;
  }
});
Object.defineProperty(exports, "timeMondays", {
  enumerable: true,
  get: function () {
    return _week.mondays;
  }
});
Object.defineProperty(exports, "timeTuesday", {
  enumerable: true,
  get: function () {
    return _week.tuesday;
  }
});
Object.defineProperty(exports, "timeTuesdays", {
  enumerable: true,
  get: function () {
    return _week.tuesdays;
  }
});
Object.defineProperty(exports, "timeWednesday", {
  enumerable: true,
  get: function () {
    return _week.wednesday;
  }
});
Object.defineProperty(exports, "timeWednesdays", {
  enumerable: true,
  get: function () {
    return _week.wednesdays;
  }
});
Object.defineProperty(exports, "timeThursday", {
  enumerable: true,
  get: function () {
    return _week.thursday;
  }
});
Object.defineProperty(exports, "timeThursdays", {
  enumerable: true,
  get: function () {
    return _week.thursdays;
  }
});
Object.defineProperty(exports, "timeFriday", {
  enumerable: true,
  get: function () {
    return _week.friday;
  }
});
Object.defineProperty(exports, "timeFridays", {
  enumerable: true,
  get: function () {
    return _week.fridays;
  }
});
Object.defineProperty(exports, "timeSaturday", {
  enumerable: true,
  get: function () {
    return _week.saturday;
  }
});
Object.defineProperty(exports, "timeSaturdays", {
  enumerable: true,
  get: function () {
    return _week.saturdays;
  }
});
Object.defineProperty(exports, "timeMonth", {
  enumerable: true,
  get: function () {
    return _month.default;
  }
});
Object.defineProperty(exports, "timeMonths", {
  enumerable: true,
  get: function () {
    return _month.months;
  }
});
Object.defineProperty(exports, "timeYear", {
  enumerable: true,
  get: function () {
    return _year.default;
  }
});
Object.defineProperty(exports, "timeYears", {
  enumerable: true,
  get: function () {
    return _year.years;
  }
});
Object.defineProperty(exports, "utcMinute", {
  enumerable: true,
  get: function () {
    return _utcMinute.default;
  }
});
Object.defineProperty(exports, "utcMinutes", {
  enumerable: true,
  get: function () {
    return _utcMinute.utcMinutes;
  }
});
Object.defineProperty(exports, "utcHour", {
  enumerable: true,
  get: function () {
    return _utcHour.default;
  }
});
Object.defineProperty(exports, "utcHours", {
  enumerable: true,
  get: function () {
    return _utcHour.utcHours;
  }
});
Object.defineProperty(exports, "utcDay", {
  enumerable: true,
  get: function () {
    return _utcDay.default;
  }
});
Object.defineProperty(exports, "utcDays", {
  enumerable: true,
  get: function () {
    return _utcDay.utcDays;
  }
});
Object.defineProperty(exports, "utcWeek", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcWeeks", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcSunday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcSundays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcMonday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMonday;
  }
});
Object.defineProperty(exports, "utcMondays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMondays;
  }
});
Object.defineProperty(exports, "utcTuesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesday;
  }
});
Object.defineProperty(exports, "utcTuesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesdays;
  }
});
Object.defineProperty(exports, "utcWednesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesday;
  }
});
Object.defineProperty(exports, "utcWednesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesdays;
  }
});
Object.defineProperty(exports, "utcThursday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursday;
  }
});
Object.defineProperty(exports, "utcThursdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursdays;
  }
});
Object.defineProperty(exports, "utcFriday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFriday;
  }
});
Object.defineProperty(exports, "utcFridays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFridays;
  }
});
Object.defineProperty(exports, "utcSaturday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturday;
  }
});
Object.defineProperty(exports, "utcSaturdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturdays;
  }
});
Object.defineProperty(exports, "utcMonth", {
  enumerable: true,
  get: function () {
    return _utcMonth.default;
  }
});
Object.defineProperty(exports, "utcMonths", {
  enumerable: true,
  get: function () {
    return _utcMonth.utcMonths;
  }
});
Object.defineProperty(exports, "utcYear", {
  enumerable: true,
  get: function () {
    return _utcYear.default;
  }
});
Object.defineProperty(exports, "utcYears", {
  enumerable: true,
  get: function () {
    return _utcYear.utcYears;
  }
});

var _interval = _interopRequireDefault(require("./interval"));

var _millisecond = _interopRequireWildcard(require("./millisecond"));

var _second = _interopRequireWildcard(require("./second"));

var _minute = _interopRequireWildcard(require("./minute"));

var _hour = _interopRequireWildcard(require("./hour"));

var _day = _interopRequireWildcard(require("./day"));

var _week = require("./week");

var _month = _interopRequireWildcard(require("./month"));

var _year = _interopRequireWildcard(require("./year"));

var _utcMinute = _interopRequireWildcard(require("./utcMinute"));

var _utcHour = _interopRequireWildcard(require("./utcHour"));

var _utcDay = _interopRequireWildcard(require("./utcDay"));

var _utcWeek = require("./utcWeek");

var _utcMonth = _interopRequireWildcard(require("./utcMonth"));

var _utcYear = _interopRequireWildcard(require("./utcYear"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./interval":"node_modules/d3-time/src/interval.js","./millisecond":"node_modules/d3-time/src/millisecond.js","./second":"node_modules/d3-time/src/second.js","./minute":"node_modules/d3-time/src/minute.js","./hour":"node_modules/d3-time/src/hour.js","./day":"node_modules/d3-time/src/day.js","./week":"node_modules/d3-time/src/week.js","./month":"node_modules/d3-time/src/month.js","./year":"node_modules/d3-time/src/year.js","./utcMinute":"node_modules/d3-time/src/utcMinute.js","./utcHour":"node_modules/d3-time/src/utcHour.js","./utcDay":"node_modules/d3-time/src/utcDay.js","./utcWeek":"node_modules/d3-time/src/utcWeek.js","./utcMonth":"node_modules/d3-time/src/utcMonth.js","./utcYear":"node_modules/d3-time/src/utcYear.js"}],"node_modules/d3-time-format/src/locale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatLocale;

var _d3Time = require("d3-time");

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }

  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }

  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newYear(y) {
  return {
    y: y,
    m: 0,
    d: 1,
    H: 0,
    M: 0,
    S: 0,
    L: 0
  };
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;
  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  }; // These recursive directive definitions must be deferred.

  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function (date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;
      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, newDate) {
    return function (string) {
      var d = newYear(1900),
          i = parseSpecifier(d, specifier, string += "", 0),
          week,
          day;
      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

      if ("Q" in d) return new Date(d.Q); // The am-pm flag is 0 for AM, and 1 for PM.

      if ("p" in d) d.H = d.H % 12 + d.p * 12; // Convert day-of-week and week-of-year to day-of-year.

      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;

        if ("Z" in d) {
          week = utcDate(newYear(d.y)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? _d3Time.utcMonday.ceil(week) : (0, _d3Time.utcMonday)(week);
          week = _d3Time.utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = newDate(newYear(d.y)), day = week.getDay();
          week = day > 4 || day === 0 ? _d3Time.timeMonday.ceil(week) : (0, _d3Time.timeMonday)(week);
          week = _d3Time.timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      } // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.


      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      } // Otherwise, all fields are in local time.


      return newDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);

      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  return {
    format: function (specifier) {
      var f = newFormat(specifier += "", formats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    parse: function (specifier) {
      var p = newParse(specifier += "", localDate);

      p.toString = function () {
        return specifier;
      };

      return p;
    },
    utcFormat: function (specifier) {
      var f = newFormat(specifier += "", utcFormats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    utcParse: function (specifier) {
      var p = newParse(specifier, utcDate);

      p.toString = function () {
        return specifier;
      };

      return p;
    }
  };
}

var pads = {
  "-": "",
  "_": " ",
  "0": "0"
},
    numberRe = /^\s*\d+/,
    // note: ignores next directive
percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {},
      i = -1,
      n = names.length;

  while (++i < n) map[names[i].toLowerCase()] = i;

  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0] * 1000, i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + _d3Time.timeDay.count((0, _d3Time.timeYear)(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(_d3Time.timeSunday.count((0, _d3Time.timeYear)(d), d), p, 2);
}

function formatWeekNumberISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? (0, _d3Time.timeThursday)(d) : _d3Time.timeThursday.ceil(d);
  return pad(_d3Time.timeThursday.count((0, _d3Time.timeYear)(d), d) + ((0, _d3Time.timeYear)(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(_d3Time.timeMonday.count((0, _d3Time.timeYear)(d), d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + _d3Time.utcDay.count((0, _d3Time.utcYear)(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(_d3Time.utcSunday.count((0, _d3Time.utcYear)(d), d), p, 2);
}

function formatUTCWeekNumberISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? (0, _d3Time.utcThursday)(d) : _d3Time.utcThursday.ceil(d);
  return pad(_d3Time.utcThursday.count((0, _d3Time.utcYear)(d), d) + ((0, _d3Time.utcYear)(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(_d3Time.utcMonday.count((0, _d3Time.utcYear)(d), d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}
},{"d3-time":"node_modules/d3-time/src/index.js"}],"node_modules/d3-time-format/src/defaultLocale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.utcParse = exports.utcFormat = exports.timeParse = exports.timeFormat = void 0;

var _locale = _interopRequireDefault(require("./locale"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var timeFormat;
exports.timeFormat = timeFormat;
var timeParse;
exports.timeParse = timeParse;
var utcFormat;
exports.utcFormat = utcFormat;
var utcParse;
exports.utcParse = utcParse;
defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.timeFormat = timeFormat = locale.format;
  exports.timeParse = timeParse = locale.parse;
  exports.utcFormat = utcFormat = locale.utcFormat;
  exports.utcParse = utcParse = locale.utcParse;
  return locale;
}
},{"./locale":"node_modules/d3-time-format/src/locale.js"}],"node_modules/d3-time-format/src/isoFormat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.isoSpecifier = void 0;

var _defaultLocale = require("./defaultLocale");

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
exports.isoSpecifier = isoSpecifier;

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString ? formatIsoNative : (0, _defaultLocale.utcFormat)(isoSpecifier);
var _default = formatIso;
exports.default = _default;
},{"./defaultLocale":"node_modules/d3-time-format/src/defaultLocale.js"}],"node_modules/d3-time-format/src/isoParse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isoFormat = require("./isoFormat");

var _defaultLocale = require("./defaultLocale");

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : (0, _defaultLocale.utcParse)(_isoFormat.isoSpecifier);
var _default = parseIso;
exports.default = _default;
},{"./isoFormat":"node_modules/d3-time-format/src/isoFormat.js","./defaultLocale":"node_modules/d3-time-format/src/defaultLocale.js"}],"node_modules/d3-time-format/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeFormatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "timeFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeFormat;
  }
});
Object.defineProperty(exports, "timeParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeParse;
  }
});
Object.defineProperty(exports, "utcFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcFormat;
  }
});
Object.defineProperty(exports, "utcParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcParse;
  }
});
Object.defineProperty(exports, "timeFormatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "isoFormat", {
  enumerable: true,
  get: function () {
    return _isoFormat.default;
  }
});
Object.defineProperty(exports, "isoParse", {
  enumerable: true,
  get: function () {
    return _isoParse.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale"));

var _locale = _interopRequireDefault(require("./locale"));

var _isoFormat = _interopRequireDefault(require("./isoFormat"));

var _isoParse = _interopRequireDefault(require("./isoParse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./defaultLocale":"node_modules/d3-time-format/src/defaultLocale.js","./locale":"node_modules/d3-time-format/src/locale.js","./isoFormat":"node_modules/d3-time-format/src/isoFormat.js","./isoParse":"node_modules/d3-time-format/src/isoParse.js"}],"node_modules/vega-loader/src/read.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _type = require("./type");

var _index = require("./formats/index");

var _vegaUtil = require("vega-util");

var _d3TimeFormat = require("d3-time-format");

function _default(data, schema, dateParse) {
  schema = schema || {};
  const reader = (0, _index.formats)(schema.type || 'json');
  if (!reader) (0, _vegaUtil.error)('Unknown data format type: ' + schema.type);
  data = reader(data, schema);
  if (schema.parse) parse(data, schema.parse, dateParse);
  if ((0, _vegaUtil.hasOwnProperty)(data, 'columns')) delete data.columns;
  return data;
}

function parse(data, types, dateParse) {
  if (!data.length) return; // early exit for empty data

  dateParse = dateParse || _d3TimeFormat.timeParse;
  var fields = data.columns || Object.keys(data[0]),
      parsers,
      datum,
      field,
      i,
      j,
      n,
      m;
  if (types === 'auto') types = (0, _type.inferTypes)(data, fields);
  fields = Object.keys(types);
  parsers = fields.map(function (field) {
    var type = types[field],
        parts,
        pattern;

    if (type && (type.indexOf('date:') === 0 || type.indexOf('utc:') === 0)) {
      parts = type.split(/:(.+)?/, 2); // split on first :

      pattern = parts[1];

      if (pattern[0] === '\'' && pattern[pattern.length - 1] === '\'' || pattern[0] === '"' && pattern[pattern.length - 1] === '"') {
        pattern = pattern.slice(1, -1);
      }

      return parts[0] === 'utc' ? (0, _d3TimeFormat.utcParse)(pattern) : dateParse(pattern);
    }

    if (!_type.typeParsers[type]) {
      throw Error('Illegal format pattern: ' + field + ':' + type);
    }

    return _type.typeParsers[type];
  });

  for (i = 0, n = data.length, m = fields.length; i < n; ++i) {
    datum = data[i];

    for (j = 0; j < m; ++j) {
      field = fields[j];
      datum[field] = parsers[j](datum[field]);
    }
  }
}
},{"./type":"node_modules/vega-loader/src/type.js","./formats/index":"node_modules/vega-loader/src/formats/index.js","vega-util":"node_modules/vega-util/index.js","d3-time-format":"node_modules/d3-time-format/src/index.js"}],"node_modules/vega-loader/index.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "read", {
  enumerable: true,
  get: function () {
    return _read.default;
  }
});
Object.defineProperty(exports, "inferType", {
  enumerable: true,
  get: function () {
    return _type.inferType;
  }
});
Object.defineProperty(exports, "inferTypes", {
  enumerable: true,
  get: function () {
    return _type.inferTypes;
  }
});
Object.defineProperty(exports, "typeParsers", {
  enumerable: true,
  get: function () {
    return _type.typeParsers;
  }
});
Object.defineProperty(exports, "format", {
  enumerable: true,
  get: function () {
    return _index.format;
  }
});
Object.defineProperty(exports, "formats", {
  enumerable: true,
  get: function () {
    return _index.formats;
  }
});
Object.defineProperty(exports, "responseType", {
  enumerable: true,
  get: function () {
    return _index.responseType;
  }
});
exports.loader = void 0;

var _loader = _interopRequireDefault(require("./src/loader"));

var _read = _interopRequireDefault(require("./src/read"));

var _type = require("./src/type");

var _index = require("./src/formats/index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var loader = (0, _loader.default)(typeof fetch !== 'undefined' && fetch, // use built-in fetch API
null // no file system access
);
exports.loader = loader;
},{"./src/loader":"node_modules/vega-loader/src/loader.js","./src/read":"node_modules/vega-loader/src/read.js","./src/type":"node_modules/vega-loader/src/type.js","./src/formats/index":"node_modules/vega-loader/src/formats/index.js"}],"node_modules/vega-dataflow/src/dataflow/load.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ingest = ingest;
exports.request = request;
exports.preload = preload;
exports.parse = void 0;

var _vegaLoader = require("vega-loader");

var _vegaUtil = require("vega-util");

const parse = _vegaLoader.read;
/**
 * Ingests new data into the dataflow. First parses the data using the
 * vega-loader read method, then pulses a changeset to the target operator.
 * @param {Operator} target - The Operator to target with ingested data,
 *   typically a Collect transform instance.
 * @param {*} data - The input data, prior to parsing. For JSON this may
 *   be a string or an object. For CSV, TSV, etc should be a string.
 * @param {object} format - The data format description for parsing
 *   loaded data. This object is passed to the vega-loader read method.
 * @returns {Dataflow}
 */

exports.parse = parse;

function ingest(target, data, format) {
  return this.pulse(target, this.changeset().insert(parse(data, format)));
}
/**
 * Request data from an external source, parse it, and return a Promise.
 * @param {string} url - The URL from which to load the data. This string
 *   is passed to the vega-loader load method.
 * @param {object} [format] - The data format description for parsing
 *   loaded data. This object is passed to the vega-loader read method.
 * @return {Promise} A Promise that resolves upon completion of the request.
 *   The resolved object contains the following properties:
 *   - data: an array of parsed data (or null upon error)
 *   - status: a code for success (0), load fail (-1), or parse fail (-2)
 */


async function request(url, format) {
  const df = this;
  let status = 0,
      data;

  try {
    data = await df.loader().load(url, {
      context: 'dataflow',
      response: (0, _vegaLoader.responseType)(format && format.type)
    });

    try {
      data = parse(data, format);
    } catch (err) {
      status = -2;
      df.warn('Data ingestion failed', url, err);
    }
  } catch (err) {
    status = -1;
    df.warn('Loading failed', url, err);
  }

  return {
    data,
    status
  };
}

async function preload(target, url, format) {
  const df = this,
        pending = df._pending || loadPending(df);
  pending.requests += 1;
  const res = await df.request(url, format);
  df.pulse(target, df.changeset().remove(_vegaUtil.truthy).insert(res.data || []));
  pending.done();
  return res;
}

function loadPending(df) {
  var pending = new Promise(function (a) {
    accept = a;
  }),
      accept;
  pending.requests = 0;

  pending.done = function () {
    if (--pending.requests === 0) {
      df._pending = null;
      accept(df);
    }
  };

  return df._pending = pending;
}
},{"vega-loader":"node_modules/vega-loader/index.browser.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/dataflow/on.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _Operator = _interopRequireDefault(require("../Operator"));

var _ChangeSet = require("../ChangeSet");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SKIP = {
  skip: true
};
/**
 * Perform operator updates in response to events. Applies an
 * update function to compute a new operator value. If the update function
 * returns a {@link ChangeSet}, the operator will be pulsed with those tuple
 * changes. Otherwise, the operator value will be updated to the return value.
 * @param {EventStream|Operator} source - The event source to react to.
 *   This argument can be either an EventStream or an Operator.
 * @param {Operator|function(object):Operator} target - The operator to update.
 *   This argument can either be an Operator instance or (if the source
 *   argument is an EventStream), a function that accepts an event object as
 *   input and returns an Operator to target.
 * @param {function(Parameters,Event): *} [update] - Optional update function
 *   to compute the new operator value, or a literal value to set. Update
 *   functions expect to receive a parameter object and event as arguments.
 *   This function can either return a new operator value or (if the source
 *   argument is an EventStream) a {@link ChangeSet} instance to pulse
 *   the target operator with tuple changes.
 * @param {object} [params] - The update function parameters.
 * @param {object} [options] - Additional options hash. If not overridden,
 *   updated operators will be skipped by default.
 * @param {boolean} [options.skip] - If true, the operator will
 *  be skipped: it will not be evaluated, but its dependents will be.
 * @param {boolean} [options.force] - If true, the operator will
 *   be re-evaluated even if its value has not changed.
 * @return {Dataflow}
 */

function _default(source, target, update, params, options) {
  var fn = source instanceof _Operator.default ? onOperator : onStream;
  fn(this, source, target, update, params, options);
  return this;
}

function onStream(df, stream, target, update, params, options) {
  var opt = (0, _vegaUtil.extend)({}, options, SKIP),
      func,
      op;
  if (!(0, _vegaUtil.isFunction)(target)) target = (0, _vegaUtil.constant)(target);

  if (update === undefined) {
    func = e => df.touch(target(e));
  } else if ((0, _vegaUtil.isFunction)(update)) {
    op = new _Operator.default(null, update, params, false);

    func = e => {
      op.evaluate(e);
      const t = target(e),
            v = op.value;
      (0, _ChangeSet.isChangeSet)(v) ? df.pulse(t, v, options) : df.update(t, v, opt);
    };
  } else {
    func = e => df.update(target(e), update, opt);
  }

  stream.apply(func);
}

function onOperator(df, source, target, update, params, options) {
  if (update === undefined) {
    source.targets().add(target);
  } else {
    const opt = options || {},
          op = new _Operator.default(null, updater(target, update), params, false);
    op.modified(opt.force);
    op.rank = source.rank; // immediately follow source

    source.targets().add(op); // add dependency

    if (target) {
      op.skip(true); // skip first invocation

      op.value = target.value; // initialize value

      op.targets().add(target); // chain dependencies

      df.connect(target, [op]); // rerank as needed, #1672
    }
  }
}

function updater(target, update) {
  update = (0, _vegaUtil.isFunction)(update) ? update : (0, _vegaUtil.constant)(update);
  return target ? function (_, pulse) {
    const value = update(_, pulse);

    if (!target.skip()) {
      target.skip(value !== this.value).value = value;
    }

    return value;
  } : update;
}
},{"../Operator":"node_modules/vega-dataflow/src/Operator.js","../ChangeSet":"node_modules/vega-dataflow/src/ChangeSet.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/dataflow/rank.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rank = rank;
exports.rerank = rerank;

var _vegaUtil = require("vega-util");

/**
 * Assigns a rank to an operator. Ranks are assigned in increasing order
 * by incrementing an internal rank counter.
 * @param {Operator} op - The operator to assign a rank.
 */
function rank(op) {
  op.rank = ++this._rank;
}
/**
 * Re-ranks an operator and all downstream target dependencies. This
 * is necessary when upstream dependencies of higher rank are added to
 * a target operator.
 * @param {Operator} op - The operator to re-rank.
 */


function rerank(op) {
  var queue = [op],
      cur,
      list,
      i;

  while (queue.length) {
    this.rank(cur = queue.pop());

    if (list = cur._targets) {
      for (i = list.length; --i >= 0;) {
        queue.push(cur = list[i]);
        if (cur === op) (0, _vegaUtil.error)('Cycle detected in dataflow graph.');
      }
    }
  }
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/Pulse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Pulse;
exports.StopPropagation = void 0;

var _Tuple = require("./Tuple");

var _vegaUtil = require("vega-util");

/**
 * Sentinel value indicating pulse propagation should stop.
 */
var StopPropagation = {}; // Pulse visit type flags

exports.StopPropagation = StopPropagation;
var ADD = 1 << 0,
    REM = 1 << 1,
    MOD = 1 << 2,
    ADD_REM = ADD | REM,
    ADD_MOD = ADD | MOD,
    ALL = ADD | REM | MOD,
    REFLOW = 1 << 3,
    SOURCE = 1 << 4,
    NO_SOURCE = 1 << 5,
    NO_FIELDS = 1 << 6;
/**
 * A Pulse enables inter-operator communication during a run of the
 * dataflow graph. In addition to the current timestamp, a pulse may also
 * contain a change-set of added, removed or modified data tuples, as well as
 * a pointer to a full backing data source. Tuple change sets may not
 * be fully materialized; for example, to prevent needless array creation
 * a change set may include larger arrays and corresponding filter functions.
 * The pulse provides a {@link visit} method to enable proper and efficient
 * iteration over requested data tuples.
 *
 * In addition, each pulse can track modification flags for data tuple fields.
 * Responsible transform operators should call the {@link modifies} method to
 * indicate changes to data fields. The {@link modified} method enables
 * querying of this modification state.
 *
 * @constructor
 * @param {Dataflow} dataflow - The backing dataflow instance.
 * @param {number} stamp - The current propagation timestamp.
 * @param {string} [encode] - An optional encoding set name, which is then
 *   accessible as Pulse.encode. Operators can respond to (or ignore) this
 *   setting as appropriate. This parameter can be used in conjunction with
 *   the Encode transform in the vega-encode module.
 */

function Pulse(dataflow, stamp, encode) {
  this.dataflow = dataflow;
  this.stamp = stamp == null ? -1 : stamp;
  this.add = [];
  this.rem = [];
  this.mod = [];
  this.fields = null;
  this.encode = encode || null;
}

var prototype = Pulse.prototype;
/**
 * Sentinel value indicating pulse propagation should stop.
 */

prototype.StopPropagation = StopPropagation;
/**
 * Boolean flag indicating ADD (added) tuples.
 */

prototype.ADD = ADD;
/**
 * Boolean flag indicating REM (removed) tuples.
 */

prototype.REM = REM;
/**
 * Boolean flag indicating MOD (modified) tuples.
 */

prototype.MOD = MOD;
/**
 * Boolean flag indicating ADD (added) and REM (removed) tuples.
 */

prototype.ADD_REM = ADD_REM;
/**
 * Boolean flag indicating ADD (added) and MOD (modified) tuples.
 */

prototype.ADD_MOD = ADD_MOD;
/**
 * Boolean flag indicating ADD, REM and MOD tuples.
 */

prototype.ALL = ALL;
/**
 * Boolean flag indicating all tuples in a data source
 * except for the ADD, REM and MOD tuples.
 */

prototype.REFLOW = REFLOW;
/**
 * Boolean flag indicating a 'pass-through' to a
 * backing data source, ignoring ADD, REM and MOD tuples.
 */

prototype.SOURCE = SOURCE;
/**
 * Boolean flag indicating that source data should be
 * suppressed when creating a forked pulse.
 */

prototype.NO_SOURCE = NO_SOURCE;
/**
 * Boolean flag indicating that field modifications should be
 * suppressed when creating a forked pulse.
 */

prototype.NO_FIELDS = NO_FIELDS;
/**
 * Creates a new pulse based on the values of this pulse.
 * The dataflow, time stamp and field modification values are copied over.
 * By default, new empty ADD, REM and MOD arrays are created.
 * @param {number} flags - Integer of boolean flags indicating which (if any)
 *   tuple arrays should be copied to the new pulse. The supported flag values
 *   are ADD, REM and MOD. Array references are copied directly: new array
 *   instances are not created.
 * @return {Pulse} - The forked pulse instance.
 * @see init
 */

prototype.fork = function (flags) {
  return new Pulse(this.dataflow).init(this, flags);
};
/**
 * Creates a copy of this pulse with new materialized array
 * instances for the ADD, REM, MOD, and SOURCE arrays.
 * The dataflow, time stamp and field modification values are copied over.
 * @return {Pulse} - The cloned pulse instance.
 * @see init
 */


prototype.clone = function () {
  var p = this.fork(ALL);
  p.add = p.add.slice();
  p.rem = p.rem.slice();
  p.mod = p.mod.slice();
  if (p.source) p.source = p.source.slice();
  return p.materialize(ALL | SOURCE);
};
/**
 * Returns a pulse that adds all tuples from a backing source. This is
 * useful for cases where operators are added to a dataflow after an
 * upstream data pipeline has already been processed, ensuring that
 * new operators can observe all tuples within a stream.
 * @return {Pulse} - A pulse instance with all source tuples included
 *   in the add array. If the current pulse already has all source
 *   tuples in its add array, it is returned directly. If the current
 *   pulse does not have a backing source, it is returned directly.
 */


prototype.addAll = function () {
  var p = this;

  if (!this.source || this.source.length === this.add.length) {
    return p;
  } else {
    p = new Pulse(this.dataflow).init(this);
    p.add = p.source;
    return p;
  }
};
/**
 * Initialize this pulse based on the values of another pulse. This method
 * is used internally by {@link fork} to initialize a new forked tuple.
 * The dataflow, time stamp and field modification values are copied over.
 * By default, new empty ADD, REM and MOD arrays are created.
 * @param {Pulse} src - The source pulse to copy from.
 * @param {number} flags - Integer of boolean flags indicating which (if any)
 *   tuple arrays should be copied to the new pulse. The supported flag values
 *   are ADD, REM and MOD. Array references are copied directly: new array
 *   instances are not created. By default, source data arrays are copied
 *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.
 * @return {Pulse} - Returns this Pulse instance.
 */


prototype.init = function (src, flags) {
  var p = this;
  p.stamp = src.stamp;
  p.encode = src.encode;

  if (src.fields && !(flags & NO_FIELDS)) {
    p.fields = src.fields;
  }

  if (flags & ADD) {
    p.addF = src.addF;
    p.add = src.add;
  } else {
    p.addF = null;
    p.add = [];
  }

  if (flags & REM) {
    p.remF = src.remF;
    p.rem = src.rem;
  } else {
    p.remF = null;
    p.rem = [];
  }

  if (flags & MOD) {
    p.modF = src.modF;
    p.mod = src.mod;
  } else {
    p.modF = null;
    p.mod = [];
  }

  if (flags & NO_SOURCE) {
    p.srcF = null;
    p.source = null;
  } else {
    p.srcF = src.srcF;
    p.source = src.source;
  }

  return p;
};
/**
 * Schedules a function to run after pulse propagation completes.
 * @param {function} func - The function to run.
 */


prototype.runAfter = function (func) {
  this.dataflow.runAfter(func);
};
/**
 * Indicates if tuples have been added, removed or modified.
 * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.
 *   Defaults to ALL, returning true if any tuple type has changed.
 * @return {boolean} - Returns true if one or more queried tuple types have
 *   changed, false otherwise.
 */


prototype.changed = function (flags) {
  var f = flags || ALL;
  return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD && this.mod.length;
};
/**
 * Forces a "reflow" of tuple values, such that all tuples in the backing
 * source are added to the MOD set, unless already present in the ADD set.
 * @param {boolean} [fork=false] - If true, returns a forked copy of this
 *   pulse, and invokes reflow on that derived pulse.
 * @return {Pulse} - The reflowed pulse instance.
 */


prototype.reflow = function (fork) {
  if (fork) return this.fork(ALL).reflow();
  var len = this.add.length,
      src = this.source && this.source.length;

  if (src && src !== len) {
    this.mod = this.source;
    if (len) this.filter(MOD, filter(this, ADD));
  }

  return this;
};
/**
 * Marks one or more data field names as modified to assist dependency
 * tracking and incremental processing by transform operators.
 * @param {string|Array<string>} _ - The field(s) to mark as modified.
 * @return {Pulse} - This pulse instance.
 */


prototype.modifies = function (_) {
  var fields = (0, _vegaUtil.array)(_),
      hash = this.fields || (this.fields = {});
  fields.forEach(function (f) {
    hash[f] = true;
  });
  return this;
};
/**
 * Checks if one or more data fields have been modified during this pulse
 * propagation timestamp.
 * @param {string|Array<string>} _ - The field(s) to check for modified.
 * @param {boolean} nomod - If true, will check the modified flag even if
 *   no mod tuples exist. If false (default), mod tuples must be present.
 * @return {boolean} - Returns true if any of the provided fields has been
 *   marked as modified, false otherwise.
 */


prototype.modified = function (_, nomod) {
  var fields = this.fields;
  return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : (0, _vegaUtil.isArray)(_) ? _.some(function (f) {
    return fields[f];
  }) : fields[_];
};
/**
 * Adds a filter function to one more tuple sets. Filters are applied to
 * backing tuple arrays, to determine the actual set of tuples considered
 * added, removed or modified. They can be used to delay materialization of
 * a tuple set in order to avoid expensive array copies. In addition, the
 * filter functions can serve as value transformers: unlike standard predicate
 * function (which return boolean values), Pulse filters should return the
 * actual tuple value to process. If a tuple set is already filtered, the
 * new filter function will be appended into a conjuntive ('and') query.
 * @param {number} flags - Flags indicating the tuple set(s) to filter.
 * @param {function(*):object} filter - Filter function that will be applied
 *   to the tuple set array, and should return a data tuple if the value
 *   should be included in the tuple set, and falsy (or null) otherwise.
 * @return {Pulse} - Returns this pulse instance.
 */


prototype.filter = function (flags, filter) {
  var p = this;
  if (flags & ADD) p.addF = addFilter(p.addF, filter);
  if (flags & REM) p.remF = addFilter(p.remF, filter);
  if (flags & MOD) p.modF = addFilter(p.modF, filter);
  if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);
  return p;
};

function addFilter(a, b) {
  return a ? function (t, i) {
    return a(t, i) && b(t, i);
  } : b;
}
/**
 * Materialize one or more tuple sets in this pulse. If the tuple set(s) have
 * a registered filter function, it will be applied and the tuple set(s) will
 * be replaced with materialized tuple arrays.
 * @param {number} flags - Flags indicating the tuple set(s) to materialize.
 * @return {Pulse} - Returns this pulse instance.
 */


prototype.materialize = function (flags) {
  flags = flags || ALL;
  var p = this;

  if (flags & ADD && p.addF) {
    p.add = materialize(p.add, p.addF);
    p.addF = null;
  }

  if (flags & REM && p.remF) {
    p.rem = materialize(p.rem, p.remF);
    p.remF = null;
  }

  if (flags & MOD && p.modF) {
    p.mod = materialize(p.mod, p.modF);
    p.modF = null;
  }

  if (flags & SOURCE && p.srcF) {
    p.source = p.source.filter(p.srcF);
    p.srcF = null;
  }

  return p;
};

function materialize(data, filter) {
  var out = [];
  (0, _vegaUtil.visitArray)(data, filter, function (_) {
    out.push(_);
  });
  return out;
}

function filter(pulse, flags) {
  var map = {};
  pulse.visit(flags, function (t) {
    map[(0, _Tuple.tupleid)(t)] = 1;
  });
  return function (t) {
    return map[(0, _Tuple.tupleid)(t)] ? null : t;
  };
}
/**
 * Visit one or more tuple sets in this pulse.
 * @param {number} flags - Flags indicating the tuple set(s) to visit.
 *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source
 *   has been set).
 * @param {function(object):*} - Visitor function invoked per-tuple.
 * @return {Pulse} - Returns this pulse instance.
 */


prototype.visit = function (flags, visitor) {
  var p = this,
      v = visitor,
      src,
      sum;

  if (flags & SOURCE) {
    (0, _vegaUtil.visitArray)(p.source, p.srcF, v);
    return p;
  }

  if (flags & ADD) (0, _vegaUtil.visitArray)(p.add, p.addF, v);
  if (flags & REM) (0, _vegaUtil.visitArray)(p.rem, p.remF, v);
  if (flags & MOD) (0, _vegaUtil.visitArray)(p.mod, p.modF, v);

  if (flags & REFLOW && (src = p.source)) {
    sum = p.add.length + p.mod.length;

    if (sum === src.length) {// do nothing
    } else if (sum) {
      (0, _vegaUtil.visitArray)(src, filter(p, ADD_MOD), v);
    } else {
      // if no add/rem/mod tuples, visit source
      (0, _vegaUtil.visitArray)(src, p.srcF, v);
    }
  }

  return p;
};
},{"./Tuple":"node_modules/vega-dataflow/src/Tuple.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/MultiPulse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MultiPulse;

var _Pulse = _interopRequireDefault(require("./Pulse"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Represents a set of multiple pulses. Used as input for operators
 * that accept multiple pulses at a time. Contained pulses are
 * accessible via the public "pulses" array property. This pulse doe
 * not carry added, removed or modified tuples directly. However,
 * the visit method can be used to traverse all such tuples contained
 * in sub-pulses with a timestamp matching this parent multi-pulse.
 * @constructor
 * @param {Dataflow} dataflow - The backing dataflow instance.
 * @param {number} stamp - The timestamp.
 * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.
 */
function MultiPulse(dataflow, stamp, pulses, encode) {
  var p = this,
      c = 0,
      pulse,
      hash,
      i,
      n,
      f;
  this.dataflow = dataflow;
  this.stamp = stamp;
  this.fields = null;
  this.encode = encode || null;
  this.pulses = pulses;

  for (i = 0, n = pulses.length; i < n; ++i) {
    pulse = pulses[i];
    if (pulse.stamp !== stamp) continue;

    if (pulse.fields) {
      hash = p.fields || (p.fields = {});

      for (f in pulse.fields) {
        hash[f] = 1;
      }
    }

    if (pulse.changed(p.ADD)) c |= p.ADD;
    if (pulse.changed(p.REM)) c |= p.REM;
    if (pulse.changed(p.MOD)) c |= p.MOD;
  }

  this.changes = c;
}

var prototype = (0, _vegaUtil.inherits)(MultiPulse, _Pulse.default);
/**
 * Creates a new pulse based on the values of this pulse.
 * The dataflow, time stamp and field modification values are copied over.
 * @return {Pulse}
 */

prototype.fork = function (flags) {
  var p = new _Pulse.default(this.dataflow).init(this, flags & this.NO_FIELDS);

  if (flags !== undefined) {
    if (flags & p.ADD) {
      this.visit(p.ADD, function (t) {
        return p.add.push(t);
      });
    }

    if (flags & p.REM) {
      this.visit(p.REM, function (t) {
        return p.rem.push(t);
      });
    }

    if (flags & p.MOD) {
      this.visit(p.MOD, function (t) {
        return p.mod.push(t);
      });
    }
  }

  return p;
};

prototype.changed = function (flags) {
  return this.changes & flags;
};

prototype.modified = function (_) {
  var p = this,
      fields = p.fields;
  return !(fields && p.changes & p.MOD) ? 0 : (0, _vegaUtil.isArray)(_) ? _.some(function (f) {
    return fields[f];
  }) : fields[_];
};

prototype.filter = function () {
  (0, _vegaUtil.error)('MultiPulse does not support filtering.');
};

prototype.materialize = function () {
  (0, _vegaUtil.error)('MultiPulse does not support materialization.');
};

prototype.visit = function (flags, visitor) {
  var p = this,
      pulses = p.pulses,
      n = pulses.length,
      i = 0;

  if (flags & p.SOURCE) {
    for (; i < n; ++i) {
      pulses[i].visit(flags, visitor);
    }
  } else {
    for (; i < n; ++i) {
      if (pulses[i].stamp === p.stamp) {
        pulses[i].visit(flags, visitor);
      }
    }
  }

  return p;
};
},{"./Pulse":"node_modules/vega-dataflow/src/Pulse.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/dataflow/run.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.evaluate = evaluate;
exports.runAsync = runAsync;
exports.run = run;
exports.runAfter = runAfter;
exports.enqueue = enqueue;
exports.getPulse = getPulse;

var _Pulse = _interopRequireWildcard(require("../Pulse"));

var _MultiPulse = _interopRequireDefault(require("../MultiPulse"));

var _asyncCallback = _interopRequireDefault(require("../util/asyncCallback"));

var _UniqueList = _interopRequireDefault(require("../util/UniqueList"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/* eslint-disable require-atomic-updates */

/**
 * Evaluates the dataflow and returns a Promise that resolves when pulse
 * propagation completes. This method will increment the current timestamp
 * and process all updated, pulsed and touched operators. When invoked for
 * the first time, all registered operators will be processed. This method
 * should not be invoked by third-party clients, use {@link runAsync} or
 * {@link run} instead.
 * @param {string} [encode] - The name of an encoding set to invoke during
 *   propagation. This value is added to generated Pulse instances;
 *   operators can then respond to (or ignore) this setting as appropriate.
 *   This parameter can be used in conjunction with the Encode transform in
 *   the vega-encode package.
 * @param {function} [prerun] - An optional callback function to invoke
 *   immediately before dataflow evaluation commences.
 * @param {function} [postrun] - An optional callback function to invoke
 *   after dataflow evaluation completes. The callback will be invoked
 *   after those registered via {@link runAfter}.
 * @return {Promise} - A promise that resolves to this dataflow after
 *   evaluation completes.
 */
async function evaluate(encode, prerun, postrun) {
  const df = this,
        level = df.logLevel(); // if the pulse value is set, this is a re-entrant call

  if (df._pulse) return reentrant(df); // wait for pending datasets to load

  if (df._pending) {
    await df._pending;
  } // invoke prerun function, if provided


  if (prerun) await (0, _asyncCallback.default)(df, prerun); // exit early if there are no updates

  if (!df._touched.length) {
    df.info('Dataflow invoked, but nothing to do.');
    return df;
  } // increment timestamp clock


  let stamp = ++df._clock,
      count = 0,
      op,
      next,
      dt,
      error; // set the current pulse

  df._pulse = new _Pulse.default(df, stamp, encode);

  if (level >= _vegaUtil.Info) {
    dt = Date.now();
    df.debug('-- START PROPAGATION (' + stamp + ') -----');
  } // initialize priority queue, reset touched operators


  df._touched.forEach(op => df._enqueue(op, true));

  df._touched = (0, _UniqueList.default)(_vegaUtil.id);

  try {
    while (df._heap.size() > 0) {
      // dequeue operator with highest priority
      op = df._heap.pop(); // re-queue if rank changed

      if (op.rank !== op.qrank) {
        df._enqueue(op, true);

        continue;
      } // otherwise, evaluate the operator


      next = op.run(df._getPulse(op, encode)); // await if operator returned a promise

      if (next.then) {
        next = await next;
      }

      if (level >= _vegaUtil.Debug) {
        df.debug(op.id, next === _Pulse.StopPropagation ? 'STOP' : next, op);
      } // propagate evaluation, enqueue dependent operators


      if (next !== _Pulse.StopPropagation) {
        if (op._targets) op._targets.forEach(op => df._enqueue(op));
      } // increment visit counter


      ++count;
    }
  } catch (err) {
    df._heap.clear();

    error = err;
  } // reset pulse map


  df._input = {};
  df._pulse = null;

  if (level >= _vegaUtil.Info) {
    dt = Date.now() - dt;
    df.info('> Pulse ' + stamp + ': ' + count + ' operators; ' + dt + 'ms');
  }

  if (error) {
    df._postrun = [];
    df.error(error);
  } // invoke callbacks queued via runAfter


  if (df._postrun.length) {
    const pr = df._postrun.sort((a, b) => b.priority - a.priority);

    df._postrun = [];

    for (let i = 0; i < pr.length; ++i) {
      await (0, _asyncCallback.default)(df, pr[i].callback);
    }
  } // invoke postrun function, if provided


  if (postrun) await (0, _asyncCallback.default)(df, postrun);
  return df;
}
/**
 * Queues dataflow evaluation to run once any other queued evaluations have
 * completed and returns a Promise that resolves when the queued pulse
 * propagation completes. If provided, a callback function will be invoked
 * immediately before evaluation commences. This method will ensure a
 * separate evaluation is invoked for each time it is called.
 * @param {string} [encode] - The name of an encoding set to invoke during
 *   propagation. This value is added to generated Pulse instances;
 *   operators can then respond to (or ignore) this setting as appropriate.
 *   This parameter can be used in conjunction with the Encode transform in
 *   the vega-encode package.
 * @param {function} [prerun] - An optional callback function to invoke
 *   immediately before dataflow evaluation commences.
 * @param {function} [postrun] - An optional callback function to invoke
 *   after dataflow evaluation completes. The callback will be invoked
 *   after those registered via {@link runAfter}.
 * @return {Promise} - A promise that resolves to this dataflow after
 *   evaluation completes.
 */


async function runAsync(encode, prerun, postrun) {
  // await previously queued functions
  while (this._running) await this._running; // run dataflow, manage running promise


  const clear = () => this._running = null;

  (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);
  return this._running;
}
/**
 * Requests dataflow evaluation and the immediately returns this dataflow
 * instance. If there are pending data loading or other asynchronous
 * operations, the dataflow will evaluate asynchronously after this method
 * has been invoked. To track when dataflow evaluation completes, use the
 * {@link runAsync} method instead. This method will raise an error if
 * invoked while the dataflow is already in the midst of evaluation.
 * @param {string} [encode] - The name of an encoding set to invoke during
 *   propagation. This value is added to generated Pulse instances;
 *   operators can then respond to (or ignore) this setting as appropriate.
 *   This parameter can be used in conjunction with the Encode transform in
 *   the vega-encode module.
 * @param {function} [prerun] - An optional callback function to invoke
 *   immediately before dataflow evaluation commences.
 * @param {function} [postrun] - An optional callback function to invoke
 *   after dataflow evaluation completes. The callback will be invoked
 *   after those registered via {@link runAfter}.
 * @return {Dataflow} - This dataflow instance.
 */


function run(encode, prerun, postrun) {
  return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);
}
/**
 * Schedules a callback function to be invoked after the current pulse
 * propagation completes. If no propagation is currently occurring,
 * the function is invoked immediately. Callbacks scheduled via runAfter
 * are invoked immediately upon completion of the current cycle, before
 * any request queued via runAsync. This method is primarily intended for
 * internal use. Third-party callers using runAfter to schedule a callback
 * that invokes {@link run} or {@link runAsync} should not use this method,
 * but instead use {@link runAsync} with prerun or postrun arguments.
 * @param {function(Dataflow)} callback - The callback function to run.
 *   The callback will be invoked with this Dataflow instance as its
 *   sole argument.
 * @param {boolean} enqueue - A boolean flag indicating that the
 *   callback should be queued up to run after the next propagation
 *   cycle, suppressing immediate invocation when propagation is not
 *   currently occurring.
 * @param {number} [priority] - A priority value used to sort registered
 *   callbacks to determine execution order. This argument is intended
 *   for internal Vega use only.
 */


function runAfter(callback, enqueue, priority) {
  if (this._pulse || enqueue) {
    // pulse propagation is currently running, queue to run after
    this._postrun.push({
      priority: priority || 0,
      callback: callback
    });
  } else {
    // pulse propagation already complete, invoke immediately
    try {
      callback(this);
    } catch (err) {
      this.error(err);
    }
  }
}
/**
 * Raise an error for re-entrant dataflow evaluation.
 */


function reentrant(df) {
  df.error('Dataflow already running. Use runAsync() to chain invocations.');
  return df;
}
/**
 * Enqueue an operator into the priority queue for evaluation. The operator
 * will be enqueued if it has no registered pulse for the current cycle, or if
 * the force argument is true. Upon enqueue, this method also sets the
 * operator's qrank to the current rank value.
 * @param {Operator} op - The operator to enqueue.
 * @param {boolean} [force] - A flag indicating if the operator should be
 *   forceably added to the queue, even if it has already been previously
 *   enqueued during the current pulse propagation. This is useful when the
 *   dataflow graph is dynamically modified and the operator rank changes.
 */


function enqueue(op, force) {
  var q = op.stamp < this._clock;
  if (q) op.stamp = this._clock;

  if (q || force) {
    op.qrank = op.rank;

    this._heap.push(op);
  }
}
/**
 * Provide a correct pulse for evaluating an operator. If the operator has an
 * explicit source operator, we will try to pull the pulse(s) from it.
 * If there is an array of source operators, we build a multi-pulse.
 * Otherwise, we return a current pulse with correct source data.
 * If the pulse is the pulse map has an explicit target set, we use that.
 * Else if the pulse on the upstream source operator is current, we use that.
 * Else we use the pulse from the pulse map, but copy the source tuple array.
 * @param {Operator} op - The operator for which to get an input pulse.
 * @param {string} [encode] - An (optional) encoding set name with which to
 *   annotate the returned pulse. See {@link run} for more information.
 */


function getPulse(op, encode) {
  var s = op.source,
      stamp = this._clock;
  return s && (0, _vegaUtil.isArray)(s) ? new _MultiPulse.default(this, stamp, s.map(_ => _.pulse), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);
}

function singlePulse(p, s) {
  if (s && s.stamp === p.stamp) {
    return s;
  }

  p = p.fork();

  if (s && s !== _Pulse.StopPropagation) {
    p.source = s.source;
  }

  return p;
}
},{"../Pulse":"node_modules/vega-dataflow/src/Pulse.js","../MultiPulse":"node_modules/vega-dataflow/src/MultiPulse.js","../util/asyncCallback":"node_modules/vega-dataflow/src/util/asyncCallback.js","../util/UniqueList":"node_modules/vega-dataflow/src/util/UniqueList.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/dataflow/update.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.touch = touch;
exports.update = update;
exports.pulse = pulse;

var _Pulse = _interopRequireDefault(require("../Pulse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NO_OPT = {
  skip: false,
  force: false
};
/**
 * Touches an operator, scheduling it to be evaluated. If invoked outside of
 * a pulse propagation, the operator will be evaluated the next time this
 * dataflow is run. If invoked in the midst of pulse propagation, the operator
 * will be queued for evaluation if and only if the operator has not yet been
 * evaluated on the current propagation timestamp.
 * @param {Operator} op - The operator to touch.
 * @param {object} [options] - Additional options hash.
 * @param {boolean} [options.skip] - If true, the operator will
 *   be skipped: it will not be evaluated, but its dependents will be.
 * @return {Dataflow}
 */

function touch(op, options) {
  var opt = options || NO_OPT;

  if (this._pulse) {
    // if in midst of propagation, add to priority queue
    this._enqueue(op);
  } else {
    // otherwise, queue for next propagation
    this._touched.add(op);
  }

  if (opt.skip) op.skip(true);
  return this;
}
/**
 * Updates the value of the given operator.
 * @param {Operator} op - The operator to update.
 * @param {*} value - The value to set.
 * @param {object} [options] - Additional options hash.
 * @param {boolean} [options.force] - If true, the operator will
 *   be re-evaluated even if its value has not changed.
 * @param {boolean} [options.skip] - If true, the operator will
 *   be skipped: it will not be evaluated, but its dependents will be.
 * @return {Dataflow}
 */


function update(op, value, options) {
  var opt = options || NO_OPT;

  if (op.set(value) || opt.force) {
    this.touch(op, opt);
  }

  return this;
}
/**
 * Pulses an operator with a changeset of tuples. If invoked outside of
 * a pulse propagation, the pulse will be applied the next time this
 * dataflow is run. If invoked in the midst of pulse propagation, the pulse
 * will be added to the set of active pulses and will be applied if and
 * only if the target operator has not yet been evaluated on the current
 * propagation timestamp.
 * @param {Operator} op - The operator to pulse.
 * @param {ChangeSet} value - The tuple changeset to apply.
 * @param {object} [options] - Additional options hash.
 * @param {boolean} [options.skip] - If true, the operator will
 *   be skipped: it will not be evaluated, but its dependents will be.
 * @return {Dataflow}
 */


function pulse(op, changeset, options) {
  this.touch(op, options || NO_OPT);
  var p = new _Pulse.default(this, this._clock + (this._pulse ? 0 : 1)),
      t = op.pulse && op.pulse.source || [];
  p.target = op;
  this._input[op.id] = changeset.pulse(p, t);
  return this;
}
},{"../Pulse":"node_modules/vega-dataflow/src/Pulse.js"}],"node_modules/vega-dataflow/src/util/Heap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Heap;

function Heap(cmp) {
  var nodes = [];
  return {
    clear: () => nodes = [],
    size: () => nodes.length,
    peek: () => nodes[0],
    push: x => {
      nodes.push(x);
      return siftdown(nodes, 0, nodes.length - 1, cmp);
    },
    pop: () => {
      var last = nodes.pop(),
          item;

      if (nodes.length) {
        item = nodes[0];
        nodes[0] = last;
        siftup(nodes, 0, cmp);
      } else {
        item = last;
      }

      return item;
    }
  };
}

function siftdown(array, start, idx, cmp) {
  var item, parent, pidx;
  item = array[idx];

  while (idx > start) {
    pidx = idx - 1 >> 1;
    parent = array[pidx];

    if (cmp(item, parent) < 0) {
      array[idx] = parent;
      idx = pidx;
      continue;
    }

    break;
  }

  return array[idx] = item;
}

function siftup(array, idx, cmp) {
  var start = idx,
      end = array.length,
      item = array[idx],
      cidx = (idx << 1) + 1,
      ridx;

  while (cidx < end) {
    ridx = cidx + 1;

    if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {
      cidx = ridx;
    }

    array[idx] = array[cidx];
    idx = cidx;
    cidx = (idx << 1) + 1;
  }

  array[idx] = item;
  return siftdown(array, start, idx, cmp);
}
},{}],"node_modules/vega-dataflow/src/dataflow/Dataflow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Dataflow;

var _add = _interopRequireDefault(require("./add"));

var _connect = _interopRequireDefault(require("./connect"));

var _events = _interopRequireDefault(require("./events"));

var _load = require("./load");

var _on = _interopRequireDefault(require("./on"));

var _rank = require("./rank");

var _run = require("./run");

var _update = require("./update");

var _ChangeSet = _interopRequireDefault(require("../ChangeSet"));

var _Heap = _interopRequireDefault(require("../util/Heap"));

var _UniqueList = _interopRequireDefault(require("../util/UniqueList"));

var _vegaLoader = require("vega-loader");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A dataflow graph for reactive processing of data streams.
 * @constructor
 */
function Dataflow() {
  this.logger((0, _vegaUtil.logger)());
  this.logLevel(_vegaUtil.Error);
  this._clock = 0;
  this._rank = 0;

  try {
    this._loader = (0, _vegaLoader.loader)();
  } catch (e) {// do nothing if loader module is unavailable
  }

  this._touched = (0, _UniqueList.default)(_vegaUtil.id);
  this._input = {};
  this._pulse = null;
  this._heap = (0, _Heap.default)((a, b) => a.qrank - b.qrank);
  this._postrun = [];
}

var prototype = Dataflow.prototype;
/**
 * The current timestamp of this dataflow. This value reflects the
 * timestamp of the previous dataflow run. The dataflow is initialized
 * with a stamp value of 0. The initial run of the dataflow will have
 * a timestap of 1, and so on. This value will match the
 * {@link Pulse.stamp} property.
 * @return {number} - The current timestamp value.
 */

prototype.stamp = function () {
  return this._clock;
};
/**
 * Gets or sets the loader instance to use for data file loading. A
 * loader object must provide a "load" method for loading files and a
 * "sanitize" method for checking URL/filename validity. Both methods
 * should accept a URI and options hash as arguments, and return a Promise
 * that resolves to the loaded file contents (load) or a hash containing
 * sanitized URI data with the sanitized url assigned to the "href" property
 * (sanitize).
 * @param {object} _ - The loader instance to use.
 * @return {object|Dataflow} - If no arguments are provided, returns
 *   the current loader instance. Otherwise returns this Dataflow instance.
 */


prototype.loader = function (_) {
  if (arguments.length) {
    this._loader = _;
    return this;
  } else {
    return this._loader;
  }
};
/**
 * Empty entry threshold for garbage cleaning. Map data structures will
 * perform cleaning once the number of empty entries exceeds this value.
 */


prototype.cleanThreshold = 1e4; // OPERATOR REGISTRATION

prototype.add = _add.default;
prototype.connect = _connect.default;
prototype.rank = _rank.rank;
prototype.rerank = _rank.rerank; // OPERATOR UPDATES

prototype.pulse = _update.pulse;
prototype.touch = _update.touch;
prototype.update = _update.update;
prototype.changeset = _ChangeSet.default; // DATA LOADING

prototype.ingest = _load.ingest;
prototype.parse = _load.parse;
prototype.preload = _load.preload;
prototype.request = _load.request; // EVENT HANDLING

prototype.events = _events.default;
prototype.on = _on.default; // PULSE PROPAGATION

prototype.evaluate = _run.evaluate;
prototype.run = _run.run;
prototype.runAsync = _run.runAsync;
prototype.runAfter = _run.runAfter;
prototype._enqueue = _run.enqueue;
prototype._getPulse = _run.getPulse; // LOGGING AND ERROR HANDLING

function logMethod(method) {
  return function () {
    return this._log[method].apply(this, arguments);
  };
}
/**
 * Get or set the logger instance used to log messages. If no arguments are
 * provided, returns the current logger instance. Otherwise, sets the logger
 * and return this Dataflow instance. Provided loggers must support the full
 * API of logger objects generated by the vega-util logger method. Note that
 * by default the log level of the new logger will be used; use the logLevel
 * method to adjust the log level as needed.
 */


prototype.logger = function (logger) {
  if (arguments.length) {
    this._log = logger;
    return this;
  } else {
    return this._log;
  }
};
/**
 * Logs an error message. By default, logged messages are written to console
 * output. The message will only be logged if the current log level is high
 * enough to permit error messages.
 */


prototype.error = logMethod('error');
/**
 * Logs a warning message. By default, logged messages are written to console
 * output. The message will only be logged if the current log level is high
 * enough to permit warning messages.
 */

prototype.warn = logMethod('warn');
/**
 * Logs a information message. By default, logged messages are written to
 * console output. The message will only be logged if the current log level is
 * high enough to permit information messages.
 */

prototype.info = logMethod('info');
/**
 * Logs a debug message. By default, logged messages are written to console
 * output. The message will only be logged if the current log level is high
 * enough to permit debug messages.
 */

prototype.debug = logMethod('debug');
/**
 * Get or set the current log level. If an argument is provided, it
 * will be used as the new log level.
 * @param {number} [level] - Should be one of None, Warn, Info
 * @return {number} - The current log level.
 */

prototype.logLevel = logMethod('level');
},{"./add":"node_modules/vega-dataflow/src/dataflow/add.js","./connect":"node_modules/vega-dataflow/src/dataflow/connect.js","./events":"node_modules/vega-dataflow/src/dataflow/events.js","./load":"node_modules/vega-dataflow/src/dataflow/load.js","./on":"node_modules/vega-dataflow/src/dataflow/on.js","./rank":"node_modules/vega-dataflow/src/dataflow/rank.js","./run":"node_modules/vega-dataflow/src/dataflow/run.js","./update":"node_modules/vega-dataflow/src/dataflow/update.js","../ChangeSet":"node_modules/vega-dataflow/src/ChangeSet.js","../util/Heap":"node_modules/vega-dataflow/src/util/Heap.js","../util/UniqueList":"node_modules/vega-dataflow/src/util/UniqueList.js","vega-loader":"node_modules/vega-loader/index.browser.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/Transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Transform;

var _Operator = _interopRequireDefault(require("./Operator"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Abstract class for operators that process data tuples.
 * Subclasses must provide a {@link transform} method for operator processing.
 * @constructor
 * @param {*} [init] - The initial value for this operator.
 * @param {object} [params] - The parameters for this operator.
 * @param {Operator} [source] - The operator from which to receive pulses.
 */
function Transform(init, params) {
  _Operator.default.call(this, init, null, params);
}

var prototype = (0, _vegaUtil.inherits)(Transform, _Operator.default);
/**
 * Overrides {@link Operator.evaluate} for transform operators.
 * Internally, this method calls {@link evaluate} to perform processing.
 * If {@link evaluate} returns a falsy value, the input pulse is returned.
 * This method should NOT be overridden, instead overrride {@link evaluate}.
 * @param {Pulse} pulse - the current dataflow pulse.
 * @return the output pulse for this operator (or StopPropagation)
 */

prototype.run = function (pulse) {
  if (pulse.stamp < this.stamp) return pulse.StopPropagation;
  var rv;

  if (this.skip()) {
    this.skip(false);
  } else {
    rv = this.evaluate(pulse);
  }

  rv = rv || pulse;

  if (rv.then) {
    rv = rv.then(_ => this.pulse = _);
  } else if (rv !== pulse.StopPropagation) {
    this.pulse = rv;
  }

  return rv;
};
/**
 * Overrides {@link Operator.evaluate} for transform operators.
 * Marshalls parameter values and then invokes {@link transform}.
 * @param {Pulse} pulse - the current dataflow pulse.
 * @return {Pulse} The output pulse (or StopPropagation). A falsy return
     value (including undefined) will let the input pulse pass through.
 */


prototype.evaluate = function (pulse) {
  var params = this.marshall(pulse.stamp),
      out = this.transform(params, pulse);
  params.clear();
  return out;
};
/**
 * Process incoming pulses.
 * Subclasses should override this method to implement transforms.
 * @param {Parameters} _ - The operator parameter values.
 * @param {Pulse} pulse - The current dataflow pulse.
 * @return {Pulse} The output pulse (or StopPropagation). A falsy return
 *   value (including undefined) will let the input pulse pass through.
 */


prototype.transform = function () {};
},{"./Operator":"node_modules/vega-dataflow/src/Operator.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/src/register.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.definition = definition;
exports.transform = transform;
exports.transforms = void 0;

var _vegaUtil = require("vega-util");

var transforms = {};
exports.transforms = transforms;

function definition(type) {
  var t = transform(type);
  return t && t.Definition || null;
}

function transform(type) {
  type = type && type.toLowerCase();
  return (0, _vegaUtil.hasOwnProperty)(transforms, type) ? transforms[type] : null;
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-dataflow/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "UniqueList", {
  enumerable: true,
  get: function () {
    return _UniqueList.default;
  }
});
Object.defineProperty(exports, "asyncCallback", {
  enumerable: true,
  get: function () {
    return _asyncCallback.default;
  }
});
Object.defineProperty(exports, "changeset", {
  enumerable: true,
  get: function () {
    return _ChangeSet.default;
  }
});
Object.defineProperty(exports, "isChangeSet", {
  enumerable: true,
  get: function () {
    return _ChangeSet.isChangeSet;
  }
});
Object.defineProperty(exports, "Dataflow", {
  enumerable: true,
  get: function () {
    return _Dataflow.default;
  }
});
Object.defineProperty(exports, "EventStream", {
  enumerable: true,
  get: function () {
    return _EventStream.default;
  }
});
Object.defineProperty(exports, "Parameters", {
  enumerable: true,
  get: function () {
    return _Parameters.default;
  }
});
Object.defineProperty(exports, "Pulse", {
  enumerable: true,
  get: function () {
    return _Pulse.default;
  }
});
Object.defineProperty(exports, "MultiPulse", {
  enumerable: true,
  get: function () {
    return _MultiPulse.default;
  }
});
Object.defineProperty(exports, "Operator", {
  enumerable: true,
  get: function () {
    return _Operator.default;
  }
});
Object.defineProperty(exports, "Transform", {
  enumerable: true,
  get: function () {
    return _Transform.default;
  }
});
Object.defineProperty(exports, "derive", {
  enumerable: true,
  get: function () {
    return _Tuple.derive;
  }
});
Object.defineProperty(exports, "ingest", {
  enumerable: true,
  get: function () {
    return _Tuple.ingest;
  }
});
Object.defineProperty(exports, "isTuple", {
  enumerable: true,
  get: function () {
    return _Tuple.isTuple;
  }
});
Object.defineProperty(exports, "rederive", {
  enumerable: true,
  get: function () {
    return _Tuple.rederive;
  }
});
Object.defineProperty(exports, "replace", {
  enumerable: true,
  get: function () {
    return _Tuple.replace;
  }
});
Object.defineProperty(exports, "stableCompare", {
  enumerable: true,
  get: function () {
    return _Tuple.stableCompare;
  }
});
Object.defineProperty(exports, "tupleid", {
  enumerable: true,
  get: function () {
    return _Tuple.tupleid;
  }
});
Object.defineProperty(exports, "definition", {
  enumerable: true,
  get: function () {
    return _register.definition;
  }
});
Object.defineProperty(exports, "transform", {
  enumerable: true,
  get: function () {
    return _register.transform;
  }
});
Object.defineProperty(exports, "transforms", {
  enumerable: true,
  get: function () {
    return _register.transforms;
  }
});

var _UniqueList = _interopRequireDefault(require("./src/util/UniqueList"));

var _asyncCallback = _interopRequireDefault(require("./src/util/asyncCallback"));

var _ChangeSet = _interopRequireWildcard(require("./src/ChangeSet"));

var _Dataflow = _interopRequireDefault(require("./src/dataflow/Dataflow"));

var _EventStream = _interopRequireDefault(require("./src/EventStream"));

var _Parameters = _interopRequireDefault(require("./src/Parameters"));

var _Pulse = _interopRequireDefault(require("./src/Pulse"));

var _MultiPulse = _interopRequireDefault(require("./src/MultiPulse"));

var _Operator = _interopRequireDefault(require("./src/Operator"));

var _Transform = _interopRequireDefault(require("./src/Transform"));

var _Tuple = require("./src/Tuple");

var _register = require("./src/register");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/util/UniqueList":"node_modules/vega-dataflow/src/util/UniqueList.js","./src/util/asyncCallback":"node_modules/vega-dataflow/src/util/asyncCallback.js","./src/ChangeSet":"node_modules/vega-dataflow/src/ChangeSet.js","./src/dataflow/Dataflow":"node_modules/vega-dataflow/src/dataflow/Dataflow.js","./src/EventStream":"node_modules/vega-dataflow/src/EventStream.js","./src/Parameters":"node_modules/vega-dataflow/src/Parameters.js","./src/Pulse":"node_modules/vega-dataflow/src/Pulse.js","./src/MultiPulse":"node_modules/vega-dataflow/src/MultiPulse.js","./src/Operator":"node_modules/vega-dataflow/src/Operator.js","./src/Transform":"node_modules/vega-dataflow/src/Transform.js","./src/Tuple":"node_modules/vega-dataflow/src/Tuple.js","./src/register":"node_modules/vega-dataflow/src/register.js"}],"node_modules/vega-transforms/src/util/AggregateKeys.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multikey = multikey;
exports.groupkey = groupkey;

function multikey(f) {
  return function (x) {
    var n = f.length,
        i = 1,
        k = String(f[0](x));

    for (; i < n; ++i) {
      k += '|' + f[i](x);
    }

    return k;
  };
}

function groupkey(fields) {
  return !fields || !fields.length ? function () {
    return '';
  } : fields.length === 1 ? fields[0] : multikey(fields);
}
},{}],"node_modules/vega-transforms/src/util/AggregateOps.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.measureName = measureName;
exports.createMeasure = createMeasure;
exports.compileMeasures = compileMeasures;
exports.ValidAggregateOps = exports.AggregateOps = void 0;

var _vegaUtil = require("vega-util");

function measureName(op, field, as) {
  return as || op + (!field ? '' : '_' + field);
}

var AggregateOps = {
  'values': measure({
    name: 'values',
    init: 'cell.store = true;',
    set: 'cell.data.values()',
    idx: -1
  }),
  'count': measure({
    name: 'count',
    set: 'cell.num'
  }),
  '__count__': measure({
    name: 'count',
    set: 'this.missing + this.valid'
  }),
  'missing': measure({
    name: 'missing',
    set: 'this.missing'
  }),
  'valid': measure({
    name: 'valid',
    set: 'this.valid'
  }),
  'sum': measure({
    name: 'sum',
    init: 'this.sum = 0;',
    add: 'this.sum += +v;',
    rem: 'this.sum -= v;',
    set: 'this.sum'
  }),
  'mean': measure({
    name: 'mean',
    init: 'this.mean = 0;',
    add: 'var d = v - this.mean; this.mean += d / this.valid;',
    rem: 'var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;',
    set: 'this.valid ? this.mean : undefined'
  }),
  'average': measure({
    name: 'average',
    set: 'this.valid ? this.mean : undefined',
    req: ['mean'],
    idx: 1
  }),
  'variance': measure({
    name: 'variance',
    init: 'this.dev = 0;',
    add: 'this.dev += d * (v - this.mean);',
    rem: 'this.dev -= d * (v - this.mean);',
    set: 'this.valid > 1 ? this.dev / (this.valid-1) : undefined',
    req: ['mean'],
    idx: 1
  }),
  'variancep': measure({
    name: 'variancep',
    set: 'this.valid > 1 ? this.dev / this.valid : undefined',
    req: ['variance'],
    idx: 2
  }),
  'stdev': measure({
    name: 'stdev',
    set: 'this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : undefined',
    req: ['variance'],
    idx: 2
  }),
  'stdevp': measure({
    name: 'stdevp',
    set: 'this.valid > 1 ? Math.sqrt(this.dev / this.valid) : undefined',
    req: ['variance'],
    idx: 2
  }),
  'stderr': measure({
    name: 'stderr',
    set: 'this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : undefined',
    req: ['variance'],
    idx: 2
  }),
  'distinct': measure({
    name: 'distinct',
    set: 'cell.data.distinct(this.get)',
    req: ['values'],
    idx: 3
  }),
  'ci0': measure({
    name: 'ci0',
    set: 'cell.data.ci0(this.get)',
    req: ['values'],
    idx: 3
  }),
  'ci1': measure({
    name: 'ci1',
    set: 'cell.data.ci1(this.get)',
    req: ['values'],
    idx: 3
  }),
  'median': measure({
    name: 'median',
    set: 'cell.data.q2(this.get)',
    req: ['values'],
    idx: 3
  }),
  'q1': measure({
    name: 'q1',
    set: 'cell.data.q1(this.get)',
    req: ['values'],
    idx: 3
  }),
  'q3': measure({
    name: 'q3',
    set: 'cell.data.q3(this.get)',
    req: ['values'],
    idx: 3
  }),
  'argmin': measure({
    name: 'argmin',
    init: 'this.argmin = undefined;',
    add: 'if (v < this.min) this.argmin = t;',
    rem: 'if (v <= this.min) this.argmin = undefined;',
    set: 'this.argmin || cell.data.argmin(this.get)',
    req: ['min'],
    str: ['values'],
    idx: 3
  }),
  'argmax': measure({
    name: 'argmax',
    init: 'this.argmax = undefined;',
    add: 'if (v > this.max) this.argmax = t;',
    rem: 'if (v >= this.max) this.argmax = undefined;',
    set: 'this.argmax || cell.data.argmax(this.get)',
    req: ['max'],
    str: ['values'],
    idx: 3
  }),
  'min': measure({
    name: 'min',
    init: 'this.min = undefined;',
    add: 'if (v < this.min || this.min === undefined) this.min = v;',
    rem: 'if (v <= this.min) this.min = NaN;',
    set: 'this.min = (isNaN(this.min) ? cell.data.min(this.get) : this.min)',
    str: ['values'],
    idx: 4
  }),
  'max': measure({
    name: 'max',
    init: 'this.max = undefined;',
    add: 'if (v > this.max || this.max === undefined) this.max = v;',
    rem: 'if (v >= this.max) this.max = NaN;',
    set: 'this.max = (isNaN(this.max) ? cell.data.max(this.get) : this.max)',
    str: ['values'],
    idx: 4
  })
};
exports.AggregateOps = AggregateOps;
var ValidAggregateOps = Object.keys(AggregateOps);
exports.ValidAggregateOps = ValidAggregateOps;

function createMeasure(op, name) {
  return AggregateOps[op](name);
}

function measure(base) {
  return function (out) {
    var m = (0, _vegaUtil.extend)({
      init: '',
      add: '',
      rem: '',
      idx: 0
    }, base);
    m.out = out || base.name;
    return m;
  };
}

function compareIndex(a, b) {
  return a.idx - b.idx;
}

function resolve(agg, stream) {
  function collect(m, a) {
    function helper(r) {
      if (!m[r]) collect(m, m[r] = AggregateOps[r]());
    }

    if (a.req) a.req.forEach(helper);
    if (stream && a.str) a.str.forEach(helper);
    return m;
  }

  var map = agg.reduce(collect, agg.reduce(function (m, a) {
    m[a.name] = a;
    return m;
  }, {}));
  var values = [],
      key;

  for (key in map) values.push(map[key]);

  return values.sort(compareIndex);
}

function compileMeasures(agg, field) {
  var get = field || _vegaUtil.identity,
      all = resolve(agg, true),
      // assume streaming removes may occur
  init = 'var cell = this.cell; this.valid = 0; this.missing = 0;',
      ctr = 'this.cell = cell; this.init();',
      add = 'if(v==null){++this.missing; return;} if(v!==v) return; ++this.valid;',
      rem = 'if(v==null){--this.missing; return;} if(v!==v) return; --this.valid;',
      set = 'var cell = this.cell;';
  all.forEach(function (a) {
    init += a.init;
    add += a.add;
    rem += a.rem;
  });
  agg.slice().sort(compareIndex).forEach(function (a) {
    set += 't[' + (0, _vegaUtil.stringValue)(a.out) + ']=' + a.set + ';';
  });
  set += 'return t;';
  ctr = Function('cell', ctr);
  ctr.prototype.init = Function(init);
  ctr.prototype.add = Function('v', 't', add);
  ctr.prototype.rem = Function('v', 't', rem);
  ctr.prototype.set = Function('t', set);
  ctr.prototype.get = get;
  ctr.fields = agg.map(function (_) {
    return _.out;
  });
  return ctr;
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-statistics/src/bin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  // determine range
  var maxb = _.maxbins || 20,
      base = _.base || 10,
      logb = Math.log(base),
      div = _.divide || [5, 2],
      min = _.extent[0],
      max = _.extent[1],
      span = _.span || max - min || Math.abs(min) || 1,
      step,
      level,
      minstep,
      precision,
      v,
      i,
      n,
      eps;

  if (_.step) {
    // if step size is explicitly given, use that
    step = _.step;
  } else if (_.steps) {
    // if provided, limit choice to acceptable step sizes
    v = span / maxb;

    for (i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i);

    step = _.steps[Math.max(0, i - 1)];
  } else {
    // else use span to determine step size
    level = Math.ceil(Math.log(maxb) / logb);
    minstep = _.minstep || 0;
    step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level)); // increase step size if too many bins

    while (Math.ceil(span / step) > maxb) {
      step *= base;
    } // decrease step size if allowed


    for (i = 0, n = div.length; i < n; ++i) {
      v = step / div[i];
      if (v >= minstep && span / v <= maxb) step = v;
    }
  } // update precision, min and max


  v = Math.log(step);
  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;
  eps = Math.pow(base, -precision - 1);

  if (_.nice || _.nice === undefined) {
    v = Math.floor(min / step + eps) * step;
    min = min < v ? v - step : v;
    max = Math.ceil(max / step) * step;
  }

  return {
    start: min,
    stop: max === min ? min + step : max,
    step: step
  };
}
},{}],"node_modules/vega-statistics/src/numbers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function* _default(values, valueof) {
  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        yield value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        yield value;
      }
    }
  }
}
},{}],"node_modules/vega-statistics/src/random.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setRandom = setRandom;
exports.random = void 0;
var random = Math.random;
exports.random = random;

function setRandom(r) {
  exports.random = random = r;
}
},{}],"node_modules/d3-array/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{}],"node_modules/d3-array/src/bisector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      }

      return lo;
    },
    right: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
      }

      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function (d, x) {
    return (0, _ascending.default)(f(d), x);
  };
}
},{"./ascending.js":"node_modules/d3-array/src/ascending.js"}],"node_modules/d3-array/src/bisect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bisectLeft = exports.bisectRight = void 0;

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _bisector = _interopRequireDefault(require("./bisector.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ascendingBisect = (0, _bisector.default)(_ascending.default);
var bisectRight = ascendingBisect.right;
exports.bisectRight = bisectRight;
var bisectLeft = ascendingBisect.left;
exports.bisectLeft = bisectLeft;
var _default = bisectRight;
exports.default = _default;
},{"./ascending.js":"node_modules/d3-array/src/ascending.js","./bisector.js":"node_modules/d3-array/src/bisector.js"}],"node_modules/d3-array/src/count.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = count;

function count(values, valueof) {
  let count = 0;

  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        ++count;
      }
    }
  }

  return count;
}
},{}],"node_modules/d3-array/src/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cross;

function length(array) {
  return array.length | 0;
}

function empty(length) {
  return !(length > 0);
}

function arrayify(values) {
  return typeof values !== "object" || "length" in values ? values : Array.from(values);
}

function reducer(reduce) {
  return values => reduce(...values);
}

function cross(...values) {
  const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
  values = values.map(arrayify);
  const lengths = values.map(length);
  const j = values.length - 1;
  const index = new Array(j + 1).fill(0);
  const product = [];
  if (j < 0 || lengths.some(empty)) return product;

  while (true) {
    product.push(index.map((j, i) => values[i][j]));
    let i = j;

    while (++index[i] === lengths[i]) {
      if (i === 0) return reduce ? product.map(reduce) : product;
      index[i--] = 0;
    }
  }
}
},{}],"node_modules/d3-array/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"node_modules/d3-array/src/variance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = variance;

function variance(values, valueof) {
  let count = 0;
  let delta;
  let mean = 0;
  let sum = 0;

  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        delta = value - mean;
        mean += delta / ++count;
        sum += delta * (value - mean);
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        delta = value - mean;
        mean += delta / ++count;
        sum += delta * (value - mean);
      }
    }
  }

  if (count > 1) return sum / (count - 1);
}
},{}],"node_modules/d3-array/src/deviation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deviation;

var _variance = _interopRequireDefault(require("./variance.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function deviation(values, valueof) {
  const v = (0, _variance.default)(values, valueof);
  return v ? Math.sqrt(v) : v;
}
},{"./variance.js":"node_modules/d3-array/src/variance.js"}],"node_modules/d3-array/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  let min;
  let max;

  if (valueof === undefined) {
    for (const value of values) {
      if (value != null) {
        if (min === undefined) {
          if (value >= value) min = max = value;
        } else {
          if (min > value) min = value;
          if (max < value) max = value;
        }
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null) {
        if (min === undefined) {
          if (value >= value) min = max = value;
        } else {
          if (min > value) min = value;
          if (max < value) max = value;
        }
      }
    }
  }

  return [min, max];
}
},{}],"node_modules/d3-array/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-array/src/group.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = group;
exports.groups = groups;
exports.rollup = rollup;
exports.rollups = rollups;

var _identity = _interopRequireDefault(require("./identity.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function group(values, ...keys) {
  return nest(values, _identity.default, _identity.default, keys);
}

function groups(values, ...keys) {
  return nest(values, Array.from, _identity.default, keys);
}

function rollup(values, reduce, ...keys) {
  return nest(values, _identity.default, reduce, keys);
}

function rollups(values, reduce, ...keys) {
  return nest(values, Array.from, reduce, keys);
}

function nest(values, map, reduce, keys) {
  return function regroup(values, i) {
    if (i >= keys.length) return reduce(values);
    const groups = new Map();
    const keyof = keys[i++];
    let index = -1;

    for (const value of values) {
      const key = keyof(value, ++index, values);
      const group = groups.get(key);
      if (group) group.push(value);else groups.set(key, [value]);
    }

    for (const [key, values] of groups) {
      groups.set(key, regroup(values, i));
    }

    return map(groups);
  }(values, 0);
}
},{"./identity.js":"node_modules/d3-array/src/identity.js"}],"node_modules/d3-array/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
var map = array.map;
exports.map = map;
},{}],"node_modules/d3-array/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-array/src/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
},{}],"node_modules/d3-array/src/ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function _default(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));

    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));

    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();
  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
},{}],"node_modules/d3-array/src/threshold/sturges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}
},{}],"node_modules/d3-array/src/bin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array.js");

var _bisect = _interopRequireDefault(require("./bisect.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _extent = _interopRequireDefault(require("./extent.js"));

var _identity = _interopRequireDefault(require("./identity.js"));

var _range = _interopRequireDefault(require("./range.js"));

var _ticks = require("./ticks.js");

var _sturges = _interopRequireDefault(require("./threshold/sturges.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      domain = _extent.default,
      threshold = _sturges.default;

  function histogram(data) {
    if (!Array.isArray(data)) data = Array.from(data);
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      tz = (0, _ticks.tickStep)(x0, x1, tz);
      tz = (0, _range.default)(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
    } // Remove any thresholds outside the domain.


    var m = tz.length;

    while (tz[0] <= x0) tz.shift(), --m;

    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin; // Initialize bins.

    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    } // Assign data to bins by value, ignoring any outside the domain.


    for (i = 0; i < n; ++i) {
      x = values[i];

      if (x0 <= x && x <= x1) {
        bins[(0, _bisect.default)(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(_), histogram) : value;
  };

  histogram.domain = function (_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constant.default)([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), histogram) : threshold;
  };

  return histogram;
}
},{"./array.js":"node_modules/d3-array/src/array.js","./bisect.js":"node_modules/d3-array/src/bisect.js","./constant.js":"node_modules/d3-array/src/constant.js","./extent.js":"node_modules/d3-array/src/extent.js","./identity.js":"node_modules/d3-array/src/identity.js","./range.js":"node_modules/d3-array/src/range.js","./ticks.js":"node_modules/d3-array/src/ticks.js","./threshold/sturges.js":"node_modules/d3-array/src/threshold/sturges.js"}],"node_modules/d3-array/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.numbers = numbers;

function _default(x) {
  return x === null ? NaN : +x;
}

function* numbers(values, valueof) {
  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        yield value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        yield value;
      }
    }
  }
}
},{}],"node_modules/d3-array/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantile;
exports.quantileSorted = quantileSorted;

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _number = _interopRequireWildcard(require("./number.js"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function quantile(values, p, valueof) {
  return quantileSorted(Float64Array.from((0, _number.numbers)(values, valueof)).sort(_ascending.default), p);
}

function quantileSorted(values, p, valueof = _number.default) {
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
},{"./ascending.js":"node_modules/d3-array/src/ascending.js","./number.js":"node_modules/d3-array/src/number.js"}],"node_modules/d3-array/src/threshold/freedmanDiaconis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array.js");

var _ascending = _interopRequireDefault(require("../ascending.js"));

var _number = _interopRequireDefault(require("../number.js"));

var _quantile = _interopRequireDefault(require("../quantile.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  values = _array.map.call(values, _number.default).sort(_ascending.default);
  return Math.ceil((max - min) / (2 * ((0, _quantile.default)(values, 0.75) - (0, _quantile.default)(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}
},{"../array.js":"node_modules/d3-array/src/array.js","../ascending.js":"node_modules/d3-array/src/ascending.js","../number.js":"node_modules/d3-array/src/number.js","../quantile.js":"node_modules/d3-array/src/quantile.js"}],"node_modules/d3-array/src/threshold/scott.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _deviation = _interopRequireDefault(require("../deviation.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  return Math.ceil((max - min) / (3.5 * (0, _deviation.default)(values) * Math.pow(values.length, -1 / 3)));
}
},{"../deviation.js":"node_modules/d3-array/src/deviation.js"}],"node_modules/d3-array/src/max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = max;

function max(values, valueof) {
  let max;

  if (valueof === undefined) {
    for (const value of values) {
      if (value != null && (max < value || max === undefined && value >= value)) {
        max = value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {
        max = value;
      }
    }
  }

  return max;
}
},{}],"node_modules/d3-array/src/maxIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = maxIndex;

function maxIndex(values, valueof) {
  let max;
  let maxIndex = -1;
  let index = -1;

  if (valueof === undefined) {
    for (const value of values) {
      ++index;

      if (value != null && (max < value || max === undefined && value >= value)) {
        max = value, maxIndex = index;
      }
    }
  } else {
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {
        max = value, maxIndex = index;
      }
    }
  }

  return maxIndex;
}
},{}],"node_modules/d3-array/src/mean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mean;

function mean(values, valueof) {
  let count = 0;
  let sum = 0;

  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count, sum += value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        ++count, sum += value;
      }
    }
  }

  if (count) return sum / count;
}
},{}],"node_modules/d3-array/src/quickselect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quickselect;

var _ascending = _interopRequireDefault(require("./ascending.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Based on https://github.com/mourner/quickselect
// ISC license, Copyright 2018 Vladimir Agafonkin.
function quickselect(array, k, left = 0, right = array.length - 1, compare = _ascending.default) {
  while (right > left) {
    if (right - left > 600) {
      const n = right - left + 1;
      const m = k - left + 1;
      const z = Math.log(n);
      const s = 0.5 * Math.exp(2 * z / 3);
      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
      quickselect(array, k, newLeft, newRight, compare);
    }

    const t = array[k];
    let i = left;
    let j = right;
    swap(array, left, k);
    if (compare(array[right], t) > 0) swap(array, left, right);

    while (i < j) {
      swap(array, i, j), ++i, --j;

      while (compare(array[i], t) < 0) ++i;

      while (compare(array[j], t) > 0) --j;
    }

    if (compare(array[left], t) === 0) swap(array, left, j);else ++j, swap(array, j, right);
    if (j <= k) left = j + 1;
    if (k <= j) right = j - 1;
  }

  return array;
}

function swap(array, i, j) {
  const t = array[i];
  array[i] = array[j];
  array[j] = t;
}
},{"./ascending.js":"node_modules/d3-array/src/ascending.js"}],"node_modules/d3-array/src/median.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = require("./number.js");

var _quantile = _interopRequireDefault(require("./quantile.js"));

var _quickselect = _interopRequireDefault(require("./quickselect.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  values = Float64Array.from((0, _number.numbers)(values, valueof));
  if (!values.length) return;
  const n = values.length;
  const i = n >> 1;
  (0, _quickselect.default)(values, i - 1, 0);
  if ((n & 1) === 0) (0, _quickselect.default)(values, i, i);
  return (0, _quantile.default)(values, 0.5);
}
},{"./number.js":"node_modules/d3-array/src/number.js","./quantile.js":"node_modules/d3-array/src/quantile.js","./quickselect.js":"node_modules/d3-array/src/quickselect.js"}],"node_modules/d3-array/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = merge;

function* flatten(arrays) {
  for (const array of arrays) {
    yield* array;
  }
}

function merge(arrays) {
  return Array.from(flatten(arrays));
}
},{}],"node_modules/d3-array/src/min.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = min;

function min(values, valueof) {
  let min;

  if (valueof === undefined) {
    for (const value of values) {
      if (value != null && (min > value || min === undefined && value >= value)) {
        min = value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {
        min = value;
      }
    }
  }

  return min;
}
},{}],"node_modules/d3-array/src/minIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = minIndex;

function minIndex(values, valueof) {
  let min;
  let minIndex = -1;
  let index = -1;

  if (valueof === undefined) {
    for (const value of values) {
      ++index;

      if (value != null && (min > value || min === undefined && value >= value)) {
        min = value, minIndex = index;
      }
    }
  } else {
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {
        min = value, minIndex = index;
      }
    }
  }

  return minIndex;
}
},{}],"node_modules/d3-array/src/pairs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pairs;
exports.pair = pair;

function pairs(values, pairof = pair) {
  const pairs = [];
  let previous;
  let first = false;

  for (const value of values) {
    if (first) pairs.push(pairof(previous, value));
    previous = value;
    first = true;
  }

  return pairs;
}

function pair(a, b) {
  return [a, b];
}
},{}],"node_modules/d3-array/src/permute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(source, keys) {
  return Array.from(keys, key => source[key]);
}
},{}],"node_modules/d3-array/src/least.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = least;

var _ascending = _interopRequireDefault(require("./ascending.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function least(values, compare = _ascending.default) {
  let min;
  let defined = false;

  if (compare.length === 1) {
    let minValue;

    for (const element of values) {
      const value = compare(element);

      if (defined ? (0, _ascending.default)(value, minValue) < 0 : (0, _ascending.default)(value, value) === 0) {
        min = element;
        minValue = value;
        defined = true;
      }
    }
  } else {
    for (const value of values) {
      if (defined ? compare(value, min) < 0 : compare(value, value) === 0) {
        min = value;
        defined = true;
      }
    }
  }

  return min;
}
},{"./ascending.js":"node_modules/d3-array/src/ascending.js"}],"node_modules/d3-array/src/leastIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = leastIndex;

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _minIndex = _interopRequireDefault(require("./minIndex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function leastIndex(values, compare = _ascending.default) {
  if (compare.length === 1) return (0, _minIndex.default)(values, compare);
  let minValue;
  let min = -1;
  let index = -1;

  for (const value of values) {
    ++index;

    if (min < 0 ? compare(value, value) === 0 : compare(value, minValue) < 0) {
      minValue = value;
      min = index;
    }
  }

  return min;
}
},{"./ascending.js":"node_modules/d3-array/src/ascending.js","./minIndex.js":"node_modules/d3-array/src/minIndex.js"}],"node_modules/d3-array/src/greatest.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = greatest;

var _ascending = _interopRequireDefault(require("./ascending.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function greatest(values, compare = _ascending.default) {
  let max;
  let defined = false;

  if (compare.length === 1) {
    let maxValue;

    for (const element of values) {
      const value = compare(element);

      if (defined ? (0, _ascending.default)(value, maxValue) > 0 : (0, _ascending.default)(value, value) === 0) {
        max = element;
        maxValue = value;
        defined = true;
      }
    }
  } else {
    for (const value of values) {
      if (defined ? compare(value, max) > 0 : compare(value, value) === 0) {
        max = value;
        defined = true;
      }
    }
  }

  return max;
}
},{"./ascending.js":"node_modules/d3-array/src/ascending.js"}],"node_modules/d3-array/src/greatestIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = greatestIndex;

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _maxIndex = _interopRequireDefault(require("./maxIndex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function greatestIndex(values, compare = _ascending.default) {
  if (compare.length === 1) return (0, _maxIndex.default)(values, compare);
  let maxValue;
  let max = -1;
  let index = -1;

  for (const value of values) {
    ++index;

    if (max < 0 ? compare(value, value) === 0 : compare(value, maxValue) > 0) {
      maxValue = value;
      max = index;
    }
  }

  return max;
}
},{"./ascending.js":"node_modules/d3-array/src/ascending.js","./maxIndex.js":"node_modules/d3-array/src/maxIndex.js"}],"node_modules/d3-array/src/scan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = scan;

var _leastIndex = _interopRequireDefault(require("./leastIndex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function scan(values, compare) {
  const index = (0, _leastIndex.default)(values, compare);
  return index < 0 ? undefined : index;
}
},{"./leastIndex.js":"node_modules/d3-array/src/leastIndex.js"}],"node_modules/d3-array/src/shuffle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shuffle;

function shuffle(array, i0 = 0, i1 = array.length) {
  var m = i1 - (i0 = +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}
},{}],"node_modules/d3-array/src/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sum;

function sum(values, valueof) {
  let sum = 0;

  if (valueof === undefined) {
    for (let value of values) {
      if (value = +value) {
        sum += value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if (value = +valueof(value, ++index, values)) {
        sum += value;
      }
    }
  }

  return sum;
}
},{}],"node_modules/d3-array/src/transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _min = _interopRequireDefault(require("./min.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(matrix) {
  if (!(n = matrix.length)) return [];

  for (var i = -1, m = (0, _min.default)(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }

  return transpose;
}

function length(d) {
  return d.length;
}
},{"./min.js":"node_modules/d3-array/src/min.js"}],"node_modules/d3-array/src/zip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transpose = _interopRequireDefault(require("./transpose.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _transpose.default)(arguments);
}
},{"./transpose.js":"node_modules/d3-array/src/transpose.js"}],"node_modules/d3-array/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bisect", {
  enumerable: true,
  get: function () {
    return _bisect.default;
  }
});
Object.defineProperty(exports, "bisectRight", {
  enumerable: true,
  get: function () {
    return _bisect.bisectRight;
  }
});
Object.defineProperty(exports, "bisectLeft", {
  enumerable: true,
  get: function () {
    return _bisect.bisectLeft;
  }
});
Object.defineProperty(exports, "ascending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "bisector", {
  enumerable: true,
  get: function () {
    return _bisector.default;
  }
});
Object.defineProperty(exports, "count", {
  enumerable: true,
  get: function () {
    return _count.default;
  }
});
Object.defineProperty(exports, "cross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "descending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "deviation", {
  enumerable: true,
  get: function () {
    return _deviation.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "group", {
  enumerable: true,
  get: function () {
    return _group.default;
  }
});
Object.defineProperty(exports, "groups", {
  enumerable: true,
  get: function () {
    return _group.groups;
  }
});
Object.defineProperty(exports, "rollup", {
  enumerable: true,
  get: function () {
    return _group.rollup;
  }
});
Object.defineProperty(exports, "rollups", {
  enumerable: true,
  get: function () {
    return _group.rollups;
  }
});
Object.defineProperty(exports, "bin", {
  enumerable: true,
  get: function () {
    return _bin.default;
  }
});
Object.defineProperty(exports, "histogram", {
  enumerable: true,
  get: function () {
    return _bin.default;
  }
});
Object.defineProperty(exports, "thresholdFreedmanDiaconis", {
  enumerable: true,
  get: function () {
    return _freedmanDiaconis.default;
  }
});
Object.defineProperty(exports, "thresholdScott", {
  enumerable: true,
  get: function () {
    return _scott.default;
  }
});
Object.defineProperty(exports, "thresholdSturges", {
  enumerable: true,
  get: function () {
    return _sturges.default;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.default;
  }
});
Object.defineProperty(exports, "maxIndex", {
  enumerable: true,
  get: function () {
    return _maxIndex.default;
  }
});
Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function () {
    return _mean.default;
  }
});
Object.defineProperty(exports, "median", {
  enumerable: true,
  get: function () {
    return _median.default;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.default;
  }
});
Object.defineProperty(exports, "minIndex", {
  enumerable: true,
  get: function () {
    return _minIndex.default;
  }
});
Object.defineProperty(exports, "pairs", {
  enumerable: true,
  get: function () {
    return _pairs.default;
  }
});
Object.defineProperty(exports, "permute", {
  enumerable: true,
  get: function () {
    return _permute.default;
  }
});
Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "quantileSorted", {
  enumerable: true,
  get: function () {
    return _quantile.quantileSorted;
  }
});
Object.defineProperty(exports, "quickselect", {
  enumerable: true,
  get: function () {
    return _quickselect.default;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.default;
  }
});
Object.defineProperty(exports, "least", {
  enumerable: true,
  get: function () {
    return _least.default;
  }
});
Object.defineProperty(exports, "leastIndex", {
  enumerable: true,
  get: function () {
    return _leastIndex.default;
  }
});
Object.defineProperty(exports, "greatest", {
  enumerable: true,
  get: function () {
    return _greatest.default;
  }
});
Object.defineProperty(exports, "greatestIndex", {
  enumerable: true,
  get: function () {
    return _greatestIndex.default;
  }
});
Object.defineProperty(exports, "scan", {
  enumerable: true,
  get: function () {
    return _scan.default;
  }
});
Object.defineProperty(exports, "shuffle", {
  enumerable: true,
  get: function () {
    return _shuffle.default;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function () {
    return _sum.default;
  }
});
Object.defineProperty(exports, "ticks", {
  enumerable: true,
  get: function () {
    return _ticks.default;
  }
});
Object.defineProperty(exports, "tickIncrement", {
  enumerable: true,
  get: function () {
    return _ticks.tickIncrement;
  }
});
Object.defineProperty(exports, "tickStep", {
  enumerable: true,
  get: function () {
    return _ticks.tickStep;
  }
});
Object.defineProperty(exports, "transpose", {
  enumerable: true,
  get: function () {
    return _transpose.default;
  }
});
Object.defineProperty(exports, "variance", {
  enumerable: true,
  get: function () {
    return _variance.default;
  }
});
Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function () {
    return _zip.default;
  }
});

var _bisect = _interopRequireWildcard(require("./bisect.js"));

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _bisector = _interopRequireDefault(require("./bisector.js"));

var _count = _interopRequireDefault(require("./count.js"));

var _cross = _interopRequireDefault(require("./cross.js"));

var _descending = _interopRequireDefault(require("./descending.js"));

var _deviation = _interopRequireDefault(require("./deviation.js"));

var _extent = _interopRequireDefault(require("./extent.js"));

var _group = _interopRequireWildcard(require("./group.js"));

var _bin = _interopRequireDefault(require("./bin.js"));

var _freedmanDiaconis = _interopRequireDefault(require("./threshold/freedmanDiaconis.js"));

var _scott = _interopRequireDefault(require("./threshold/scott.js"));

var _sturges = _interopRequireDefault(require("./threshold/sturges.js"));

var _max = _interopRequireDefault(require("./max.js"));

var _maxIndex = _interopRequireDefault(require("./maxIndex.js"));

var _mean = _interopRequireDefault(require("./mean.js"));

var _median = _interopRequireDefault(require("./median.js"));

var _merge = _interopRequireDefault(require("./merge.js"));

var _min = _interopRequireDefault(require("./min.js"));

var _minIndex = _interopRequireDefault(require("./minIndex.js"));

var _pairs = _interopRequireDefault(require("./pairs.js"));

var _permute = _interopRequireDefault(require("./permute.js"));

var _quantile = _interopRequireWildcard(require("./quantile.js"));

var _quickselect = _interopRequireDefault(require("./quickselect.js"));

var _range = _interopRequireDefault(require("./range.js"));

var _least = _interopRequireDefault(require("./least.js"));

var _leastIndex = _interopRequireDefault(require("./leastIndex.js"));

var _greatest = _interopRequireDefault(require("./greatest.js"));

var _greatestIndex = _interopRequireDefault(require("./greatestIndex.js"));

var _scan = _interopRequireDefault(require("./scan.js"));

var _shuffle = _interopRequireDefault(require("./shuffle.js"));

var _sum = _interopRequireDefault(require("./sum.js"));

var _ticks = _interopRequireWildcard(require("./ticks.js"));

var _transpose = _interopRequireDefault(require("./transpose.js"));

var _variance = _interopRequireDefault(require("./variance.js"));

var _zip = _interopRequireDefault(require("./zip.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./bisect.js":"node_modules/d3-array/src/bisect.js","./ascending.js":"node_modules/d3-array/src/ascending.js","./bisector.js":"node_modules/d3-array/src/bisector.js","./count.js":"node_modules/d3-array/src/count.js","./cross.js":"node_modules/d3-array/src/cross.js","./descending.js":"node_modules/d3-array/src/descending.js","./deviation.js":"node_modules/d3-array/src/deviation.js","./extent.js":"node_modules/d3-array/src/extent.js","./group.js":"node_modules/d3-array/src/group.js","./bin.js":"node_modules/d3-array/src/bin.js","./threshold/freedmanDiaconis.js":"node_modules/d3-array/src/threshold/freedmanDiaconis.js","./threshold/scott.js":"node_modules/d3-array/src/threshold/scott.js","./threshold/sturges.js":"node_modules/d3-array/src/threshold/sturges.js","./max.js":"node_modules/d3-array/src/max.js","./maxIndex.js":"node_modules/d3-array/src/maxIndex.js","./mean.js":"node_modules/d3-array/src/mean.js","./median.js":"node_modules/d3-array/src/median.js","./merge.js":"node_modules/d3-array/src/merge.js","./min.js":"node_modules/d3-array/src/min.js","./minIndex.js":"node_modules/d3-array/src/minIndex.js","./pairs.js":"node_modules/d3-array/src/pairs.js","./permute.js":"node_modules/d3-array/src/permute.js","./quantile.js":"node_modules/d3-array/src/quantile.js","./quickselect.js":"node_modules/d3-array/src/quickselect.js","./range.js":"node_modules/d3-array/src/range.js","./least.js":"node_modules/d3-array/src/least.js","./leastIndex.js":"node_modules/d3-array/src/leastIndex.js","./greatest.js":"node_modules/d3-array/src/greatest.js","./greatestIndex.js":"node_modules/d3-array/src/greatestIndex.js","./scan.js":"node_modules/d3-array/src/scan.js","./shuffle.js":"node_modules/d3-array/src/shuffle.js","./sum.js":"node_modules/d3-array/src/sum.js","./ticks.js":"node_modules/d3-array/src/ticks.js","./transpose.js":"node_modules/d3-array/src/transpose.js","./variance.js":"node_modules/d3-array/src/variance.js","./zip.js":"node_modules/d3-array/src/zip.js"}],"node_modules/vega-statistics/src/bootstrapCI.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _numbers = _interopRequireDefault(require("./numbers"));

var _random = require("./random");

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, samples, alpha, f) {
  if (!array.length) return [undefined, undefined];
  var values = Float64Array.from((0, _numbers.default)(array, f)),
      n = values.length,
      m = samples,
      a,
      i,
      j,
      mu;

  for (j = 0, mu = Array(m); j < m; ++j) {
    for (a = 0, i = 0; i < n; ++i) {
      a += values[~~((0, _random.random)() * n)];
    }

    mu[j] = a / n;
  }

  mu.sort(_d3Array.ascending);
  return [(0, _d3Array.quantile)(mu, alpha / 2), (0, _d3Array.quantile)(mu, 1 - alpha / 2)];
}
},{"./numbers":"node_modules/vega-statistics/src/numbers.js","./random":"node_modules/vega-statistics/src/random.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/vega-statistics/src/quartiles.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _numbers = _interopRequireDefault(require("./numbers"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, f) {
  var values = Float64Array.from((0, _numbers.default)(array, f)); // don't depend on return value from typed array sort call
  // protects against undefined sort results in Safari (vega/vega-lite#4964)

  values.sort(_d3Array.ascending);
  return [(0, _d3Array.quantile)(values, 0.25), (0, _d3Array.quantile)(values, 0.50), (0, _d3Array.quantile)(values, 0.75)];
}
},{"./numbers":"node_modules/vega-statistics/src/numbers.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/vega-statistics/src/lcg.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(seed) {
  // Random numbers using a Linear Congruential Generator with seed value
  // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator
  return function () {
    seed = (1103515245 * seed + 12345) % 2147483647;
    return seed / 2147483647;
  };
}
},{}],"node_modules/vega-statistics/src/integer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _random = require("./random");

function _default(min, max) {
  if (max == null) {
    max = min;
    min = 0;
  }

  var dist = {},
      a,
      b,
      d;

  dist.min = function (_) {
    if (arguments.length) {
      a = _ || 0;
      d = b - a;
      return dist;
    } else {
      return a;
    }
  };

  dist.max = function (_) {
    if (arguments.length) {
      b = _ || 0;
      d = b - a;
      return dist;
    } else {
      return b;
    }
  };

  dist.sample = function () {
    return a + Math.floor(d * (0, _random.random)());
  };

  dist.pdf = function (x) {
    return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;
  };

  dist.cdf = function (x) {
    var v = Math.floor(x);
    return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;
  };

  dist.icdf = function (p) {
    return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;
  };

  return dist.min(min).max(max);
}
},{"./random":"node_modules/vega-statistics/src/random.js"}],"node_modules/vega-statistics/src/normal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _random = require("./random");

function _default(mean, stdev) {
  var mu,
      sigma,
      next = NaN,
      dist = {};

  dist.mean = function (_) {
    if (arguments.length) {
      mu = _ || 0;
      next = NaN;
      return dist;
    } else {
      return mu;
    }
  };

  dist.stdev = function (_) {
    if (arguments.length) {
      sigma = _ == null ? 1 : _;
      next = NaN;
      return dist;
    } else {
      return sigma;
    }
  };

  dist.sample = function () {
    var x = 0,
        y = 0,
        rds,
        c;

    if (next === next) {
      x = next;
      next = NaN;
      return x;
    }

    do {
      x = (0, _random.random)() * 2 - 1;
      y = (0, _random.random)() * 2 - 1;
      rds = x * x + y * y;
    } while (rds === 0 || rds > 1);

    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform

    next = mu + y * c * sigma;
    return mu + x * c * sigma;
  };

  dist.pdf = function (x) {
    var exp = Math.exp(Math.pow(x - mu, 2) / (-2 * Math.pow(sigma, 2)));
    return 1 / (sigma * Math.sqrt(2 * Math.PI)) * exp;
  }; // Approximation from West (2009)
  // Better Approximations to Cumulative Normal Functions


  dist.cdf = function (x) {
    var cd,
        z = (x - mu) / sigma,
        Z = Math.abs(z);

    if (Z > 37) {
      cd = 0;
    } else {
      var sum,
          exp = Math.exp(-Z * Z / 2);

      if (Z < 7.07106781186547) {
        sum = 3.52624965998911e-02 * Z + 0.700383064443688;
        sum = sum * Z + 6.37396220353165;
        sum = sum * Z + 33.912866078383;
        sum = sum * Z + 112.079291497871;
        sum = sum * Z + 221.213596169931;
        sum = sum * Z + 220.206867912376;
        cd = exp * sum;
        sum = 8.83883476483184e-02 * Z + 1.75566716318264;
        sum = sum * Z + 16.064177579207;
        sum = sum * Z + 86.7807322029461;
        sum = sum * Z + 296.564248779674;
        sum = sum * Z + 637.333633378831;
        sum = sum * Z + 793.826512519948;
        sum = sum * Z + 440.413735824752;
        cd = cd / sum;
      } else {
        sum = Z + 0.65;
        sum = Z + 4 / sum;
        sum = Z + 3 / sum;
        sum = Z + 2 / sum;
        sum = Z + 1 / sum;
        cd = exp / sum / 2.506628274631;
      }
    }

    return z > 0 ? 1 - cd : cd;
  }; // Approximation of Probit function using inverse error function.


  dist.icdf = function (p) {
    if (p <= 0 || p >= 1) return NaN;
    var x = 2 * p - 1,
        v = 8 * (Math.PI - 3) / (3 * Math.PI * (4 - Math.PI)),
        a = 2 / (Math.PI * v) + Math.log(1 - Math.pow(x, 2)) / 2,
        b = Math.log(1 - x * x) / v,
        s = (x > 0 ? 1 : -1) * Math.sqrt(Math.sqrt(a * a - b) - a);
    return mu + sigma * Math.SQRT2 * s;
  };

  return dist.mean(mean).stdev(stdev);
}
},{"./random":"node_modules/vega-statistics/src/random.js"}],"node_modules/vega-statistics/src/kde.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _normal = _interopRequireDefault(require("./normal"));

var _quartiles = _interopRequireDefault(require("./quartiles"));

var _random = require("./random");

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: support for additional kernels?
function _default(support, bandwidth) {
  var kernel = (0, _normal.default)(),
      dist = {},
      n = 0;

  dist.data = function (_) {
    if (arguments.length) {
      support = _;
      n = _ ? _.length : 0;
      return dist.bandwidth(bandwidth);
    } else {
      return support;
    }
  };

  dist.bandwidth = function (_) {
    if (!arguments.length) return bandwidth;
    bandwidth = _;
    if (!bandwidth && support) bandwidth = estimateBandwidth(support);
    return dist;
  };

  dist.sample = function () {
    return support[~~((0, _random.random)() * n)] + bandwidth * kernel.sample();
  };

  dist.pdf = function (x) {
    for (var y = 0, i = 0; i < n; ++i) {
      y += kernel.pdf((x - support[i]) / bandwidth);
    }

    return y / bandwidth / n;
  };

  dist.cdf = function (x) {
    for (var y = 0, i = 0; i < n; ++i) {
      y += kernel.cdf((x - support[i]) / bandwidth);
    }

    return y / n;
  };

  dist.icdf = function () {
    throw Error('KDE icdf not supported.');
  };

  return dist.data(support);
} // Scott, D. W. (1992) Multivariate Density Estimation:
// Theory, Practice, and Visualization. Wiley.


function estimateBandwidth(array) {
  var n = array.length,
      q = (0, _quartiles.default)(array),
      h = (q[2] - q[0]) / 1.34;
  return 1.06 * Math.min(Math.sqrt((0, _d3Array.variance)(array)), h) * Math.pow(n, -0.2);
}
},{"./normal":"node_modules/vega-statistics/src/normal.js","./quartiles":"node_modules/vega-statistics/src/quartiles.js","./random":"node_modules/vega-statistics/src/random.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/vega-statistics/src/mixture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _random = require("./random");

function _default(dists, weights) {
  var dist = {},
      m = 0,
      w;

  function normalize(x) {
    var w = [],
        sum = 0,
        i;

    for (i = 0; i < m; ++i) {
      sum += w[i] = x[i] == null ? 1 : +x[i];
    }

    for (i = 0; i < m; ++i) {
      w[i] /= sum;
    }

    return w;
  }

  dist.weights = function (_) {
    if (arguments.length) {
      w = normalize(weights = _ || []);
      return dist;
    }

    return weights;
  };

  dist.distributions = function (_) {
    if (arguments.length) {
      if (_) {
        m = _.length;
        dists = _;
      } else {
        m = 0;
        dists = [];
      }

      return dist.weights(weights);
    }

    return dists;
  };

  dist.sample = function () {
    var r = (0, _random.random)(),
        d = dists[m - 1],
        v = w[0],
        i = 0; // first select distribution

    for (; i < m - 1; v += w[++i]) {
      if (r < v) {
        d = dists[i];
        break;
      }
    } // then sample from it


    return d.sample();
  };

  dist.pdf = function (x) {
    for (var p = 0, i = 0; i < m; ++i) {
      p += w[i] * dists[i].pdf(x);
    }

    return p;
  };

  dist.cdf = function (x) {
    for (var p = 0, i = 0; i < m; ++i) {
      p += w[i] * dists[i].cdf(x);
    }

    return p;
  };

  dist.icdf = function () {
    throw Error('Mixture icdf not supported.');
  };

  return dist.distributions(dists).weights(weights);
}
},{"./random":"node_modules/vega-statistics/src/random.js"}],"node_modules/vega-statistics/src/uniform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _random = require("./random");

function _default(min, max) {
  if (max == null) {
    max = min == null ? 1 : min;
    min = 0;
  }

  var dist = {},
      a,
      b,
      d;

  dist.min = function (_) {
    if (arguments.length) {
      a = _ || 0;
      d = b - a;
      return dist;
    } else {
      return a;
    }
  };

  dist.max = function (_) {
    if (arguments.length) {
      b = _ || 0;
      d = b - a;
      return dist;
    } else {
      return b;
    }
  };

  dist.sample = function () {
    return a + d * (0, _random.random)();
  };

  dist.pdf = function (x) {
    return x >= a && x <= b ? 1 / d : 0;
  };

  dist.cdf = function (x) {
    return x < a ? 0 : x > b ? 1 : (x - a) / d;
  };

  dist.icdf = function (p) {
    return p >= 0 && p <= 1 ? a + p * d : NaN;
  };

  return dist.min(min).max(max);
}
},{"./random":"node_modules/vega-statistics/src/random.js"}],"node_modules/vega-statistics/src/regression/ols.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Ordinary Least Squares
function _default(uX, uY, uXY, uX2) {
  const delta = uX2 - uX * uX,
        slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,
        intercept = uY - slope * uX;
  return [intercept, slope];
}
},{}],"node_modules/vega-statistics/src/regression/points.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.points = points;
exports.visitPoints = visitPoints;

function points(data, x, y, sort) {
  data = data.filter(d => {
    let u = x(d),
        v = y(d);
    return u != null && (u = +u) >= u && v != null && (v = +v) >= v;
  });

  if (sort) {
    data.sort((a, b) => x(a) - x(b));
  }

  const X = new Float64Array(data.length),
        Y = new Float64Array(data.length);
  let i = 0;

  for (let d of data) {
    X[i] = x(d);
    Y[i] = y(d);
    ++i;
  }

  return [X, Y];
}

function visitPoints(data, x, y, callback) {
  let index = -1,
      i = -1,
      u,
      v;

  for (let d of data) {
    u = x(d, ++index, data);
    v = y(d, index, data);

    if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {
      callback(u, v, ++i);
    }
  }
}
},{}],"node_modules/vega-statistics/src/regression/r-squared.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _points = require("./points");

// Adapted from d3-regression by Harry Stevens
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
function _default(data, x, y, uY, predict) {
  let SSE = 0,
      SST = 0;
  (0, _points.visitPoints)(data, x, y, (dx, dy) => {
    const sse = dy - predict(dx),
          sst = dy - uY;
    SSE += sse * sse;
    SST += sst * sst;
  });
  return 1 - SSE / SST;
}
},{"./points":"node_modules/vega-statistics/src/regression/points.js"}],"node_modules/vega-statistics/src/regression/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ols = _interopRequireDefault(require("./ols"));

var _points = require("./points");

var _rSquared = _interopRequireDefault(require("./r-squared"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Adapted from d3-regression by Harry Stevens
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
function _default(data, x, y) {
  let X = 0,
      Y = 0,
      XY = 0,
      X2 = 0,
      n = 0;
  (0, _points.visitPoints)(data, x, y, (dx, dy) => {
    X += dx;
    Y += dy;
    XY += dx * dy;
    X2 += dx * dx;
    ++n;
  });

  const coef = (0, _ols.default)(X / n, Y / n, XY / n, X2 / n),
        predict = x => coef[0] + coef[1] * x;

  return {
    coef: coef,
    predict: predict,
    rSquared: (0, _rSquared.default)(data, x, y, Y / n, predict)
  };
}
},{"./ols":"node_modules/vega-statistics/src/regression/ols.js","./points":"node_modules/vega-statistics/src/regression/points.js","./r-squared":"node_modules/vega-statistics/src/regression/r-squared.js"}],"node_modules/vega-statistics/src/regression/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ols = _interopRequireDefault(require("./ols"));

var _points = require("./points");

var _rSquared = _interopRequireDefault(require("./r-squared"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Adapted from d3-regression by Harry Stevens
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
function _default(data, x, y) {
  let X = 0,
      Y = 0,
      XY = 0,
      X2 = 0,
      n = 0;
  (0, _points.visitPoints)(data, x, y, (dx, dy) => {
    dx = Math.log(dx);
    X += dx;
    Y += dy;
    XY += dx * dy;
    X2 += dx * dx;
    ++n;
  });

  const coef = (0, _ols.default)(X / n, Y / n, XY / n, X2 / n),
        predict = x => coef[0] + coef[1] * Math.log(x);

  return {
    coef: coef,
    predict: predict,
    rSquared: (0, _rSquared.default)(data, x, y, Y / n, predict)
  };
}
},{"./ols":"node_modules/vega-statistics/src/regression/ols.js","./points":"node_modules/vega-statistics/src/regression/points.js","./r-squared":"node_modules/vega-statistics/src/regression/r-squared.js"}],"node_modules/vega-statistics/src/regression/exp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ols = _interopRequireDefault(require("./ols"));

var _points = require("./points");

var _rSquared = _interopRequireDefault(require("./r-squared"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(data, x, y) {
  let Y = 0,
      YL = 0,
      XY = 0,
      XYL = 0,
      X2Y = 0,
      n = 0;
  (0, _points.visitPoints)(data, x, y, (dx, dy) => {
    const ly = Math.log(dy),
          xy = dx * dy;
    Y += dy;
    XY += xy;
    X2Y += dx * xy;
    YL += dy * ly;
    XYL += xy * ly;
    ++n;
  });

  const coef = (0, _ols.default)(XY / Y, YL / Y, XYL / Y, X2Y / Y),
        predict = x => coef[0] * Math.exp(coef[1] * x);

  coef[0] = Math.exp(coef[0]);
  return {
    coef: coef,
    predict: predict,
    rSquared: (0, _rSquared.default)(data, x, y, Y / n, predict)
  };
}
},{"./ols":"node_modules/vega-statistics/src/regression/ols.js","./points":"node_modules/vega-statistics/src/regression/points.js","./r-squared":"node_modules/vega-statistics/src/regression/r-squared.js"}],"node_modules/vega-statistics/src/regression/pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ols = _interopRequireDefault(require("./ols"));

var _points = require("./points");

var _rSquared = _interopRequireDefault(require("./r-squared"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Adapted from d3-regression by Harry Stevens
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
function _default(data, x, y) {
  let X = 0,
      Y = 0,
      XY = 0,
      X2 = 0,
      YS = 0,
      n = 0;
  (0, _points.visitPoints)(data, x, y, (dx, dy) => {
    const lx = Math.log(dx),
          ly = Math.log(dy);
    X += lx;
    Y += ly;
    XY += lx * ly;
    X2 += lx * lx;
    YS += dy;
    ++n;
  });

  const coef = (0, _ols.default)(X / n, Y / n, XY / n, X2 / n),
        predict = x => coef[0] * Math.pow(x, coef[1]);

  coef[0] = Math.exp(coef[0]);
  return {
    coef: coef,
    predict: predict,
    rSquared: (0, _rSquared.default)(data, x, y, YS / n, predict)
  };
}
},{"./ols":"node_modules/vega-statistics/src/regression/ols.js","./points":"node_modules/vega-statistics/src/regression/points.js","./r-squared":"node_modules/vega-statistics/src/regression/r-squared.js"}],"node_modules/vega-statistics/src/regression/quad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _points = require("./points");

var _rSquared = _interopRequireDefault(require("./r-squared"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(data, x, y) {
  let X = 0,
      Y = 0,
      X2 = 0,
      X3 = 0,
      X4 = 0,
      XY = 0,
      X2Y = 0,
      n = 0;
  (0, _points.visitPoints)(data, x, y, (dx, dy) => {
    const x2 = dx * dx;
    X += dx;
    Y += dy;
    X2 += x2;
    X3 += x2 * dx;
    X4 += x2 * x2;
    XY += dx * dy;
    X2Y += x2 * dy;
    ++n;
  });
  Y = Y / n;
  XY = XY - X * Y;
  X2Y = X2Y - X2 * Y;

  const XX = X2 - X * X / n,
        XX2 = X3 - X2 * X / n,
        X2X2 = X4 - X2 * X2 / n,
        d = XX * X2X2 - XX2 * XX2,
        a = (X2Y * XX - XY * XX2) / d,
        b = (XY * X2X2 - X2Y * XX2) / d,
        c = Y - b * (X / n) - a * (X2 / n),
        predict = x => a * x * x + b * x + c;

  return {
    coef: [c, b, a],
    predict: predict,
    rSquared: (0, _rSquared.default)(data, x, y, Y, predict)
  };
}
},{"./points":"node_modules/vega-statistics/src/regression/points.js","./r-squared":"node_modules/vega-statistics/src/regression/r-squared.js"}],"node_modules/vega-statistics/src/regression/poly.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _linear = _interopRequireDefault(require("./linear"));

var _points = require("./points");

var _quad = _interopRequireDefault(require("./quad"));

var _rSquared = _interopRequireDefault(require("./r-squared"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Adapted from d3-regression by Harry Stevens
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
// ... which was adapted from regression-js by Tom Alexander
// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246
// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE
function _default(data, x, y, order) {
  // use more efficient methods for lower orders
  if (order === 1) return (0, _linear.default)(data, x, y);
  if (order === 2) return (0, _quad.default)(data, x, y);
  const [xv, yv] = (0, _points.points)(data, x, y),
        n = xv.length,
        lhs = [],
        rhs = [],
        k = order + 1;
  let Y = 0,
      i,
      j,
      l,
      v,
      c;

  for (i = 0; i < n; ++i) {
    Y += yv[i];
  }

  for (i = 0; i < k; ++i) {
    for (l = 0, v = 0; l < n; ++l) {
      v += Math.pow(xv[l], i) * yv[l];
    }

    lhs.push(v);
    c = new Float64Array(k);

    for (j = 0; j < k; ++j) {
      for (l = 0, v = 0; l < n; ++l) {
        v += Math.pow(xv[l], i + j);
      }

      c[j] = v;
    }

    rhs.push(c);
  }

  rhs.push(lhs);

  const coef = gaussianElimination(rhs),
        predict = x => {
    let y = 0,
        i = 0,
        n = coef.length;

    for (; i < n; ++i) y += coef[i] * Math.pow(x, i);

    return y;
  };

  return {
    coef: coef,
    predict: predict,
    rSquared: (0, _rSquared.default)(data, x, y, Y / n, predict)
  };
} // Given an array for a two-dimensional matrix and the polynomial order,
// solve A * x = b using Gaussian elimination.


function gaussianElimination(matrix) {
  const n = matrix.length - 1,
        coef = [];
  let i, j, k, r, t;

  for (i = 0; i < n; ++i) {
    r = i; // max row

    for (j = i + 1; j < n; ++j) {
      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {
        r = j;
      }
    }

    for (k = i; k < n + 1; ++k) {
      t = matrix[k][i];
      matrix[k][i] = matrix[k][r];
      matrix[k][r] = t;
    }

    for (j = i + 1; j < n; ++j) {
      for (k = n; k >= i; k--) {
        matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];
      }
    }
  }

  for (j = n - 1; j >= 0; --j) {
    t = 0;

    for (k = j + 1; k < n; ++k) {
      t += matrix[k][j] * coef[k];
    }

    coef[j] = (matrix[n][j] - t) / matrix[j][j];
  }

  return coef;
}
},{"./linear":"node_modules/vega-statistics/src/regression/linear.js","./points":"node_modules/vega-statistics/src/regression/points.js","./quad":"node_modules/vega-statistics/src/regression/quad.js","./r-squared":"node_modules/vega-statistics/src/regression/r-squared.js"}],"node_modules/vega-statistics/src/regression/loess.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ols = _interopRequireDefault(require("./ols"));

var _points = require("./points");

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const maxiters = 2,
      epsilon = 1e-12; // Adapted from science.js by Jason Davies
// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js
// License: https://github.com/jasondavies/science.js/blob/master/LICENSE

function _default(data, x, y, bandwidth) {
  const [xv, yv] = (0, _points.points)(data, x, y, true),
        n = xv.length,
        bw = Math.max(2, ~~(bandwidth * n)),
        // # nearest neighbors
  yhat = new Float64Array(n),
        residuals = new Float64Array(n),
        robustWeights = new Float64Array(n).fill(1);

  for (let iter = -1; ++iter <= maxiters;) {
    const interval = [0, bw - 1];

    for (let i = 0; i < n; ++i) {
      const dx = xv[i],
            i0 = interval[0],
            i1 = interval[1],
            edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;
      let W = 0,
          X = 0,
          Y = 0,
          XY = 0,
          X2 = 0,
          denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!

      for (let k = i0; k <= i1; ++k) {
        const xk = xv[k],
              yk = yv[k],
              w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],
              xkw = xk * w;
        W += w;
        X += xkw;
        Y += yk * w;
        XY += yk * xkw;
        X2 += xk * xkw;
      } // linear regression fit


      const [a, b] = (0, _ols.default)(X / W, Y / W, XY / W, X2 / W);
      yhat[i] = a + b * dx;
      residuals[i] = Math.abs(yv[i] - yhat[i]);
      updateInterval(xv, i + 1, interval);
    }

    if (iter === maxiters) {
      break;
    }

    const medianResidual = (0, _d3Array.median)(residuals);
    if (Math.abs(medianResidual) < epsilon) break;

    for (let i = 0, arg, w; i < n; ++i) {
      arg = residuals[i] / (6 * medianResidual); // default to epsilon (rather than zero) for large deviations
      // keeping weights tiny but non-zero prevents singularites

      robustWeights[i] = arg >= 1 ? epsilon : (w = 1 - arg * arg) * w;
    }
  }

  return output(xv, yhat);
} // weighting kernel for local regression


function tricube(x) {
  return (x = 1 - x * x * x) * x * x;
} // advance sliding window interval of nearest neighbors


function updateInterval(xv, i, interval) {
  let val = xv[i],
      left = interval[0],
      right = interval[1] + 1;
  if (right >= xv.length) return; // step right if distance to new right edge is <= distance to old left edge
  // step when distance is equal to ensure movement over duplicate x values

  while (i > left && xv[right] - val <= val - xv[left]) {
    interval[0] = ++left;
    interval[1] = right;
    ++right;
  }
} // generate smoothed output points
// average points with repeated x values


function output(xv, yhat) {
  const n = xv.length,
        out = [];

  for (let i = 0, cnt = 0, prev = [], v; i < n; ++i) {
    v = xv[i];

    if (prev[0] === v) {
      // average output values via online update
      prev[1] += (yhat[i] - prev[1]) / ++cnt;
    } else {
      // add new output point
      cnt = 0;
      prev = [v, yhat[i]];
      out.push(prev);
    }
  }

  return out;
}
},{"./ols":"node_modules/vega-statistics/src/regression/ols.js","./points":"node_modules/vega-statistics/src/regression/points.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/vega-statistics/src/sampleCurve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
// subdivide up to accuracy of 0.1 degrees
const MIN_RADIANS = 0.1 * Math.PI / 180; // Adaptively sample an interpolated function over a domain extent

function _default(f, extent, minSteps, maxSteps) {
  minSteps = minSteps || 25;
  maxSteps = Math.max(minSteps, maxSteps || 200);

  const point = x => [x, f(x)],
        minX = extent[0],
        maxX = extent[1],
        span = maxX - minX,
        stop = span / maxSteps,
        prev = [point(minX)],
        next = [];

  if (minSteps === maxSteps) {
    // no adaptation, sample uniform grid directly and return
    for (let i = 1; i < maxSteps; ++i) {
      prev.push(point(minX + i / minSteps * span));
    }

    prev.push(point(maxX));
    return prev;
  } else {
    // sample minimum points on uniform grid
    // then move on to perform adaptive refinement
    next.push(point(maxX));

    for (let i = minSteps; --i > 0;) {
      next.push(point(minX + i / minSteps * span));
    }
  }

  let p0 = prev[0],
      p1 = next[next.length - 1];

  while (p1) {
    // midpoint for potential curve subdivision
    const pm = point((p0[0] + p1[0]) / 2);

    if (pm[0] - p0[0] >= stop && angleDelta(p0, pm, p1) > MIN_RADIANS) {
      // maximum resolution has not yet been met, and
      // subdivision midpoint sufficiently different from endpoint
      // save subdivision, push midpoint onto the visitation stack
      next.push(pm);
    } else {
      // subdivision midpoint sufficiently similar to endpoint
      // skip subdivision, store endpoint, move to next point on the stack
      p0 = p1;
      prev.push(p1);
      next.pop();
    }

    p1 = next[next.length - 1];
  }

  return prev;
}

function angleDelta(p, q, r) {
  const a0 = Math.atan2(r[1] - p[1], r[0] - p[0]),
        a1 = Math.atan2(q[1] - p[1], q[0] - p[0]);
  return Math.abs(a0 - a1);
}
},{}],"node_modules/vega-statistics/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bin", {
  enumerable: true,
  get: function () {
    return _bin.default;
  }
});
Object.defineProperty(exports, "bootstrapCI", {
  enumerable: true,
  get: function () {
    return _bootstrapCI.default;
  }
});
Object.defineProperty(exports, "quartiles", {
  enumerable: true,
  get: function () {
    return _quartiles.default;
  }
});
Object.defineProperty(exports, "random", {
  enumerable: true,
  get: function () {
    return _random.random;
  }
});
Object.defineProperty(exports, "setRandom", {
  enumerable: true,
  get: function () {
    return _random.setRandom;
  }
});
Object.defineProperty(exports, "randomLCG", {
  enumerable: true,
  get: function () {
    return _lcg.default;
  }
});
Object.defineProperty(exports, "randomInteger", {
  enumerable: true,
  get: function () {
    return _integer.default;
  }
});
Object.defineProperty(exports, "randomKDE", {
  enumerable: true,
  get: function () {
    return _kde.default;
  }
});
Object.defineProperty(exports, "randomMixture", {
  enumerable: true,
  get: function () {
    return _mixture.default;
  }
});
Object.defineProperty(exports, "randomNormal", {
  enumerable: true,
  get: function () {
    return _normal.default;
  }
});
Object.defineProperty(exports, "randomUniform", {
  enumerable: true,
  get: function () {
    return _uniform.default;
  }
});
Object.defineProperty(exports, "regressionLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "regressionLog", {
  enumerable: true,
  get: function () {
    return _log.default;
  }
});
Object.defineProperty(exports, "regressionExp", {
  enumerable: true,
  get: function () {
    return _exp.default;
  }
});
Object.defineProperty(exports, "regressionPow", {
  enumerable: true,
  get: function () {
    return _pow.default;
  }
});
Object.defineProperty(exports, "regressionQuad", {
  enumerable: true,
  get: function () {
    return _quad.default;
  }
});
Object.defineProperty(exports, "regressionPoly", {
  enumerable: true,
  get: function () {
    return _poly.default;
  }
});
Object.defineProperty(exports, "regressionLoess", {
  enumerable: true,
  get: function () {
    return _loess.default;
  }
});
Object.defineProperty(exports, "sampleCurve", {
  enumerable: true,
  get: function () {
    return _sampleCurve.default;
  }
});

var _bin = _interopRequireDefault(require("./src/bin"));

var _bootstrapCI = _interopRequireDefault(require("./src/bootstrapCI"));

var _quartiles = _interopRequireDefault(require("./src/quartiles"));

var _random = require("./src/random");

var _lcg = _interopRequireDefault(require("./src/lcg"));

var _integer = _interopRequireDefault(require("./src/integer"));

var _kde = _interopRequireDefault(require("./src/kde"));

var _mixture = _interopRequireDefault(require("./src/mixture"));

var _normal = _interopRequireDefault(require("./src/normal"));

var _uniform = _interopRequireDefault(require("./src/uniform"));

var _linear = _interopRequireDefault(require("./src/regression/linear"));

var _log = _interopRequireDefault(require("./src/regression/log"));

var _exp = _interopRequireDefault(require("./src/regression/exp"));

var _pow = _interopRequireDefault(require("./src/regression/pow"));

var _quad = _interopRequireDefault(require("./src/regression/quad"));

var _poly = _interopRequireDefault(require("./src/regression/poly"));

var _loess = _interopRequireDefault(require("./src/regression/loess"));

var _sampleCurve = _interopRequireDefault(require("./src/sampleCurve"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/bin":"node_modules/vega-statistics/src/bin.js","./src/bootstrapCI":"node_modules/vega-statistics/src/bootstrapCI.js","./src/quartiles":"node_modules/vega-statistics/src/quartiles.js","./src/random":"node_modules/vega-statistics/src/random.js","./src/lcg":"node_modules/vega-statistics/src/lcg.js","./src/integer":"node_modules/vega-statistics/src/integer.js","./src/kde":"node_modules/vega-statistics/src/kde.js","./src/mixture":"node_modules/vega-statistics/src/mixture.js","./src/normal":"node_modules/vega-statistics/src/normal.js","./src/uniform":"node_modules/vega-statistics/src/uniform.js","./src/regression/linear":"node_modules/vega-statistics/src/regression/linear.js","./src/regression/log":"node_modules/vega-statistics/src/regression/log.js","./src/regression/exp":"node_modules/vega-statistics/src/regression/exp.js","./src/regression/pow":"node_modules/vega-statistics/src/regression/pow.js","./src/regression/quad":"node_modules/vega-statistics/src/regression/quad.js","./src/regression/poly":"node_modules/vega-statistics/src/regression/poly.js","./src/regression/loess":"node_modules/vega-statistics/src/regression/loess.js","./src/sampleCurve":"node_modules/vega-statistics/src/sampleCurve.js"}],"node_modules/vega-transforms/src/util/TupleStore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TupleStore;

var _vegaDataflow = require("vega-dataflow");

var _vegaStatistics = require("vega-statistics");

var _vegaUtil = require("vega-util");

function TupleStore(key) {
  this._key = key ? (0, _vegaUtil.field)(key) : _vegaDataflow.tupleid;
  this.reset();
}

var prototype = TupleStore.prototype;

prototype.reset = function () {
  this._add = [];
  this._rem = [];
  this._ext = null;
  this._get = null;
  this._q = null;
};

prototype.add = function (v) {
  this._add.push(v);
};

prototype.rem = function (v) {
  this._rem.push(v);
};

prototype.values = function () {
  this._get = null;
  if (this._rem.length === 0) return this._add;
  var a = this._add,
      r = this._rem,
      k = this._key,
      n = a.length,
      m = r.length,
      x = Array(n - m),
      map = {},
      i,
      j,
      v; // use unique key field to clear removed values

  for (i = 0; i < m; ++i) {
    map[k(r[i])] = 1;
  }

  for (i = 0, j = 0; i < n; ++i) {
    if (map[k(v = a[i])]) {
      map[k(v)] = 0;
    } else {
      x[j++] = v;
    }
  }

  this._rem = [];
  return this._add = x;
}; // memoizing statistics methods


prototype.distinct = function (get) {
  var v = this.values(),
      n = v.length,
      map = {},
      count = 0,
      s;

  while (--n >= 0) {
    s = get(v[n]) + '';

    if (!(0, _vegaUtil.hasOwnProperty)(map, s)) {
      map[s] = 1;
      ++count;
    }
  }

  return count;
};

prototype.extent = function (get) {
  if (this._get !== get || !this._ext) {
    var v = this.values(),
        i = (0, _vegaUtil.extentIndex)(v, get);
    this._ext = [v[i[0]], v[i[1]]];
    this._get = get;
  }

  return this._ext;
};

prototype.argmin = function (get) {
  return this.extent(get)[0] || {};
};

prototype.argmax = function (get) {
  return this.extent(get)[1] || {};
};

prototype.min = function (get) {
  var m = this.extent(get)[0];
  return m != null ? get(m) : undefined;
};

prototype.max = function (get) {
  var m = this.extent(get)[1];
  return m != null ? get(m) : undefined;
};

prototype.quartile = function (get) {
  if (this._get !== get || !this._q) {
    this._q = (0, _vegaStatistics.quartiles)(this.values(), get);
    this._get = get;
  }

  return this._q;
};

prototype.q1 = function (get) {
  return this.quartile(get)[0];
};

prototype.q2 = function (get) {
  return this.quartile(get)[1];
};

prototype.q3 = function (get) {
  return this.quartile(get)[2];
};

prototype.ci = function (get) {
  if (this._get !== get || !this._ci) {
    this._ci = (0, _vegaStatistics.bootstrapCI)(this.values(), 1000, 0.05, get);
    this._get = get;
  }

  return this._ci;
};

prototype.ci0 = function (get) {
  return this.ci(get)[0];
};

prototype.ci1 = function (get) {
  return this.ci(get)[1];
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-statistics":"node_modules/vega-statistics/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Aggregate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Aggregate;

var _AggregateKeys = require("./util/AggregateKeys");

var _AggregateOps = require("./util/AggregateOps");

var _TupleStore = _interopRequireDefault(require("./util/TupleStore"));

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Group-by aggregation operator.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.
 * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.
 * @param {Array<string>} [params.as] - An array of output field names for aggregated values.
 * @param {boolean} [params.cross=false] - A flag indicating that the full
 *   cross-product of groupby values should be generated, including empty cells.
 *   If true, the drop parameter is ignored and empty cells are retained.
 * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.
 */
function Aggregate(params) {
  _vegaDataflow.Transform.call(this, null, params);

  this._adds = []; // array of added output tuples

  this._mods = []; // array of modified output tuples

  this._alen = 0; // number of active added tuples

  this._mlen = 0; // number of active modified tuples

  this._drop = true; // should empty aggregation cells be removed

  this._cross = false; // produce full cross-product of group-by values

  this._dims = []; // group-by dimension accessors

  this._dnames = []; // group-by dimension names

  this._measures = []; // collection of aggregation monoids

  this._countOnly = false; // flag indicating only count aggregation

  this._counts = null; // collection of count fields

  this._prev = null; // previous aggregation cells

  this._inputs = null; // array of dependent input tuple field names

  this._outputs = null; // array of output tuple field names
}

Aggregate.Definition = {
  "type": "Aggregate",
  "metadata": {
    "generates": true,
    "changes": true
  },
  "params": [{
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "ops",
    "type": "enum",
    "array": true,
    "values": _AggregateOps.ValidAggregateOps
  }, {
    "name": "fields",
    "type": "field",
    "null": true,
    "array": true
  }, {
    "name": "as",
    "type": "string",
    "null": true,
    "array": true
  }, {
    "name": "drop",
    "type": "boolean",
    "default": true
  }, {
    "name": "cross",
    "type": "boolean",
    "default": false
  }, {
    "name": "key",
    "type": "field"
  }]
};
var prototype = (0, _vegaUtil.inherits)(Aggregate, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var aggr = this,
      out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
      mod = _.modified();

  aggr.stamp = out.stamp;

  if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {
    aggr._prev = aggr.value;
    aggr.value = mod ? aggr.init(_) : {};
    pulse.visit(pulse.SOURCE, t => aggr.add(t));
  } else {
    aggr.value = aggr.value || aggr.init(_);
    pulse.visit(pulse.REM, t => aggr.rem(t));
    pulse.visit(pulse.ADD, t => aggr.add(t));
  } // Indicate output fields and return aggregate tuples.


  out.modifies(aggr._outputs); // Should empty cells be dropped?

  aggr._drop = _.drop !== false; // If domain cross-product requested, generate empty cells as needed
  // and ensure that empty cells are not dropped

  if (_.cross && aggr._dims.length > 1) {
    aggr._drop = false;
    aggr.cross();
  }

  return aggr.changes(out);
};

prototype.cross = function () {
  var aggr = this,
      curr = aggr.value,
      dims = aggr._dnames,
      vals = dims.map(function () {
    return {};
  }),
      n = dims.length; // collect all group-by domain values

  function collect(cells) {
    var key, i, t, v;

    for (key in cells) {
      t = cells[key].tuple;

      for (i = 0; i < n; ++i) {
        vals[i][v = t[dims[i]]] = v;
      }
    }
  }

  collect(aggr._prev);
  collect(curr); // iterate over key cross-product, create cells as needed

  function generate(base, tuple, index) {
    var name = dims[index],
        v = vals[index++],
        k,
        key;

    for (k in v) {
      tuple[name] = v[k];
      key = base ? base + '|' + k : k;
      if (index < n) generate(key, tuple, index);else if (!curr[key]) aggr.cell(key, tuple);
    }
  }

  generate('', {}, 0);
};

prototype.init = function (_) {
  // initialize input and output fields
  var inputs = this._inputs = [],
      outputs = this._outputs = [],
      inputMap = {};

  function inputVisit(get) {
    var fields = (0, _vegaUtil.array)((0, _vegaUtil.accessorFields)(get)),
        i = 0,
        n = fields.length,
        f;

    for (; i < n; ++i) {
      if (!inputMap[f = fields[i]]) {
        inputMap[f] = 1;
        inputs.push(f);
      }
    }
  } // initialize group-by dimensions


  this._dims = (0, _vegaUtil.array)(_.groupby);
  this._dnames = this._dims.map(function (d) {
    var dname = (0, _vegaUtil.accessorName)(d);
    inputVisit(d);
    outputs.push(dname);
    return dname;
  });
  this.cellkey = _.key ? _.key : (0, _AggregateKeys.groupkey)(this._dims); // initialize aggregate measures

  this._countOnly = true;
  this._counts = [];
  this._measures = [];
  var fields = _.fields || [null],
      ops = _.ops || ['count'],
      as = _.as || [],
      n = fields.length,
      map = {},
      field,
      op,
      m,
      mname,
      outname,
      i;

  if (n !== ops.length) {
    (0, _vegaUtil.error)('Unmatched number of fields and aggregate ops.');
  }

  for (i = 0; i < n; ++i) {
    field = fields[i];
    op = ops[i];

    if (field == null && op !== 'count') {
      (0, _vegaUtil.error)('Null aggregate field specified.');
    }

    mname = (0, _vegaUtil.accessorName)(field);
    outname = (0, _AggregateOps.measureName)(op, mname, as[i]);
    outputs.push(outname);

    if (op === 'count') {
      this._counts.push(outname);

      continue;
    }

    m = map[mname];

    if (!m) {
      inputVisit(field);
      m = map[mname] = [];
      m.field = field;

      this._measures.push(m);
    }

    if (op !== 'count') this._countOnly = false;
    m.push((0, _AggregateOps.createMeasure)(op, outname));
  }

  this._measures = this._measures.map(function (m) {
    return (0, _AggregateOps.compileMeasures)(m, m.field);
  });
  return {}; // aggregation cells (this.value)
}; // -- Cell Management -----


prototype.cellkey = (0, _AggregateKeys.groupkey)();

prototype.cell = function (key, t) {
  var cell = this.value[key];

  if (!cell) {
    cell = this.value[key] = this.newcell(key, t);
    this._adds[this._alen++] = cell;
  } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {
    cell.stamp = this.stamp;
    this._adds[this._alen++] = cell;
  } else if (cell.stamp < this.stamp) {
    cell.stamp = this.stamp;
    this._mods[this._mlen++] = cell;
  }

  return cell;
};

prototype.newcell = function (key, t) {
  var cell = {
    key: key,
    num: 0,
    agg: null,
    tuple: this.newtuple(t, this._prev && this._prev[key]),
    stamp: this.stamp,
    store: false
  };

  if (!this._countOnly) {
    var measures = this._measures,
        n = measures.length,
        i;
    cell.agg = Array(n);

    for (i = 0; i < n; ++i) {
      cell.agg[i] = new measures[i](cell);
    }
  }

  if (cell.store) {
    cell.data = new _TupleStore.default();
  }

  return cell;
};

prototype.newtuple = function (t, p) {
  var names = this._dnames,
      dims = this._dims,
      x = {},
      i,
      n;

  for (i = 0, n = dims.length; i < n; ++i) {
    x[names[i]] = dims[i](t);
  }

  return p ? (0, _vegaDataflow.replace)(p.tuple, x) : (0, _vegaDataflow.ingest)(x);
}; // -- Process Tuples -----


prototype.add = function (t) {
  var key = this.cellkey(t),
      cell = this.cell(key, t),
      agg,
      i,
      n;
  cell.num += 1;
  if (this._countOnly) return;
  if (cell.store) cell.data.add(t);
  agg = cell.agg;

  for (i = 0, n = agg.length; i < n; ++i) {
    agg[i].add(agg[i].get(t), t);
  }
};

prototype.rem = function (t) {
  var key = this.cellkey(t),
      cell = this.cell(key, t),
      agg,
      i,
      n;
  cell.num -= 1;
  if (this._countOnly) return;
  if (cell.store) cell.data.rem(t);
  agg = cell.agg;

  for (i = 0, n = agg.length; i < n; ++i) {
    agg[i].rem(agg[i].get(t), t);
  }
};

prototype.celltuple = function (cell) {
  var tuple = cell.tuple,
      counts = this._counts,
      agg,
      i,
      n; // consolidate stored values

  if (cell.store) {
    cell.data.values();
  } // update tuple properties


  for (i = 0, n = counts.length; i < n; ++i) {
    tuple[counts[i]] = cell.num;
  }

  if (!this._countOnly) {
    agg = cell.agg;

    for (i = 0, n = agg.length; i < n; ++i) {
      agg[i].set(tuple);
    }
  }

  return tuple;
};

prototype.changes = function (out) {
  var adds = this._adds,
      mods = this._mods,
      prev = this._prev,
      drop = this._drop,
      add = out.add,
      rem = out.rem,
      mod = out.mod,
      cell,
      key,
      i,
      n;
  if (prev) for (key in prev) {
    cell = prev[key];
    if (!drop || cell.num) rem.push(cell.tuple);
  }

  for (i = 0, n = this._alen; i < n; ++i) {
    add.push(this.celltuple(adds[i]));
    adds[i] = null; // for garbage collection
  }

  for (i = 0, n = this._mlen; i < n; ++i) {
    cell = mods[i];
    (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));
    mods[i] = null; // for garbage collection
  }

  this._alen = this._mlen = 0; // reset list of active cells

  this._prev = null;
  return out;
};
},{"./util/AggregateKeys":"node_modules/vega-transforms/src/util/AggregateKeys.js","./util/AggregateOps":"node_modules/vega-transforms/src/util/AggregateOps.js","./util/TupleStore":"node_modules/vega-transforms/src/util/TupleStore.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Bin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Bin;

var _vegaDataflow = require("vega-dataflow");

var _vegaStatistics = require("vega-statistics");

var _vegaUtil = require("vega-util");

// epsilon bias to offset floating point error (#1737)
const EPSILON = 1e-14;
/**
 * Generates a binning function for discretizing data.
 * @constructor
 * @param {object} params - The parameters for this operator. The
 *   provided values should be valid options for the {@link bin} function.
 * @param {function(object): *} params.field - The data field to bin.
 */

function Bin(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Bin.Definition = {
  "type": "Bin",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "anchor",
    "type": "number"
  }, {
    "name": "maxbins",
    "type": "number",
    "default": 20
  }, {
    "name": "base",
    "type": "number",
    "default": 10
  }, {
    "name": "divide",
    "type": "number",
    "array": true,
    "default": [5, 2]
  }, {
    "name": "extent",
    "type": "number",
    "array": true,
    "length": 2,
    "required": true
  }, {
    "name": "span",
    "type": "number"
  }, {
    "name": "step",
    "type": "number"
  }, {
    "name": "steps",
    "type": "number",
    "array": true
  }, {
    "name": "minstep",
    "type": "number",
    "default": 0
  }, {
    "name": "nice",
    "type": "boolean",
    "default": true
  }, {
    "name": "name",
    "type": "string"
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": ["bin0", "bin1"]
  }]
};
var prototype = (0, _vegaUtil.inherits)(Bin, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var bins = this._bins(_),
      start = bins.start,
      step = bins.step,
      as = _.as || ['bin0', 'bin1'],
      b0 = as[0],
      b1 = as[1],
      flag;

  if (_.modified()) {
    pulse = pulse.reflow(true);
    flag = pulse.SOURCE;
  } else {
    flag = pulse.modified((0, _vegaUtil.accessorFields)(_.field)) ? pulse.ADD_MOD : pulse.ADD;
  }

  pulse.visit(flag, function (t) {
    var v = bins(t); // minimum bin value (inclusive)

    t[b0] = v; // maximum bin value (exclusive)
    // use convoluted math for better floating point agreement
    // see https://github.com/vega/vega/issues/830

    t[b1] = v == null ? null : start + step * (1 + (v - start) / step);
  });
  return pulse.modifies(as);
};

prototype._bins = function (_) {
  if (this.value && !_.modified()) {
    return this.value;
  }

  var field = _.field,
      bins = (0, _vegaStatistics.bin)(_),
      start = bins.start,
      stop = bins.stop,
      step = bins.step,
      a,
      d;

  if ((a = _.anchor) != null) {
    d = a - (start + step * Math.floor((a - start) / step));
    start += d;
    stop += d;
  }

  var f = function (t) {
    var v = field(t);

    if (v == null) {
      return null;
    } else {
      v = Math.max(start, Math.min(+v, stop - step));
      return start + step * Math.floor(EPSILON + (v - start) / step);
    }
  };

  f.start = start;
  f.stop = stop;
  f.step = step;
  return this.value = (0, _vegaUtil.accessor)(f, (0, _vegaUtil.accessorFields)(field), _.name || 'bin_' + (0, _vegaUtil.accessorName)(field));
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-statistics":"node_modules/vega-statistics/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/util/SortedList.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

function _default(idFunc, source, input) {
  var $ = idFunc,
      data = source || [],
      add = input || [],
      rem = {},
      cnt = 0;
  return {
    add: function (t) {
      add.push(t);
    },
    remove: function (t) {
      rem[$(t)] = ++cnt;
    },
    size: function () {
      return data.length;
    },
    data: function (compare, resort) {
      if (cnt) {
        data = data.filter(function (t) {
          return !rem[$(t)];
        });
        rem = {};
        cnt = 0;
      }

      if (resort && compare) {
        data.sort(compare);
      }

      if (add.length) {
        data = compare ? (0, _vegaUtil.merge)(compare, data, add.sort(compare)) : data.concat(add);
        add = [];
      }

      return data;
    }
  };
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Collect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Collect;

var _SortedList = _interopRequireDefault(require("./util/SortedList"));

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Collects all data tuples that pass through this operator.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - An optional
 *   comparator function for additionally sorting the collected tuples.
 */
function Collect(params) {
  _vegaDataflow.Transform.call(this, [], params);
}

Collect.Definition = {
  "type": "Collect",
  "metadata": {
    "source": true
  },
  "params": [{
    "name": "sort",
    "type": "compare"
  }]
};
var prototype = (0, _vegaUtil.inherits)(Collect, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.ALL),
      list = (0, _SortedList.default)(_vegaDataflow.tupleid, this.value, out.materialize(out.ADD).add),
      sort = _.sort,
      mod = pulse.changed() || sort && (_.modified('sort') || pulse.modified(sort.fields));
  out.visit(out.REM, list.remove);
  this.modified(mod);
  this.value = out.source = list.data((0, _vegaDataflow.stableCompare)(sort), mod); // propagate tree root if defined

  if (pulse.source && pulse.source.root) {
    this.value.root = pulse.source.root;
  }

  return out;
};
},{"./util/SortedList":"node_modules/vega-transforms/src/util/SortedList.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Compare.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Compare;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Generates a comparator function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<string|function>} params.fields - The fields to compare.
 * @param {Array<string>} [params.orders] - The sort orders.
 *   Each entry should be one of "ascending" (default) or "descending".
 */
function Compare(params) {
  _vegaDataflow.Operator.call(this, null, update, params);
}

(0, _vegaUtil.inherits)(Compare, _vegaDataflow.Operator);

function update(_) {
  return this.value && !_.modified() ? this.value : (0, _vegaUtil.compare)(_.fields, _.orders);
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/CountPattern.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CountPattern;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Count regexp-defined pattern occurrences in a text field.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - An accessor for the text field.
 * @param {string} [params.pattern] - RegExp string defining the text pattern.
 * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.
 * @param {string} [params.stopwords] - RegExp string of words to ignore.
 */
function CountPattern(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

CountPattern.Definition = {
  "type": "CountPattern",
  "metadata": {
    "generates": true,
    "changes": true
  },
  "params": [{
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "case",
    "type": "enum",
    "values": ["upper", "lower", "mixed"],
    "default": "mixed"
  }, {
    "name": "pattern",
    "type": "string",
    "default": "[\\w\"]+"
  }, {
    "name": "stopwords",
    "type": "string",
    "default": ""
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": ["text", "count"]
  }]
};

function tokenize(text, tcase, match) {
  switch (tcase) {
    case 'upper':
      text = text.toUpperCase();
      break;

    case 'lower':
      text = text.toLowerCase();
      break;
  }

  return text.match(match);
}

var prototype = (0, _vegaUtil.inherits)(CountPattern, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  function process(update) {
    return function (tuple) {
      var tokens = tokenize(get(tuple), _.case, match) || [],
          t;

      for (var i = 0, n = tokens.length; i < n; ++i) {
        if (!stop.test(t = tokens[i])) update(t);
      }
    };
  }

  var init = this._parameterCheck(_, pulse),
      counts = this._counts,
      match = this._match,
      stop = this._stop,
      get = _.field,
      as = _.as || ['text', 'count'],
      add = process(function (t) {
    counts[t] = 1 + (counts[t] || 0);
  }),
      rem = process(function (t) {
    counts[t] -= 1;
  });

  if (init) {
    pulse.visit(pulse.SOURCE, add);
  } else {
    pulse.visit(pulse.ADD, add);
    pulse.visit(pulse.REM, rem);
  }

  return this._finish(pulse, as); // generate output tuples
};

prototype._parameterCheck = function (_, pulse) {
  var init = false;

  if (_.modified('stopwords') || !this._stop) {
    this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');
    init = true;
  }

  if (_.modified('pattern') || !this._match) {
    this._match = new RegExp(_.pattern || '[\\w\']+', 'g');
    init = true;
  }

  if (_.modified('field') || pulse.modified(_.field.fields)) {
    init = true;
  }

  if (init) this._counts = {};
  return init;
};

prototype._finish = function (pulse, as) {
  var counts = this._counts,
      tuples = this._tuples || (this._tuples = {}),
      text = as[0],
      count = as[1],
      out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
      w,
      t,
      c;

  for (w in counts) {
    t = tuples[w];
    c = counts[w] || 0;

    if (!t && c) {
      tuples[w] = t = (0, _vegaDataflow.ingest)({});
      t[text] = w;
      t[count] = c;
      out.add.push(t);
    } else if (c === 0) {
      if (t) out.rem.push(t);
      counts[w] = null;
      tuples[w] = null;
    } else if (t[count] !== c) {
      t[count] = c;
      out.mod.push(t);
    }
  }

  return out.modifies(as);
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","process":"../../../../../usr/local/lib/node_modules/parcel/node_modules/process/browser.js"}],"node_modules/vega-transforms/src/Cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Cross;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Perform a cross-product of a tuple stream with itself.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object):boolean} [params.filter] - An optional filter
 *   function for selectively including tuples in the cross product.
 * @param {Array<string>} [params.as] - The names of the output fields.
 */
function Cross(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Cross.Definition = {
  "type": "Cross",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "filter",
    "type": "expr"
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": ["a", "b"]
  }]
};
var prototype = (0, _vegaUtil.inherits)(Cross, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.NO_SOURCE),
      data = this.value,
      as = _.as || ['a', 'b'],
      a = as[0],
      b = as[1],
      reset = !data || pulse.changed(pulse.ADD_REM) || _.modified('as') || _.modified('filter');

  if (reset) {
    if (data) out.rem = data;
    data = pulse.materialize(pulse.SOURCE).source;
    out.add = this.value = cross(data, a, b, _.filter || _vegaUtil.truthy);
  } else {
    out.mod = data;
  }

  out.source = this.value;
  return out.modifies(as);
};

function cross(input, a, b, filter) {
  var data = [],
      t = {},
      n = input.length,
      i = 0,
      j,
      left;

  for (; i < n; ++i) {
    t[a] = left = input[i];

    for (j = 0; j < n; ++j) {
      t[b] = input[j];

      if (filter(t)) {
        data.push((0, _vegaDataflow.ingest)(t));
        t = {};
        t[a] = left;
      }
    }
  }

  return data;
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/util/Distributions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parse;

var _vegaStatistics = require("vega-statistics");

var _vegaUtil = require("vega-util");

var Distributions = {
  kde: _vegaStatistics.randomKDE,
  mixture: _vegaStatistics.randomMixture,
  normal: _vegaStatistics.randomNormal,
  uniform: _vegaStatistics.randomUniform
};
var DISTRIBUTIONS = 'distributions',
    FUNCTION = 'function',
    FIELD = 'field';
/**
 * Parse a parameter object for a probability distribution.
 * @param {object} def - The distribution parameter object.
 * @param {function():Array<object>} - A method for requesting
 *   source data. Used for distributions (such as KDE) that
 *   require sample data points. This method will only be
 *   invoked if the 'from' parameter for a target data source
 *   is not provided. Typically this method returns backing
 *   source data for a Pulse object.
 * @return {object} - The output distribution object.
 */

function parse(def, data) {
  var func = def[FUNCTION];

  if (!(0, _vegaUtil.hasOwnProperty)(Distributions, func)) {
    (0, _vegaUtil.error)('Unknown distribution function: ' + func);
  }

  var d = Distributions[func]();

  for (var name in def) {
    // if data field, extract values
    if (name === FIELD) {
      d.data((def.from || data()).map(def[name]));
    } // if distribution mixture, recurse to parse each definition
    else if (name === DISTRIBUTIONS) {
        d[name](def[name].map(function (_) {
          return parse(_, data);
        }));
      } // otherwise, simply set the parameter
      else if (typeof d[name] === FUNCTION) {
          d[name](def[name]);
        }
  }

  return d;
}
},{"vega-statistics":"node_modules/vega-statistics/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Density.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Density;

var _Distributions = _interopRequireDefault(require("./util/Distributions"));

var _vegaDataflow = require("vega-dataflow");

var _vegaStatistics = require("vega-statistics");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Grid sample points for a probability density. Given a distribution and
 * a sampling extent, will generate points suitable for plotting either
 * PDF (probability density function) or CDF (cumulative distribution
 * function) curves.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.distribution - The probability distribution. This
 *   is an object parameter dependent on the distribution type.
 * @param {string} [params.method='pdf'] - The distribution method to sample.
 *   One of 'pdf' or 'cdf'.
 * @param {Array<number>} [params.extent] - The [min, max] extent over which
 *   to sample the distribution. This argument is required in most cases, but
 *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method
 *   that returns numerical sample points from which the extent can be deduced.
 * @param {number} [params.minsteps=25] - The minimum number of curve samples
 *   for plotting the density.
 * @param {number} [params.maxsteps=200] - The maximum number of curve samples
 *   for plotting the density.
 * @param {number} [params.steps] - The exact number of curve samples for
 *   plotting the density. If specified, overrides both minsteps and maxsteps
 *   to set an exact number of uniform samples. Useful in conjunction with
 *   a fixed extent to ensure consistent sample points for stacked densities.
 */
function Density(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var distributions = [{
  "key": {
    "function": "normal"
  },
  "params": [{
    "name": "mean",
    "type": "number",
    "default": 0
  }, {
    "name": "stdev",
    "type": "number",
    "default": 1
  }]
}, {
  "key": {
    "function": "uniform"
  },
  "params": [{
    "name": "min",
    "type": "number",
    "default": 0
  }, {
    "name": "max",
    "type": "number",
    "default": 1
  }]
}, {
  "key": {
    "function": "kde"
  },
  "params": [{
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "from",
    "type": "data"
  }, {
    "name": "bandwidth",
    "type": "number",
    "default": 0
  }]
}];
var mixture = {
  "key": {
    "function": "mixture"
  },
  "params": [{
    "name": "distributions",
    "type": "param",
    "array": true,
    "params": distributions
  }, {
    "name": "weights",
    "type": "number",
    "array": true
  }]
};
Density.Definition = {
  "type": "Density",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "extent",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "steps",
    "type": "number"
  }, {
    "name": "minsteps",
    "type": "number",
    "default": 25
  }, {
    "name": "maxsteps",
    "type": "number",
    "default": 200
  }, {
    "name": "method",
    "type": "string",
    "default": "pdf",
    "values": ["pdf", "cdf"]
  }, {
    "name": "distribution",
    "type": "param",
    "params": distributions.concat(mixture)
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "default": ["value", "density"]
  }]
};
var prototype = (0, _vegaUtil.inherits)(Density, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

  if (!this.value || pulse.changed() || _.modified()) {
    var dist = (0, _Distributions.default)(_.distribution, source(pulse)),
        minsteps = _.steps || _.minsteps || 25,
        maxsteps = _.steps || _.maxsteps || 200,
        method = _.method || 'pdf';

    if (method !== 'pdf' && method !== 'cdf') {
      (0, _vegaUtil.error)('Invalid density method: ' + method);
    }

    if (!_.extent && !dist.data) {
      (0, _vegaUtil.error)('Missing density extent parameter.');
    }

    method = dist[method];
    var as = _.as || ['value', 'density'],
        domain = _.extent || (0, _vegaUtil.extent)(dist.data()),
        values = (0, _vegaStatistics.sampleCurve)(method, domain, minsteps, maxsteps).map(v => {
      var tuple = {};
      tuple[as[0]] = v[0];
      tuple[as[1]] = v[1];
      return (0, _vegaDataflow.ingest)(tuple);
    });
    if (this.value) out.rem = this.value;
    this.value = out.add = out.source = values;
  }

  return out;
};

function source(pulse) {
  return function () {
    return pulse.materialize(pulse.SOURCE).source;
  };
}
},{"./util/Distributions":"node_modules/vega-transforms/src/util/Distributions.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-statistics":"node_modules/vega-statistics/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Expression.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Expression;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Wraps an expression function with access to external parameters.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function} params.expr - The expression function. The
 *  function should accept both a datum and a parameter object.
 *  This operator's value will be a new function that wraps the
 *  expression function with access to this operator's parameters.
 */
function Expression(params) {
  _vegaDataflow.Operator.call(this, null, update, params);

  this.modified(true);
}

(0, _vegaUtil.inherits)(Expression, _vegaDataflow.Operator);

function update(_) {
  var expr = _.expr;
  return this.value && !_.modified('expr') ? this.value : (0, _vegaUtil.accessor)(datum => expr(datum, _), (0, _vegaUtil.accessorFields)(expr), (0, _vegaUtil.accessorName)(expr));
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Extent;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Computes extents (min/max) for a data field.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The field over which to compute extends.
 */
function Extent(params) {
  _vegaDataflow.Transform.call(this, [undefined, undefined], params);
}

Extent.Definition = {
  "type": "Extent",
  "metadata": {},
  "params": [{
    "name": "field",
    "type": "field",
    "required": true
  }]
};
var prototype = (0, _vegaUtil.inherits)(Extent, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var extent = this.value,
      field = _.field,
      min = extent[0],
      max = extent[1],
      mod;
  mod = pulse.changed() || pulse.modified(field.fields) || _.modified('field');

  if (mod || min == null) {
    min = +Infinity;
    max = -Infinity;
  }

  pulse.visit(mod ? pulse.SOURCE : pulse.ADD, function (t) {
    var v = field(t);

    if (v != null) {
      // coerce to number
      v = +v; // NaNs will fail all comparisons!

      if (v < min) min = v;
      if (v > max) max = v;
    }
  });

  if (!Number.isFinite(min) || !Number.isFinite(max)) {
    let name = (0, _vegaUtil.accessorName)(field);
    if (name) name = ` for field "${name}"`;
    pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);
    min = max = undefined;
  }

  this.value = [min, max];
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Subflow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Subflow;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Provides a bridge between a parent transform and a target subflow that
 * consumes only a subset of the tuples that pass through the parent.
 * @constructor
 * @param {Pulse} pulse - A pulse to use as the value of this operator.
 * @param {Transform} parent - The parent transform (typically a Facet instance).
 * @param {Transform} target - A transform that receives the subflow of tuples.
 */
function Subflow(pulse, parent) {
  _vegaDataflow.Operator.call(this, pulse);

  this.parent = parent;
}

var prototype = (0, _vegaUtil.inherits)(Subflow, _vegaDataflow.Operator);

prototype.connect = function (target) {
  this.targets().add(target);
  return target.source = this;
};
/**
 * Add an 'add' tuple to the subflow pulse.
 * @param {Tuple} t - The tuple being added.
 */


prototype.add = function (t) {
  this.value.add.push(t);
};
/**
 * Add a 'rem' tuple to the subflow pulse.
 * @param {Tuple} t - The tuple being removed.
 */


prototype.rem = function (t) {
  this.value.rem.push(t);
};
/**
 * Add a 'mod' tuple to the subflow pulse.
 * @param {Tuple} t - The tuple being modified.
 */


prototype.mod = function (t) {
  this.value.mod.push(t);
};
/**
 * Re-initialize this operator's pulse value.
 * @param {Pulse} pulse - The pulse to copy from.
 * @see Pulse.init
 */


prototype.init = function (pulse) {
  this.value.init(pulse, pulse.NO_SOURCE);
};
/**
 * Evaluate this operator. This method overrides the
 * default behavior to simply return the contained pulse value.
 * @return {Pulse}
 */


prototype.evaluate = function () {
  // assert: this.value.stamp === pulse.stamp
  return this.value;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Facet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Facet;

var _Subflow = _interopRequireDefault(require("./Subflow"));

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Facets a dataflow into a set of subflows based on a key.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(Dataflow, string): Operator} params.subflow - A function
 *   that generates a subflow of operators and returns its root operator.
 * @param {function(object): *} params.key - The key field to facet by.
 */
function Facet(params) {
  _vegaDataflow.Transform.call(this, {}, params);

  this._keys = (0, _vegaUtil.fastmap)(); // cache previously calculated key values
  // keep track of active subflows, use as targets array for listeners
  // this allows us to limit propagation to only updated subflows

  var a = this._targets = [];
  a.active = 0;

  a.forEach = function (f) {
    for (var i = 0, n = a.active; i < n; ++i) f(a[i], i, a);
  };
}

var prototype = (0, _vegaUtil.inherits)(Facet, _vegaDataflow.Transform);

prototype.activate = function (flow) {
  this._targets[this._targets.active++] = flow;
};

prototype.subflow = function (key, flow, pulse, parent) {
  var flows = this.value,
      sf = (0, _vegaUtil.hasOwnProperty)(flows, key) && flows[key],
      df,
      p;

  if (!sf) {
    p = parent || (p = this._group[key]) && p.tuple;
    df = pulse.dataflow;
    sf = df.add(new _Subflow.default(pulse.fork(pulse.NO_SOURCE), this)).connect(flow(df, key, p));
    flows[key] = sf;
    this.activate(sf);
  } else if (sf.value.stamp < pulse.stamp) {
    sf.init(pulse);
    this.activate(sf);
  }

  return sf;
};

prototype.transform = function (_, pulse) {
  var df = pulse.dataflow,
      self = this,
      key = _.key,
      flow = _.subflow,
      cache = this._keys,
      rekey = _.modified('key');

  function subflow(key) {
    return self.subflow(key, flow, pulse);
  }

  this._group = _.group || {};
  this._targets.active = 0; // reset list of active subflows

  pulse.visit(pulse.REM, function (t) {
    var id = (0, _vegaDataflow.tupleid)(t),
        k = cache.get(id);

    if (k !== undefined) {
      cache.delete(id);
      subflow(k).rem(t);
    }
  });
  pulse.visit(pulse.ADD, function (t) {
    var k = key(t);
    cache.set((0, _vegaDataflow.tupleid)(t), k);
    subflow(k).add(t);
  });

  if (rekey || pulse.modified(key.fields)) {
    pulse.visit(pulse.MOD, function (t) {
      var id = (0, _vegaDataflow.tupleid)(t),
          k0 = cache.get(id),
          k1 = key(t);

      if (k0 === k1) {
        subflow(k1).mod(t);
      } else {
        cache.set(id, k1);
        subflow(k0).rem(t);
        subflow(k1).add(t);
      }
    });
  } else if (pulse.changed(pulse.MOD)) {
    pulse.visit(pulse.MOD, function (t) {
      subflow(cache.get((0, _vegaDataflow.tupleid)(t))).mod(t);
    });
  }

  if (rekey) {
    pulse.visit(pulse.REFLOW, function (t) {
      var id = (0, _vegaDataflow.tupleid)(t),
          k0 = cache.get(id),
          k1 = key(t);

      if (k0 !== k1) {
        cache.set(id, k1);
        subflow(k0).rem(t);
        subflow(k1).add(t);
      }
    });
  }

  if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
  return pulse;
};
},{"./Subflow":"node_modules/vega-transforms/src/Subflow.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Field.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Field;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Generates one or more field accessor functions.
 * If the 'name' parameter is an array, an array of field accessors
 * will be created and the 'as' parameter will be ignored.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {string} params.name - The field name(s) to access.
 * @param {string} params.as - The accessor function name.
 */
function Field(params) {
  _vegaDataflow.Operator.call(this, null, update, params);
}

(0, _vegaUtil.inherits)(Field, _vegaDataflow.Operator);

function update(_) {
  return this.value && !_.modified() ? this.value : (0, _vegaUtil.isArray)(_.name) ? (0, _vegaUtil.array)(_.name).map(function (f) {
    return (0, _vegaUtil.field)(f);
  }) : (0, _vegaUtil.field)(_.name, _.as);
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Filter;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Filters data tuples according to a predicate function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.expr - The predicate expression function
 *   that determines a tuple's filter status. Truthy values pass the filter.
 */
function Filter(params) {
  _vegaDataflow.Transform.call(this, (0, _vegaUtil.fastmap)(), params);
}

Filter.Definition = {
  "type": "Filter",
  "metadata": {
    "changes": true
  },
  "params": [{
    "name": "expr",
    "type": "expr",
    "required": true
  }]
};
var prototype = (0, _vegaUtil.inherits)(Filter, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var df = pulse.dataflow,
      cache = this.value,
      // cache ids of filtered tuples
  output = pulse.fork(),
      add = output.add,
      rem = output.rem,
      mod = output.mod,
      test = _.expr,
      isMod = true;
  pulse.visit(pulse.REM, function (t) {
    var id = (0, _vegaDataflow.tupleid)(t);
    if (!cache.has(id)) rem.push(t);else cache.delete(id);
  });
  pulse.visit(pulse.ADD, function (t) {
    if (test(t, _)) add.push(t);else cache.set((0, _vegaDataflow.tupleid)(t), 1);
  });

  function revisit(t) {
    var id = (0, _vegaDataflow.tupleid)(t),
        b = test(t, _),
        s = cache.get(id);

    if (b && s) {
      cache.delete(id);
      add.push(t);
    } else if (!b && !s) {
      cache.set(id, 1);
      rem.push(t);
    } else if (isMod && b && !s) {
      mod.push(t);
    }
  }

  pulse.visit(pulse.MOD, revisit);

  if (_.modified()) {
    isMod = false;
    pulse.visit(pulse.REFLOW, revisit);
  }

  if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
  return output;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/util/util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fieldNames = fieldNames;

var _vegaUtil = require("vega-util");

// use either provided alias or accessor field name
function fieldNames(fields, as) {
  if (!fields) return null;
  return fields.map(function (f, i) {
    return as[i] || (0, _vegaUtil.accessorName)(f);
  });
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Flatten.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Flatten;

var _util = require("./util/util");

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Flattens array-typed field values into new data objects.
 * If multiple fields are specified, they are treated as parallel arrays,
 * with output values included for each matching index (or null if missing).
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} params.fields - An array of field
 *   accessors for the tuple fields that should be flattened.
 * @param {Array<string>} [params.as] - Output field names for flattened
 *   array fields. Any unspecified fields will use the field name provided
 *   by the fields accessors.
 */
function Flatten(params) {
  _vegaDataflow.Transform.call(this, [], params);
}

Flatten.Definition = {
  "type": "Flatten",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "fields",
    "type": "field",
    "array": true,
    "required": true
  }, {
    "name": "as",
    "type": "string",
    "array": true
  }]
};
var prototype = (0, _vegaUtil.inherits)(Flatten, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.NO_SOURCE),
      fields = _.fields,
      as = (0, _util.fieldNames)(fields, _.as || []),
      m = as.length; // remove any previous results

  out.rem = this.value; // generate flattened tuples

  pulse.visit(pulse.SOURCE, function (t) {
    var arrays = fields.map(function (f) {
      return f(t);
    }),
        maxlen = arrays.reduce(function (l, a) {
      return Math.max(l, a.length);
    }, 0),
        i = 0,
        j,
        d,
        v;

    for (; i < maxlen; ++i) {
      d = (0, _vegaDataflow.derive)(t);

      for (j = 0; j < m; ++j) {
        d[as[j]] = (v = arrays[j][i]) == null ? null : v;
      }

      out.add.push(d);
    }
  });
  this.value = out.source = out.add;
  return out.modifies(as);
};
},{"./util/util":"node_modules/vega-transforms/src/util/util.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Fold.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Fold;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Folds one more tuple fields into multiple tuples in which the field
 * name and values are available under new 'key' and 'value' fields.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.fields - An array of field accessors
 *   for the tuple fields that should be folded.
 * @param {Array<string>} [params.as] - Output field names for folded key
 *   and value fields, defaults to ['key', 'value'].
 */
function Fold(params) {
  _vegaDataflow.Transform.call(this, [], params);
}

Fold.Definition = {
  "type": "Fold",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "fields",
    "type": "field",
    "array": true,
    "required": true
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": ["key", "value"]
  }]
};
var prototype = (0, _vegaUtil.inherits)(Fold, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.NO_SOURCE),
      fields = _.fields,
      fnames = fields.map(_vegaUtil.accessorName),
      as = _.as || ['key', 'value'],
      k = as[0],
      v = as[1],
      n = fields.length;
  out.rem = this.value;
  pulse.visit(pulse.SOURCE, function (t) {
    for (var i = 0, d; i < n; ++i) {
      d = (0, _vegaDataflow.derive)(t);
      d[k] = fnames[i];
      d[v] = fields[i](t);
      out.add.push(d);
    }
  });
  this.value = out.source = out.add;
  return out.modifies(as);
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Formula.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Formula;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Invokes a function for each data tuple and saves the results as a new field.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.expr - The formula function to invoke for each tuple.
 * @param {string} params.as - The field name under which to save the result.
 * @param {boolean} [params.initonly=false] - If true, the formula is applied to
 *   added tuples only, and does not update in response to modifications.
 */
function Formula(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Formula.Definition = {
  "type": "Formula",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "expr",
    "type": "expr",
    "required": true
  }, {
    "name": "as",
    "type": "string",
    "required": true
  }, {
    "name": "initonly",
    "type": "boolean"
  }]
};
var prototype = (0, _vegaUtil.inherits)(Formula, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var func = _.expr,
      as = _.as,
      mod = _.modified(),
      flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) ? pulse.ADD_MOD : pulse.ADD;

  function set(t) {
    t[as] = func(t, _);
  }

  if (mod) {
    // parameters updated, need to reflow
    pulse = pulse.materialize().reflow(true);
  }

  if (!_.initonly) {
    pulse.modifies(as);
  }

  return pulse.visit(flag, set);
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Generate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Generate;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Generates data tuples using a provided generator function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(Parameters): object} params.generator - A tuple generator
 *   function. This function is given the operator parameters as input.
 *   Changes to any additional parameters will not trigger re-calculation
 *   of previously generated tuples. Only future tuples are affected.
 * @param {number} params.size - The number of tuples to produce.
 */
function Generate(params) {
  _vegaDataflow.Transform.call(this, [], params);
}

var prototype = (0, _vegaUtil.inherits)(Generate, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var data = this.value,
      out = pulse.fork(pulse.ALL),
      num = _.size - data.length,
      gen = _.generator,
      add,
      rem,
      t;

  if (num > 0) {
    // need more tuples, generate and add
    for (add = []; --num >= 0;) {
      add.push(t = (0, _vegaDataflow.ingest)(gen(_)));
      data.push(t);
    }

    out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;
  } else {
    // need fewer tuples, remove
    rem = data.slice(0, -num);
    out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;
    data = data.slice(-num);
  }

  out.source = this.value = data;
  return out;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Impute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Impute;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _d3Array = require("d3-array");

var Methods = {
  value: 'value',
  median: _d3Array.median,
  mean: _d3Array.mean,
  min: _d3Array.min,
  max: _d3Array.max
};
var Empty = [];
/**
 * Impute missing values.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to impute.
 * @param {Array<function(object): *>} [params.groupby] - An array of
 *   accessors to determine series within which to perform imputation.
 * @param {function(object): *} params.key - An accessor for a key value.
 *   Each key value should be unique within a group. New tuples will be
 *   imputed for any key values that are not found within a group.
 * @param {Array<*>} [params.keyvals] - Optional array of required key
 *   values. New tuples will be imputed for any key values that are not
 *   found within a group. In addition, these values will be automatically
 *   augmented with the key values observed in the input data.
 * @param {string} [method='value'] - The imputation method to use. One of
 *   'value', 'mean', 'median', 'max', 'min'.
 * @param {*} [value=0] - The constant value to use for imputation
 *   when using method 'value'.
 */

function Impute(params) {
  _vegaDataflow.Transform.call(this, [], params);
}

Impute.Definition = {
  "type": "Impute",
  "metadata": {
    "changes": true
  },
  "params": [{
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "key",
    "type": "field",
    "required": true
  }, {
    "name": "keyvals",
    "array": true
  }, {
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "method",
    "type": "enum",
    "default": "value",
    "values": ["value", "mean", "median", "max", "min"]
  }, {
    "name": "value",
    "default": 0
  }]
};
var prototype = (0, _vegaUtil.inherits)(Impute, _vegaDataflow.Transform);

function getValue(_) {
  var m = _.method || Methods.value,
      v;

  if (Methods[m] == null) {
    (0, _vegaUtil.error)('Unrecognized imputation method: ' + m);
  } else if (m === Methods.value) {
    v = _.value !== undefined ? _.value : 0;
    return function () {
      return v;
    };
  } else {
    return Methods[m];
  }
}

function getField(_) {
  var f = _.field;
  return function (t) {
    return t ? f(t) : NaN;
  };
}

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.ALL),
      impute = getValue(_),
      field = getField(_),
      fName = (0, _vegaUtil.accessorName)(_.field),
      kName = (0, _vegaUtil.accessorName)(_.key),
      gNames = (_.groupby || []).map(_vegaUtil.accessorName),
      groups = partition(pulse.source, _.groupby, _.key, _.keyvals),
      curr = [],
      prev = this.value,
      m = groups.domain.length,
      group,
      value,
      gVals,
      kVal,
      g,
      i,
      j,
      l,
      n,
      t;

  for (g = 0, l = groups.length; g < l; ++g) {
    group = groups[g];
    gVals = group.values;
    value = NaN; // add tuples for missing values

    for (j = 0; j < m; ++j) {
      if (group[j] != null) continue;
      kVal = groups.domain[j];
      t = {
        _impute: true
      };

      for (i = 0, n = gVals.length; i < n; ++i) t[gNames[i]] = gVals[i];

      t[kName] = kVal;
      t[fName] = isNaN(value) ? value = impute(group, field) : value;
      curr.push((0, _vegaDataflow.ingest)(t));
    }
  } // update pulse with imputed tuples


  if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);
  if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);
  this.value = curr;
  return out;
};

function partition(data, groupby, key, keyvals) {
  var get = function (f) {
    return f(t);
  },
      groups = [],
      domain = keyvals ? keyvals.slice() : [],
      kMap = {},
      gMap = {},
      gVals,
      gKey,
      group,
      i,
      j,
      k,
      n,
      t;

  domain.forEach(function (k, i) {
    kMap[k] = i + 1;
  });

  for (i = 0, n = data.length; i < n; ++i) {
    t = data[i];
    k = key(t);
    j = kMap[k] || (kMap[k] = domain.push(k));
    gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';

    if (!(group = gMap[gKey])) {
      group = gMap[gKey] = [];
      groups.push(group);
      group.values = gVals;
    }

    group[j - 1] = t;
  }

  groups.domain = domain;
  return groups;
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/vega-transforms/src/JoinAggregate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = JoinAggregate;

var _Aggregate = _interopRequireDefault(require("./Aggregate"));

var _AggregateOps = require("./util/AggregateOps");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Extend input tuples with aggregate values.
 * Calcuates aggregate values and joins them with the input stream.
 * @constructor
 */
function JoinAggregate(params) {
  _Aggregate.default.call(this, params);
}

JoinAggregate.Definition = {
  "type": "JoinAggregate",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "fields",
    "type": "field",
    "null": true,
    "array": true
  }, {
    "name": "ops",
    "type": "enum",
    "array": true,
    "values": _AggregateOps.ValidAggregateOps
  }, {
    "name": "as",
    "type": "string",
    "null": true,
    "array": true
  }, {
    "name": "key",
    "type": "field"
  }]
};
var prototype = (0, _vegaUtil.inherits)(JoinAggregate, _Aggregate.default);

prototype.transform = function (_, pulse) {
  var aggr = this,
      mod = _.modified(),
      cells; // process all input tuples to calculate aggregates


  if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {
    cells = aggr.value = mod ? aggr.init(_) : {};
    pulse.visit(pulse.SOURCE, function (t) {
      aggr.add(t);
    });
  } else {
    cells = aggr.value = aggr.value || this.init(_);
    pulse.visit(pulse.REM, function (t) {
      aggr.rem(t);
    });
    pulse.visit(pulse.ADD, function (t) {
      aggr.add(t);
    });
  } // update aggregation cells


  aggr.changes(); // write aggregate values to input tuples

  pulse.visit(pulse.SOURCE, function (t) {
    (0, _vegaUtil.extend)(t, cells[aggr.cellkey(t)].tuple);
  });
  return pulse.reflow(mod).modifies(this._outputs);
};

prototype.changes = function () {
  var adds = this._adds,
      mods = this._mods,
      i,
      n;

  for (i = 0, n = this._alen; i < n; ++i) {
    this.celltuple(adds[i]);
    adds[i] = null; // for garbage collection
  }

  for (i = 0, n = this._mlen; i < n; ++i) {
    this.celltuple(mods[i]);
    mods[i] = null; // for garbage collection
  }

  this._alen = this._mlen = 0; // reset list of active cells
};
},{"./Aggregate":"node_modules/vega-transforms/src/Aggregate.js","./util/AggregateOps":"node_modules/vega-transforms/src/util/AggregateOps.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/KDE.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = KDE;

var _vegaStatistics = require("vega-statistics");

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Compute kernel density estimates (KDE) for one or more data groups.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *   to groupby.
 * @param {function(object): *} params.field - An accessor for the data field
 *   to estimate.
 * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.
 *   If zero of unspecified, the bandwidth is automatically determined.
 * @param {string} [params.cumulative=false] - A boolean flag indicating if a
 *   density (false) or cumulative distribution (true) should be generated.
 * @param {Array<number>} [params.extent] - The domain extent over which to
 *   plot the density. If unspecified, the [min, max] data extent is used.
 * @param {string} [params.resolve='independent'] - Indicates how parameters for
 *   multiple densities should be resolved. If "independent" (the default), each
 *   density may have its own domain extent and dynamic number of curve sample
 *   steps. If "shared", the KDE transform will ensure that all densities are
 *   defined over a shared domain and curve steps, enabling stacking.
 * @param {number} [params.minsteps=25] - The minimum number of curve samples
 *   for plotting the density.
 * @param {number} [params.maxsteps=200] - The maximum number of curve samples
 *   for plotting the density.
 * @param {number} [params.steps] - The exact number of curve samples for
 *   plotting the density. If specified, overrides both minsteps and maxsteps
 *   to set an exact number of uniform samples. Useful in conjunction with
 *   a fixed extent to ensure consistent sample points for stacked densities.
 */
function KDE(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

KDE.Definition = {
  "type": "KDE",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "cumulative",
    "type": "boolean",
    "default": false
  }, {
    "name": "counts",
    "type": "boolean",
    "default": false
  }, {
    "name": "bandwidth",
    "type": "number",
    "default": 0
  }, {
    "name": "extent",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "resolve",
    "type": "enum",
    "values": ["shared", "independent"],
    "default": "independent"
  }, {
    "name": "steps",
    "type": "number"
  }, {
    "name": "minsteps",
    "type": "number",
    "default": 25
  }, {
    "name": "maxsteps",
    "type": "number",
    "default": 200
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "default": ["value", "density"]
  }]
};
var prototype = (0, _vegaUtil.inherits)(KDE, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

  if (!this.value || pulse.changed() || _.modified()) {
    const source = pulse.materialize(pulse.SOURCE).source,
          groups = partition(source, _.groupby, _.field),
          names = (_.groupby || []).map(_vegaUtil.accessorName),
          bandwidth = _.bandwidth,
          method = _.cumulative ? 'cdf' : 'pdf',
          as = _.as || ['value', 'density'],
          values = [];
    let domain = _.extent,
        minsteps = _.steps || _.minsteps || 25,
        maxsteps = _.steps || _.maxsteps || 200;

    if (method !== 'pdf' && method !== 'cdf') {
      (0, _vegaUtil.error)('Invalid density method: ' + method);
    }

    if (_.resolve === 'shared') {
      if (!domain) domain = (0, _vegaUtil.extent)(source, _.field);
      minsteps = maxsteps = _.steps || maxsteps;
    }

    groups.forEach(g => {
      const density = (0, _vegaStatistics.randomKDE)(g, bandwidth)[method],
            scale = _.counts ? g.length : 1,
            local = domain || (0, _vegaUtil.extent)(g);
      (0, _vegaStatistics.sampleCurve)(density, local, minsteps, maxsteps).forEach(v => {
        const t = {};

        for (let i = 0; i < names.length; ++i) {
          t[names[i]] = g.dims[i];
        }

        t[as[0]] = v[0];
        t[as[1]] = v[1] * scale;
        values.push((0, _vegaDataflow.ingest)(t));
      });
    });
    if (this.value) out.rem = this.value;
    this.value = out.add = out.source = values;
  }

  return out;
};

function partition(data, groupby, field) {
  var groups = [],
      get = function (f) {
    return f(t);
  },
      map,
      i,
      n,
      t,
      k,
      g; // partition data points into stack groups


  if (groupby == null) {
    groups.push(data.map(field));
  } else {
    for (map = {}, i = 0, n = data.length; i < n; ++i) {
      t = data[i];
      k = groupby.map(get);
      g = map[k];

      if (!g) {
        map[k] = g = [];
        g.dims = k;
        groups.push(g);
      }

      g.push(field(t));
    }
  }

  return groups;
}
},{"vega-statistics":"node_modules/vega-statistics/index.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Key.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Key;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Generates a key function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<string>} params.fields - The field name(s) for the key function.
 * @param {boolean} params.flat - A boolean flag indicating if the field names
 *  should be treated as flat property names, side-stepping nested field
 *  lookups normally indicated by dot or bracket notation.
 */
function Key(params) {
  _vegaDataflow.Operator.call(this, null, update, params);
}

(0, _vegaUtil.inherits)(Key, _vegaDataflow.Operator);

function update(_) {
  return this.value && !_.modified() ? this.value : (0, _vegaUtil.key)(_.fields, _.flat);
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Load.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Load;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Load and parse data from an external source. Marshalls parameter
 * values and then invokes the Dataflow request method.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {string} params.url - The URL to load from.
 * @param {object} params.format - The data format options.
 */
function Load(params) {
  _vegaDataflow.Transform.call(this, [], params);
}

var prototype = (0, _vegaUtil.inherits)(Load, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  const df = pulse.dataflow;

  if (_.values) {
    // parse and ingest values
    return output(this, pulse, df.parse(_.values, _.format));
  } else {
    // return promise for async loading
    return df.request(_.url, _.format).then(res => output(this, pulse, res.data || []));
  }
};

function output(op, pulse, data) {
  data.forEach(_vegaDataflow.ingest);
  const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);
  out.rem = op.value;
  op.value = out.add = out.source = data;
  return out;
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Lookup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Lookup;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Extend tuples by joining them with values from a lookup table.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Map} params.index - The lookup table map.
 * @param {Array<function(object): *} params.fields - The fields to lookup.
 * @param {Array<string>} params.as - Output field names for each lookup value.
 * @param {*} [params.default] - A default value to use if lookup fails.
 */
function Lookup(params) {
  _vegaDataflow.Transform.call(this, {}, params);
}

Lookup.Definition = {
  "type": "Lookup",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "index",
    "type": "index",
    "params": [{
      "name": "from",
      "type": "data",
      "required": true
    }, {
      "name": "key",
      "type": "field",
      "required": true
    }]
  }, {
    "name": "values",
    "type": "field",
    "array": true
  }, {
    "name": "fields",
    "type": "field",
    "array": true,
    "required": true
  }, {
    "name": "as",
    "type": "string",
    "array": true
  }, {
    "name": "default",
    "default": null
  }]
};
var prototype = (0, _vegaUtil.inherits)(Lookup, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse,
      as = _.as,
      keys = _.fields,
      index = _.index,
      values = _.values,
      defaultValue = _.default == null ? null : _.default,
      reset = _.modified(),
      flag = reset ? pulse.SOURCE : pulse.ADD,
      n = keys.length,
      set,
      m,
      mods;

  if (values) {
    m = values.length;

    if (n > 1 && !as) {
      (0, _vegaUtil.error)('Multi-field lookup requires explicit "as" parameter.');
    }

    if (as && as.length !== n * m) {
      (0, _vegaUtil.error)('The "as" parameter has too few output field names.');
    }

    as = as || values.map(_vegaUtil.accessorName);

    set = function (t) {
      for (var i = 0, k = 0, j, v; i < n; ++i) {
        v = index.get(keys[i](t));
        if (v == null) for (j = 0; j < m; ++j, ++k) t[as[k]] = defaultValue;else for (j = 0; j < m; ++j, ++k) t[as[k]] = values[j](v);
      }
    };
  } else {
    if (!as) {
      (0, _vegaUtil.error)('Missing output field names.');
    }

    set = function (t) {
      for (var i = 0, v; i < n; ++i) {
        v = index.get(keys[i](t));
        t[as[i]] = v == null ? defaultValue : v;
      }
    };
  }

  if (reset) {
    out = pulse.reflow(true);
  } else {
    mods = keys.some(function (k) {
      return pulse.modified(k.fields);
    });
    flag |= mods ? pulse.MOD : 0;
  }

  pulse.visit(flag, set);
  return out.modifies(as);
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/MultiExtent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MultiExtent;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Computes global min/max extents over a collection of extents.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<Array<number>>} params.extents - The input extents.
 */
function MultiExtent(params) {
  _vegaDataflow.Operator.call(this, null, update, params);
}

(0, _vegaUtil.inherits)(MultiExtent, _vegaDataflow.Operator);

function update(_) {
  if (this.value && !_.modified()) {
    return this.value;
  }

  var min = +Infinity,
      max = -Infinity,
      ext = _.extents,
      i,
      n,
      e;

  for (i = 0, n = ext.length; i < n; ++i) {
    e = ext[i];
    if (e[0] < min) min = e[0];
    if (e[1] > max) max = e[1];
  }

  return [min, max];
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/MultiValues.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MultiValues;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Merge a collection of value arrays.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<Array<*>>} params.values - The input value arrrays.
 */
function MultiValues(params) {
  _vegaDataflow.Operator.call(this, null, update, params);
}

(0, _vegaUtil.inherits)(MultiValues, _vegaDataflow.Operator);

function update(_) {
  return this.value && !_.modified() ? this.value : _.values.reduce(function (data, _) {
    return data.concat(_);
  }, []);
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Params.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Params;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Operator whose value is simply its parameter hash. This operator is
 * useful for enabling reactive updates to values of nested objects.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */
function Params(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

(0, _vegaUtil.inherits)(Params, _vegaDataflow.Transform);

Params.prototype.transform = function (_, pulse) {
  this.modified(_.modified());
  this.value = _;
  return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Pivot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Pivot;

var _Aggregate = _interopRequireDefault(require("./Aggregate"));

var _AggregateOps = require("./util/AggregateOps");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Aggregate and pivot selected field values to become new fields.
 * This operator is useful to construction cross-tabulations.
 * @constructor
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *  to groupby. These fields act just like groupby fields of an Aggregate transform.
 * @param {function(object): *} params.field - The field to pivot on. The unique
 *  values of this field become new field names in the output stream.
 * @param {function(object): *} params.value - The field to populate pivoted fields.
 *  The aggregate values of this field become the values of the new pivoted fields.
 * @param {string} [params.op] - The aggregation operation for the value field,
 *  applied per cell in the output stream. The default is "sum".
 * @param {number} [params.limit] - An optional parameter indicating the maximum
 *  number of pivoted fields to generate. The pivoted field names are sorted in
 *  ascending order prior to enforcing the limit.
 */
function Pivot(params) {
  _Aggregate.default.call(this, params);
}

Pivot.Definition = {
  "type": "Pivot",
  "metadata": {
    "generates": true,
    "changes": true
  },
  "params": [{
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "value",
    "type": "field",
    "required": true
  }, {
    "name": "op",
    "type": "enum",
    "values": _AggregateOps.ValidAggregateOps,
    "default": "sum"
  }, {
    "name": "limit",
    "type": "number",
    "default": 0
  }, {
    "name": "key",
    "type": "field"
  }]
};
var prototype = (0, _vegaUtil.inherits)(Pivot, _Aggregate.default);
prototype._transform = prototype.transform;

prototype.transform = function (_, pulse) {
  return this._transform(aggregateParams(_, pulse), pulse);
}; // Shoehorn a pivot transform into an aggregate transform!
// First collect all unique pivot field values.
// Then generate aggregate fields for each output pivot field.


function aggregateParams(_, pulse) {
  var key = _.field,
      value = _.value,
      op = (_.op === 'count' ? '__count__' : _.op) || 'sum',
      fields = (0, _vegaUtil.accessorFields)(key).concat((0, _vegaUtil.accessorFields)(value)),
      keys = pivotKeys(key, _.limit || 0, pulse); // if data stream content changes, pivot fields may change
  // flag parameter modification to ensure re-initialization

  if (pulse.changed()) _.set('__pivot__', null, null, true);
  return {
    key: _.key,
    groupby: _.groupby,
    ops: keys.map(function () {
      return op;
    }),
    fields: keys.map(function (k) {
      return get(k, key, value, fields);
    }),
    as: keys.map(function (k) {
      return k + '';
    }),
    modified: _.modified.bind(_)
  };
} // Generate aggregate field accessor.
// Output NaN for non-existent values; aggregator will ignore!


function get(k, key, value, fields) {
  return (0, _vegaUtil.accessor)(function (d) {
    return key(d) === k ? value(d) : NaN;
  }, fields, k + '');
} // Collect (and optionally limit) all unique pivot values.


function pivotKeys(key, limit, pulse) {
  var map = {},
      list = [];
  pulse.visit(pulse.SOURCE, function (t) {
    var k = key(t);

    if (!map[k]) {
      map[k] = 1;
      list.push(k);
    }
  }); // TODO? Move this comparator to vega-util?

  list.sort(function (u, v) {
    return (u < v || u == null) && v != null ? -1 : (u > v || v == null) && u != null ? 1 : (v = v instanceof Date ? +v : v, u = u instanceof Date ? +u : u) !== u && v === v ? -1 : v !== v && u === u ? 1 : 0;
  });
  return limit ? list.slice(0, limit) : list;
}
},{"./Aggregate":"node_modules/vega-transforms/src/Aggregate.js","./util/AggregateOps":"node_modules/vega-transforms/src/util/AggregateOps.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/PreFacet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PreFacet;

var _Facet = _interopRequireDefault(require("./Facet"));

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Partitions pre-faceted data into tuple subflows.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(Dataflow, string): Operator} params.subflow - A function
 *   that generates a subflow of operators and returns its root operator.
 * @param {function(object): Array<object>} params.field - The field
 *   accessor for an array of subflow tuple objects.
 */
function PreFacet(params) {
  _Facet.default.call(this, params);
}

var prototype = (0, _vegaUtil.inherits)(PreFacet, _Facet.default);

prototype.transform = function (_, pulse) {
  var self = this,
      flow = _.subflow,
      field = _.field;

  if (_.modified('field') || field && pulse.modified((0, _vegaUtil.accessorFields)(field))) {
    (0, _vegaUtil.error)('PreFacet does not support field modification.');
  }

  this._targets.active = 0; // reset list of active subflows

  pulse.visit(pulse.MOD, function (t) {
    var sf = self.subflow((0, _vegaDataflow.tupleid)(t), flow, pulse, t);
    field ? field(t).forEach(function (_) {
      sf.mod(_);
    }) : sf.mod(t);
  });
  pulse.visit(pulse.ADD, function (t) {
    var sf = self.subflow((0, _vegaDataflow.tupleid)(t), flow, pulse, t);
    field ? field(t).forEach(function (_) {
      sf.add((0, _vegaDataflow.ingest)(_));
    }) : sf.add(t);
  });
  pulse.visit(pulse.REM, function (t) {
    var sf = self.subflow((0, _vegaDataflow.tupleid)(t), flow, pulse, t);
    field ? field(t).forEach(function (_) {
      sf.rem(_);
    }) : sf.rem(t);
  });
  return pulse;
};
},{"./Facet":"node_modules/vega-transforms/src/Facet.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Project.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Project;

var _util = require("./util/util");

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Performs a relational projection, copying selected fields from source
 * tuples to a new set of derived tuples.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *} params.fields - The fields to project,
 *   as an array of field accessors. If unspecified, all fields will be
 *   copied with names unchanged.
 * @param {Array<string>} [params.as] - Output field names for each projected
 *   field. Any unspecified fields will use the field name provided by
 *   the field accessor.
 */
function Project(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Project.Definition = {
  "type": "Project",
  "metadata": {
    "generates": true,
    "changes": true
  },
  "params": [{
    "name": "fields",
    "type": "field",
    "array": true
  }, {
    "name": "as",
    "type": "string",
    "null": true,
    "array": true
  }]
};
var prototype = (0, _vegaUtil.inherits)(Project, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var fields = _.fields,
      as = (0, _util.fieldNames)(_.fields, _.as || []),
      derive = fields ? function (s, t) {
    return project(s, t, fields, as);
  } : _vegaDataflow.rederive,
      out,
      lut;

  if (this.value) {
    lut = this.value;
  } else {
    pulse = pulse.addAll();
    lut = this.value = {};
  }

  out = pulse.fork(pulse.NO_SOURCE);
  pulse.visit(pulse.REM, function (t) {
    var id = (0, _vegaDataflow.tupleid)(t);
    out.rem.push(lut[id]);
    lut[id] = null;
  });
  pulse.visit(pulse.ADD, function (t) {
    var dt = derive(t, (0, _vegaDataflow.ingest)({}));
    lut[(0, _vegaDataflow.tupleid)(t)] = dt;
    out.add.push(dt);
  });
  pulse.visit(pulse.MOD, function (t) {
    out.mod.push(derive(t, lut[(0, _vegaDataflow.tupleid)(t)]));
  });
  return out;
};

function project(s, t, fields, as) {
  for (var i = 0, n = fields.length; i < n; ++i) {
    t[as[i]] = fields[i](s);
  }

  return t;
}
},{"./util/util":"node_modules/vega-transforms/src/util/util.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Proxy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Proxy;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Proxy the value of another operator as a pure signal value.
 * Ensures no tuples are propagated.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {*} params.value - The value to proxy, becomes the value of this operator.
 */
function Proxy(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(Proxy, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  this.value = _.value;
  return _.modified('value') ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Relay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Relay;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Relays a data stream between data processing pipelines.
 * If the derive parameter is set, this transform will create derived
 * copies of observed tuples. This provides derived data streams in which
 * modifications to the tuples do not pollute an upstream data source.
 * @param {object} params - The parameters for this operator.
 * @param {number} [params.derive=false] - Boolean flag indicating if
 *   the transform should make derived copies of incoming tuples.
 * @constructor
 */
function Relay(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(Relay, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out, lut;

  if (this.value) {
    lut = this.value;
  } else {
    out = pulse = pulse.addAll();
    lut = this.value = {};
  }

  if (_.derive) {
    out = pulse.fork(pulse.NO_SOURCE);
    pulse.visit(pulse.REM, function (t) {
      var id = (0, _vegaDataflow.tupleid)(t);
      out.rem.push(lut[id]);
      lut[id] = null;
    });
    pulse.visit(pulse.ADD, function (t) {
      var dt = (0, _vegaDataflow.derive)(t);
      lut[(0, _vegaDataflow.tupleid)(t)] = dt;
      out.add.push(dt);
    });
    pulse.visit(pulse.MOD, function (t) {
      out.mod.push((0, _vegaDataflow.rederive)(t, lut[(0, _vegaDataflow.tupleid)(t)]));
    });
  }

  return out;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Sample.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Sample;

var _vegaDataflow = require("vega-dataflow");

var _vegaStatistics = require("vega-statistics");

var _vegaUtil = require("vega-util");

/**
 * Samples tuples passing through this operator.
 * Uses reservoir sampling to maintain a representative sample.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {number} [params.size=1000] - The maximum number of samples.
 */
function Sample(params) {
  _vegaDataflow.Transform.call(this, [], params);

  this.count = 0;
}

Sample.Definition = {
  "type": "Sample",
  "metadata": {},
  "params": [{
    "name": "size",
    "type": "number",
    "default": 1000
  }]
};
var prototype = (0, _vegaUtil.inherits)(Sample, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.NO_SOURCE),
      mod = _.modified('size'),
      num = _.size,
      res = this.value,
      cnt = this.count,
      cap = 0,
      map = res.reduce(function (m, t) {
    m[(0, _vegaDataflow.tupleid)(t)] = 1;
    return m;
  }, {}); // sample reservoir update function


  function update(t) {
    var p, idx;

    if (res.length < num) {
      res.push(t);
    } else {
      idx = ~~((cnt + 1) * (0, _vegaStatistics.random)());

      if (idx < res.length && idx >= cap) {
        p = res[idx];
        if (map[(0, _vegaDataflow.tupleid)(p)]) out.rem.push(p); // eviction

        res[idx] = t;
      }
    }

    ++cnt;
  }

  if (pulse.rem.length) {
    // find all tuples that should be removed, add to output
    pulse.visit(pulse.REM, function (t) {
      var id = (0, _vegaDataflow.tupleid)(t);

      if (map[id]) {
        map[id] = -1;
        out.rem.push(t);
      }

      --cnt;
    }); // filter removed tuples out of the sample reservoir

    res = res.filter(function (t) {
      return map[(0, _vegaDataflow.tupleid)(t)] !== -1;
    });
  }

  if ((pulse.rem.length || mod) && res.length < num && pulse.source) {
    // replenish sample if backing data source is available
    cap = cnt = res.length;
    pulse.visit(pulse.SOURCE, function (t) {
      // update, but skip previously sampled tuples
      if (!map[(0, _vegaDataflow.tupleid)(t)]) update(t);
    });
    cap = -1;
  }

  if (mod && res.length > num) {
    for (var i = 0, n = res.length - num; i < n; ++i) {
      map[(0, _vegaDataflow.tupleid)(res[i])] = -1;
      out.rem.push(res[i]);
    }

    res = res.slice(n);
  }

  if (pulse.mod.length) {
    // propagate modified tuples in the sample reservoir
    pulse.visit(pulse.MOD, function (t) {
      if (map[(0, _vegaDataflow.tupleid)(t)]) out.mod.push(t);
    });
  }

  if (pulse.add.length) {
    // update sample reservoir
    pulse.visit(pulse.ADD, update);
  }

  if (pulse.add.length || cap < 0) {
    // output newly added tuples
    out.add = res.filter(function (t) {
      return !map[(0, _vegaDataflow.tupleid)(t)];
    });
  }

  this.count = cnt;
  this.value = out.source = res;
  return out;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-statistics":"node_modules/vega-statistics/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Sequence.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Sequence;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _d3Array = require("d3-array");

/**
 * Generates data tuples for a specified sequence range of numbers.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {number} params.start - The first number in the sequence.
 * @param {number} params.stop - The last number (exclusive) in the sequence.
 * @param {number} [params.step=1] - The step size between numbers in the sequence.
 */
function Sequence(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Sequence.Definition = {
  "type": "Sequence",
  "metadata": {
    "generates": true,
    "changes": true
  },
  "params": [{
    "name": "start",
    "type": "number",
    "required": true
  }, {
    "name": "stop",
    "type": "number",
    "required": true
  }, {
    "name": "step",
    "type": "number",
    "default": 1
  }, {
    "name": "as",
    "type": "string",
    "default": "data"
  }]
};
var prototype = (0, _vegaUtil.inherits)(Sequence, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  if (this.value && !_.modified()) return;
  var out = pulse.materialize().fork(pulse.MOD),
      as = _.as || 'data';
  out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;
  this.value = (0, _d3Array.range)(_.start, _.stop, _.step || 1).map(function (v) {
    var t = {};
    t[as] = v;
    return (0, _vegaDataflow.ingest)(t);
  });
  out.add = pulse.add.concat(this.value);
  return out;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/vega-transforms/src/Sieve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Sieve;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Propagates a new pulse without any tuples so long as the input
 * pulse contains some added, removed or modified tuples.
 * @param {object} params - The parameters for this operator.
 * @constructor
 */
function Sieve(params) {
  _vegaDataflow.Transform.call(this, null, params);

  this.modified(true); // always treat as modified
}

var prototype = (0, _vegaUtil.inherits)(Sieve, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  this.value = pulse.source;
  return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/TupleIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TupleIndex;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * An index that maps from unique, string-coerced, field values to tuples.
 * Assumes that the field serves as a unique key with no duplicate values.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The field accessor to index.
 */
function TupleIndex(params) {
  _vegaDataflow.Transform.call(this, (0, _vegaUtil.fastmap)(), params);
}

var prototype = (0, _vegaUtil.inherits)(TupleIndex, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var df = pulse.dataflow,
      field = _.field,
      index = this.value,
      mod = true;

  function set(t) {
    index.set(field(t), t);
  }

  if (_.modified('field') || pulse.modified(field.fields)) {
    index.clear();
    pulse.visit(pulse.SOURCE, set);
  } else if (pulse.changed()) {
    pulse.visit(pulse.REM, function (t) {
      index.delete(field(t));
    });
    pulse.visit(pulse.ADD, set);
  } else {
    mod = false;
  }

  this.modified(mod);
  if (index.empty > df.cleanThreshold) df.runAfter(index.clean);
  return pulse.fork();
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Values.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Values;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Extracts an array of values. Assumes the source data has already been
 * reduced as needed (e.g., by an upstream Aggregate transform).
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The domain field to extract.
 * @param {function(*,*): number} [params.sort] - An optional
 *   comparator function for sorting the values. The comparator will be
 *   applied to backing tuples prior to value extraction.
 */
function Values(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(Values, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var run = !this.value || _.modified('field') || _.modified('sort') || pulse.changed() || _.sort && pulse.modified(_.sort.fields);

  if (run) {
    this.value = (_.sort ? pulse.source.slice().sort((0, _vegaDataflow.stableCompare)(_.sort)) : pulse.source).map(_.field);
  }
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/util/WindowOps.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WindowOp = WindowOp;
exports.ValidWindowOps = exports.WindowOps = void 0;

var _vegaUtil = require("vega-util");

function WindowOp(op, field, param, as) {
  let fn = WindowOps[op](field, param);
  return {
    init: fn.init || _vegaUtil.zero,
    update: function (w, t) {
      t[as] = fn.next(w);
    }
  };
}

const WindowOps = {
  row_number: function () {
    return {
      next: w => w.index + 1
    };
  },
  rank: function () {
    let rank;
    return {
      init: () => rank = 1,
      next: w => {
        let i = w.index,
            data = w.data;
        return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;
      }
    };
  },
  dense_rank: function () {
    let drank;
    return {
      init: () => drank = 1,
      next: w => {
        let i = w.index,
            d = w.data;
        return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;
      }
    };
  },
  percent_rank: function () {
    let rank = WindowOps.rank(),
        next = rank.next;
    return {
      init: rank.init,
      next: w => (next(w) - 1) / (w.data.length - 1)
    };
  },
  cume_dist: function () {
    let cume;
    return {
      init: () => cume = 0,
      next: w => {
        let i = w.index,
            d = w.data,
            c = w.compare;

        if (cume < i) {
          while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;

          cume = i;
        }

        return (1 + cume) / d.length;
      }
    };
  },
  ntile: function (field, num) {
    num = +num;
    if (!(num > 0)) (0, _vegaUtil.error)('ntile num must be greater than zero.');
    let cume = WindowOps.cume_dist(),
        next = cume.next;
    return {
      init: cume.init,
      next: w => Math.ceil(num * next(w))
    };
  },
  lag: function (field, offset) {
    offset = +offset || 1;
    return {
      next: w => {
        let i = w.index - offset;
        return i >= 0 ? field(w.data[i]) : null;
      }
    };
  },
  lead: function (field, offset) {
    offset = +offset || 1;
    return {
      next: w => {
        let i = w.index + offset,
            d = w.data;
        return i < d.length ? field(d[i]) : null;
      }
    };
  },
  first_value: function (field) {
    return {
      next: w => field(w.data[w.i0])
    };
  },
  last_value: function (field) {
    return {
      next: w => field(w.data[w.i1 - 1])
    };
  },
  nth_value: function (field, nth) {
    nth = +nth;
    if (!(nth > 0)) (0, _vegaUtil.error)('nth_value nth must be greater than zero.');
    return {
      next: w => {
        let i = w.i0 + (nth - 1);
        return i < w.i1 ? field(w.data[i]) : null;
      }
    };
  },
  prev_value: function (field) {
    let prev = null;
    return {
      next: w => {
        let v = field(w.data[w.index]);
        return v != null ? prev = v : prev;
      }
    };
  },
  next_value: function (field) {
    let v = null,
        i = -1;
    return {
      next: w => {
        let d = w.data;
        return w.index <= i ? v : (i = find(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);
      }
    };
  }
};
exports.WindowOps = WindowOps;

function find(field, data, index) {
  for (let n = data.length; index < n; ++index) {
    let v = field(data[index]);
    if (v != null) return index;
  }

  return -1;
}

var ValidWindowOps = Object.keys(WindowOps);
exports.ValidWindowOps = ValidWindowOps;
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/util/WindowState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = WindowState;

var _AggregateOps = require("./AggregateOps");

var _TupleStore = _interopRequireDefault(require("./TupleStore"));

var _WindowOps = require("./WindowOps");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function WindowState(_) {
  let self = this,
      ops = (0, _vegaUtil.array)(_.ops),
      fields = (0, _vegaUtil.array)(_.fields),
      params = (0, _vegaUtil.array)(_.params),
      as = (0, _vegaUtil.array)(_.as),
      outputs = self.outputs = [],
      windows = self.windows = [],
      inputs = {},
      map = {},
      countOnly = true,
      counts = [],
      measures = [];

  function visitInputs(f) {
    (0, _vegaUtil.array)((0, _vegaUtil.accessorFields)(f)).forEach(_ => inputs[_] = 1);
  }

  visitInputs(_.sort);
  ops.forEach(function (op, i) {
    let field = fields[i],
        mname = (0, _vegaUtil.accessorName)(field),
        name = (0, _AggregateOps.measureName)(op, mname, as[i]);
    visitInputs(field);
    outputs.push(name); // Window operation

    if ((0, _vegaUtil.hasOwnProperty)(_WindowOps.WindowOps, op)) {
      windows.push((0, _WindowOps.WindowOp)(op, fields[i], params[i], name));
    } // Aggregate operation
    else {
        if (field == null && op !== 'count') {
          (0, _vegaUtil.error)('Null aggregate field specified.');
        }

        if (op === 'count') {
          counts.push(name);
          return;
        }

        countOnly = false;
        let m = map[mname];

        if (!m) {
          m = map[mname] = [];
          m.field = field;
          measures.push(m);
        }

        m.push((0, _AggregateOps.createMeasure)(op, name));
      }
  });

  if (counts.length || measures.length) {
    self.cell = cell(measures, counts, countOnly);
  }

  self.inputs = Object.keys(inputs);
}

const prototype = WindowState.prototype;

prototype.init = function () {
  this.windows.forEach(_ => _.init());
  if (this.cell) this.cell.init();
};

prototype.update = function (w, t) {
  let self = this,
      cell = self.cell,
      wind = self.windows,
      data = w.data,
      m = wind && wind.length,
      j;

  if (cell) {
    for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);

    for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);

    cell.set(t);
  }

  for (j = 0; j < m; ++j) wind[j].update(w, t);
};

function cell(measures, counts, countOnly) {
  measures = measures.map(m => (0, _AggregateOps.compileMeasures)(m, m.field));
  let cell = {
    num: 0,
    agg: null,
    store: false,
    count: counts
  };

  if (!countOnly) {
    var n = measures.length,
        a = cell.agg = Array(n),
        i = 0;

    for (; i < n; ++i) a[i] = new measures[i](cell);
  }

  if (cell.store) {
    var store = cell.data = new _TupleStore.default();
  }

  cell.add = function (t) {
    cell.num += 1;
    if (countOnly) return;
    if (store) store.add(t);

    for (let i = 0; i < n; ++i) {
      a[i].add(a[i].get(t), t);
    }
  };

  cell.rem = function (t) {
    cell.num -= 1;
    if (countOnly) return;
    if (store) store.rem(t);

    for (let i = 0; i < n; ++i) {
      a[i].rem(a[i].get(t), t);
    }
  };

  cell.set = function (t) {
    let i, n; // consolidate stored values

    if (store) store.values(); // update tuple properties

    for (i = 0, n = counts.length; i < n; ++i) t[counts[i]] = cell.num;

    if (!countOnly) for (i = 0, n = a.length; i < n; ++i) a[i].set(t);
  };

  cell.init = function () {
    cell.num = 0;
    if (store) store.reset();

    for (let i = 0; i < n; ++i) a[i].init();
  };

  return cell;
}
},{"./AggregateOps":"node_modules/vega-transforms/src/util/AggregateOps.js","./TupleStore":"node_modules/vega-transforms/src/util/TupleStore.js","./WindowOps":"node_modules/vega-transforms/src/util/WindowOps.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-transforms/src/Window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Window;

var _AggregateKeys = require("./util/AggregateKeys");

var _AggregateOps = require("./util/AggregateOps");

var _SortedList = _interopRequireDefault(require("./util/SortedList"));

var _WindowOps = require("./util/WindowOps");

var _WindowState = _interopRequireDefault(require("./util/WindowState"));

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Perform window calculations and write results to the input stream.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.
 * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.
 * @param {Array<function(object): *>} [params.fields] - An array of accessors
 *   for data fields to use as inputs to window operations.
 * @param {Array<*>} [params.params] - An array of parameter values for window operations.
 * @param {Array<string>} [params.as] - An array of output field names for window operations.
 * @param {Array<number>} [params.frame] - Window frame definition as two-element array.
 * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row
 *   number alone, ignoring peers with identical sort values. If false (default),
 *   the window boundaries will be adjusted to include peer values.
 */
function Window(params) {
  _vegaDataflow.Transform.call(this, {}, params);

  this._mlen = 0;
  this._mods = [];
}

Window.Definition = {
  "type": "Window",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "sort",
    "type": "compare"
  }, {
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "ops",
    "type": "enum",
    "array": true,
    "values": _WindowOps.ValidWindowOps.concat(_AggregateOps.ValidAggregateOps)
  }, {
    "name": "params",
    "type": "number",
    "null": true,
    "array": true
  }, {
    "name": "fields",
    "type": "field",
    "null": true,
    "array": true
  }, {
    "name": "as",
    "type": "string",
    "null": true,
    "array": true
  }, {
    "name": "frame",
    "type": "number",
    "null": true,
    "array": true,
    "length": 2,
    "default": [null, 0]
  }, {
    "name": "ignorePeers",
    "type": "boolean",
    "default": false
  }]
};
var prototype = (0, _vegaUtil.inherits)(Window, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var self = this,
      state = self.state,
      mod = _.modified(),
      cmp = (0, _vegaDataflow.stableCompare)(_.sort),
      i,
      n;

  this.stamp = pulse.stamp; // initialize window state

  if (!state || mod) {
    state = self.state = new _WindowState.default(_);
  } // retrieve group for a tuple


  var key = (0, _AggregateKeys.groupkey)(_.groupby);

  function group(t) {
    return self.group(key(t));
  } // partition input tuples


  if (mod || pulse.modified(state.inputs)) {
    self.value = {};
    pulse.visit(pulse.SOURCE, function (t) {
      group(t).add(t);
    });
  } else {
    pulse.visit(pulse.REM, function (t) {
      group(t).remove(t);
    });
    pulse.visit(pulse.ADD, function (t) {
      group(t).add(t);
    });
  } // perform window calculations for each modified partition


  for (i = 0, n = self._mlen; i < n; ++i) {
    processPartition(self._mods[i], state, cmp, _);
  }

  self._mlen = 0;
  self._mods = []; // TODO don't reflow everything?

  return pulse.reflow(mod).modifies(state.outputs);
};

prototype.group = function (key) {
  var self = this,
      group = self.value[key];

  if (!group) {
    group = self.value[key] = (0, _SortedList.default)(_vegaDataflow.tupleid);
    group.stamp = -1;
  }

  if (group.stamp < self.stamp) {
    group.stamp = self.stamp;
    self._mods[self._mlen++] = group;
  }

  return group;
};

function processPartition(list, state, cmp, _) {
  var sort = _.sort,
      range = sort && !_.ignorePeers,
      frame = _.frame || [null, 0],
      data = list.data(cmp),
      // use cmp for stable sort
  n = data.length,
      i = 0,
      b = range ? (0, _d3Array.bisector)(sort) : null,
      w = {
    i0: 0,
    i1: 0,
    p0: 0,
    p1: 0,
    index: 0,
    data: data,
    compare: sort || (0, _vegaUtil.constant)(-1)
  };

  for (state.init(); i < n; ++i) {
    setWindow(w, frame, i, n);
    if (range) adjustRange(w, b);
    state.update(w, data[i]);
  }
}

function setWindow(w, f, i, n) {
  w.p0 = w.i0;
  w.p1 = w.i1;
  w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));
  w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);
  w.index = i;
} // if frame type is 'range', adjust window for peer values


function adjustRange(w, bisect) {
  var r0 = w.i0,
      r1 = w.i1 - 1,
      c = w.compare,
      d = w.data,
      n = d.length - 1;
  if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);
  if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);
}
},{"./util/AggregateKeys":"node_modules/vega-transforms/src/util/AggregateKeys.js","./util/AggregateOps":"node_modules/vega-transforms/src/util/AggregateOps.js","./util/SortedList":"node_modules/vega-transforms/src/util/SortedList.js","./util/WindowOps":"node_modules/vega-transforms/src/util/WindowOps.js","./util/WindowState":"node_modules/vega-transforms/src/util/WindowState.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/vega-transforms/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "aggregate", {
  enumerable: true,
  get: function () {
    return _Aggregate.default;
  }
});
Object.defineProperty(exports, "bin", {
  enumerable: true,
  get: function () {
    return _Bin.default;
  }
});
Object.defineProperty(exports, "collect", {
  enumerable: true,
  get: function () {
    return _Collect.default;
  }
});
Object.defineProperty(exports, "compare", {
  enumerable: true,
  get: function () {
    return _Compare.default;
  }
});
Object.defineProperty(exports, "countpattern", {
  enumerable: true,
  get: function () {
    return _CountPattern.default;
  }
});
Object.defineProperty(exports, "cross", {
  enumerable: true,
  get: function () {
    return _Cross.default;
  }
});
Object.defineProperty(exports, "density", {
  enumerable: true,
  get: function () {
    return _Density.default;
  }
});
Object.defineProperty(exports, "expression", {
  enumerable: true,
  get: function () {
    return _Expression.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _Extent.default;
  }
});
Object.defineProperty(exports, "facet", {
  enumerable: true,
  get: function () {
    return _Facet.default;
  }
});
Object.defineProperty(exports, "field", {
  enumerable: true,
  get: function () {
    return _Field.default;
  }
});
Object.defineProperty(exports, "filter", {
  enumerable: true,
  get: function () {
    return _Filter.default;
  }
});
Object.defineProperty(exports, "flatten", {
  enumerable: true,
  get: function () {
    return _Flatten.default;
  }
});
Object.defineProperty(exports, "fold", {
  enumerable: true,
  get: function () {
    return _Fold.default;
  }
});
Object.defineProperty(exports, "formula", {
  enumerable: true,
  get: function () {
    return _Formula.default;
  }
});
Object.defineProperty(exports, "generate", {
  enumerable: true,
  get: function () {
    return _Generate.default;
  }
});
Object.defineProperty(exports, "impute", {
  enumerable: true,
  get: function () {
    return _Impute.default;
  }
});
Object.defineProperty(exports, "joinaggregate", {
  enumerable: true,
  get: function () {
    return _JoinAggregate.default;
  }
});
Object.defineProperty(exports, "kde", {
  enumerable: true,
  get: function () {
    return _KDE.default;
  }
});
Object.defineProperty(exports, "key", {
  enumerable: true,
  get: function () {
    return _Key.default;
  }
});
Object.defineProperty(exports, "load", {
  enumerable: true,
  get: function () {
    return _Load.default;
  }
});
Object.defineProperty(exports, "lookup", {
  enumerable: true,
  get: function () {
    return _Lookup.default;
  }
});
Object.defineProperty(exports, "multiextent", {
  enumerable: true,
  get: function () {
    return _MultiExtent.default;
  }
});
Object.defineProperty(exports, "multivalues", {
  enumerable: true,
  get: function () {
    return _MultiValues.default;
  }
});
Object.defineProperty(exports, "params", {
  enumerable: true,
  get: function () {
    return _Params.default;
  }
});
Object.defineProperty(exports, "pivot", {
  enumerable: true,
  get: function () {
    return _Pivot.default;
  }
});
Object.defineProperty(exports, "prefacet", {
  enumerable: true,
  get: function () {
    return _PreFacet.default;
  }
});
Object.defineProperty(exports, "project", {
  enumerable: true,
  get: function () {
    return _Project.default;
  }
});
Object.defineProperty(exports, "proxy", {
  enumerable: true,
  get: function () {
    return _Proxy.default;
  }
});
Object.defineProperty(exports, "relay", {
  enumerable: true,
  get: function () {
    return _Relay.default;
  }
});
Object.defineProperty(exports, "sample", {
  enumerable: true,
  get: function () {
    return _Sample.default;
  }
});
Object.defineProperty(exports, "sequence", {
  enumerable: true,
  get: function () {
    return _Sequence.default;
  }
});
Object.defineProperty(exports, "sieve", {
  enumerable: true,
  get: function () {
    return _Sieve.default;
  }
});
Object.defineProperty(exports, "subflow", {
  enumerable: true,
  get: function () {
    return _Subflow.default;
  }
});
Object.defineProperty(exports, "tupleindex", {
  enumerable: true,
  get: function () {
    return _TupleIndex.default;
  }
});
Object.defineProperty(exports, "values", {
  enumerable: true,
  get: function () {
    return _Values.default;
  }
});
Object.defineProperty(exports, "window", {
  enumerable: true,
  get: function () {
    return _Window.default;
  }
});

var _Aggregate = _interopRequireDefault(require("./src/Aggregate"));

var _Bin = _interopRequireDefault(require("./src/Bin"));

var _Collect = _interopRequireDefault(require("./src/Collect"));

var _Compare = _interopRequireDefault(require("./src/Compare"));

var _CountPattern = _interopRequireDefault(require("./src/CountPattern"));

var _Cross = _interopRequireDefault(require("./src/Cross"));

var _Density = _interopRequireDefault(require("./src/Density"));

var _Expression = _interopRequireDefault(require("./src/Expression"));

var _Extent = _interopRequireDefault(require("./src/Extent"));

var _Facet = _interopRequireDefault(require("./src/Facet"));

var _Field = _interopRequireDefault(require("./src/Field"));

var _Filter = _interopRequireDefault(require("./src/Filter"));

var _Flatten = _interopRequireDefault(require("./src/Flatten"));

var _Fold = _interopRequireDefault(require("./src/Fold"));

var _Formula = _interopRequireDefault(require("./src/Formula"));

var _Generate = _interopRequireDefault(require("./src/Generate"));

var _Impute = _interopRequireDefault(require("./src/Impute"));

var _JoinAggregate = _interopRequireDefault(require("./src/JoinAggregate"));

var _KDE = _interopRequireDefault(require("./src/KDE"));

var _Key = _interopRequireDefault(require("./src/Key"));

var _Load = _interopRequireDefault(require("./src/Load"));

var _Lookup = _interopRequireDefault(require("./src/Lookup"));

var _MultiExtent = _interopRequireDefault(require("./src/MultiExtent"));

var _MultiValues = _interopRequireDefault(require("./src/MultiValues"));

var _Params = _interopRequireDefault(require("./src/Params"));

var _Pivot = _interopRequireDefault(require("./src/Pivot"));

var _PreFacet = _interopRequireDefault(require("./src/PreFacet"));

var _Project = _interopRequireDefault(require("./src/Project"));

var _Proxy = _interopRequireDefault(require("./src/Proxy"));

var _Relay = _interopRequireDefault(require("./src/Relay"));

var _Sample = _interopRequireDefault(require("./src/Sample"));

var _Sequence = _interopRequireDefault(require("./src/Sequence"));

var _Sieve = _interopRequireDefault(require("./src/Sieve"));

var _Subflow = _interopRequireDefault(require("./src/Subflow"));

var _TupleIndex = _interopRequireDefault(require("./src/TupleIndex"));

var _Values = _interopRequireDefault(require("./src/Values"));

var _Window = _interopRequireDefault(require("./src/Window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/Aggregate":"node_modules/vega-transforms/src/Aggregate.js","./src/Bin":"node_modules/vega-transforms/src/Bin.js","./src/Collect":"node_modules/vega-transforms/src/Collect.js","./src/Compare":"node_modules/vega-transforms/src/Compare.js","./src/CountPattern":"node_modules/vega-transforms/src/CountPattern.js","./src/Cross":"node_modules/vega-transforms/src/Cross.js","./src/Density":"node_modules/vega-transforms/src/Density.js","./src/Expression":"node_modules/vega-transforms/src/Expression.js","./src/Extent":"node_modules/vega-transforms/src/Extent.js","./src/Facet":"node_modules/vega-transforms/src/Facet.js","./src/Field":"node_modules/vega-transforms/src/Field.js","./src/Filter":"node_modules/vega-transforms/src/Filter.js","./src/Flatten":"node_modules/vega-transforms/src/Flatten.js","./src/Fold":"node_modules/vega-transforms/src/Fold.js","./src/Formula":"node_modules/vega-transforms/src/Formula.js","./src/Generate":"node_modules/vega-transforms/src/Generate.js","./src/Impute":"node_modules/vega-transforms/src/Impute.js","./src/JoinAggregate":"node_modules/vega-transforms/src/JoinAggregate.js","./src/KDE":"node_modules/vega-transforms/src/KDE.js","./src/Key":"node_modules/vega-transforms/src/Key.js","./src/Load":"node_modules/vega-transforms/src/Load.js","./src/Lookup":"node_modules/vega-transforms/src/Lookup.js","./src/MultiExtent":"node_modules/vega-transforms/src/MultiExtent.js","./src/MultiValues":"node_modules/vega-transforms/src/MultiValues.js","./src/Params":"node_modules/vega-transforms/src/Params.js","./src/Pivot":"node_modules/vega-transforms/src/Pivot.js","./src/PreFacet":"node_modules/vega-transforms/src/PreFacet.js","./src/Project":"node_modules/vega-transforms/src/Project.js","./src/Proxy":"node_modules/vega-transforms/src/Proxy.js","./src/Relay":"node_modules/vega-transforms/src/Relay.js","./src/Sample":"node_modules/vega-transforms/src/Sample.js","./src/Sequence":"node_modules/vega-transforms/src/Sequence.js","./src/Sieve":"node_modules/vega-transforms/src/Sieve.js","./src/Subflow":"node_modules/vega-transforms/src/Subflow.js","./src/TupleIndex":"node_modules/vega-transforms/src/TupleIndex.js","./src/Values":"node_modules/vega-transforms/src/Values.js","./src/Window":"node_modules/vega-transforms/src/Window.js"}],"node_modules/vega-view-transforms/src/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Row = exports.Column = exports.Flush = exports.Each = exports.All = exports.None = exports.Pad = exports.FitY = exports.FitX = exports.Fit = exports.Symbols = exports.Padding = exports.ColTitle = exports.ColFooter = exports.ColHeader = exports.RowTitle = exports.RowFooter = exports.RowHeader = exports.LegendRole = exports.ScopeRole = exports.FrameRole = exports.TitleRole = exports.AxisRole = exports.Group = exports.Y = exports.X = exports.End = exports.Middle = exports.Start = exports.BottomRight = exports.BottomLeft = exports.TopRight = exports.TopLeft = exports.Bottom = exports.Right = exports.Left = exports.Top = void 0;
const Top = 'top';
exports.Top = Top;
const Left = 'left';
exports.Left = Left;
const Right = 'right';
exports.Right = Right;
const Bottom = 'bottom';
exports.Bottom = Bottom;
const TopLeft = 'top-left';
exports.TopLeft = TopLeft;
const TopRight = 'top-right';
exports.TopRight = TopRight;
const BottomLeft = 'bottom-left';
exports.BottomLeft = BottomLeft;
const BottomRight = 'bottom-right';
exports.BottomRight = BottomRight;
const Start = 'start';
exports.Start = Start;
const Middle = 'middle';
exports.Middle = Middle;
const End = 'end';
exports.End = End;
const X = 'x';
exports.X = X;
const Y = 'y';
exports.Y = Y;
const Group = 'group';
exports.Group = Group;
const AxisRole = 'axis';
exports.AxisRole = AxisRole;
const TitleRole = 'title';
exports.TitleRole = TitleRole;
const FrameRole = 'frame';
exports.FrameRole = FrameRole;
const ScopeRole = 'scope';
exports.ScopeRole = ScopeRole;
const LegendRole = 'legend';
exports.LegendRole = LegendRole;
const RowHeader = 'row-header';
exports.RowHeader = RowHeader;
const RowFooter = 'row-footer';
exports.RowFooter = RowFooter;
const RowTitle = 'row-title';
exports.RowTitle = RowTitle;
const ColHeader = 'column-header';
exports.ColHeader = ColHeader;
const ColFooter = 'column-footer';
exports.ColFooter = ColFooter;
const ColTitle = 'column-title';
exports.ColTitle = ColTitle;
const Padding = 'padding';
exports.Padding = Padding;
const Symbols = 'symbol';
exports.Symbols = Symbols;
const Fit = 'fit';
exports.Fit = Fit;
const FitX = 'fit-x';
exports.FitX = FitX;
const FitY = 'fit-y';
exports.FitY = FitY;
const Pad = 'pad';
exports.Pad = Pad;
const None = 'none';
exports.None = None;
const All = 'all';
exports.All = All;
const Each = 'each';
exports.Each = Each;
const Flush = 'flush';
exports.Flush = Flush;
const Column = 'column';
exports.Column = Column;
const Row = 'row';
exports.Row = Row;
},{}],"node_modules/vega-scenegraph/src/Bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Bounds;

function Bounds(b) {
  this.clear();
  if (b) this.union(b);
}

var prototype = Bounds.prototype;

prototype.clone = function () {
  return new Bounds(this);
};

prototype.clear = function () {
  this.x1 = +Number.MAX_VALUE;
  this.y1 = +Number.MAX_VALUE;
  this.x2 = -Number.MAX_VALUE;
  this.y2 = -Number.MAX_VALUE;
  return this;
};

prototype.empty = function () {
  return this.x1 === +Number.MAX_VALUE && this.y1 === +Number.MAX_VALUE && this.x2 === -Number.MAX_VALUE && this.y2 === -Number.MAX_VALUE;
};

prototype.equals = function (b) {
  return this.x1 === b.x1 && this.y1 === b.y1 && this.x2 === b.x2 && this.y2 === b.y2;
};

prototype.set = function (x1, y1, x2, y2) {
  if (x2 < x1) {
    this.x2 = x1;
    this.x1 = x2;
  } else {
    this.x1 = x1;
    this.x2 = x2;
  }

  if (y2 < y1) {
    this.y2 = y1;
    this.y1 = y2;
  } else {
    this.y1 = y1;
    this.y2 = y2;
  }

  return this;
};

prototype.add = function (x, y) {
  if (x < this.x1) this.x1 = x;
  if (y < this.y1) this.y1 = y;
  if (x > this.x2) this.x2 = x;
  if (y > this.y2) this.y2 = y;
  return this;
};

prototype.expand = function (d) {
  this.x1 -= d;
  this.y1 -= d;
  this.x2 += d;
  this.y2 += d;
  return this;
};

prototype.round = function () {
  this.x1 = Math.floor(this.x1);
  this.y1 = Math.floor(this.y1);
  this.x2 = Math.ceil(this.x2);
  this.y2 = Math.ceil(this.y2);
  return this;
};

prototype.translate = function (dx, dy) {
  this.x1 += dx;
  this.x2 += dx;
  this.y1 += dy;
  this.y2 += dy;
  return this;
};

prototype.rotate = function (angle, x, y) {
  const p = this.rotatedPoints(angle, x, y);
  return this.clear().add(p[0], p[1]).add(p[2], p[3]).add(p[4], p[5]).add(p[6], p[7]);
};

prototype.rotatedPoints = function (angle, x, y) {
  var {
    x1,
    y1,
    x2,
    y2
  } = this,
      cos = Math.cos(angle),
      sin = Math.sin(angle),
      cx = x - x * cos + y * sin,
      cy = y - x * sin - y * cos;
  return [cos * x1 - sin * y1 + cx, sin * x1 + cos * y1 + cy, cos * x1 - sin * y2 + cx, sin * x1 + cos * y2 + cy, cos * x2 - sin * y1 + cx, sin * x2 + cos * y1 + cy, cos * x2 - sin * y2 + cx, sin * x2 + cos * y2 + cy];
};

prototype.union = function (b) {
  if (b.x1 < this.x1) this.x1 = b.x1;
  if (b.y1 < this.y1) this.y1 = b.y1;
  if (b.x2 > this.x2) this.x2 = b.x2;
  if (b.y2 > this.y2) this.y2 = b.y2;
  return this;
};

prototype.intersect = function (b) {
  if (b.x1 > this.x1) this.x1 = b.x1;
  if (b.y1 > this.y1) this.y1 = b.y1;
  if (b.x2 < this.x2) this.x2 = b.x2;
  if (b.y2 < this.y2) this.y2 = b.y2;
  return this;
};

prototype.encloses = function (b) {
  return b && this.x1 <= b.x1 && this.x2 >= b.x2 && this.y1 <= b.y1 && this.y2 >= b.y2;
};

prototype.alignsWith = function (b) {
  return b && (this.x1 == b.x1 || this.x2 == b.x2 || this.y1 == b.y1 || this.y2 == b.y2);
};

prototype.intersects = function (b) {
  return b && !(this.x2 < b.x1 || this.x1 > b.x2 || this.y2 < b.y1 || this.y1 > b.y2);
};

prototype.contains = function (x, y) {
  return !(x < this.x1 || x > this.x2 || y < this.y1 || y > this.y2);
};

prototype.width = function () {
  return this.x2 - this.x1;
};

prototype.height = function () {
  return this.y2 - this.y1;
};
},{}],"node_modules/vega-scenegraph/src/Gradient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isGradient = isGradient;
exports.gradientRef = gradientRef;
exports.default = _default;
exports.patternPrefix = void 0;
var gradient_id = 0;
const patternPrefix = 'p_';
exports.patternPrefix = patternPrefix;

function isGradient(value) {
  return value && value.gradient;
}

function gradientRef(g, defs, base) {
  let id = g.id,
      type = g.gradient,
      prefix = type === 'radial' ? patternPrefix : ''; // check id, assign default values as needed

  if (!id) {
    id = g.id = 'gradient_' + gradient_id++;

    if (type === 'radial') {
      g.x1 = get(g.x1, 0.5);
      g.y1 = get(g.y1, 0.5);
      g.r1 = get(g.r1, 0);
      g.x2 = get(g.x2, 0.5);
      g.y2 = get(g.y2, 0.5);
      g.r2 = get(g.r2, 0.5);
      prefix = patternPrefix;
    } else {
      g.x1 = get(g.x1, 0);
      g.y1 = get(g.y1, 0);
      g.x2 = get(g.x2, 1);
      g.y2 = get(g.y2, 0);
    }
  } // register definition


  defs[id] = g; // return url reference

  return 'url(' + (base || '') + '#' + prefix + id + ')';
}

function get(val, def) {
  return val != null ? val : def;
}

function _default(p0, p1) {
  var stops = [],
      gradient;
  return gradient = {
    gradient: 'linear',
    x1: p0 ? p0[0] : 0,
    y1: p0 ? p0[1] : 0,
    x2: p1 ? p1[0] : 1,
    y2: p1 ? p1[1] : 0,
    stops: stops,
    stop: function (offset, color) {
      stops.push({
        offset: offset,
        color: color
      });
      return gradient;
    }
  };
}
},{}],"node_modules/vega-scenegraph/src/Item.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Item;

var _Bounds = _interopRequireDefault(require("./Bounds"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Item(mark) {
  this.mark = mark;
  this.bounds = this.bounds || new _Bounds.default();
}
},{"./Bounds":"node_modules/vega-scenegraph/src/Bounds.js"}],"node_modules/vega-scenegraph/src/GroupItem.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = GroupItem;

var _Item = _interopRequireDefault(require("./Item"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function GroupItem(mark) {
  _Item.default.call(this, mark);

  this.items = this.items || [];
}

(0, _vegaUtil.inherits)(GroupItem, _Item.default);
},{"./Item":"node_modules/vega-scenegraph/src/Item.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-canvas/src/domCanvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.domCanvas = domCanvas;
exports.domImage = domImage;

function domCanvas(w, h) {
  if (typeof document !== 'undefined' && document.createElement) {
    var c = document.createElement('canvas');

    if (c && c.getContext) {
      c.width = w;
      c.height = h;
      return c;
    }
  }

  return null;
}

function domImage() {
  return typeof Image !== 'undefined' ? Image : null;
}
},{}],"node_modules/vega-canvas/index.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "domCanvas", {
  enumerable: true,
  get: function () {
    return _domCanvas.domCanvas;
  }
});
Object.defineProperty(exports, "canvas", {
  enumerable: true,
  get: function () {
    return _domCanvas.domCanvas;
  }
});
Object.defineProperty(exports, "image", {
  enumerable: true,
  get: function () {
    return _domCanvas.domImage;
  }
});

var _domCanvas = require("./src/domCanvas");
},{"./src/domCanvas":"node_modules/vega-canvas/src/domCanvas.js"}],"node_modules/vega-scenegraph/src/ResourceLoader.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ResourceLoader;

var _vegaCanvas = require("vega-canvas");

var _vegaLoader = require("vega-loader");

function ResourceLoader(customLoader) {
  this._pending = 0;
  this._loader = customLoader || (0, _vegaLoader.loader)();
}

var prototype = ResourceLoader.prototype;

prototype.pending = function () {
  return this._pending;
};

function increment(loader) {
  loader._pending += 1;
}

function decrement(loader) {
  loader._pending -= 1;
}

prototype.sanitizeURL = function (uri) {
  var loader = this;
  increment(loader);
  return loader._loader.sanitize(uri, {
    context: 'href'
  }).then(function (opt) {
    decrement(loader);
    return opt;
  }).catch(function () {
    decrement(loader);
    return null;
  });
};

prototype.loadImage = function (uri) {
  var loader = this,
      Image = (0, _vegaCanvas.image)();
  increment(loader);
  return loader._loader.sanitize(uri, {
    context: 'image'
  }).then(function (opt) {
    var url = opt.href;
    if (!url || !Image) throw {
      url: url
    };
    var img = new Image();

    img.onload = function () {
      decrement(loader);
      img.loaded = true;
    };

    img.onerror = function () {
      decrement(loader);
      img.loaded = false;
    };

    img.src = url;
    return img;
  }).catch(function (e) {
    decrement(loader);
    return {
      loaded: false,
      width: 0,
      height: 0,
      src: e && e.url || ''
    };
  });
};

prototype.ready = function () {
  var loader = this;
  return new Promise(function (accept) {
    function poll(value) {
      if (!loader.pending()) accept(value);else setTimeout(function () {
        poll(true);
      }, 10);
    }

    poll(false);
  });
};
},{"vega-canvas":"node_modules/vega-canvas/index.browser.js","vega-loader":"node_modules/vega-loader/index.browser.js"}],"node_modules/d3-path/src/path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath

  this._ = "";
}

function path() {
  return new Path();
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function (x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function () {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function (x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function (x1, y1, x, y) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function (x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } // Otherwise, draw an arc!
        else {
            var x20 = x2 - x0,
                y20 = y2 - y0,
                l21_2 = x21 * x21 + y21 * y21,
                l20_2 = x20 * x20 + y20 * y20,
                l21 = Math.sqrt(l21_2),
                l01 = Math.sqrt(l01_2),
                l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                t01 = l / l01,
                t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

            if (Math.abs(t01 - 1) > epsilon) {
              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            }

            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
          }
  },
  arc: function (x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._ += "L" + x0 + "," + y0;
      } // Is this arc empty? We’re done.


    if (!r) return; // Does the angle go the wrong way? Flip the direction.

    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.

    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
  },
  rect: function (x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function () {
    return this._;
  }
};
var _default = path;
exports.default = _default;
},{}],"node_modules/d3-path/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "path", {
  enumerable: true,
  get: function () {
    return _path.default;
  }
});

var _path = _interopRequireDefault(require("./path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./path":"node_modules/d3-path/src/path.js"}],"node_modules/d3-shape/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function constant() {
    return x;
  };
}
},{}],"node_modules/d3-shape/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = acos;
exports.asin = asin;
exports.tau = exports.halfPi = exports.pi = exports.epsilon = exports.sqrt = exports.sin = exports.min = exports.max = exports.cos = exports.atan2 = exports.abs = void 0;
var abs = Math.abs;
exports.abs = abs;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var cos = Math.cos;
exports.cos = cos;
var max = Math.max;
exports.max = max;
var min = Math.min;
exports.min = min;
var sin = Math.sin;
exports.sin = sin;
var sqrt = Math.sqrt;
exports.sqrt = sqrt;
var epsilon = 1e-12;
exports.epsilon = epsilon;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var tau = 2 * pi;
exports.tau = tau;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}
},{}],"node_modules/d3-shape/src/arc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0,
      y10 = y1 - y0,
      x32 = x3 - x2,
      y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < _math.epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
} // Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html


function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / (0, _math.sqrt)(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * (0, _math.sqrt)((0, _math.max)(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00; // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?

  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function _default() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = (0, _constant.default)(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - _math.halfPi,
        a1 = endAngle.apply(this, arguments) - _math.halfPi,
        da = (0, _math.abs)(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = (0, _d3Path.path)(); // Ensure that the outer radius is always larger than the inner radius.

    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?

    if (!(r1 > _math.epsilon)) context.moveTo(0, 0); // Or is it a circle or annulus?
    else if (da > _math.tau - _math.epsilon) {
        context.moveTo(r1 * (0, _math.cos)(a0), r1 * (0, _math.sin)(a0));
        context.arc(0, 0, r1, a0, a1, !cw);

        if (r0 > _math.epsilon) {
          context.moveTo(r0 * (0, _math.cos)(a1), r0 * (0, _math.sin)(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
      } // Or is it a circular or annular sector?
      else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = ap > _math.epsilon && (padRadius ? +padRadius.apply(this, arguments) : (0, _math.sqrt)(r0 * r0 + r1 * r1)),
              rc = (0, _math.min)((0, _math.abs)(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.

          if (rp > _math.epsilon) {
            var p0 = (0, _math.asin)(rp / r0 * (0, _math.sin)(ap)),
                p1 = (0, _math.asin)(rp / r1 * (0, _math.sin)(ap));
            if ((da0 -= p0 * 2) > _math.epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > _math.epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * (0, _math.cos)(a01),
              y01 = r1 * (0, _math.sin)(a01),
              x10 = r0 * (0, _math.cos)(a10),
              y10 = r0 * (0, _math.sin)(a10); // Apply rounded corners?

          if (rc > _math.epsilon) {
            var x11 = r1 * (0, _math.cos)(a11),
                y11 = r1 * (0, _math.sin)(a11),
                x00 = r0 * (0, _math.cos)(a00),
                y00 = r0 * (0, _math.sin)(a00),
                oc; // Restrict the corner radius according to the sector angle.

            if (da < _math.pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / (0, _math.sin)((0, _math.acos)((ax * bx + ay * by) / ((0, _math.sqrt)(ax * ax + ay * ay) * (0, _math.sqrt)(bx * bx + by * by))) / 2),
                  lc = (0, _math.sqrt)(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = (0, _math.min)(rc, (r0 - lc) / (kc - 1));
              rc1 = (0, _math.min)(rc, (r1 - lc) / (kc + 1));
            }
          } // Is the sector collapsed to a line?


          if (!(da1 > _math.epsilon)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?
          else if (rc1 > _math.epsilon) {
              t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
              t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
              context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r1, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                  context.arc(t1.cx, t1.cy, rc1, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            } // Or is the outer ring just a circular arc?
            else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?

          if (!(r0 > _math.epsilon) || !(da0 > _math.epsilon)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > _math.epsilon) {
              t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
              t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
              context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r0, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                  context.arc(t1.cx, t1.cy, rc0, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            } // Or is the inner ring just a circular arc?
            else context.arc(0, 0, r0, a10, a00, cw);
        }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - _math.pi / 2;
    return [(0, _math.cos)(a) * r, (0, _math.sin)(a) * r];
  };

  arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : innerRadius;
  };

  arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : cornerRadius;
  };

  arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padRadius;
  };

  arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : startAngle;
  };

  arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : endAngle;
  };

  arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padAngle;
  };

  arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };

  return arc;
}
},{"d3-path":"node_modules/d3-path/src/index.js","./constant":"node_modules/d3-shape/src/constant.js","./math":"node_modules/d3-shape/src/math.js"}],"node_modules/d3-shape/src/curve/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        this._context.lineTo(x, y);

        break;
    }
  }
};

function _default(context) {
  return new Linear(context);
}
},{}],"node_modules/d3-shape/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}
},{}],"node_modules/d3-shape/src/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant"));

var _linear = _interopRequireDefault(require("./curve/linear"));

var _point = require("./point");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x = _point.x,
      y = _point.y,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;
    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
      }

      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : x;
  };

  line.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : y;
  };

  line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), line) : defined;
  };

  line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}
},{"d3-path":"node_modules/d3-path/src/index.js","./constant":"node_modules/d3-shape/src/constant.js","./curve/linear":"node_modules/d3-shape/src/curve/linear.js","./point":"node_modules/d3-shape/src/point.js"}],"node_modules/d3-shape/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant"));

var _linear = _interopRequireDefault(require("./curve/linear"));

var _line = _interopRequireDefault(require("./line"));

var _point = require("./point");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x0 = _point.x,
      x1 = null,
      y0 = (0, _constant.default)(0),
      y1 = _point.y,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);
    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();

          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }

          output.lineEnd();
          output.areaEnd();
        }
      }

      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return (0, _line.default)().defined(defined).curve(curve).context(context);
  }

  area.x = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), x1 = null, area) : x0;
  };

  area.x0 = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x0;
  };

  area.x1 = function (_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x1;
  };

  area.y = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), y1 = null, area) : y0;
  };

  area.y0 = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y0;
  };

  area.y1 = function (_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y1;
  };

  area.lineX0 = area.lineY0 = function () {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function () {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function () {
    return arealine().x(x1).y(y0);
  };

  area.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), area) : defined;
  };

  area.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}
},{"d3-path":"node_modules/d3-path/src/index.js","./constant":"node_modules/d3-shape/src/constant.js","./curve/linear":"node_modules/d3-shape/src/curve/linear.js","./line":"node_modules/d3-shape/src/line.js","./point":"node_modules/d3-shape/src/point.js"}],"node_modules/d3-shape/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"node_modules/d3-shape/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(d) {
  return d;
}
},{}],"node_modules/d3-shape/src/pie.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _descending = _interopRequireDefault(require("./descending"));

var _identity = _interopRequireDefault(require("./identity"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      sortValues = _descending.default,
      sort = null,
      startAngle = (0, _constant.default)(0),
      endAngle = (0, _constant.default)(_math.tau),
      padAngle = (0, _constant.default)(0);

  function pie(data) {
    var i,
        n = data.length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(_math.tau, Math.max(-_math.tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    } // Optionally sort the arcs by previously-computed values or by data.


    if (sortValues != null) index.sort(function (i, j) {
      return sortValues(arcs[i], arcs[j]);
    });else if (sort != null) index.sort(function (i, j) {
      return sort(data[i], data[j]);
    }); // Compute the arcs! They are stored in the original data's order.

    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : value;
  };

  pie.sortValues = function (_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function (_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : startAngle;
  };

  pie.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : endAngle;
  };

  pie.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : padAngle;
  };

  return pie;
}
},{"./constant":"node_modules/d3-shape/src/constant.js","./descending":"node_modules/d3-shape/src/descending.js","./identity":"node_modules/d3-shape/src/identity.js","./math":"node_modules/d3-shape/src/math.js"}],"node_modules/d3-shape/src/curve/radial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = curveRadial;
exports.curveRadialLinear = void 0;

var _linear = _interopRequireDefault(require("./linear"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var curveRadialLinear = curveRadial(_linear.default);
exports.curveRadialLinear = curveRadialLinear;

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function () {
    this._curve.areaStart();
  },
  areaEnd: function () {
    this._curve.areaEnd();
  },
  lineStart: function () {
    this._curve.lineStart();
  },
  lineEnd: function () {
    this._curve.lineEnd();
  },
  point: function (a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;
  return radial;
}
},{"./linear":"node_modules/d3-shape/src/curve/linear.js"}],"node_modules/d3-shape/src/lineRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lineRadial = lineRadial;
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial"));

var _line = _interopRequireDefault(require("./line"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function lineRadial(l) {
  var c = l.curve;
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return l;
}

function _default() {
  return lineRadial((0, _line.default)().curve(_radial.curveRadialLinear));
}
},{"./curve/radial":"node_modules/d3-shape/src/curve/radial.js","./line":"node_modules/d3-shape/src/line.js"}],"node_modules/d3-shape/src/areaRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial"));

var _area = _interopRequireDefault(require("./area"));

var _lineRadial = require("./lineRadial");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _default() {
  var a = (0, _area.default)().curve(_radial.curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;
  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function () {
    return (0, _lineRadial.lineRadial)(x0());
  }, delete a.lineX0;
  a.lineEndAngle = function () {
    return (0, _lineRadial.lineRadial)(x1());
  }, delete a.lineX1;
  a.lineInnerRadius = function () {
    return (0, _lineRadial.lineRadial)(y0());
  }, delete a.lineY0;
  a.lineOuterRadius = function () {
    return (0, _lineRadial.lineRadial)(y1());
  }, delete a.lineY1;

  a.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return a;
}
},{"./curve/radial":"node_modules/d3-shape/src/curve/radial.js","./area":"node_modules/d3-shape/src/area.js","./lineRadial":"node_modules/d3-shape/src/lineRadial.js"}],"node_modules/d3-shape/src/pointRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}
},{}],"node_modules/d3-shape/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"node_modules/d3-shape/src/link/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linkHorizontal = linkHorizontal;
exports.linkVertical = linkVertical;
exports.linkRadial = linkRadial;

var _d3Path = require("d3-path");

var _array = require("../array");

var _constant = _interopRequireDefault(require("../constant"));

var _point = require("../point");

var _pointRadial = _interopRequireDefault(require("../pointRadial"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

function link(curve) {
  var source = linkSource,
      target = linkTarget,
      x = _point.x,
      y = _point.y,
      context = null;

  function link() {
    var buffer,
        argv = _array.slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv);

    if (!context) context = buffer = (0, _d3Path.path)();
    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));
    if (buffer) return context = null, buffer + "" || null;
  }

  link.source = function (_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function (_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : x;
  };

  link.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : y;
  };

  link.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, link) : context;
  };

  return link;
}

function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}

function curveVertical(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
}

function curveRadial(context, x0, y0, x1, y1) {
  var p0 = (0, _pointRadial.default)(x0, y0),
      p1 = (0, _pointRadial.default)(x0, y0 = (y0 + y1) / 2),
      p2 = (0, _pointRadial.default)(x1, y0),
      p3 = (0, _pointRadial.default)(x1, y1);
  context.moveTo(p0[0], p0[1]);
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}

function linkHorizontal() {
  return link(curveHorizontal);
}

function linkVertical() {
  return link(curveVertical);
}

function linkRadial() {
  var l = link(curveRadial);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}
},{"d3-path":"node_modules/d3-path/src/index.js","../array":"node_modules/d3-shape/src/array.js","../constant":"node_modules/d3-shape/src/constant.js","../point":"node_modules/d3-shape/src/point.js","../pointRadial":"node_modules/d3-shape/src/pointRadial.js"}],"node_modules/d3-shape/src/symbol/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math");

var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / _math.pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, _math.tau);
  }
};
exports.default = _default;
},{"../math":"node_modules/d3-shape/src/math.js"}],"node_modules/d3-shape/src/symbol/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol/diamond.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var tan30 = Math.sqrt(1 / 3),
    tan30_2 = tan30 * 2;
var _default = {
  draw: function (context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol/star.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math");

var ka = 0.89081309152928522810,
    kr = Math.sin(_math.pi / 10) / Math.sin(7 * _math.pi / 10),
    kx = Math.sin(_math.tau / 10) * kr,
    ky = -Math.cos(_math.tau / 10) * kr;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);

    for (var i = 1; i < 5; ++i) {
      var a = _math.tau * i / 5,
          c = Math.cos(a),
          s = Math.sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }

    context.closePath();
  }
};
exports.default = _default;
},{"../math":"node_modules/d3-shape/src/math.js"}],"node_modules/d3-shape/src/symbol/square.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw: function (context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol/triangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var sqrt3 = Math.sqrt(3);
var _default = {
  draw: function (context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol/wye.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var c = -0.5,
    s = Math.sqrt(3) / 2,
    k = 1 / Math.sqrt(12),
    a = (k / 2 + 1) * 3;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / a),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.symbols = void 0;

var _d3Path = require("d3-path");

var _circle = _interopRequireDefault(require("./symbol/circle"));

var _cross = _interopRequireDefault(require("./symbol/cross"));

var _diamond = _interopRequireDefault(require("./symbol/diamond"));

var _star = _interopRequireDefault(require("./symbol/star"));

var _square = _interopRequireDefault(require("./symbol/square"));

var _triangle = _interopRequireDefault(require("./symbol/triangle"));

var _wye = _interopRequireDefault(require("./symbol/wye"));

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var symbols = [_circle.default, _cross.default, _diamond.default, _square.default, _star.default, _triangle.default, _wye.default];
exports.symbols = symbols;

function _default() {
  var type = (0, _constant.default)(_circle.default),
      size = (0, _constant.default)(64),
      context = null;

  function symbol() {
    var buffer;
    if (!context) context = buffer = (0, _d3Path.path)();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function (_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : (0, _constant.default)(_), symbol) : type;
  };

  symbol.size = function (_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : (0, _constant.default)(+_), symbol) : size;
  };

  symbol.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}
},{"d3-path":"node_modules/d3-path/src/index.js","./symbol/circle":"node_modules/d3-shape/src/symbol/circle.js","./symbol/cross":"node_modules/d3-shape/src/symbol/cross.js","./symbol/diamond":"node_modules/d3-shape/src/symbol/diamond.js","./symbol/star":"node_modules/d3-shape/src/symbol/star.js","./symbol/square":"node_modules/d3-shape/src/symbol/square.js","./symbol/triangle":"node_modules/d3-shape/src/symbol/triangle.js","./symbol/wye":"node_modules/d3-shape/src/symbol/wye.js","./constant":"node_modules/d3-shape/src/constant.js"}],"node_modules/d3-shape/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
},{}],"node_modules/d3-shape/src/curve/basis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.Basis = Basis;
exports.default = _default;

function point(that, x, y) {
  that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 3:
        point(this, this._x1, this._y1);
      // proceed

      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;

        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);

      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new Basis(context);
}
},{}],"node_modules/d3-shape/src/curve/basisClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop"));

var _basis = require("./basis");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x2, this._y2);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);

          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x, this._y2 = y;
        break;

      case 1:
        this._point = 2;
        this._x3 = x, this._y3 = y;
        break;

      case 2:
        this._point = 3;
        this._x4 = x, this._y4 = y;

        this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);

        break;

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisClosed(context);
}
},{"../noop":"node_modules/d3-shape/src/noop.js","./basis":"node_modules/d3-shape/src/curve/basis.js"}],"node_modules/d3-shape/src/curve/basisOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis");

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x) / 6,
            y0 = (this._y0 + 4 * this._y1 + y) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisOpen(context);
}
},{"./basis":"node_modules/d3-shape/src/curve/basis.js"}],"node_modules/d3-shape/src/curve/bundle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _basis = require("./basis");

function Bundle(context, beta) {
  this._basis = new _basis.Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function () {
    this._x = [];
    this._y = [];

    this._basis.lineStart();
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;

        this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
      }
    }

    this._x = this._y = null;

    this._basis.lineEnd();
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
};

var _default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new _basis.Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function (beta) {
    return custom(+beta);
  };

  return bundle;
}(0.85);

exports.default = _default;
},{"./basis":"node_modules/d3-shape/src/curve/basis.js"}],"node_modules/d3-shape/src/curve/cardinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.Cardinal = Cardinal;
exports.default = void 0;

function point(that, x, y) {
  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        point(this, this._x1, this._y1);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        this._x1 = x, this._y1 = y;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{}],"node_modules/d3-shape/src/curve/cardinalClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalClosed = CardinalClosed;
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop"));

var _cardinal = require("./cardinal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{"../noop":"node_modules/d3-shape/src/noop.js","./cardinal":"node_modules/d3-shape/src/curve/cardinal.js"}],"node_modules/d3-shape/src/curve/cardinalOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalOpen = CardinalOpen;
exports.default = void 0;

var _cardinal = require("./cardinal");

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{"./cardinal":"node_modules/d3-shape/src/curve/cardinal.js"}],"node_modules/d3-shape/src/curve/catmullRom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.default = void 0;

var _math = require("../math");

var _cardinal = require("./cardinal");

function point(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > _math.epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > _math.epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        this.point(this._x2, this._y2);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new _cardinal.Cardinal(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"../math":"node_modules/d3-shape/src/math.js","./cardinal":"node_modules/d3-shape/src/curve/cardinal.js"}],"node_modules/d3-shape/src/curve/catmullRomClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalClosed = require("./cardinalClosed");

var _noop = _interopRequireDefault(require("../noop"));

var _catmullRom = require("./catmullRom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new _cardinalClosed.CardinalClosed(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"./cardinalClosed":"node_modules/d3-shape/src/curve/cardinalClosed.js","../noop":"node_modules/d3-shape/src/noop.js","./catmullRom":"node_modules/d3-shape/src/curve/catmullRom.js"}],"node_modules/d3-shape/src/curve/catmullRomOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalOpen = require("./cardinalOpen");

var _catmullRom = require("./catmullRom");

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new _cardinalOpen.CardinalOpen(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"./cardinalOpen":"node_modules/d3-shape/src/curve/cardinalOpen.js","./catmullRom":"node_modules/d3-shape/src/curve/catmullRom.js"}],"node_modules/d3-shape/src/curve/linearClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._point) this._context.closePath();
  },
  point: function (x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);
  }
};

function _default(context) {
  return new LinearClosed(context);
}
},{"../noop":"node_modules/d3-shape/src/noop.js"}],"node_modules/d3-shape/src/curve/monotone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.monotoneX = monotoneX;
exports.monotoneY = monotoneY;

function sign(x) {
  return x < 0 ? -1 : 1;
} // Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.


function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
} // Calculate a one-sided slope.


function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
} // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".


function point(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;

  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;

      case 3:
        point(this, this._t0, slope2(this, this._t0));
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    var t1 = NaN;
    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        point(this, slope2(this, t1 = slope3(this, x, y)), t1);
        break;

      default:
        point(this, this._t0, t1 = slope3(this, x, y));
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function (x, y) {
    this._context.moveTo(y, x);
  },
  closePath: function () {
    this._context.closePath();
  },
  lineTo: function (x, y) {
    this._context.lineTo(y, x);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
  }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}
},{}],"node_modules/d3-shape/src/curve/natural.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = [];
    this._y = [];
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);

      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);

        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
}; // See https://www.particleincell.com/2012/bezier-splines/ for derivation.

function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];

  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];

  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];

  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];

  a[n - 1] = r[n - 1] / b[n - 1];

  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];

  b[n - 1] = (x[n] + a[n - 1]) / 2;

  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];

  return [a, b];
}

function _default(context) {
  return new Natural(context);
}
},{}],"node_modules/d3-shape/src/curve/step.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.stepBefore = stepBefore;
exports.stepAfter = stepAfter;

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y);

            this._context.lineTo(x, y);
          } else {
            var x1 = this._x * (1 - this._t) + x * this._t;

            this._context.lineTo(x1, this._y);

            this._context.lineTo(x1, y);
          }

          break;
        }
    }

    this._x = x, this._y = y;
  }
};

function _default(context) {
  return new Step(context, 0.5);
}

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}
},{}],"node_modules/d3-shape/src/offset/none.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 1)) return;

  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];

    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}
},{}],"node_modules/d3-shape/src/order/none.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series) {
  var n = series.length,
      o = new Array(n);

  while (--n >= 0) o[n] = n;

  return o;
}
},{}],"node_modules/d3-shape/src/stack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _none = _interopRequireDefault(require("./offset/none"));

var _none2 = _interopRequireDefault(require("./order/none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stackValue(d, key) {
  return d[key];
}

function _default() {
  var keys = (0, _constant.default)([]),
      order = _none2.default,
      offset = _none.default,
      value = stackValue;

  function stack(data) {
    var kz = keys.apply(this, arguments),
        i,
        m = data.length,
        n = kz.length,
        sz = new Array(n),
        oz;

    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }

      si.key = ki;
    }

    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function (_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : (0, _constant.default)(_array.slice.call(_)), stack) : keys;
  };

  stack.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), stack) : value;
  };

  stack.order = function (_) {
    return arguments.length ? (order = _ == null ? _none2.default : typeof _ === "function" ? _ : (0, _constant.default)(_array.slice.call(_)), stack) : order;
  };

  stack.offset = function (_) {
    return arguments.length ? (offset = _ == null ? _none.default : _, stack) : offset;
  };

  return stack;
}
},{"./array":"node_modules/d3-shape/src/array.js","./constant":"node_modules/d3-shape/src/constant.js","./offset/none":"node_modules/d3-shape/src/offset/none.js","./order/none":"node_modules/d3-shape/src/order/none.js"}],"node_modules/d3-shape/src/offset/expand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;

    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }

  (0, _none.default)(series, order);
}
},{"./none":"node_modules/d3-shape/src/offset/none.js"}],"node_modules/d3-shape/src/offset/diverging.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = yp;
      }
    }
  }
}
},{}],"node_modules/d3-shape/src/offset/silhouette.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;

    s0[j][1] += s0[j][0] = -y / 2;
  }

  (0, _none.default)(series, order);
}
},{"./none":"node_modules/d3-shape/src/offset/none.js"}],"node_modules/d3-shape/src/offset/wiggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;

  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;

      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }

      s1 += sij0, s2 += s3 * sij0;
    }

    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }

  s0[j - 1][1] += s0[j - 1][0] = y;
  (0, _none.default)(series, order);
}
},{"./none":"node_modules/d3-shape/src/offset/none.js"}],"node_modules/d3-shape/src/order/appearance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var peaks = series.map(peak);
  return (0, _none.default)(series).sort(function (a, b) {
    return peaks[a] - peaks[b];
  });
}

function peak(series) {
  var i = -1,
      j = 0,
      n = series.length,
      vi,
      vj = -Infinity;

  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;

  return j;
}
},{"./none":"node_modules/d3-shape/src/order/none.js"}],"node_modules/d3-shape/src/order/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.sum = sum;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var sums = series.map(sum);
  return (0, _none.default)(series).sort(function (a, b) {
    return sums[a] - sums[b];
  });
}

function sum(series) {
  var s = 0,
      i = -1,
      n = series.length,
      v;

  while (++i < n) if (v = +series[i][1]) s += v;

  return s;
}
},{"./none":"node_modules/d3-shape/src/order/none.js"}],"node_modules/d3-shape/src/order/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _ascending.default)(series).reverse();
}
},{"./ascending":"node_modules/d3-shape/src/order/ascending.js"}],"node_modules/d3-shape/src/order/insideOut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _appearance = _interopRequireDefault(require("./appearance"));

var _ascending = require("./ascending");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(_ascending.sum),
      order = (0, _appearance.default)(series),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];

    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
}
},{"./appearance":"node_modules/d3-shape/src/order/appearance.js","./ascending":"node_modules/d3-shape/src/order/ascending.js"}],"node_modules/d3-shape/src/order/reverse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _none.default)(series).reverse();
}
},{"./none":"node_modules/d3-shape/src/order/none.js"}],"node_modules/d3-shape/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "arc", {
  enumerable: true,
  get: function () {
    return _arc.default;
  }
});
Object.defineProperty(exports, "area", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "line", {
  enumerable: true,
  get: function () {
    return _line.default;
  }
});
Object.defineProperty(exports, "pie", {
  enumerable: true,
  get: function () {
    return _pie.default;
  }
});
Object.defineProperty(exports, "areaRadial", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "radialArea", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "lineRadial", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "radialLine", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "pointRadial", {
  enumerable: true,
  get: function () {
    return _pointRadial.default;
  }
});
Object.defineProperty(exports, "linkHorizontal", {
  enumerable: true,
  get: function () {
    return _index.linkHorizontal;
  }
});
Object.defineProperty(exports, "linkVertical", {
  enumerable: true,
  get: function () {
    return _index.linkVertical;
  }
});
Object.defineProperty(exports, "linkRadial", {
  enumerable: true,
  get: function () {
    return _index.linkRadial;
  }
});
Object.defineProperty(exports, "symbol", {
  enumerable: true,
  get: function () {
    return _symbol.default;
  }
});
Object.defineProperty(exports, "symbols", {
  enumerable: true,
  get: function () {
    return _symbol.symbols;
  }
});
Object.defineProperty(exports, "symbolCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "symbolCross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "symbolDiamond", {
  enumerable: true,
  get: function () {
    return _diamond.default;
  }
});
Object.defineProperty(exports, "symbolSquare", {
  enumerable: true,
  get: function () {
    return _square.default;
  }
});
Object.defineProperty(exports, "symbolStar", {
  enumerable: true,
  get: function () {
    return _star.default;
  }
});
Object.defineProperty(exports, "symbolTriangle", {
  enumerable: true,
  get: function () {
    return _triangle.default;
  }
});
Object.defineProperty(exports, "symbolWye", {
  enumerable: true,
  get: function () {
    return _wye.default;
  }
});
Object.defineProperty(exports, "curveBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "curveBasisOpen", {
  enumerable: true,
  get: function () {
    return _basisOpen.default;
  }
});
Object.defineProperty(exports, "curveBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "curveBundle", {
  enumerable: true,
  get: function () {
    return _bundle.default;
  }
});
Object.defineProperty(exports, "curveCardinalClosed", {
  enumerable: true,
  get: function () {
    return _cardinalClosed.default;
  }
});
Object.defineProperty(exports, "curveCardinalOpen", {
  enumerable: true,
  get: function () {
    return _cardinalOpen.default;
  }
});
Object.defineProperty(exports, "curveCardinal", {
  enumerable: true,
  get: function () {
    return _cardinal.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomClosed", {
  enumerable: true,
  get: function () {
    return _catmullRomClosed.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomOpen", {
  enumerable: true,
  get: function () {
    return _catmullRomOpen.default;
  }
});
Object.defineProperty(exports, "curveCatmullRom", {
  enumerable: true,
  get: function () {
    return _catmullRom.default;
  }
});
Object.defineProperty(exports, "curveLinearClosed", {
  enumerable: true,
  get: function () {
    return _linearClosed.default;
  }
});
Object.defineProperty(exports, "curveLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "curveMonotoneX", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneX;
  }
});
Object.defineProperty(exports, "curveMonotoneY", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneY;
  }
});
Object.defineProperty(exports, "curveNatural", {
  enumerable: true,
  get: function () {
    return _natural.default;
  }
});
Object.defineProperty(exports, "curveStep", {
  enumerable: true,
  get: function () {
    return _step.default;
  }
});
Object.defineProperty(exports, "curveStepAfter", {
  enumerable: true,
  get: function () {
    return _step.stepAfter;
  }
});
Object.defineProperty(exports, "curveStepBefore", {
  enumerable: true,
  get: function () {
    return _step.stepBefore;
  }
});
Object.defineProperty(exports, "stack", {
  enumerable: true,
  get: function () {
    return _stack.default;
  }
});
Object.defineProperty(exports, "stackOffsetExpand", {
  enumerable: true,
  get: function () {
    return _expand.default;
  }
});
Object.defineProperty(exports, "stackOffsetDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "stackOffsetNone", {
  enumerable: true,
  get: function () {
    return _none.default;
  }
});
Object.defineProperty(exports, "stackOffsetSilhouette", {
  enumerable: true,
  get: function () {
    return _silhouette.default;
  }
});
Object.defineProperty(exports, "stackOffsetWiggle", {
  enumerable: true,
  get: function () {
    return _wiggle.default;
  }
});
Object.defineProperty(exports, "stackOrderAppearance", {
  enumerable: true,
  get: function () {
    return _appearance.default;
  }
});
Object.defineProperty(exports, "stackOrderAscending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "stackOrderDescending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "stackOrderInsideOut", {
  enumerable: true,
  get: function () {
    return _insideOut.default;
  }
});
Object.defineProperty(exports, "stackOrderNone", {
  enumerable: true,
  get: function () {
    return _none2.default;
  }
});
Object.defineProperty(exports, "stackOrderReverse", {
  enumerable: true,
  get: function () {
    return _reverse.default;
  }
});

var _arc = _interopRequireDefault(require("./arc"));

var _area = _interopRequireDefault(require("./area"));

var _line = _interopRequireDefault(require("./line"));

var _pie = _interopRequireDefault(require("./pie"));

var _areaRadial = _interopRequireDefault(require("./areaRadial"));

var _lineRadial = _interopRequireDefault(require("./lineRadial"));

var _pointRadial = _interopRequireDefault(require("./pointRadial"));

var _index = require("./link/index");

var _symbol = _interopRequireWildcard(require("./symbol"));

var _circle = _interopRequireDefault(require("./symbol/circle"));

var _cross = _interopRequireDefault(require("./symbol/cross"));

var _diamond = _interopRequireDefault(require("./symbol/diamond"));

var _square = _interopRequireDefault(require("./symbol/square"));

var _star = _interopRequireDefault(require("./symbol/star"));

var _triangle = _interopRequireDefault(require("./symbol/triangle"));

var _wye = _interopRequireDefault(require("./symbol/wye"));

var _basisClosed = _interopRequireDefault(require("./curve/basisClosed"));

var _basisOpen = _interopRequireDefault(require("./curve/basisOpen"));

var _basis = _interopRequireDefault(require("./curve/basis"));

var _bundle = _interopRequireDefault(require("./curve/bundle"));

var _cardinalClosed = _interopRequireDefault(require("./curve/cardinalClosed"));

var _cardinalOpen = _interopRequireDefault(require("./curve/cardinalOpen"));

var _cardinal = _interopRequireDefault(require("./curve/cardinal"));

var _catmullRomClosed = _interopRequireDefault(require("./curve/catmullRomClosed"));

var _catmullRomOpen = _interopRequireDefault(require("./curve/catmullRomOpen"));

var _catmullRom = _interopRequireDefault(require("./curve/catmullRom"));

var _linearClosed = _interopRequireDefault(require("./curve/linearClosed"));

var _linear = _interopRequireDefault(require("./curve/linear"));

var _monotone = require("./curve/monotone");

var _natural = _interopRequireDefault(require("./curve/natural"));

var _step = _interopRequireWildcard(require("./curve/step"));

var _stack = _interopRequireDefault(require("./stack"));

var _expand = _interopRequireDefault(require("./offset/expand"));

var _diverging = _interopRequireDefault(require("./offset/diverging"));

var _none = _interopRequireDefault(require("./offset/none"));

var _silhouette = _interopRequireDefault(require("./offset/silhouette"));

var _wiggle = _interopRequireDefault(require("./offset/wiggle"));

var _appearance = _interopRequireDefault(require("./order/appearance"));

var _ascending = _interopRequireDefault(require("./order/ascending"));

var _descending = _interopRequireDefault(require("./order/descending"));

var _insideOut = _interopRequireDefault(require("./order/insideOut"));

var _none2 = _interopRequireDefault(require("./order/none"));

var _reverse = _interopRequireDefault(require("./order/reverse"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./arc":"node_modules/d3-shape/src/arc.js","./area":"node_modules/d3-shape/src/area.js","./line":"node_modules/d3-shape/src/line.js","./pie":"node_modules/d3-shape/src/pie.js","./areaRadial":"node_modules/d3-shape/src/areaRadial.js","./lineRadial":"node_modules/d3-shape/src/lineRadial.js","./pointRadial":"node_modules/d3-shape/src/pointRadial.js","./link/index":"node_modules/d3-shape/src/link/index.js","./symbol":"node_modules/d3-shape/src/symbol.js","./symbol/circle":"node_modules/d3-shape/src/symbol/circle.js","./symbol/cross":"node_modules/d3-shape/src/symbol/cross.js","./symbol/diamond":"node_modules/d3-shape/src/symbol/diamond.js","./symbol/square":"node_modules/d3-shape/src/symbol/square.js","./symbol/star":"node_modules/d3-shape/src/symbol/star.js","./symbol/triangle":"node_modules/d3-shape/src/symbol/triangle.js","./symbol/wye":"node_modules/d3-shape/src/symbol/wye.js","./curve/basisClosed":"node_modules/d3-shape/src/curve/basisClosed.js","./curve/basisOpen":"node_modules/d3-shape/src/curve/basisOpen.js","./curve/basis":"node_modules/d3-shape/src/curve/basis.js","./curve/bundle":"node_modules/d3-shape/src/curve/bundle.js","./curve/cardinalClosed":"node_modules/d3-shape/src/curve/cardinalClosed.js","./curve/cardinalOpen":"node_modules/d3-shape/src/curve/cardinalOpen.js","./curve/cardinal":"node_modules/d3-shape/src/curve/cardinal.js","./curve/catmullRomClosed":"node_modules/d3-shape/src/curve/catmullRomClosed.js","./curve/catmullRomOpen":"node_modules/d3-shape/src/curve/catmullRomOpen.js","./curve/catmullRom":"node_modules/d3-shape/src/curve/catmullRom.js","./curve/linearClosed":"node_modules/d3-shape/src/curve/linearClosed.js","./curve/linear":"node_modules/d3-shape/src/curve/linear.js","./curve/monotone":"node_modules/d3-shape/src/curve/monotone.js","./curve/natural":"node_modules/d3-shape/src/curve/natural.js","./curve/step":"node_modules/d3-shape/src/curve/step.js","./stack":"node_modules/d3-shape/src/stack.js","./offset/expand":"node_modules/d3-shape/src/offset/expand.js","./offset/diverging":"node_modules/d3-shape/src/offset/diverging.js","./offset/none":"node_modules/d3-shape/src/offset/none.js","./offset/silhouette":"node_modules/d3-shape/src/offset/silhouette.js","./offset/wiggle":"node_modules/d3-shape/src/offset/wiggle.js","./order/appearance":"node_modules/d3-shape/src/order/appearance.js","./order/ascending":"node_modules/d3-shape/src/order/ascending.js","./order/descending":"node_modules/d3-shape/src/order/descending.js","./order/insideOut":"node_modules/d3-shape/src/order/insideOut.js","./order/none":"node_modules/d3-shape/src/order/none.js","./order/reverse":"node_modules/d3-shape/src/order/reverse.js"}],"node_modules/vega-scenegraph/src/path/curves.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = curves;

var _vegaUtil = require("vega-util");

var _d3Shape = require("d3-shape");

var lookup = {
  'basis': {
    curve: _d3Shape.curveBasis
  },
  'basis-closed': {
    curve: _d3Shape.curveBasisClosed
  },
  'basis-open': {
    curve: _d3Shape.curveBasisOpen
  },
  'bundle': {
    curve: _d3Shape.curveBundle,
    tension: 'beta',
    value: 0.85
  },
  'cardinal': {
    curve: _d3Shape.curveCardinal,
    tension: 'tension',
    value: 0
  },
  'cardinal-open': {
    curve: _d3Shape.curveCardinalOpen,
    tension: 'tension',
    value: 0
  },
  'cardinal-closed': {
    curve: _d3Shape.curveCardinalClosed,
    tension: 'tension',
    value: 0
  },
  'catmull-rom': {
    curve: _d3Shape.curveCatmullRom,
    tension: 'alpha',
    value: 0.5
  },
  'catmull-rom-closed': {
    curve: _d3Shape.curveCatmullRomClosed,
    tension: 'alpha',
    value: 0.5
  },
  'catmull-rom-open': {
    curve: _d3Shape.curveCatmullRomOpen,
    tension: 'alpha',
    value: 0.5
  },
  'linear': {
    curve: _d3Shape.curveLinear
  },
  'linear-closed': {
    curve: _d3Shape.curveLinearClosed
  },
  'monotone': {
    horizontal: _d3Shape.curveMonotoneY,
    vertical: _d3Shape.curveMonotoneX
  },
  'natural': {
    curve: _d3Shape.curveNatural
  },
  'step': {
    curve: _d3Shape.curveStep
  },
  'step-after': {
    curve: _d3Shape.curveStepAfter
  },
  'step-before': {
    curve: _d3Shape.curveStepBefore
  }
};

function curves(type, orientation, tension) {
  var entry = (0, _vegaUtil.hasOwnProperty)(lookup, type) && lookup[type],
      curve = null;

  if (entry) {
    curve = entry.curve || entry[orientation || 'vertical'];

    if (entry.tension && tension != null) {
      curve = curve[entry.tension](tension);
    }
  }

  return curve;
}
},{"vega-util":"node_modules/vega-util/index.js","d3-shape":"node_modules/d3-shape/src/index.js"}],"node_modules/vega-scenegraph/src/path/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
// Path parsing and rendering code adapted from fabric.js -- Thanks!
var cmdlen = {
  m: 2,
  l: 2,
  h: 1,
  v: 1,
  c: 6,
  s: 4,
  q: 4,
  t: 2,
  a: 7
},
    regexp = [/([MLHVCSQTAZmlhvcsqtaz])/g, /###/, /(\d)([-+])/g, /\s|,|###/];

function _default(pathstr) {
  var result = [],
      path,
      curr,
      chunks,
      parsed,
      param,
      cmd,
      len,
      i,
      j,
      n,
      m; // First, break path into command sequence

  path = pathstr.slice().replace(regexp[0], '###$1').split(regexp[1]).slice(1); // Next, parse each command in turn

  for (i = 0, n = path.length; i < n; ++i) {
    curr = path[i];
    chunks = curr.slice(1).trim().replace(regexp[2], '$1###$2').split(regexp[3]);
    cmd = curr.charAt(0);
    parsed = [cmd];

    for (j = 0, m = chunks.length; j < m; ++j) {
      if ((param = +chunks[j]) === param) {
        // not NaN
        parsed.push(param);
      }
    }

    len = cmdlen[cmd.toLowerCase()];

    if (parsed.length - 1 > len) {
      for (j = 1, m = parsed.length; j < m; j += len) {
        result.push([cmd].concat(parsed.slice(j, j + len)));
      }
    } else {
      result.push(parsed);
    }
  }

  return result;
}
},{}],"node_modules/vega-scenegraph/src/util/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HalfSqrt3 = exports.Tau = exports.HalfPi = exports.DegToRad = void 0;
var DegToRad = Math.PI / 180;
exports.DegToRad = DegToRad;
var HalfPi = Math.PI / 2;
exports.HalfPi = HalfPi;
var Tau = Math.PI * 2;
exports.Tau = Tau;
var HalfSqrt3 = Math.sqrt(3) / 2;
exports.HalfSqrt3 = HalfSqrt3;
},{}],"node_modules/vega-scenegraph/src/path/arc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.segments = segments;
exports.bezier = bezier;
exports.bezierCache = exports.segmentCache = void 0;

var _constants = require("../util/constants");

var segmentCache = {};
exports.segmentCache = segmentCache;
var bezierCache = {};
exports.bezierCache = bezierCache;
var join = [].join; // Copied from Inkscape svgtopdf, thanks!

function segments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
  var key = join.call(arguments);

  if (segmentCache[key]) {
    return segmentCache[key];
  }

  var th = rotateX * _constants.DegToRad;
  var sin_th = Math.sin(th);
  var cos_th = Math.cos(th);
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  var px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
  var py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
  var pl = px * px / (rx * rx) + py * py / (ry * ry);

  if (pl > 1) {
    pl = Math.sqrt(pl);
    rx *= pl;
    ry *= pl;
  }

  var a00 = cos_th / rx;
  var a01 = sin_th / rx;
  var a10 = -sin_th / ry;
  var a11 = cos_th / ry;
  var x0 = a00 * ox + a01 * oy;
  var y0 = a10 * ox + a11 * oy;
  var x1 = a00 * x + a01 * y;
  var y1 = a10 * x + a11 * y;
  var d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
  var sfactor_sq = 1 / d - 0.25;
  if (sfactor_sq < 0) sfactor_sq = 0;
  var sfactor = Math.sqrt(sfactor_sq);
  if (sweep == large) sfactor = -sfactor;
  var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
  var yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
  var th0 = Math.atan2(y0 - yc, x0 - xc);
  var th1 = Math.atan2(y1 - yc, x1 - xc);
  var th_arc = th1 - th0;

  if (th_arc < 0 && sweep === 1) {
    th_arc += _constants.Tau;
  } else if (th_arc > 0 && sweep === 0) {
    th_arc -= _constants.Tau;
  }

  var segs = Math.ceil(Math.abs(th_arc / (_constants.HalfPi + 0.001)));
  var result = [];

  for (var i = 0; i < segs; ++i) {
    var th2 = th0 + i * th_arc / segs;
    var th3 = th0 + (i + 1) * th_arc / segs;
    result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
  }

  return segmentCache[key] = result;
}

function bezier(params) {
  var key = join.call(params);

  if (bezierCache[key]) {
    return bezierCache[key];
  }

  var cx = params[0],
      cy = params[1],
      th0 = params[2],
      th1 = params[3],
      rx = params[4],
      ry = params[5],
      sin_th = params[6],
      cos_th = params[7];
  var a00 = cos_th * rx;
  var a01 = -sin_th * ry;
  var a10 = sin_th * rx;
  var a11 = cos_th * ry;
  var cos_th0 = Math.cos(th0);
  var sin_th0 = Math.sin(th0);
  var cos_th1 = Math.cos(th1);
  var sin_th1 = Math.sin(th1);
  var th_half = 0.5 * (th1 - th0);
  var sin_th_h2 = Math.sin(th_half * 0.5);
  var t = 8 / 3 * sin_th_h2 * sin_th_h2 / Math.sin(th_half);
  var x1 = cx + cos_th0 - t * sin_th0;
  var y1 = cy + sin_th0 + t * cos_th0;
  var x3 = cx + cos_th1;
  var y3 = cy + sin_th1;
  var x2 = x3 + t * sin_th1;
  var y2 = y3 - t * cos_th1;
  return bezierCache[key] = [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
}
},{"../util/constants":"node_modules/vega-scenegraph/src/util/constants.js"}],"node_modules/vega-scenegraph/src/path/render.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _arc = require("./arc");

var temp = ['l', 0, 0, 0, 0, 0, 0, 0];

function scale(current, s) {
  var c = temp[0] = current[0];

  if (c === 'a' || c === 'A') {
    temp[1] = s * current[1];
    temp[2] = s * current[2];
    temp[3] = current[3];
    temp[4] = current[4];
    temp[5] = current[5];
    temp[6] = s * current[6];
    temp[7] = s * current[7];
  } else {
    for (var i = 1, n = current.length; i < n; ++i) {
      temp[i] = s * current[i];
    }
  }

  return temp;
}

function _default(context, path, l, t, s) {
  var current,
      // current instruction
  previous = null,
      x = 0,
      // current x
  y = 0,
      // current y
  controlX = 0,
      // current control point x
  controlY = 0,
      // current control point y
  tempX,
      tempY,
      tempControlX,
      tempControlY;
  if (l == null) l = 0;
  if (t == null) t = 0;
  if (s == null) s = 1;
  if (context.beginPath) context.beginPath();

  for (var i = 0, len = path.length; i < len; ++i) {
    current = path[i];
    if (s !== 1) current = scale(current, s);

    switch (current[0]) {
      // first letter
      case 'l':
        // lineto, relative
        x += current[1];
        y += current[2];
        context.lineTo(x + l, y + t);
        break;

      case 'L':
        // lineto, absolute
        x = current[1];
        y = current[2];
        context.lineTo(x + l, y + t);
        break;

      case 'h':
        // horizontal lineto, relative
        x += current[1];
        context.lineTo(x + l, y + t);
        break;

      case 'H':
        // horizontal lineto, absolute
        x = current[1];
        context.lineTo(x + l, y + t);
        break;

      case 'v':
        // vertical lineto, relative
        y += current[1];
        context.lineTo(x + l, y + t);
        break;

      case 'V':
        // verical lineto, absolute
        y = current[1];
        context.lineTo(x + l, y + t);
        break;

      case 'm':
        // moveTo, relative
        x += current[1];
        y += current[2];
        context.moveTo(x + l, y + t);
        break;

      case 'M':
        // moveTo, absolute
        x = current[1];
        y = current[2];
        context.moveTo(x + l, y + t);
        break;

      case 'c':
        // bezierCurveTo, relative
        tempX = x + current[5];
        tempY = y + current[6];
        controlX = x + current[3];
        controlY = y + current[4];
        context.bezierCurveTo(x + current[1] + l, // x1
        y + current[2] + t, // y1
        controlX + l, // x2
        controlY + t, // y2
        tempX + l, tempY + t);
        x = tempX;
        y = tempY;
        break;

      case 'C':
        // bezierCurveTo, absolute
        x = current[5];
        y = current[6];
        controlX = current[3];
        controlY = current[4];
        context.bezierCurveTo(current[1] + l, current[2] + t, controlX + l, controlY + t, x + l, y + t);
        break;

      case 's':
        // shorthand cubic bezierCurveTo, relative
        // transform to absolute x,y
        tempX = x + current[3];
        tempY = y + current[4]; // calculate reflection of previous control points

        controlX = 2 * x - controlX;
        controlY = 2 * y - controlY;
        context.bezierCurveTo(controlX + l, controlY + t, x + current[1] + l, y + current[2] + t, tempX + l, tempY + t); // set control point to 2nd one of this command
        // the first control point is assumed to be the reflection of
        // the second control point on the previous command relative
        // to the current point.

        controlX = x + current[1];
        controlY = y + current[2];
        x = tempX;
        y = tempY;
        break;

      case 'S':
        // shorthand cubic bezierCurveTo, absolute
        tempX = current[3];
        tempY = current[4]; // calculate reflection of previous control points

        controlX = 2 * x - controlX;
        controlY = 2 * y - controlY;
        context.bezierCurveTo(controlX + l, controlY + t, current[1] + l, current[2] + t, tempX + l, tempY + t);
        x = tempX;
        y = tempY; // set control point to 2nd one of this command
        // the first control point is assumed to be the reflection of
        // the second control point on the previous command relative
        // to the current point.

        controlX = current[1];
        controlY = current[2];
        break;

      case 'q':
        // quadraticCurveTo, relative
        // transform to absolute x,y
        tempX = x + current[3];
        tempY = y + current[4];
        controlX = x + current[1];
        controlY = y + current[2];
        context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
        x = tempX;
        y = tempY;
        break;

      case 'Q':
        // quadraticCurveTo, absolute
        tempX = current[3];
        tempY = current[4];
        context.quadraticCurveTo(current[1] + l, current[2] + t, tempX + l, tempY + t);
        x = tempX;
        y = tempY;
        controlX = current[1];
        controlY = current[2];
        break;

      case 't':
        // shorthand quadraticCurveTo, relative
        // transform to absolute x,y
        tempX = x + current[1];
        tempY = y + current[2];

        if (previous[0].match(/[QqTt]/) === null) {
          // If there is no previous command or if the previous command was not a Q, q, T or t,
          // assume the control point is coincident with the current point
          controlX = x;
          controlY = y;
        } else if (previous[0] === 't') {
          // calculate reflection of previous control points for t
          controlX = 2 * x - tempControlX;
          controlY = 2 * y - tempControlY;
        } else if (previous[0] === 'q') {
          // calculate reflection of previous control points for q
          controlX = 2 * x - controlX;
          controlY = 2 * y - controlY;
        }

        tempControlX = controlX;
        tempControlY = controlY;
        context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
        x = tempX;
        y = tempY;
        controlX = x + current[1];
        controlY = y + current[2];
        break;

      case 'T':
        tempX = current[1];
        tempY = current[2]; // calculate reflection of previous control points

        controlX = 2 * x - controlX;
        controlY = 2 * y - controlY;
        context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
        x = tempX;
        y = tempY;
        break;

      case 'a':
        drawArc(context, x + l, y + t, [current[1], current[2], current[3], current[4], current[5], current[6] + x + l, current[7] + y + t]);
        x += current[6];
        y += current[7];
        break;

      case 'A':
        drawArc(context, x + l, y + t, [current[1], current[2], current[3], current[4], current[5], current[6] + l, current[7] + t]);
        x = current[6];
        y = current[7];
        break;

      case 'z':
      case 'Z':
        context.closePath();
        break;
    }

    previous = current;
  }
}

function drawArc(context, x, y, coords) {
  var seg = (0, _arc.segments)(coords[5], // end x
  coords[6], // end y
  coords[0], // radius x
  coords[1], // radius y
  coords[3], // large flag
  coords[4], // sweep flag
  coords[2], // rotation
  x, y);

  for (var i = 0; i < seg.length; ++i) {
    var bez = (0, _arc.bezier)(seg[i]);
    context.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);
  }
}
},{"./arc":"node_modules/vega-scenegraph/src/path/arc.js"}],"node_modules/vega-scenegraph/src/path/symbols.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = symbols;

var _parse = _interopRequireDefault(require("./parse"));

var _render = _interopRequireDefault(require("./render"));

var _constants = require("../util/constants");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Tan30 = 0.5773502691896257;
var builtins = {
  'circle': {
    draw: function (context, size) {
      var r = Math.sqrt(size) / 2;
      context.moveTo(r, 0);
      context.arc(0, 0, r, 0, _constants.Tau);
    }
  },
  'cross': {
    draw: function (context, size) {
      var r = Math.sqrt(size) / 2,
          s = r / 2.5;
      context.moveTo(-r, -s);
      context.lineTo(-r, s);
      context.lineTo(-s, s);
      context.lineTo(-s, r);
      context.lineTo(s, r);
      context.lineTo(s, s);
      context.lineTo(r, s);
      context.lineTo(r, -s);
      context.lineTo(s, -s);
      context.lineTo(s, -r);
      context.lineTo(-s, -r);
      context.lineTo(-s, -s);
      context.closePath();
    }
  },
  'diamond': {
    draw: function (context, size) {
      var r = Math.sqrt(size) / 2;
      context.moveTo(-r, 0);
      context.lineTo(0, -r);
      context.lineTo(r, 0);
      context.lineTo(0, r);
      context.closePath();
    }
  },
  'square': {
    draw: function (context, size) {
      var w = Math.sqrt(size),
          x = -w / 2;
      context.rect(x, x, w, w);
    }
  },
  'arrow': {
    draw: function (context, size) {
      var r = Math.sqrt(size) / 2,
          s = r / 7,
          t = r / 2.5,
          v = r / 8;
      context.moveTo(-s, r);
      context.lineTo(s, r);
      context.lineTo(s, -v);
      context.lineTo(t, -v);
      context.lineTo(0, -r);
      context.lineTo(-t, -v);
      context.lineTo(-s, -v);
      context.closePath();
    }
  },
  'wedge': {
    draw: function (context, size) {
      var r = Math.sqrt(size) / 2,
          h = _constants.HalfSqrt3 * r,
          o = h - r * Tan30,
          b = r / 4;
      context.moveTo(0, -h - o);
      context.lineTo(-b, h - o);
      context.lineTo(b, h - o);
      context.closePath();
    }
  },
  'triangle': {
    draw: function (context, size) {
      var r = Math.sqrt(size) / 2,
          h = _constants.HalfSqrt3 * r,
          o = h - r * Tan30;
      context.moveTo(0, -h - o);
      context.lineTo(-r, h - o);
      context.lineTo(r, h - o);
      context.closePath();
    }
  },
  'triangle-up': {
    draw: function (context, size) {
      var r = Math.sqrt(size) / 2,
          h = _constants.HalfSqrt3 * r;
      context.moveTo(0, -h);
      context.lineTo(-r, h);
      context.lineTo(r, h);
      context.closePath();
    }
  },
  'triangle-down': {
    draw: function (context, size) {
      var r = Math.sqrt(size) / 2,
          h = _constants.HalfSqrt3 * r;
      context.moveTo(0, h);
      context.lineTo(-r, -h);
      context.lineTo(r, -h);
      context.closePath();
    }
  },
  'triangle-right': {
    draw: function (context, size) {
      var r = Math.sqrt(size) / 2,
          h = _constants.HalfSqrt3 * r;
      context.moveTo(h, 0);
      context.lineTo(-h, -r);
      context.lineTo(-h, r);
      context.closePath();
    }
  },
  'triangle-left': {
    draw: function (context, size) {
      var r = Math.sqrt(size) / 2,
          h = _constants.HalfSqrt3 * r;
      context.moveTo(-h, 0);
      context.lineTo(h, -r);
      context.lineTo(h, r);
      context.closePath();
    }
  },
  'stroke': {
    draw: function (context, size) {
      var r = Math.sqrt(size) / 2;
      context.moveTo(-r, 0);
      context.lineTo(r, 0);
    }
  }
};

function symbols(_) {
  return (0, _vegaUtil.hasOwnProperty)(builtins, _) ? builtins[_] : customSymbol(_);
}

var custom = {};

function customSymbol(path) {
  if (!(0, _vegaUtil.hasOwnProperty)(custom, path)) {
    var parsed = (0, _parse.default)(path);
    custom[path] = {
      draw: function (context, size) {
        (0, _render.default)(context, parsed, 0, 0, Math.sqrt(size) / 2);
      }
    };
  }

  return custom[path];
}
},{"./parse":"node_modules/vega-scenegraph/src/path/parse.js","./render":"node_modules/vega-scenegraph/src/path/render.js","../util/constants":"node_modules/vega-scenegraph/src/util/constants.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-scenegraph/src/path/rectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

function rectangleX(d) {
  return d.x;
}

function rectangleY(d) {
  return d.y;
}

function rectangleWidth(d) {
  return d.width;
}

function rectangleHeight(d) {
  return d.height;
}

function constant(_) {
  return function () {
    return _;
  };
}

function _default() {
  var x = rectangleX,
      y = rectangleY,
      width = rectangleWidth,
      height = rectangleHeight,
      cornerRadius = constant(0),
      context = null;

  function rectangle(_, x0, y0) {
    var buffer,
        x1 = x0 != null ? x0 : +x.call(this, _),
        y1 = y0 != null ? y0 : +y.call(this, _),
        w = +width.call(this, _),
        h = +height.call(this, _),
        cr = +cornerRadius.call(this, _);
    if (!context) context = buffer = (0, _d3Path.path)();

    if (cr <= 0) {
      context.rect(x1, y1, w, h);
    } else {
      var x2 = x1 + w,
          y2 = y1 + h;
      context.moveTo(x1 + cr, y1);
      context.lineTo(x2 - cr, y1);
      context.quadraticCurveTo(x2, y1, x2, y1 + cr);
      context.lineTo(x2, y2 - cr);
      context.quadraticCurveTo(x2, y2, x2 - cr, y2);
      context.lineTo(x1 + cr, y2);
      context.quadraticCurveTo(x1, y2, x1, y2 - cr);
      context.lineTo(x1, y1 + cr);
      context.quadraticCurveTo(x1, y1, x1 + cr, y1);
      context.closePath();
    }

    if (buffer) {
      context = null;
      return buffer + '' || null;
    }
  }

  rectangle.x = function (_) {
    if (arguments.length) {
      x = typeof _ === 'function' ? _ : constant(+_);
      return rectangle;
    } else {
      return x;
    }
  };

  rectangle.y = function (_) {
    if (arguments.length) {
      y = typeof _ === 'function' ? _ : constant(+_);
      return rectangle;
    } else {
      return y;
    }
  };

  rectangle.width = function (_) {
    if (arguments.length) {
      width = typeof _ === 'function' ? _ : constant(+_);
      return rectangle;
    } else {
      return width;
    }
  };

  rectangle.height = function (_) {
    if (arguments.length) {
      height = typeof _ === 'function' ? _ : constant(+_);
      return rectangle;
    } else {
      return height;
    }
  };

  rectangle.cornerRadius = function (_) {
    if (arguments.length) {
      cornerRadius = typeof _ === 'function' ? _ : constant(+_);
      return rectangle;
    } else {
      return cornerRadius;
    }
  };

  rectangle.context = function (_) {
    if (arguments.length) {
      context = _ == null ? null : _;
      return rectangle;
    } else {
      return context;
    }
  };

  return rectangle;
}
},{"d3-path":"node_modules/d3-path/src/index.js"}],"node_modules/vega-scenegraph/src/path/trail.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("../util/constants");

var _d3Path = require("d3-path");

function _default() {
  var x,
      y,
      size,
      defined,
      context = null,
      ready,
      x1,
      y1,
      r1;

  function point(x2, y2, w2) {
    var r2 = w2 / 2;

    if (ready) {
      var ux = y1 - y2,
          uy = x2 - x1;

      if (ux || uy) {
        // get normal vector
        var ud = Math.sqrt(ux * ux + uy * uy),
            rx = (ux /= ud) * r1,
            ry = (uy /= ud) * r1,
            t = Math.atan2(uy, ux); // draw segment

        context.moveTo(x1 - rx, y1 - ry);
        context.lineTo(x2 - ux * r2, y2 - uy * r2);
        context.arc(x2, y2, r2, t - Math.PI, t);
        context.lineTo(x1 + rx, y1 + ry);
        context.arc(x1, y1, r1, t, t + Math.PI);
      } else {
        context.arc(x2, y2, r2, 0, _constants.Tau);
      }

      context.closePath();
    } else {
      ready = 1;
    }

    x1 = x2;
    y1 = y2;
    r1 = r2;
  }

  function trail(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;
    if (context == null) context = buffer = (0, _d3Path.path)();

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) ready = 0;
      }

      if (defined0) point(+x(d, i, data), +y(d, i, data), +size(d, i, data));
    }

    if (buffer) {
      context = null;
      return buffer + '' || null;
    }
  }

  trail.x = function (_) {
    if (arguments.length) {
      x = _;
      return trail;
    } else {
      return x;
    }
  };

  trail.y = function (_) {
    if (arguments.length) {
      y = _;
      return trail;
    } else {
      return y;
    }
  };

  trail.size = function (_) {
    if (arguments.length) {
      size = _;
      return trail;
    } else {
      return size;
    }
  };

  trail.defined = function (_) {
    if (arguments.length) {
      defined = _;
      return trail;
    } else {
      return defined;
    }
  };

  trail.context = function (_) {
    if (arguments.length) {
      if (_ == null) {
        context = null;
      } else {
        context = _;
      }

      return trail;
    } else {
      return context;
    }
  };

  return trail;
}
},{"../util/constants":"node_modules/vega-scenegraph/src/util/constants.js","d3-path":"node_modules/d3-path/src/index.js"}],"node_modules/vega-scenegraph/src/path/shapes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arc = arc;
exports.area = area;
exports.line = line;
exports.rectangle = rectangle;
exports.shape = shape;
exports.symbol = symbol;
exports.trail = trail;

var _curves = _interopRequireDefault(require("./curves"));

var _symbols = _interopRequireDefault(require("./symbols"));

var _rectangle = _interopRequireDefault(require("./rectangle"));

var _trail = _interopRequireDefault(require("./trail"));

var _d3Shape = require("d3-shape");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function x(item) {
  return item.x || 0;
}

function y(item) {
  return item.y || 0;
}

function w(item) {
  return item.width || 0;
}

function ts(item) {
  return item.size || 1;
}

function h(item) {
  return item.height || 0;
}

function xw(item) {
  return (item.x || 0) + (item.width || 0);
}

function yh(item) {
  return (item.y || 0) + (item.height || 0);
}

function sa(item) {
  return item.startAngle || 0;
}

function ea(item) {
  return item.endAngle || 0;
}

function pa(item) {
  return item.padAngle || 0;
}

function ir(item) {
  return item.innerRadius || 0;
}

function or(item) {
  return item.outerRadius || 0;
}

function cr(item) {
  return item.cornerRadius || 0;
}

function def(item) {
  return !(item.defined === false);
}

function size(item) {
  return item.size == null ? 64 : item.size;
}

function type(item) {
  return (0, _symbols.default)(item.shape || 'circle');
}

var arcShape = (0, _d3Shape.arc)().startAngle(sa).endAngle(ea).padAngle(pa).innerRadius(ir).outerRadius(or).cornerRadius(cr),
    areavShape = (0, _d3Shape.area)().x(x).y1(y).y0(yh).defined(def),
    areahShape = (0, _d3Shape.area)().y(y).x1(x).x0(xw).defined(def),
    lineShape = (0, _d3Shape.line)().x(x).y(y).defined(def),
    rectShape = (0, _rectangle.default)().x(x).y(y).width(w).height(h).cornerRadius(cr),
    symbolShape = (0, _d3Shape.symbol)().type(type).size(size),
    trailShape = (0, _trail.default)().x(x).y(y).defined(def).size(ts);

function arc(context, item) {
  return arcShape.context(context)(item);
}

function area(context, items) {
  var item = items[0],
      interp = item.interpolate || 'linear';
  return (item.orient === 'horizontal' ? areahShape : areavShape).curve((0, _curves.default)(interp, item.orient, item.tension)).context(context)(items);
}

function line(context, items) {
  var item = items[0],
      interp = item.interpolate || 'linear';
  return lineShape.curve((0, _curves.default)(interp, item.orient, item.tension)).context(context)(items);
}

function rectangle(context, item, x, y) {
  return rectShape.context(context)(item, x, y);
}

function shape(context, item) {
  return (item.mark.shape || item.shape).context(context)(item);
}

function symbol(context, item) {
  return symbolShape.context(context)(item);
}

function trail(context, items) {
  return trailShape.context(context)(items);
}
},{"./curves":"node_modules/vega-scenegraph/src/path/curves.js","./symbols":"node_modules/vega-scenegraph/src/path/symbols.js","./rectangle":"node_modules/vega-scenegraph/src/path/rectangle.js","./trail":"node_modules/vega-scenegraph/src/path/trail.js","d3-shape":"node_modules/d3-shape/src/index.js"}],"node_modules/vega-scenegraph/src/bound/boundStroke.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(bounds, item) {
  if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {
    bounds.expand(item.strokeWidth != null ? +item.strokeWidth : 1);
  }

  return bounds;
}
},{}],"node_modules/vega-scenegraph/src/bound/boundContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = context;

var _constants = require("../util/constants");

var bounds,
    circleThreshold = _constants.Tau - 1e-8;

function context(_) {
  bounds = _;
  return context;
}

function noop() {}

function add(x, y) {
  bounds.add(x, y);
}

context.beginPath = noop;
context.closePath = noop;
context.moveTo = add;
context.lineTo = add;

context.rect = function (x, y, w, h) {
  add(x, y);
  add(x + w, y + h);
};

context.quadraticCurveTo = function (x1, y1, x2, y2) {
  add(x1, y1);
  add(x2, y2);
};

context.bezierCurveTo = function (x1, y1, x2, y2, x3, y3) {
  add(x1, y1);
  add(x2, y2);
  add(x3, y3);
};

context.arc = function (cx, cy, r, sa, ea, ccw) {
  if (Math.abs(ea - sa) > circleThreshold) {
    add(cx - r, cy - r);
    add(cx + r, cy + r);
    return;
  }

  var xmin = Infinity,
      xmax = -Infinity,
      ymin = Infinity,
      ymax = -Infinity,
      s,
      i,
      x,
      y;

  function update(a) {
    x = r * Math.cos(a);
    y = r * Math.sin(a);
    if (x < xmin) xmin = x;
    if (x > xmax) xmax = x;
    if (y < ymin) ymin = y;
    if (y > ymax) ymax = y;
  } // Sample end points and interior points aligned with 90 degrees


  update(sa);
  update(ea);

  if (ea !== sa) {
    sa = sa % _constants.Tau;
    if (sa < 0) sa += _constants.Tau;
    ea = ea % _constants.Tau;
    if (ea < 0) ea += _constants.Tau;

    if (ea < sa) {
      ccw = !ccw; // flip direction

      s = sa;
      sa = ea;
      ea = s; // swap end-points
    }

    if (ccw) {
      ea -= _constants.Tau;
      s = sa - sa % _constants.HalfPi;

      for (i = 0; i < 4 && s > ea; ++i, s -= _constants.HalfPi) update(s);
    } else {
      s = sa - sa % _constants.HalfPi + _constants.HalfPi;

      for (i = 0; i < 4 && s < ea; ++i, s = s + _constants.HalfPi) update(s);
    }
  }

  add(cx + xmin, cy + ymin);
  add(cx + xmax, cy + ymax);
};
},{"../util/constants":"node_modules/vega-scenegraph/src/util/constants.js"}],"node_modules/vega-scenegraph/src/util/canvas/context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.context = void 0;

var _vegaCanvas = require("vega-canvas");

var context = (exports.context = context = (0, _vegaCanvas.canvas)(1, 1)) ? context.getContext('2d') : null;
exports.context = context;
},{"vega-canvas":"node_modules/vega-canvas/index.browser.js"}],"node_modules/vega-scenegraph/src/util/intersect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.intersectPath = intersectPath;
exports.intersectPoint = intersectPoint;
exports.intersectRect = intersectRect;
exports.intersectRule = intersectRule;
exports.intersectBoxLine = intersectBoxLine;

var _context = require("./canvas/context");

var _Bounds = _interopRequireDefault(require("../Bounds"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const b = new _Bounds.default();

function intersectPath(draw) {
  return function (item, brush) {
    // rely on (inaccurate) bounds intersection if no context
    if (!_context.context) return true; // add path to offscreen graphics context

    draw(_context.context, item); // get bounds intersection region

    b.clear().union(item.bounds).intersect(brush).round();
    const {
      x1,
      y1,
      x2,
      y2
    } = b; // iterate over intersection region
    // perform fine grained inclusion test

    for (let y = y1; y <= y2; ++y) {
      for (let x = x1; x <= x2; ++x) {
        if (_context.context.isPointInPath(x, y)) {
          return true;
        }
      }
    } // false if no hits in intersection region


    return false;
  };
}

function intersectPoint(item, box) {
  return box.contains(item.x || 0, item.y || 0);
}

function intersectRect(item, box) {
  const x = item.x || 0,
        y = item.y || 0,
        w = item.width || 0,
        h = item.height || 0;
  return box.intersects(b.set(x, y, x + w, y + h));
}

function intersectRule(item, box) {
  const x = item.x || 0,
        y = item.y || 0,
        x2 = item.x2 != null ? item.x2 : x,
        y2 = item.y2 != null ? item.y2 : y;
  return intersectBoxLine(box, x, y, x2, y2);
}

function intersectBoxLine(box, x, y, u, v) {
  const {
    x1,
    y1,
    x2,
    y2
  } = box,
        dx = u - x,
        dy = v - y;
  let t0 = 0,
      t1 = 1,
      p,
      q,
      r,
      e;

  for (e = 0; e < 4; ++e) {
    if (e === 0) {
      p = -dx;
      q = -(x1 - x);
    }

    if (e === 1) {
      p = dx;
      q = x2 - x;
    }

    if (e === 2) {
      p = -dy;
      q = -(y1 - y);
    }

    if (e === 3) {
      p = dy;
      q = y2 - y;
    }

    if (Math.abs(p) < 1e-10 && q < 0) return false;
    r = q / p;

    if (p < 0) {
      if (r > t1) return false;else if (r > t0) t0 = r;
    } else if (p > 0) {
      if (r < t0) return false;else if (r < t1) t1 = r;
    }
  }

  return true;
}
},{"./canvas/context":"node_modules/vega-scenegraph/src/util/canvas/context.js","../Bounds":"node_modules/vega-scenegraph/src/Bounds.js"}],"node_modules/vega-scenegraph/src/util/canvas/gradient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(context, gradient, bounds) {
  const w = bounds.width(),
        h = bounds.height(),
        stop = gradient.stops,
        n = stop.length;
  const canvasGradient = gradient.gradient === 'radial' ? context.createRadialGradient(bounds.x1 + (gradient.x1 || 0.5) * w, bounds.y1 + (gradient.y1 || 0.5) * h, Math.max(w, h) * (gradient.r1 || 0), bounds.x1 + (gradient.x2 || 0.5) * w, bounds.y1 + (gradient.y2 || 0.5) * h, Math.max(w, h) * (gradient.r2 || 0.5)) : context.createLinearGradient(bounds.x1 + (gradient.x1 || 0) * w, bounds.y1 + (gradient.y1 || 0) * h, bounds.x1 + (gradient.x2 || 1) * w, bounds.y1 + (gradient.y2 || 0) * h);

  for (let i = 0; i < n; ++i) {
    canvasGradient.addColorStop(stop[i].offset, stop[i].color);
  }

  return canvasGradient;
}
},{}],"node_modules/vega-scenegraph/src/util/canvas/color.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _Gradient = require("../../Gradient");

var _gradient = _interopRequireDefault(require("./gradient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(context, item, value) {
  return (0, _Gradient.isGradient)(value) ? (0, _gradient.default)(context, value, item.bounds) : value;
}
},{"../../Gradient":"node_modules/vega-scenegraph/src/Gradient.js","./gradient":"node_modules/vega-scenegraph/src/util/canvas/gradient.js"}],"node_modules/vega-scenegraph/src/util/canvas/fill.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _color = _interopRequireDefault(require("./color"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(context, item, opacity) {
  opacity *= item.fillOpacity == null ? 1 : item.fillOpacity;

  if (opacity > 0) {
    context.globalAlpha = opacity;
    context.fillStyle = (0, _color.default)(context, item, item.fill);
    return true;
  } else {
    return false;
  }
}
},{"./color":"node_modules/vega-scenegraph/src/util/canvas/color.js"}],"node_modules/vega-scenegraph/src/util/canvas/stroke.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _color = _interopRequireDefault(require("./color"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Empty = [];

function _default(context, item, opacity) {
  var lw = (lw = item.strokeWidth) != null ? lw : 1;
  if (lw <= 0) return false;
  opacity *= item.strokeOpacity == null ? 1 : item.strokeOpacity;

  if (opacity > 0) {
    context.globalAlpha = opacity;
    context.strokeStyle = (0, _color.default)(context, item, item.stroke);
    context.lineWidth = lw;
    context.lineCap = item.strokeCap || 'butt';
    context.lineJoin = item.strokeJoin || 'miter';
    context.miterLimit = item.strokeMiterLimit || 10;

    if (context.setLineDash) {
      context.setLineDash(item.strokeDash || Empty);
      context.lineDashOffset = item.strokeDashOffset || 0;
    }

    return true;
  } else {
    return false;
  }
}
},{"./color":"node_modules/vega-scenegraph/src/util/canvas/color.js"}],"node_modules/vega-scenegraph/src/util/visit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zorder = zorder;
exports.visit = visit;
exports.pickVisit = pickVisit;

function compare(a, b) {
  return a.zindex - b.zindex || a.index - b.index;
}

function zorder(scene) {
  if (!scene.zdirty) return scene.zitems;
  var items = scene.items,
      output = [],
      item,
      i,
      n;

  for (i = 0, n = items.length; i < n; ++i) {
    item = items[i];
    item.index = i;
    if (item.zindex) output.push(item);
  }

  scene.zdirty = false;
  return scene.zitems = output.sort(compare);
}

function visit(scene, visitor) {
  var items = scene.items,
      i,
      n;
  if (!items || !items.length) return;
  var zitems = zorder(scene);

  if (zitems && zitems.length) {
    for (i = 0, n = items.length; i < n; ++i) {
      if (!items[i].zindex) visitor(items[i]);
    }

    items = zitems;
  }

  for (i = 0, n = items.length; i < n; ++i) {
    visitor(items[i]);
  }
}

function pickVisit(scene, visitor) {
  var items = scene.items,
      hit,
      i;
  if (!items || !items.length) return null;
  var zitems = zorder(scene);
  if (zitems && zitems.length) items = zitems;

  for (i = items.length; --i >= 0;) {
    if (hit = visitor(items[i])) return hit;
  }

  if (items === zitems) {
    for (items = scene.items, i = items.length; --i >= 0;) {
      if (!items[i].zindex) {
        if (hit = visitor(items[i])) return hit;
      }
    }
  }

  return null;
}
},{}],"node_modules/vega-scenegraph/src/util/canvas/draw.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.drawAll = drawAll;
exports.drawOne = drawOne;

var _fill = _interopRequireDefault(require("./fill"));

var _stroke = _interopRequireDefault(require("./stroke"));

var _visit = require("../visit");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function drawAll(path) {
  return function (context, scene, bounds) {
    (0, _visit.visit)(scene, function (item) {
      if (!bounds || bounds.intersects(item.bounds)) {
        drawPath(path, context, item, item);
      }
    });
  };
}

function drawOne(path) {
  return function (context, scene, bounds) {
    if (scene.items.length && (!bounds || bounds.intersects(scene.bounds))) {
      drawPath(path, context, scene.items[0], scene.items);
    }
  };
}

function drawPath(path, context, item, items) {
  var opacity = item.opacity == null ? 1 : item.opacity;
  if (opacity === 0) return;
  if (path(context, items)) return;

  if (item.fill && (0, _fill.default)(context, item, opacity)) {
    context.fill();
  }

  if (item.stroke && (0, _stroke.default)(context, item, opacity)) {
    context.stroke();
  }
}
},{"./fill":"node_modules/vega-scenegraph/src/util/canvas/fill.js","./stroke":"node_modules/vega-scenegraph/src/util/canvas/stroke.js","../visit":"node_modules/vega-scenegraph/src/util/visit.js"}],"node_modules/vega-scenegraph/src/util/canvas/pick.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pick = pick;
exports.hitPath = hitPath;
exports.pickPath = pickPath;

var _visit = require("../visit");

var _vegaUtil = require("vega-util");

function pick(test) {
  test = test || _vegaUtil.truthy;
  return function (context, scene, x, y, gx, gy) {
    x *= context.pixelRatio;
    y *= context.pixelRatio;
    return (0, _visit.pickVisit)(scene, function (item) {
      var b = item.bounds; // first hit test against bounding box

      if (b && !b.contains(gx, gy) || !b) return; // if in bounding box, perform more careful test

      if (test(context, item, x, y, gx, gy)) return item;
    });
  };
}

function hitPath(path, filled) {
  return function (context, o, x, y) {
    var item = Array.isArray(o) ? o[0] : o,
        fill = filled == null ? item.fill : filled,
        stroke = item.stroke && context.isPointInStroke,
        lw,
        lc;

    if (stroke) {
      lw = item.strokeWidth;
      lc = item.strokeCap;
      context.lineWidth = lw != null ? lw : 1;
      context.lineCap = lc != null ? lc : 'butt';
    }

    return path(context, o) ? false : fill && context.isPointInPath(x, y) || stroke && context.isPointInStroke(x, y);
  };
}

function pickPath(path) {
  return pick(hitPath(path));
}
},{"../visit":"node_modules/vega-scenegraph/src/util/visit.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-scenegraph/src/util/svg/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.translate = translate;
exports.rotate = rotate;
exports.translateItem = translateItem;
exports.transformItem = transformItem;

function translate(x, y) {
  return 'translate(' + x + ',' + y + ')';
}

function rotate(a) {
  return 'rotate(' + a + ')';
}

function translateItem(item) {
  return translate(item.x || 0, item.y || 0);
}

function transformItem(item) {
  return translate(item.x || 0, item.y || 0) + (item.angle ? ' ' + rotate(item.angle) : '');
}
},{}],"node_modules/vega-scenegraph/src/marks/markItemPath.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _boundStroke = _interopRequireDefault(require("../bound/boundStroke"));

var _boundContext = _interopRequireDefault(require("../bound/boundContext"));

var _intersect = require("../util/intersect");

var _draw = require("../util/canvas/draw");

var _pick = require("../util/canvas/pick");

var _transform = require("../util/svg/transform");

var _constants = require("../util/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(type, shape, isect) {
  function attr(emit, item) {
    emit('transform', (0, _transform.transformItem)(item));
    emit('d', shape(null, item));
  }

  function bound(bounds, item) {
    var x = item.x || 0,
        y = item.y || 0;
    shape((0, _boundContext.default)(bounds), item);
    (0, _boundStroke.default)(bounds, item).translate(x, y);

    if (item.angle) {
      bounds.rotate(item.angle * _constants.DegToRad, x, y);
    }

    return bounds;
  }

  function draw(context, item) {
    var x = item.x || 0,
        y = item.y || 0,
        a = item.angle || 0;
    context.translate(x, y);
    if (a) context.rotate(a *= _constants.DegToRad);
    context.beginPath();
    shape(context, item);
    if (a) context.rotate(-a);
    context.translate(-x, -y);
  }

  return {
    type: type,
    tag: 'path',
    nested: false,
    attr: attr,
    bound: bound,
    draw: (0, _draw.drawAll)(draw),
    pick: (0, _pick.pickPath)(draw),
    isect: isect || (0, _intersect.intersectPath)(draw)
  };
}
},{"../bound/boundStroke":"node_modules/vega-scenegraph/src/bound/boundStroke.js","../bound/boundContext":"node_modules/vega-scenegraph/src/bound/boundContext.js","../util/intersect":"node_modules/vega-scenegraph/src/util/intersect.js","../util/canvas/draw":"node_modules/vega-scenegraph/src/util/canvas/draw.js","../util/canvas/pick":"node_modules/vega-scenegraph/src/util/canvas/pick.js","../util/svg/transform":"node_modules/vega-scenegraph/src/util/svg/transform.js","../util/constants":"node_modules/vega-scenegraph/src/util/constants.js"}],"node_modules/vega-scenegraph/src/marks/arc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _shapes = require("../path/shapes");

var _markItemPath = _interopRequireDefault(require("./markItemPath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _markItemPath.default)('arc', _shapes.arc);

exports.default = _default;
},{"../path/shapes":"node_modules/vega-scenegraph/src/path/shapes.js","./markItemPath":"node_modules/vega-scenegraph/src/marks/markItemPath.js"}],"node_modules/vega-scenegraph/src/util/pickPath.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pickArea = pickArea;
exports.pickLine = pickLine;
exports.pickTrail = pickTrail;

function pickArea(a, p) {
  var v = a[0].orient === 'horizontal' ? p[1] : p[0],
      z = a[0].orient === 'horizontal' ? 'y' : 'x',
      i = a.length,
      min = +Infinity,
      hit,
      d;

  while (--i >= 0) {
    if (a[i].defined === false) continue;
    d = Math.abs(a[i][z] - v);

    if (d < min) {
      min = d;
      hit = a[i];
    }
  }

  return hit;
}

function pickLine(a, p) {
  var t = Math.pow(a[0].strokeWidth || 1, 2),
      i = a.length,
      dx,
      dy,
      dd;

  while (--i >= 0) {
    if (a[i].defined === false) continue;
    dx = a[i].x - p[0];
    dy = a[i].y - p[1];
    dd = dx * dx + dy * dy;
    if (dd < t) return a[i];
  }

  return null;
}

function pickTrail(a, p) {
  var i = a.length,
      dx,
      dy,
      dd;

  while (--i >= 0) {
    if (a[i].defined === false) continue;
    dx = a[i].x - p[0];
    dy = a[i].y - p[1];
    dd = dx * dx + dy * dy;
    dx = a[i].size || 1;
    if (dd < dx * dx) return a[i];
  }

  return null;
}
},{}],"node_modules/vega-scenegraph/src/marks/markMultiItemPath.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _boundStroke = _interopRequireDefault(require("../bound/boundStroke"));

var _boundContext = _interopRequireDefault(require("../bound/boundContext"));

var _intersect = require("../util/intersect");

var _draw = require("../util/canvas/draw");

var _pick = require("../util/canvas/pick");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(type, shape, tip) {
  function attr(emit, item) {
    var items = item.mark.items;
    if (items.length) emit('d', shape(null, items));
  }

  function bound(bounds, mark) {
    var items = mark.items;

    if (items.length === 0) {
      return bounds;
    } else {
      shape((0, _boundContext.default)(bounds), items);
      return (0, _boundStroke.default)(bounds, items[0]);
    }
  }

  function draw(context, items) {
    context.beginPath();
    shape(context, items);
  }

  var hit = (0, _pick.hitPath)(draw);

  function pick(context, scene, x, y, gx, gy) {
    var items = scene.items,
        b = scene.bounds;

    if (!items || !items.length || b && !b.contains(gx, gy)) {
      return null;
    }

    x *= context.pixelRatio;
    y *= context.pixelRatio;
    return hit(context, items, x, y) ? items[0] : null;
  }

  return {
    type: type,
    tag: 'path',
    nested: true,
    attr: attr,
    bound: bound,
    draw: (0, _draw.drawOne)(draw),
    pick: pick,
    isect: _intersect.intersectPoint,
    tip: tip
  };
}
},{"../bound/boundStroke":"node_modules/vega-scenegraph/src/bound/boundStroke.js","../bound/boundContext":"node_modules/vega-scenegraph/src/bound/boundContext.js","../util/intersect":"node_modules/vega-scenegraph/src/util/intersect.js","../util/canvas/draw":"node_modules/vega-scenegraph/src/util/canvas/draw.js","../util/canvas/pick":"node_modules/vega-scenegraph/src/util/canvas/pick.js"}],"node_modules/vega-scenegraph/src/marks/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _shapes = require("../path/shapes");

var _pickPath = require("../util/pickPath");

var _markMultiItemPath = _interopRequireDefault(require("./markMultiItemPath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _markMultiItemPath.default)('area', _shapes.area, _pickPath.pickArea);

exports.default = _default;
},{"../path/shapes":"node_modules/vega-scenegraph/src/path/shapes.js","../util/pickPath":"node_modules/vega-scenegraph/src/util/pickPath.js","./markMultiItemPath":"node_modules/vega-scenegraph/src/marks/markMultiItemPath.js"}],"node_modules/vega-scenegraph/src/util/svg/clip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetSVGClipId = resetSVGClipId;
exports.default = _default;

var _vegaUtil = require("vega-util");

var clip_id = 1;

function resetSVGClipId() {
  clip_id = 1;
}

function _default(renderer, item, size) {
  var clip = item.clip,
      defs = renderer._defs,
      id = item.clip_id || (item.clip_id = 'clip' + clip_id++),
      c = defs.clipping[id] || (defs.clipping[id] = {
    id: id
  });

  if ((0, _vegaUtil.isFunction)(clip)) {
    c.path = clip(null);
  } else {
    c.width = size.width || 0;
    c.height = size.height || 0;
  }

  return 'url(#' + id + ')';
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-scenegraph/src/marks/group.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _shapes = require("../path/shapes");

var _boundStroke = _interopRequireDefault(require("../bound/boundStroke"));

var _intersect = require("../util/intersect");

var _visit = require("../util/visit");

var _stroke = _interopRequireDefault(require("../util/canvas/stroke"));

var _fill = _interopRequireDefault(require("../util/canvas/fill"));

var _pick = require("../util/canvas/pick");

var _clip = _interopRequireDefault(require("../util/svg/clip"));

var _transform = require("../util/svg/transform");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var StrokeOffset = 0.5;

function attr(emit, item) {
  emit('transform', (0, _transform.translateItem)(item));
}

function background(emit, item) {
  var offset = item.stroke ? StrokeOffset : 0;
  emit('class', 'background');
  emit('d', (0, _shapes.rectangle)(null, item, offset, offset));
}

function foreground(emit, item, renderer) {
  var url = item.clip ? (0, _clip.default)(renderer, item, item) : null;
  emit('clip-path', url);
}

function bound(bounds, group) {
  if (!group.clip && group.items) {
    var items = group.items;

    for (var j = 0, m = items.length; j < m; ++j) {
      bounds.union(items[j].bounds);
    }
  }

  if ((group.clip || group.width || group.height) && !group.noBound) {
    bounds.add(0, 0).add(group.width || 0, group.height || 0);
  }

  (0, _boundStroke.default)(bounds, group);
  return bounds.translate(group.x || 0, group.y || 0);
}

function backgroundPath(context, group) {
  var offset = group.stroke ? StrokeOffset : 0;
  context.beginPath();
  (0, _shapes.rectangle)(context, group, offset, offset);
}

var hitBackground = (0, _pick.hitPath)(backgroundPath);

function draw(context, scene, bounds) {
  var renderer = this;
  (0, _visit.visit)(scene, function (group) {
    var gx = group.x || 0,
        gy = group.y || 0,
        w = group.width || 0,
        h = group.height || 0,
        opacity; // setup graphics context

    context.save();
    context.translate(gx, gy); // draw group background

    if (group.stroke || group.fill) {
      opacity = group.opacity == null ? 1 : group.opacity;

      if (opacity > 0) {
        backgroundPath(context, group);

        if (group.fill && (0, _fill.default)(context, group, opacity)) {
          context.fill();
        }

        if (group.stroke && (0, _stroke.default)(context, group, opacity)) {
          context.stroke();
        }
      }
    } // set clip and bounds


    if (group.clip) {
      context.beginPath();
      context.rect(0, 0, w, h);
      context.clip();
    }

    if (bounds) bounds.translate(-gx, -gy); // draw group contents

    (0, _visit.visit)(group, function (item) {
      renderer.draw(context, item, bounds);
    }); // restore graphics context

    if (bounds) bounds.translate(gx, gy);
    context.restore();
  });
}

function pick(context, scene, x, y, gx, gy) {
  if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {
    return null;
  }

  var handler = this,
      cx = x * context.pixelRatio,
      cy = y * context.pixelRatio;
  return (0, _visit.pickVisit)(scene, function (group) {
    var hit, dx, dy, b; // first hit test against bounding box
    // if a group is clipped, that should be handled by the bounds check.

    b = group.bounds;
    if (b && !b.contains(gx, gy)) return; // passed bounds check, so test sub-groups

    dx = group.x || 0;
    dy = group.y || 0;
    context.save();
    context.translate(dx, dy);
    dx = gx - dx;
    dy = gy - dy; // hit test against contained marks

    hit = (0, _visit.pickVisit)(group, function (mark) {
      return pickMark(mark, dx, dy) ? handler.pick(mark, x, y, dx, dy) : null;
    }); // hit test against group background

    if (!hit && scene.interactive !== false && (group.fill || group.stroke) && hitBackground(context, group, cx, cy)) {
      hit = group;
    }

    context.restore();
    return hit || null;
  });
}

function pickMark(mark, x, y) {
  return (mark.interactive !== false || mark.marktype === 'group') && mark.bounds && mark.bounds.contains(x, y);
}

var _default = {
  type: 'group',
  tag: 'g',
  nested: false,
  attr: attr,
  bound: bound,
  draw: draw,
  pick: pick,
  isect: _intersect.intersectRect,
  background: background,
  foreground: foreground
};
exports.default = _default;
},{"../path/shapes":"node_modules/vega-scenegraph/src/path/shapes.js","../bound/boundStroke":"node_modules/vega-scenegraph/src/bound/boundStroke.js","../util/intersect":"node_modules/vega-scenegraph/src/util/intersect.js","../util/visit":"node_modules/vega-scenegraph/src/util/visit.js","../util/canvas/stroke":"node_modules/vega-scenegraph/src/util/canvas/stroke.js","../util/canvas/fill":"node_modules/vega-scenegraph/src/util/canvas/fill.js","../util/canvas/pick":"node_modules/vega-scenegraph/src/util/canvas/pick.js","../util/svg/clip":"node_modules/vega-scenegraph/src/util/svg/clip.js","../util/svg/transform":"node_modules/vega-scenegraph/src/util/svg/transform.js"}],"node_modules/vega-scenegraph/src/marks/image.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _visit = require("../util/visit");

var _pick = require("../util/canvas/pick");

var _transform = require("../util/svg/transform");

var _vegaUtil = require("vega-util");

function getImage(item, renderer) {
  var image = item.image;

  if (!image || image.url !== item.url) {
    image = {
      loaded: false,
      width: 0,
      height: 0
    };
    renderer.loadImage(item.url).then(function (image) {
      item.image = image;
      item.image.url = item.url;
    });
  }

  return image;
}

function imageXOffset(align, w) {
  return align === 'center' ? w / 2 : align === 'right' ? w : 0;
}

function imageYOffset(baseline, h) {
  return baseline === 'middle' ? h / 2 : baseline === 'bottom' ? h : 0;
}

function attr(emit, item, renderer) {
  var image = getImage(item, renderer),
      x = item.x || 0,
      y = item.y || 0,
      w = (item.width != null ? item.width : image.width) || 0,
      h = (item.height != null ? item.height : image.height) || 0,
      a = item.aspect === false ? 'none' : 'xMidYMid';
  x -= imageXOffset(item.align, w);
  y -= imageYOffset(item.baseline, h);
  emit('href', image.src || '', 'http://www.w3.org/1999/xlink', 'xlink:href');
  emit('transform', (0, _transform.translate)(x, y));
  emit('width', w);
  emit('height', h);
  emit('preserveAspectRatio', a);
}

function bound(bounds, item) {
  var image = item.image,
      x = item.x || 0,
      y = item.y || 0,
      w = (item.width != null ? item.width : image && image.width) || 0,
      h = (item.height != null ? item.height : image && image.height) || 0;
  x -= imageXOffset(item.align, w);
  y -= imageYOffset(item.baseline, h);
  return bounds.set(x, y, x + w, y + h);
}

function draw(context, scene, bounds) {
  var renderer = this;
  (0, _visit.visit)(scene, function (item) {
    if (bounds && !bounds.intersects(item.bounds)) return; // bounds check

    var image = getImage(item, renderer),
        x = item.x || 0,
        y = item.y || 0,
        w = (item.width != null ? item.width : image.width) || 0,
        h = (item.height != null ? item.height : image.height) || 0,
        opacity,
        ar0,
        ar1,
        t;
    x -= imageXOffset(item.align, w);
    y -= imageYOffset(item.baseline, h);

    if (item.aspect !== false) {
      ar0 = image.width / image.height;
      ar1 = item.width / item.height;

      if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {
        if (ar1 < ar0) {
          t = w / ar0;
          y += (h - t) / 2;
          h = t;
        } else {
          t = h * ar0;
          x += (w - t) / 2;
          w = t;
        }
      }
    }

    if (image.loaded) {
      context.globalAlpha = (opacity = item.opacity) != null ? opacity : 1;
      context.drawImage(image, x, y, w, h);
    }
  });
}

var _default = {
  type: 'image',
  tag: 'image',
  nested: false,
  attr: attr,
  bound: bound,
  draw: draw,
  pick: (0, _pick.pick)(),
  isect: _vegaUtil.truthy,
  // bounds check is sufficient
  get: getImage,
  xOffset: imageXOffset,
  yOffset: imageYOffset
};
exports.default = _default;
},{"../util/visit":"node_modules/vega-scenegraph/src/util/visit.js","../util/canvas/pick":"node_modules/vega-scenegraph/src/util/canvas/pick.js","../util/svg/transform":"node_modules/vega-scenegraph/src/util/svg/transform.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-scenegraph/src/marks/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _shapes = require("../path/shapes");

var _pickPath = require("../util/pickPath");

var _markMultiItemPath = _interopRequireDefault(require("./markMultiItemPath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _markMultiItemPath.default)('line', _shapes.line, _pickPath.pickLine);

exports.default = _default;
},{"../path/shapes":"node_modules/vega-scenegraph/src/path/shapes.js","../util/pickPath":"node_modules/vega-scenegraph/src/util/pickPath.js","./markMultiItemPath":"node_modules/vega-scenegraph/src/marks/markMultiItemPath.js"}],"node_modules/vega-scenegraph/src/marks/path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _boundStroke = _interopRequireDefault(require("../bound/boundStroke"));

var _boundContext = _interopRequireDefault(require("../bound/boundContext"));

var _parse = _interopRequireDefault(require("../path/parse"));

var _render = _interopRequireDefault(require("../path/render"));

var _intersect = require("../util/intersect");

var _draw = require("../util/canvas/draw");

var _pick = require("../util/canvas/pick");

var _transform = require("../util/svg/transform");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attr(emit, item) {
  emit('transform', (0, _transform.translateItem)(item));
  emit('d', item.path);
}

function path(context, item) {
  var path = item.path;
  if (path == null) return true;
  var cache = item.pathCache;

  if (!cache || cache.path !== path) {
    (item.pathCache = cache = (0, _parse.default)(path)).path = path;
  }

  (0, _render.default)(context, cache, item.x, item.y);
}

function bound(bounds, item) {
  return path((0, _boundContext.default)(bounds), item) ? bounds.set(0, 0, 0, 0) : (0, _boundStroke.default)(bounds, item);
}

var _default = {
  type: 'path',
  tag: 'path',
  nested: false,
  attr: attr,
  bound: bound,
  draw: (0, _draw.drawAll)(path),
  pick: (0, _pick.pickPath)(path),
  isect: (0, _intersect.intersectPath)(path)
};
exports.default = _default;
},{"../bound/boundStroke":"node_modules/vega-scenegraph/src/bound/boundStroke.js","../bound/boundContext":"node_modules/vega-scenegraph/src/bound/boundContext.js","../path/parse":"node_modules/vega-scenegraph/src/path/parse.js","../path/render":"node_modules/vega-scenegraph/src/path/render.js","../util/intersect":"node_modules/vega-scenegraph/src/util/intersect.js","../util/canvas/draw":"node_modules/vega-scenegraph/src/util/canvas/draw.js","../util/canvas/pick":"node_modules/vega-scenegraph/src/util/canvas/pick.js","../util/svg/transform":"node_modules/vega-scenegraph/src/util/svg/transform.js"}],"node_modules/vega-scenegraph/src/marks/rect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _boundStroke = _interopRequireDefault(require("../bound/boundStroke"));

var _shapes = require("../path/shapes");

var _intersect = require("../util/intersect");

var _draw = require("../util/canvas/draw");

var _pick = require("../util/canvas/pick");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attr(emit, item) {
  emit('d', (0, _shapes.rectangle)(null, item));
}

function bound(bounds, item) {
  var x, y;
  return (0, _boundStroke.default)(bounds.set(x = item.x || 0, y = item.y || 0, x + item.width || 0, y + item.height || 0), item);
}

function draw(context, item) {
  context.beginPath();
  (0, _shapes.rectangle)(context, item);
}

var _default = {
  type: 'rect',
  tag: 'path',
  nested: false,
  attr: attr,
  bound: bound,
  draw: (0, _draw.drawAll)(draw),
  pick: (0, _pick.pickPath)(draw),
  isect: _intersect.intersectRect
};
exports.default = _default;
},{"../bound/boundStroke":"node_modules/vega-scenegraph/src/bound/boundStroke.js","../path/shapes":"node_modules/vega-scenegraph/src/path/shapes.js","../util/intersect":"node_modules/vega-scenegraph/src/util/intersect.js","../util/canvas/draw":"node_modules/vega-scenegraph/src/util/canvas/draw.js","../util/canvas/pick":"node_modules/vega-scenegraph/src/util/canvas/pick.js"}],"node_modules/vega-scenegraph/src/marks/rule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _boundStroke = _interopRequireDefault(require("../bound/boundStroke"));

var _intersect = require("../util/intersect");

var _visit = require("../util/visit");

var _pick = require("../util/canvas/pick");

var _stroke = _interopRequireDefault(require("../util/canvas/stroke"));

var _transform = require("../util/svg/transform");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attr(emit, item) {
  emit('transform', (0, _transform.translateItem)(item));
  emit('x2', item.x2 != null ? item.x2 - (item.x || 0) : 0);
  emit('y2', item.y2 != null ? item.y2 - (item.y || 0) : 0);
}

function bound(bounds, item) {
  var x1, y1;
  return (0, _boundStroke.default)(bounds.set(x1 = item.x || 0, y1 = item.y || 0, item.x2 != null ? item.x2 : x1, item.y2 != null ? item.y2 : y1), item);
}

function path(context, item, opacity) {
  var x1, y1, x2, y2;

  if (item.stroke && (0, _stroke.default)(context, item, opacity)) {
    x1 = item.x || 0;
    y1 = item.y || 0;
    x2 = item.x2 != null ? item.x2 : x1;
    y2 = item.y2 != null ? item.y2 : y1;
    context.beginPath();
    context.moveTo(x1, y1);
    context.lineTo(x2, y2);
    return true;
  }

  return false;
}

function draw(context, scene, bounds) {
  (0, _visit.visit)(scene, function (item) {
    if (bounds && !bounds.intersects(item.bounds)) return; // bounds check

    var opacity = item.opacity == null ? 1 : item.opacity;

    if (opacity && path(context, item, opacity)) {
      context.stroke();
    }
  });
}

function hit(context, item, x, y) {
  if (!context.isPointInStroke) return false;
  return path(context, item, 1) && context.isPointInStroke(x, y);
}

var _default = {
  type: 'rule',
  tag: 'line',
  nested: false,
  attr: attr,
  bound: bound,
  draw: draw,
  pick: (0, _pick.pick)(hit),
  isect: _intersect.intersectRule
};
exports.default = _default;
},{"../bound/boundStroke":"node_modules/vega-scenegraph/src/bound/boundStroke.js","../util/intersect":"node_modules/vega-scenegraph/src/util/intersect.js","../util/visit":"node_modules/vega-scenegraph/src/util/visit.js","../util/canvas/pick":"node_modules/vega-scenegraph/src/util/canvas/pick.js","../util/canvas/stroke":"node_modules/vega-scenegraph/src/util/canvas/stroke.js","../util/svg/transform":"node_modules/vega-scenegraph/src/util/svg/transform.js"}],"node_modules/vega-scenegraph/src/marks/shape.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _shapes = require("../path/shapes");

var _markItemPath = _interopRequireDefault(require("./markItemPath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _markItemPath.default)('shape', _shapes.shape);

exports.default = _default;
},{"../path/shapes":"node_modules/vega-scenegraph/src/path/shapes.js","./markItemPath":"node_modules/vega-scenegraph/src/marks/markItemPath.js"}],"node_modules/vega-scenegraph/src/marks/symbol.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _shapes = require("../path/shapes");

var _intersect = require("../util/intersect");

var _markItemPath = _interopRequireDefault(require("./markItemPath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _markItemPath.default)('symbol', _shapes.symbol, _intersect.intersectPoint);

exports.default = _default;
},{"../path/shapes":"node_modules/vega-scenegraph/src/path/shapes.js","../util/intersect":"node_modules/vega-scenegraph/src/util/intersect.js","./markItemPath":"node_modules/vega-scenegraph/src/marks/markItemPath.js"}],"node_modules/vega-scenegraph/src/util/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fontSize = fontSize;
exports.textValue = textValue;
exports.truncate = truncate;
exports.fontFamily = fontFamily;
exports.font = font;
exports.offset = offset;
exports.textMetrics = void 0;

var _context = require("./canvas/context");

var currFontHeight;
var textMetrics = {
  height: fontSize,
  measureWidth: measureWidth,
  estimateWidth: estimateWidth,
  width: estimateWidth,
  canvas: useCanvas
};
exports.textMetrics = textMetrics;
useCanvas(true); // make dumb, simple estimate if no canvas is available

function estimateWidth(item) {
  currFontHeight = fontSize(item);
  return estimate(textValue(item));
}

function estimate(text) {
  return ~~(0.8 * text.length * currFontHeight);
} // measure text width if canvas is available


function measureWidth(item) {
  return fontSize(item) <= 0 ? 0 : (_context.context.font = font(item), measure(textValue(item)));
}

function measure(text) {
  return _context.context.measureText(text).width;
}

function fontSize(item) {
  return item.fontSize != null ? item.fontSize : 11;
}

function useCanvas(use) {
  textMetrics.width = use && _context.context ? measureWidth : estimateWidth;
}

function textValue(item) {
  var s = item.text;

  if (s == null) {
    return '';
  } else {
    return item.limit > 0 ? truncate(item) : s + '';
  }
}

function truncate(item) {
  var limit = +item.limit,
      text = item.text + '',
      width;

  if (textMetrics.width === measureWidth) {
    // we are using canvas
    _context.context.font = font(item);
    width = measure;
  } else {
    // we are relying on estimates
    currFontHeight = fontSize(item);
    width = estimate;
  }

  if (width(text) < limit) return text;
  var ellipsis = item.ellipsis || '\u2026',
      rtl = item.dir === 'rtl',
      lo = 0,
      hi = text.length,
      mid;
  limit -= width(ellipsis);

  if (rtl) {
    while (lo < hi) {
      mid = lo + hi >>> 1;
      if (width(text.slice(mid)) > limit) lo = mid + 1;else hi = mid;
    }

    return ellipsis + text.slice(lo);
  } else {
    while (lo < hi) {
      mid = 1 + (lo + hi >>> 1);
      if (width(text.slice(0, mid)) < limit) lo = mid;else hi = mid - 1;
    }

    return text.slice(0, lo) + ellipsis;
  }
}

function fontFamily(item, quote) {
  var font = item.font;
  return (quote && font ? String(font).replace(/"/g, '\'') : font) || 'sans-serif';
}

function font(item, quote) {
  return '' + (item.fontStyle ? item.fontStyle + ' ' : '') + (item.fontVariant ? item.fontVariant + ' ' : '') + (item.fontWeight ? item.fontWeight + ' ' : '') + fontSize(item) + 'px ' + fontFamily(item, quote);
}

function offset(item) {
  // perform our own font baseline calculation
  // why? not all browsers support SVG 1.1 'alignment-baseline' :(
  var baseline = item.baseline,
      h = fontSize(item);
  return Math.round(baseline === 'top' ? 0.79 * h : baseline === 'middle' ? 0.30 * h : baseline === 'bottom' ? -0.21 * h : 0);
}
},{"./canvas/context":"node_modules/vega-scenegraph/src/util/canvas/context.js"}],"node_modules/vega-scenegraph/src/marks/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Bounds = _interopRequireDefault(require("../Bounds"));

var _constants = require("../util/constants");

var _text = require("../util/text");

var _intersect = require("../util/intersect");

var _visit = require("../util/visit");

var _fill = _interopRequireDefault(require("../util/canvas/fill"));

var _pick = require("../util/canvas/pick");

var _stroke = _interopRequireDefault(require("../util/canvas/stroke"));

var _transform = require("../util/svg/transform");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var textAlign = {
  'left': 'start',
  'center': 'middle',
  'right': 'end'
};
var tempBounds = new _Bounds.default();

function anchorPoint(item) {
  var x = item.x || 0,
      y = item.y || 0,
      r = item.radius || 0,
      t;

  if (r) {
    t = (item.theta || 0) - _constants.HalfPi;
    x += r * Math.cos(t);
    y += r * Math.sin(t);
  }

  tempBounds.x1 = x;
  tempBounds.y1 = y;
  return tempBounds;
}

function attr(emit, item) {
  var dx = item.dx || 0,
      dy = (item.dy || 0) + (0, _text.offset)(item),
      p = anchorPoint(item),
      x = p.x1,
      y = p.y1,
      a = item.angle || 0,
      t;
  emit('text-anchor', textAlign[item.align] || 'start');

  if (a) {
    t = (0, _transform.translate)(x, y) + ' ' + (0, _transform.rotate)(a);
    if (dx || dy) t += ' ' + (0, _transform.translate)(dx, dy);
  } else {
    t = (0, _transform.translate)(x + dx, y + dy);
  }

  emit('transform', t);
}

function bound(bounds, item, mode) {
  var h = _text.textMetrics.height(item),
      a = item.align,
      p = anchorPoint(item),
      x = p.x1,
      y = p.y1,
      dx = item.dx || 0,
      dy = (item.dy || 0) + (0, _text.offset)(item) - Math.round(0.8 * h),
      // use 4/5 offset
  w; // horizontal alignment


  w = _text.textMetrics.width(item);

  if (a === 'center') {
    dx -= w / 2;
  } else if (a === 'right') {
    dx -= w;
  } else {// left by default, do nothing
  }

  bounds.set(dx += x, dy += y, dx + w, dy + h);

  if (item.angle && !mode) {
    bounds.rotate(item.angle * _constants.DegToRad, x, y);
  } else if (mode === 2) {
    return bounds.rotatedPoints(item.angle * _constants.DegToRad, x, y);
  }

  return bounds;
}

function draw(context, scene, bounds) {
  (0, _visit.visit)(scene, function (item) {
    var opacity, p, x, y, str;
    if (bounds && !bounds.intersects(item.bounds)) return; // bounds check

    if (!(str = (0, _text.textValue)(item))) return; // get text string

    opacity = item.opacity == null ? 1 : item.opacity;
    if (opacity === 0 || item.fontSize <= 0) return;
    context.font = (0, _text.font)(item);
    context.textAlign = item.align || 'left';
    p = anchorPoint(item);
    x = p.x1, y = p.y1;

    if (item.angle) {
      context.save();
      context.translate(x, y);
      context.rotate(item.angle * _constants.DegToRad);
      x = y = 0; // reset x, y
    }

    x += item.dx || 0;
    y += (item.dy || 0) + (0, _text.offset)(item);

    if (item.fill && (0, _fill.default)(context, item, opacity)) {
      context.fillText(str, x, y);
    }

    if (item.stroke && (0, _stroke.default)(context, item, opacity)) {
      context.strokeText(str, x, y);
    }

    if (item.angle) context.restore();
  });
}

function hit(context, item, x, y, gx, gy) {
  if (item.fontSize <= 0) return false;
  if (!item.angle) return true; // bounds sufficient if no rotation
  // project point into space of unrotated bounds

  var p = anchorPoint(item),
      ax = p.x1,
      ay = p.y1,
      b = bound(tempBounds, item, 1),
      a = -item.angle * _constants.DegToRad,
      cos = Math.cos(a),
      sin = Math.sin(a),
      px = cos * gx - sin * gy + (ax - cos * ax + sin * ay),
      py = sin * gx + cos * gy + (ay - sin * ax - cos * ay);
  return b.contains(px, py);
}

function intersectText(item, box) {
  var p = bound(tempBounds, item, 2);
  return (0, _intersect.intersectBoxLine)(box, p[0], p[1], p[2], p[3]) || (0, _intersect.intersectBoxLine)(box, p[0], p[1], p[4], p[5]) || (0, _intersect.intersectBoxLine)(box, p[4], p[5], p[6], p[7]) || (0, _intersect.intersectBoxLine)(box, p[2], p[3], p[6], p[7]);
}

var _default = {
  type: 'text',
  tag: 'text',
  nested: false,
  attr: attr,
  bound: bound,
  draw: draw,
  pick: (0, _pick.pick)(hit),
  isect: intersectText
};
exports.default = _default;
},{"../Bounds":"node_modules/vega-scenegraph/src/Bounds.js","../util/constants":"node_modules/vega-scenegraph/src/util/constants.js","../util/text":"node_modules/vega-scenegraph/src/util/text.js","../util/intersect":"node_modules/vega-scenegraph/src/util/intersect.js","../util/visit":"node_modules/vega-scenegraph/src/util/visit.js","../util/canvas/fill":"node_modules/vega-scenegraph/src/util/canvas/fill.js","../util/canvas/pick":"node_modules/vega-scenegraph/src/util/canvas/pick.js","../util/canvas/stroke":"node_modules/vega-scenegraph/src/util/canvas/stroke.js","../util/svg/transform":"node_modules/vega-scenegraph/src/util/svg/transform.js"}],"node_modules/vega-scenegraph/src/marks/trail.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _shapes = require("../path/shapes");

var _pickPath = require("../util/pickPath");

var _markMultiItemPath = _interopRequireDefault(require("./markMultiItemPath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _markMultiItemPath.default)('trail', _shapes.trail, _pickPath.pickTrail);

exports.default = _default;
},{"../path/shapes":"node_modules/vega-scenegraph/src/path/shapes.js","../util/pickPath":"node_modules/vega-scenegraph/src/util/pickPath.js","./markMultiItemPath":"node_modules/vega-scenegraph/src/marks/markMultiItemPath.js"}],"node_modules/vega-scenegraph/src/marks/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _arc = _interopRequireDefault(require("./arc"));

var _area = _interopRequireDefault(require("./area"));

var _group = _interopRequireDefault(require("./group"));

var _image = _interopRequireDefault(require("./image"));

var _line = _interopRequireDefault(require("./line"));

var _path = _interopRequireDefault(require("./path"));

var _rect = _interopRequireDefault(require("./rect"));

var _rule = _interopRequireDefault(require("./rule"));

var _shape = _interopRequireDefault(require("./shape"));

var _symbol = _interopRequireDefault(require("./symbol"));

var _text = _interopRequireDefault(require("./text"));

var _trail = _interopRequireDefault(require("./trail"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  arc: _arc.default,
  area: _area.default,
  group: _group.default,
  image: _image.default,
  line: _line.default,
  path: _path.default,
  rect: _rect.default,
  rule: _rule.default,
  shape: _shape.default,
  symbol: _symbol.default,
  text: _text.default,
  trail: _trail.default
};
exports.default = _default;
},{"./arc":"node_modules/vega-scenegraph/src/marks/arc.js","./area":"node_modules/vega-scenegraph/src/marks/area.js","./group":"node_modules/vega-scenegraph/src/marks/group.js","./image":"node_modules/vega-scenegraph/src/marks/image.js","./line":"node_modules/vega-scenegraph/src/marks/line.js","./path":"node_modules/vega-scenegraph/src/marks/path.js","./rect":"node_modules/vega-scenegraph/src/marks/rect.js","./rule":"node_modules/vega-scenegraph/src/marks/rule.js","./shape":"node_modules/vega-scenegraph/src/marks/shape.js","./symbol":"node_modules/vega-scenegraph/src/marks/symbol.js","./text":"node_modules/vega-scenegraph/src/marks/text.js","./trail":"node_modules/vega-scenegraph/src/marks/trail.js"}],"node_modules/vega-scenegraph/src/bound/boundItem.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _Bounds = _interopRequireDefault(require("../Bounds"));

var _index = _interopRequireDefault(require("../marks/index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(item, func, opt) {
  var type = _index.default[item.mark.marktype],
      bound = func || type.bound;
  if (type.nested) item = item.mark;
  return bound(item.bounds || (item.bounds = new _Bounds.default()), item, opt);
}
},{"../Bounds":"node_modules/vega-scenegraph/src/Bounds.js","../marks/index":"node_modules/vega-scenegraph/src/marks/index.js"}],"node_modules/vega-scenegraph/src/bound/boundMark.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _Bounds = _interopRequireDefault(require("../Bounds"));

var _boundItem = _interopRequireDefault(require("./boundItem"));

var _index = _interopRequireDefault(require("../marks/index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DUMMY = {
  mark: null
};

function _default(mark, bounds, opt) {
  var type = _index.default[mark.marktype],
      bound = type.bound,
      items = mark.items,
      hasItems = items && items.length,
      i,
      n,
      item,
      b;

  if (type.nested) {
    if (hasItems) {
      item = items[0];
    } else {
      // no items, fake it
      DUMMY.mark = mark;
      item = DUMMY;
    }

    b = (0, _boundItem.default)(item, bound, opt);
    bounds = bounds && bounds.union(b) || b;
    return bounds;
  }

  bounds = bounds || mark.bounds && mark.bounds.clear() || new _Bounds.default();

  if (hasItems) {
    for (i = 0, n = items.length; i < n; ++i) {
      bounds.union((0, _boundItem.default)(items[i], bound, opt));
    }
  }

  return mark.bounds = bounds;
}
},{"../Bounds":"node_modules/vega-scenegraph/src/Bounds.js","./boundItem":"node_modules/vega-scenegraph/src/bound/boundItem.js","../marks/index":"node_modules/vega-scenegraph/src/marks/index.js"}],"node_modules/vega-scenegraph/src/util/serialize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sceneToJSON = sceneToJSON;
exports.sceneFromJSON = sceneFromJSON;

var _boundMark = _interopRequireDefault(require("../bound/boundMark"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var keys = ['marktype', 'name', 'role', 'interactive', 'clip', 'items', 'zindex', 'x', 'y', 'width', 'height', 'align', 'baseline', // layout
'fill', 'fillOpacity', 'opacity', // fill
'stroke', 'strokeOpacity', 'strokeWidth', 'strokeCap', // stroke
'strokeDash', 'strokeDashOffset', // stroke dash
'startAngle', 'endAngle', 'innerRadius', 'outerRadius', // arc
'cornerRadius', 'padAngle', // arc, rect
'interpolate', 'tension', 'orient', 'defined', // area, line
'url', // image
'path', // path
'x2', 'y2', // rule
'size', 'shape', // symbol
'text', 'angle', 'theta', 'radius', 'dx', 'dy', // text
'font', 'fontSize', 'fontWeight', 'fontStyle', 'fontVariant' // font
];

function sceneToJSON(scene, indent) {
  return JSON.stringify(scene, keys, indent);
}

function sceneFromJSON(json) {
  var scene = typeof json === 'string' ? JSON.parse(json) : json;
  return initialize(scene);
}

function initialize(scene) {
  var type = scene.marktype,
      items = scene.items,
      parent,
      i,
      n;

  if (items) {
    for (i = 0, n = items.length; i < n; ++i) {
      parent = type ? 'mark' : 'group';
      items[i][parent] = scene;
      if (items[i].zindex) items[i][parent].zdirty = true;
      if ('group' === (type || parent)) initialize(items[i]);
    }
  }

  if (type) (0, _boundMark.default)(scene);
  return scene;
}
},{"../bound/boundMark":"node_modules/vega-scenegraph/src/bound/boundMark.js"}],"node_modules/vega-scenegraph/src/Scenegraph.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Scenegraph;

var _Bounds = _interopRequireDefault(require("./Bounds"));

var _GroupItem = _interopRequireDefault(require("./GroupItem"));

var _serialize = require("./util/serialize");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Scenegraph(scene) {
  if (arguments.length) {
    this.root = (0, _serialize.sceneFromJSON)(scene);
  } else {
    this.root = createMark({
      marktype: 'group',
      name: 'root',
      role: 'frame'
    });
    this.root.items = [new _GroupItem.default(this.root)];
  }
}

var prototype = Scenegraph.prototype;

prototype.toJSON = function (indent) {
  return (0, _serialize.sceneToJSON)(this.root, indent || 0);
};

prototype.mark = function (markdef, group, index) {
  group = group || this.root.items[0];
  var mark = createMark(markdef, group);
  group.items[index] = mark;
  if (mark.zindex) mark.group.zdirty = true;
  return mark;
};

function createMark(def, group) {
  return {
    bounds: new _Bounds.default(),
    clip: !!def.clip,
    group: group,
    interactive: def.interactive === false ? false : true,
    items: [],
    marktype: def.marktype,
    name: def.name || undefined,
    role: def.role || undefined,
    zindex: def.zindex || 0
  };
}
},{"./Bounds":"node_modules/vega-scenegraph/src/Bounds.js","./GroupItem":"node_modules/vega-scenegraph/src/GroupItem.js","./util/serialize":"node_modules/vega-scenegraph/src/util/serialize.js"}],"node_modules/vega-scenegraph/src/util/dom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.domCreate = domCreate;
exports.domFind = domFind;
exports.domChild = domChild;
exports.domClear = domClear;
exports.cssClass = cssClass;

// create a new DOM element
function domCreate(doc, tag, ns) {
  if (!doc && typeof document !== 'undefined' && document.createElement) {
    doc = document;
  }

  return doc ? ns ? doc.createElementNS(ns, tag) : doc.createElement(tag) : null;
} // find first child element with matching tag


function domFind(el, tag) {
  tag = tag.toLowerCase();
  var nodes = el.childNodes,
      i = 0,
      n = nodes.length;

  for (; i < n; ++i) if (nodes[i].tagName.toLowerCase() === tag) {
    return nodes[i];
  }
} // retrieve child element at given index
// create & insert if doesn't exist or if tags do not match


function domChild(el, index, tag, ns) {
  var a = el.childNodes[index],
      b;

  if (!a || a.tagName.toLowerCase() !== tag.toLowerCase()) {
    b = a || null;
    a = domCreate(el.ownerDocument, tag, ns);
    el.insertBefore(a, b);
  }

  return a;
} // remove all child elements at or above the given index


function domClear(el, index) {
  var nodes = el.childNodes,
      curr = nodes.length;

  while (curr > index) el.removeChild(nodes[--curr]);

  return el;
} // generate css class name for mark


function cssClass(mark) {
  return 'mark-' + mark.marktype + (mark.role ? ' role-' + mark.role : '') + (mark.name ? ' ' + mark.name : '');
}
},{}],"node_modules/vega-scenegraph/src/util/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(event, el) {
  var rect = el.getBoundingClientRect();
  return [event.clientX - rect.left - (el.clientLeft || 0), event.clientY - rect.top - (el.clientTop || 0)];
}
},{}],"node_modules/vega-scenegraph/src/util/resolveItem.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = _interopRequireDefault(require("../marks/index"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(item, event, el, origin) {
  var mark = item && item.mark,
      mdef,
      p;

  if (mark && (mdef = _index.default[mark.marktype]).tip) {
    p = (0, _point.default)(event, el);
    p[0] -= origin[0];
    p[1] -= origin[1];

    while (item = item.mark.group) {
      p[0] -= item.x || 0;
      p[1] -= item.y || 0;
    }

    item = mdef.tip(mark.items, p);
  }

  return item;
}
},{"../marks/index":"node_modules/vega-scenegraph/src/marks/index.js","./point":"node_modules/vega-scenegraph/src/util/point.js"}],"node_modules/vega-scenegraph/src/Handler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Handler;

var _dom = require("./util/dom");

var _resolveItem = _interopRequireDefault(require("./util/resolveItem"));

var _vegaLoader = require("vega-loader");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create a new Handler instance.
 * @param {object} [customLoader] - Optional loader instance for
 *   href URL sanitization. If not specified, a standard loader
 *   instance will be generated.
 * @param {function} [customTooltip] - Optional tooltip handler
 *   function for custom tooltip display.
 * @constructor
 */
function Handler(customLoader, customTooltip) {
  this._active = null;
  this._handlers = {};
  this._loader = customLoader || (0, _vegaLoader.loader)();
  this._tooltip = customTooltip || defaultTooltip;
} // The default tooltip display handler.
// Sets the HTML title attribute on the visualization container.


function defaultTooltip(handler, event, item, value) {
  handler.element().setAttribute('title', value || '');
}

var prototype = Handler.prototype;
/**
 * Initialize a new Handler instance.
 * @param {DOMElement} el - The containing DOM element for the display.
 * @param {Array<number>} origin - The origin of the display, in pixels.
 *   The coordinate system will be translated to this point.
 * @param {object} [obj] - Optional context object that should serve as
 *   the "this" context for event callbacks.
 * @return {Handler} - This handler instance.
 */

prototype.initialize = function (el, origin, obj) {
  this._el = el;
  this._obj = obj || null;
  return this.origin(origin);
};
/**
 * Returns the parent container element for a visualization.
 * @return {DOMElement} - The containing DOM element.
 */


prototype.element = function () {
  return this._el;
};
/**
 * Returns the scene element (e.g., canvas or SVG) of the visualization
 * Subclasses must override if the first child is not the scene element.
 * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
 */


prototype.canvas = function () {
  return this._el && this._el.firstChild;
};
/**
 * Get / set the origin coordinates of the visualization.
 */


prototype.origin = function (origin) {
  if (arguments.length) {
    this._origin = origin || [0, 0];
    return this;
  } else {
    return this._origin.slice();
  }
};
/**
 * Get / set the scenegraph root.
 */


prototype.scene = function (scene) {
  if (!arguments.length) return this._scene;
  this._scene = scene;
  return this;
};
/**
 * Add an event handler. Subclasses should override this method.
 */


prototype.on = function ()
/*type, handler*/
{};
/**
 * Remove an event handler. Subclasses should override this method.
 */


prototype.off = function ()
/*type, handler*/
{};
/**
 * Utility method for finding the array index of an event handler.
 * @param {Array} h - An array of registered event handlers.
 * @param {string} type - The event type.
 * @param {function} handler - The event handler instance to find.
 * @return {number} - The handler's array index or -1 if not registered.
 */


prototype._handlerIndex = function (h, type, handler) {
  for (var i = h ? h.length : 0; --i >= 0;) {
    if (h[i].type === type && (!handler || h[i].handler === handler)) {
      return i;
    }
  }

  return -1;
};
/**
 * Returns an array with registered event handlers.
 * @param {string} [type] - The event type to query. Any annotations
 *   are ignored; for example, for the argument "click.foo", ".foo" will
 *   be ignored and the method returns all "click" handlers. If type is
 *   null or unspecified, this method returns handlers for all types.
 * @return {Array} - A new array containing all registered event handlers.
 */


prototype.handlers = function (type) {
  var h = this._handlers,
      a = [],
      k;

  if (type) {
    a.push.apply(a, h[this.eventName(type)]);
  } else {
    for (k in h) {
      a.push.apply(a, h[k]);
    }
  }

  return a;
};
/**
 * Parses an event name string to return the specific event type.
 * For example, given "click.foo" returns "click"
 * @param {string} name - The input event type string.
 * @return {string} - A string with the event type only.
 */


prototype.eventName = function (name) {
  var i = name.indexOf('.');
  return i < 0 ? name : name.slice(0, i);
};
/**
 * Handle hyperlink navigation in response to an item.href value.
 * @param {Event} event - The event triggering hyperlink navigation.
 * @param {Item} item - The scenegraph item.
 * @param {string} href - The URL to navigate to.
 */


prototype.handleHref = function (event, item, href) {
  this._loader.sanitize(href, {
    context: 'href'
  }).then(function (opt) {
    var e = new MouseEvent(event.type, event),
        a = (0, _dom.domCreate)(null, 'a');

    for (var name in opt) a.setAttribute(name, opt[name]);

    a.dispatchEvent(e);
  }).catch(function () {
    /* do nothing */
  });
};
/**
 * Handle tooltip display in response to an item.tooltip value.
 * @param {Event} event - The event triggering tooltip display.
 * @param {Item} item - The scenegraph item.
 * @param {boolean} show - A boolean flag indicating whether
 *   to show or hide a tooltip for the given item.
 */


prototype.handleTooltip = function (event, item, show) {
  if (item && item.tooltip != null) {
    item = (0, _resolveItem.default)(item, event, this.canvas(), this._origin);
    var value = show && item && item.tooltip || null;

    this._tooltip.call(this._obj, this, event, item, value);
  }
};
/**
 * Returns the size of a scenegraph item and its position relative
 * to the viewport.
 * @param {Item} item - The scenegraph item.
 * @return {object} - A bounding box object (compatible with the
 *   DOMRect type) consisting of x, y, width, heigh, top, left,
 *   right, and bottom properties.
 */


prototype.getItemBoundingClientRect = function (item) {
  if (!(el = this.canvas())) return;
  var el,
      rect = el.getBoundingClientRect(),
      origin = this._origin,
      itemBounds = item.bounds,
      x = itemBounds.x1 + origin[0] + rect.left,
      y = itemBounds.y1 + origin[1] + rect.top,
      w = itemBounds.width(),
      h = itemBounds.height(); // translate coordinate for each parent group

  while (item.mark && (item = item.mark.group)) {
    x += item.x || 0;
    y += item.y || 0;
  } // return DOMRect-compatible bounding box


  return {
    x: x,
    y: y,
    width: w,
    height: h,
    left: x,
    top: y,
    right: x + w,
    bottom: y + h
  };
};
},{"./util/dom":"node_modules/vega-scenegraph/src/util/dom.js","./util/resolveItem":"node_modules/vega-scenegraph/src/util/resolveItem.js","vega-loader":"node_modules/vega-loader/index.browser.js"}],"node_modules/vega-scenegraph/src/Renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Renderer;

var _ResourceLoader = _interopRequireDefault(require("./ResourceLoader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create a new Renderer instance.
 * @param {object} [loader] - Optional loader instance for
 *   image and href URL sanitization. If not specified, a
 *   standard loader instance will be generated.
 * @constructor
 */
function Renderer(loader) {
  this._el = null;
  this._bgcolor = null;
  this._loader = new _ResourceLoader.default(loader);
}

var prototype = Renderer.prototype;
/**
 * Initialize a new Renderer instance.
 * @param {DOMElement} el - The containing DOM element for the display.
 * @param {number} width - The coordinate width of the display, in pixels.
 * @param {number} height - The coordinate height of the display, in pixels.
 * @param {Array<number>} origin - The origin of the display, in pixels.
 *   The coordinate system will be translated to this point.
 * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
 *   the width and height to determine the final pixel size.
 * @return {Renderer} - This renderer instance.
 */

prototype.initialize = function (el, width, height, origin, scaleFactor) {
  this._el = el;
  return this.resize(width, height, origin, scaleFactor);
};
/**
 * Returns the parent container element for a visualization.
 * @return {DOMElement} - The containing DOM element.
 */


prototype.element = function () {
  return this._el;
};
/**
 * Returns the scene element (e.g., canvas or SVG) of the visualization
 * Subclasses must override if the first child is not the scene element.
 * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
 */


prototype.canvas = function () {
  return this._el && this._el.firstChild;
};
/**
 * Get / set the background color.
 */


prototype.background = function (bgcolor) {
  if (arguments.length === 0) return this._bgcolor;
  this._bgcolor = bgcolor;
  return this;
};
/**
 * Resize the display.
 * @param {number} width - The new coordinate width of the display, in pixels.
 * @param {number} height - The new coordinate height of the display, in pixels.
 * @param {Array<number>} origin - The new origin of the display, in pixels.
 *   The coordinate system will be translated to this point.
 * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
 *   the width and height to determine the final pixel size.
 * @return {Renderer} - This renderer instance;
 */


prototype.resize = function (width, height, origin, scaleFactor) {
  this._width = width;
  this._height = height;
  this._origin = origin || [0, 0];
  this._scale = scaleFactor || 1;
  return this;
};
/**
 * Report a dirty item whose bounds should be redrawn.
 * This base class method does nothing. Subclasses that perform
 * incremental should implement this method.
 * @param {Item} item - The dirty item whose bounds should be redrawn.
 */


prototype.dirty = function ()
/*item*/
{};
/**
 * Render an input scenegraph, potentially with a set of dirty items.
 * This method will perform an immediate rendering with available resources.
 * The renderer may also need to perform image loading to perform a complete
 * render. This process can lead to asynchronous re-rendering of the scene
 * after this method returns. To receive notification when rendering is
 * complete, use the renderAsync method instead.
 * @param {object} scene - The root mark of a scenegraph to render.
 * @return {Renderer} - This renderer instance.
 */


prototype.render = function (scene) {
  var r = this; // bind arguments into a render call, and cache it
  // this function may be subsequently called for async redraw

  r._call = function () {
    r._render(scene);
  }; // invoke the renderer


  r._call(); // clear the cached call for garbage collection
  // async redraws will stash their own copy


  r._call = null;
  return r;
};
/**
 * Internal rendering method. Renderer subclasses should override this
 * method to actually perform rendering.
 * @param {object} scene - The root mark of a scenegraph to render.
 */


prototype._render = function ()
/*scene*/
{// subclasses to override
};
/**
 * Asynchronous rendering method. Similar to render, but returns a Promise
 * that resolves when all rendering is completed. Sometimes a renderer must
 * perform image loading to get a complete rendering. The returned
 * Promise will not resolve until this process completes.
 * @param {object} scene - The root mark of a scenegraph to render.
 * @return {Promise} - A Promise that resolves when rendering is complete.
 */


prototype.renderAsync = function (scene) {
  var r = this.render(scene);
  return this._ready ? this._ready.then(function () {
    return r;
  }) : Promise.resolve(r);
};
/**
 * Internal method for asynchronous resource loading.
 * Proxies method calls to the ImageLoader, and tracks loading
 * progress to invoke a re-render once complete.
 * @param {string} method - The method name to invoke on the ImageLoader.
 * @param {string} uri - The URI for the requested resource.
 * @return {Promise} - A Promise that resolves to the requested resource.
 */


prototype._load = function (method, uri) {
  var r = this,
      p = r._loader[method](uri);

  if (!r._ready) {
    // re-render the scene when loading completes
    var call = r._call;
    r._ready = r._loader.ready().then(function (redraw) {
      if (redraw) call();
      r._ready = null;
    });
  }

  return p;
};
/**
 * Sanitize a URL to include as a hyperlink in the rendered scene.
 * This method proxies a call to ImageLoader.sanitizeURL, but also tracks
 * image loading progress and invokes a re-render once complete.
 * @param {string} uri - The URI string to sanitize.
 * @return {Promise} - A Promise that resolves to the sanitized URL.
 */


prototype.sanitizeURL = function (uri) {
  return this._load('sanitizeURL', uri);
};
/**
 * Requests an image to include in the rendered scene.
 * This method proxies a call to ImageLoader.loadImage, but also tracks
 * image loading progress and invokes a re-render once complete.
 * @param {string} uri - The URI string of the image.
 * @return {Promise} - A Promise that resolves to the loaded Image.
 */


prototype.loadImage = function (uri) {
  return this._load('loadImage', uri);
};
},{"./ResourceLoader":"node_modules/vega-scenegraph/src/ResourceLoader.js"}],"node_modules/vega-scenegraph/src/util/events.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HrefEvent = exports.TooltipHideEvent = exports.TooltipShowEvent = exports.Events = void 0;
var Events = ['keydown', 'keypress', 'keyup', 'dragenter', 'dragleave', 'dragover', 'mousedown', 'mouseup', 'mousemove', 'mouseout', 'mouseover', 'click', 'dblclick', 'wheel', 'mousewheel', 'touchstart', 'touchmove', 'touchend'];
exports.Events = Events;
var TooltipShowEvent = 'mousemove';
exports.TooltipShowEvent = TooltipShowEvent;
var TooltipHideEvent = 'mouseout';
exports.TooltipHideEvent = TooltipHideEvent;
var HrefEvent = 'click';
exports.HrefEvent = HrefEvent;
},{}],"node_modules/vega-scenegraph/src/CanvasHandler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CanvasHandler;

var _Handler = _interopRequireDefault(require("./Handler"));

var _index = _interopRequireDefault(require("./marks/index"));

var _events = require("./util/events");

var _point = _interopRequireDefault(require("./util/point"));

var _dom = require("./util/dom");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CanvasHandler(loader, tooltip) {
  _Handler.default.call(this, loader, tooltip);

  this._down = null;
  this._touch = null;
  this._first = true;
}

var prototype = (0, _vegaUtil.inherits)(CanvasHandler, _Handler.default);

prototype.initialize = function (el, origin, obj) {
  // add event listeners
  var canvas = this._canvas = el && (0, _dom.domFind)(el, 'canvas');

  if (canvas) {
    var that = this;
    this.events.forEach(function (type) {
      canvas.addEventListener(type, function (evt) {
        if (prototype[type]) {
          prototype[type].call(that, evt);
        } else {
          that.fire(type, evt);
        }
      });
    });
  }

  return _Handler.default.prototype.initialize.call(this, el, origin, obj);
}; // return the backing canvas instance


prototype.canvas = function () {
  return this._canvas;
}; // retrieve the current canvas context


prototype.context = function () {
  return this._canvas.getContext('2d');
}; // supported events


prototype.events = _events.Events; // to keep old versions of firefox happy

prototype.DOMMouseScroll = function (evt) {
  this.fire('mousewheel', evt);
};

function move(moveEvent, overEvent, outEvent) {
  return function (evt) {
    var a = this._active,
        p = this.pickEvent(evt);

    if (p === a) {
      // active item and picked item are the same
      this.fire(moveEvent, evt); // fire move
    } else {
      // active item and picked item are different
      if (!a || !a.exit) {
        // fire out for prior active item
        // suppress if active item was removed from scene
        this.fire(outEvent, evt);
      }

      this._active = p; // set new active item

      this.fire(overEvent, evt); // fire over for new active item

      this.fire(moveEvent, evt); // fire move for new active item
    }
  };
}

function inactive(type) {
  return function (evt) {
    this.fire(type, evt);
    this._active = null;
  };
}

prototype.mousemove = move('mousemove', 'mouseover', 'mouseout');
prototype.dragover = move('dragover', 'dragenter', 'dragleave');
prototype.mouseout = inactive('mouseout');
prototype.dragleave = inactive('dragleave');

prototype.mousedown = function (evt) {
  this._down = this._active;
  this.fire('mousedown', evt);
};

prototype.click = function (evt) {
  if (this._down === this._active) {
    this.fire('click', evt);
    this._down = null;
  }
};

prototype.touchstart = function (evt) {
  this._touch = this.pickEvent(evt.changedTouches[0]);

  if (this._first) {
    this._active = this._touch;
    this._first = false;
  }

  this.fire('touchstart', evt, true);
};

prototype.touchmove = function (evt) {
  this.fire('touchmove', evt, true);
};

prototype.touchend = function (evt) {
  this.fire('touchend', evt, true);
  this._touch = null;
}; // fire an event


prototype.fire = function (type, evt, touch) {
  var a = touch ? this._touch : this._active,
      h = this._handlers[type],
      i,
      len; // set event type relative to scenegraph items

  evt.vegaType = type; // handle hyperlinks and tooltips first

  if (type === _events.HrefEvent && a && a.href) {
    this.handleHref(evt, a, a.href);
  } else if (type === _events.TooltipShowEvent || type === _events.TooltipHideEvent) {
    this.handleTooltip(evt, a, type !== _events.TooltipHideEvent);
  } // invoke all registered handlers


  if (h) {
    for (i = 0, len = h.length; i < len; ++i) {
      h[i].handler.call(this._obj, evt, a);
    }
  }
}; // add an event handler


prototype.on = function (type, handler) {
  var name = this.eventName(type),
      h = this._handlers,
      i = this._handlerIndex(h[name], type, handler);

  if (i < 0) {
    (h[name] || (h[name] = [])).push({
      type: type,
      handler: handler
    });
  }

  return this;
}; // remove an event handler


prototype.off = function (type, handler) {
  var name = this.eventName(type),
      h = this._handlers[name],
      i = this._handlerIndex(h, type, handler);

  if (i >= 0) {
    h.splice(i, 1);
  }

  return this;
};

prototype.pickEvent = function (evt) {
  var p = (0, _point.default)(evt, this._canvas),
      o = this._origin;
  return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
}; // find the scenegraph item at the current mouse position
// x, y -- the absolute x, y mouse coordinates on the canvas element
// gx, gy -- the relative coordinates within the current group


prototype.pick = function (scene, x, y, gx, gy) {
  var g = this.context(),
      mark = _index.default[scene.marktype];
  return mark.pick.call(this, g, scene, x, y, gx, gy);
};
},{"./Handler":"node_modules/vega-scenegraph/src/Handler.js","./marks/index":"node_modules/vega-scenegraph/src/marks/index.js","./util/events":"node_modules/vega-scenegraph/src/util/events.js","./util/point":"node_modules/vega-scenegraph/src/util/point.js","./util/dom":"node_modules/vega-scenegraph/src/util/dom.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-scenegraph/src/util/canvas/clip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

function _default(context, scene) {
  var clip = scene.clip;
  context.save();
  context.beginPath();

  if ((0, _vegaUtil.isFunction)(clip)) {
    clip(context);
  } else {
    var group = scene.group;
    context.rect(0, 0, group.width || 0, group.height || 0);
  }

  context.clip();
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-scenegraph/src/util/canvas/resize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function devicePixelRatio() {
  return typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1;
}

var pixelRatio = devicePixelRatio();

function _default(canvas, width, height, origin, scaleFactor, opt) {
  var inDOM = typeof HTMLElement !== 'undefined' && canvas instanceof HTMLElement && canvas.parentNode != null;
  var context = canvas.getContext('2d'),
      ratio = inDOM ? pixelRatio : scaleFactor,
      key;
  canvas.width = width * ratio;
  canvas.height = height * ratio;

  for (key in opt) {
    context[key] = opt[key];
  }

  if (inDOM && ratio !== 1) {
    canvas.style.width = width + 'px';
    canvas.style.height = height + 'px';
  }

  context.pixelRatio = ratio;
  context.setTransform(ratio, 0, 0, ratio, ratio * origin[0], ratio * origin[1]);
  return canvas;
}
},{}],"node_modules/vega-scenegraph/src/CanvasRenderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CanvasRenderer;

var _Renderer = _interopRequireDefault(require("./Renderer"));

var _Bounds = _interopRequireDefault(require("./Bounds"));

var _index = _interopRequireDefault(require("./marks/index"));

var _dom = require("./util/dom");

var _clip = _interopRequireDefault(require("./util/canvas/clip"));

var _resize = _interopRequireDefault(require("./util/canvas/resize"));

var _vegaCanvas = require("vega-canvas");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CanvasRenderer(loader) {
  _Renderer.default.call(this, loader);

  this._redraw = false;
  this._dirty = new _Bounds.default();
}

var prototype = (0, _vegaUtil.inherits)(CanvasRenderer, _Renderer.default),
    base = _Renderer.default.prototype,
    tempBounds = new _Bounds.default();

prototype.initialize = function (el, width, height, origin, scaleFactor, options) {
  this._options = options;
  this._canvas = (0, _vegaCanvas.canvas)(1, 1, options && options.type); // instantiate a small canvas

  if (el) {
    (0, _dom.domClear)(el, 0).appendChild(this._canvas);

    this._canvas.setAttribute('class', 'marks');
  } // this method will invoke resize to size the canvas appropriately


  return base.initialize.call(this, el, width, height, origin, scaleFactor);
};

prototype.resize = function (width, height, origin, scaleFactor) {
  base.resize.call(this, width, height, origin, scaleFactor);
  (0, _resize.default)(this._canvas, this._width, this._height, this._origin, this._scale, this._options && this._options.context);
  this._redraw = true;
  return this;
};

prototype.canvas = function () {
  return this._canvas;
};

prototype.context = function () {
  return this._canvas ? this._canvas.getContext('2d') : null;
};

prototype.dirty = function (item) {
  var b = translate(item.bounds, item.mark.group);

  this._dirty.union(b);
};

function clipToBounds(g, b, origin) {
  // expand bounds by 1 pixel, then round to pixel boundaries
  b.expand(1).round(); // to avoid artifacts translate if origin has fractional pixels

  b.translate(-(origin[0] % 1), -(origin[1] % 1)); // set clipping path

  g.beginPath();
  g.rect(b.x1, b.y1, b.width(), b.height());
  g.clip();
  return b;
}

function translate(bounds, group) {
  if (group == null) return bounds;
  var b = tempBounds.clear().union(bounds);

  for (; group != null; group = group.mark.group) {
    b.translate(group.x || 0, group.y || 0);
  }

  return b;
}

prototype._render = function (scene) {
  var g = this.context(),
      o = this._origin,
      w = this._width,
      h = this._height,
      b = this._dirty; // setup

  g.save();

  if (this._redraw || b.empty()) {
    this._redraw = false;
    b = null;
  } else {
    b = clipToBounds(g, b, o);
  }

  this.clear(-o[0], -o[1], w, h); // render

  this.draw(g, scene, b); // takedown

  g.restore();

  this._dirty.clear();

  return this;
};

prototype.draw = function (ctx, scene, bounds) {
  var mark = _index.default[scene.marktype];
  if (scene.clip) (0, _clip.default)(ctx, scene);
  mark.draw.call(this, ctx, scene, bounds);
  if (scene.clip) ctx.restore();
};

prototype.clear = function (x, y, w, h) {
  var g = this.context();
  g.clearRect(x, y, w, h);

  if (this._bgcolor != null) {
    g.fillStyle = this._bgcolor;
    g.fillRect(x, y, w, h);
  }
};
},{"./Renderer":"node_modules/vega-scenegraph/src/Renderer.js","./Bounds":"node_modules/vega-scenegraph/src/Bounds.js","./marks/index":"node_modules/vega-scenegraph/src/marks/index.js","./util/dom":"node_modules/vega-scenegraph/src/util/dom.js","./util/canvas/clip":"node_modules/vega-scenegraph/src/util/canvas/clip.js","./util/canvas/resize":"node_modules/vega-scenegraph/src/util/canvas/resize.js","vega-canvas":"node_modules/vega-canvas/index.browser.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-scenegraph/src/SVGHandler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SVGHandler;

var _Handler = _interopRequireDefault(require("./Handler"));

var _dom = require("./util/dom");

var _events = require("./util/events");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SVGHandler(loader, tooltip) {
  _Handler.default.call(this, loader, tooltip);

  var h = this;
  h._hrefHandler = listener(h, function (evt, item) {
    if (item && item.href) h.handleHref(evt, item, item.href);
  });
  h._tooltipHandler = listener(h, function (evt, item) {
    h.handleTooltip(evt, item, evt.type !== _events.TooltipHideEvent);
  });
}

var prototype = (0, _vegaUtil.inherits)(SVGHandler, _Handler.default);

prototype.initialize = function (el, origin, obj) {
  var svg = this._svg;

  if (svg) {
    svg.removeEventListener(_events.HrefEvent, this._hrefHandler);
    svg.removeEventListener(_events.TooltipShowEvent, this._tooltipHandler);
    svg.removeEventListener(_events.TooltipHideEvent, this._tooltipHandler);
  }

  this._svg = svg = el && (0, _dom.domFind)(el, 'svg');

  if (svg) {
    svg.addEventListener(_events.HrefEvent, this._hrefHandler);
    svg.addEventListener(_events.TooltipShowEvent, this._tooltipHandler);
    svg.addEventListener(_events.TooltipHideEvent, this._tooltipHandler);
  }

  return _Handler.default.prototype.initialize.call(this, el, origin, obj);
};

prototype.canvas = function () {
  return this._svg;
}; // wrap an event listener for the SVG DOM


function listener(context, handler) {
  return function (evt) {
    var target = evt.target,
        item = target.__data__;
    evt.vegaType = evt.type;
    item = Array.isArray(item) ? item[0] : item;
    handler.call(context._obj, evt, item);
  };
} // add an event handler


prototype.on = function (type, handler) {
  var name = this.eventName(type),
      h = this._handlers,
      i = this._handlerIndex(h[name], type, handler);

  if (i < 0) {
    var x = {
      type: type,
      handler: handler,
      listener: listener(this, handler)
    };
    (h[name] || (h[name] = [])).push(x);

    if (this._svg) {
      this._svg.addEventListener(name, x.listener);
    }
  }

  return this;
}; // remove an event handler


prototype.off = function (type, handler) {
  var name = this.eventName(type),
      h = this._handlers[name],
      i = this._handlerIndex(h, type, handler);

  if (i >= 0) {
    if (this._svg) {
      this._svg.removeEventListener(name, h[i].listener);
    }

    h.splice(i, 1);
  }

  return this;
};
},{"./Handler":"node_modules/vega-scenegraph/src/Handler.js","./util/dom":"node_modules/vega-scenegraph/src/util/dom.js","./util/events":"node_modules/vega-scenegraph/src/util/events.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-scenegraph/src/util/tags.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openTag = openTag;
exports.closeTag = closeTag;

// generate string for an opening xml tag
// tag: the name of the xml tag
// attr: hash of attribute name-value pairs to include
// raw: additional raw string to include in tag markup
function openTag(tag, attr, raw) {
  var s = '<' + tag,
      key,
      val;

  if (attr) {
    for (key in attr) {
      val = attr[key];

      if (val != null) {
        s += ' ' + key + '="' + val + '"';
      }
    }
  }

  if (raw) s += ' ' + raw;
  return s + '>';
} // generate string for closing xml tag
// tag: the name of the xml tag


function closeTag(tag) {
  return '</' + tag + '>';
}
},{}],"node_modules/vega-scenegraph/src/util/svg/metadata.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  'version': '1.1',
  'xmlns': 'http://www.w3.org/2000/svg',
  'xmlns:xlink': 'http://www.w3.org/1999/xlink'
};
exports.default = _default;
},{}],"node_modules/vega-scenegraph/src/util/svg/styles.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.styleProperties = exports.styles = void 0;
var styles = {
  'fill': 'fill',
  'fillOpacity': 'fill-opacity',
  'stroke': 'stroke',
  'strokeOpacity': 'stroke-opacity',
  'strokeWidth': 'stroke-width',
  'strokeCap': 'stroke-linecap',
  'strokeJoin': 'stroke-linejoin',
  'strokeDash': 'stroke-dasharray',
  'strokeDashOffset': 'stroke-dashoffset',
  'strokeMiterLimit': 'stroke-miterlimit',
  'opacity': 'opacity'
};
exports.styles = styles;
var styleProperties = Object.keys(styles);
exports.styleProperties = styleProperties;
},{}],"node_modules/vega-scenegraph/src/SVGRenderer.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SVGRenderer;

var _Renderer = _interopRequireDefault(require("./Renderer"));

var _Gradient = require("./Gradient");

var _index = _interopRequireDefault(require("./marks/index"));

var _dom = require("./util/dom");

var _tags = require("./util/tags");

var _text = require("./util/text");

var _visit = require("./util/visit");

var _clip = _interopRequireDefault(require("./util/svg/clip"));

var _metadata = _interopRequireDefault(require("./util/svg/metadata"));

var _styles = require("./util/svg/styles");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ns = _metadata.default.xmlns;

function SVGRenderer(loader) {
  _Renderer.default.call(this, loader);

  this._dirtyID = 1;
  this._dirty = [];
  this._svg = null;
  this._root = null;
  this._defs = null;
}

var prototype = (0, _vegaUtil.inherits)(SVGRenderer, _Renderer.default);
var base = _Renderer.default.prototype;

prototype.initialize = function (el, width, height, padding) {
  if (el) {
    this._svg = (0, _dom.domChild)(el, 0, 'svg', ns);

    this._svg.setAttribute('class', 'marks');

    (0, _dom.domClear)(el, 1); // set the svg root group

    this._root = (0, _dom.domChild)(this._svg, 0, 'g', ns);
    (0, _dom.domClear)(this._svg, 1);
  } // create the svg definitions cache


  this._defs = {
    gradient: {},
    clipping: {}
  }; // set background color if defined

  this.background(this._bgcolor);
  return base.initialize.call(this, el, width, height, padding);
};

prototype.background = function (bgcolor) {
  if (arguments.length && this._svg) {
    this._svg.style.setProperty('background-color', bgcolor);
  }

  return base.background.apply(this, arguments);
};

prototype.resize = function (width, height, origin, scaleFactor) {
  base.resize.call(this, width, height, origin, scaleFactor);

  if (this._svg) {
    this._svg.setAttribute('width', this._width * this._scale);

    this._svg.setAttribute('height', this._height * this._scale);

    this._svg.setAttribute('viewBox', '0 0 ' + this._width + ' ' + this._height);

    this._root.setAttribute('transform', 'translate(' + this._origin + ')');
  }

  this._dirty = [];
  return this;
};

prototype.canvas = function () {
  return this._svg;
};

prototype.svg = function () {
  if (!this._svg) return null;
  var attr = {
    class: 'marks',
    width: this._width * this._scale,
    height: this._height * this._scale,
    viewBox: '0 0 ' + this._width + ' ' + this._height
  };

  for (var key in _metadata.default) {
    attr[key] = _metadata.default[key];
  }

  var bg = !this._bgcolor ? '' : (0, _tags.openTag)('rect', {
    width: this._width,
    height: this._height,
    style: 'fill: ' + this._bgcolor + ';'
  }) + (0, _tags.closeTag)('rect');
  return (0, _tags.openTag)('svg', attr) + bg + this._svg.innerHTML + (0, _tags.closeTag)('svg');
}; // -- Render entry point --


prototype._render = function (scene) {
  // perform spot updates and re-render markup
  if (this._dirtyCheck()) {
    if (this._dirtyAll) this._resetDefs();
    this.draw(this._root, scene);
    (0, _dom.domClear)(this._root, 1);
  }

  this.updateDefs();
  this._dirty = [];
  ++this._dirtyID;
  return this;
}; // -- Manage SVG definitions ('defs') block --


prototype.updateDefs = function () {
  var svg = this._svg,
      defs = this._defs,
      el = defs.el,
      index = 0,
      id;

  for (id in defs.gradient) {
    if (!el) defs.el = el = (0, _dom.domChild)(svg, 0, 'defs', ns);
    index = updateGradient(el, defs.gradient[id], index);
  }

  for (id in defs.clipping) {
    if (!el) defs.el = el = (0, _dom.domChild)(svg, 0, 'defs', ns);
    index = updateClipping(el, defs.clipping[id], index);
  } // clean-up


  if (el) {
    if (index === 0) {
      svg.removeChild(el);
      defs.el = null;
    } else {
      (0, _dom.domClear)(el, index);
    }
  }
};

function updateGradient(el, grad, index) {
  var i, n, stop;

  if (grad.gradient === 'radial') {
    // SVG radial gradients automatically transform to normalized bbox
    // coordinates, in a way that is cumbersome to replicate in canvas.
    // So we wrap the radial gradient in a pattern element, allowing us
    // to mantain a circular gradient that matches what canvas provides.
    var pt = (0, _dom.domChild)(el, index++, 'pattern', ns);
    pt.setAttribute('id', _Gradient.patternPrefix + grad.id);
    pt.setAttribute('viewBox', '0,0,1,1');
    pt.setAttribute('width', '100%');
    pt.setAttribute('height', '100%');
    pt.setAttribute('preserveAspectRatio', 'xMidYMid slice');
    pt = (0, _dom.domChild)(pt, 0, 'rect', ns);
    pt.setAttribute('width', '1');
    pt.setAttribute('height', '1');
    pt.setAttribute('fill', 'url(' + href() + '#' + grad.id + ')');
    el = (0, _dom.domChild)(el, index++, 'radialGradient', ns);
    el.setAttribute('id', grad.id);
    el.setAttribute('fx', grad.x1);
    el.setAttribute('fy', grad.y1);
    el.setAttribute('fr', grad.r1);
    el.setAttribute('cx', grad.x2);
    el.setAttribute('cy', grad.y2);
    el.setAttribute('r', grad.r2);
  } else {
    el = (0, _dom.domChild)(el, index++, 'linearGradient', ns);
    el.setAttribute('id', grad.id);
    el.setAttribute('x1', grad.x1);
    el.setAttribute('x2', grad.x2);
    el.setAttribute('y1', grad.y1);
    el.setAttribute('y2', grad.y2);
  }

  for (i = 0, n = grad.stops.length; i < n; ++i) {
    stop = (0, _dom.domChild)(el, i, 'stop', ns);
    stop.setAttribute('offset', grad.stops[i].offset);
    stop.setAttribute('stop-color', grad.stops[i].color);
  }

  (0, _dom.domClear)(el, i);
  return index;
}

function updateClipping(el, clip, index) {
  var mask;
  el = (0, _dom.domChild)(el, index, 'clipPath', ns);
  el.setAttribute('id', clip.id);

  if (clip.path) {
    mask = (0, _dom.domChild)(el, 0, 'path', ns);
    mask.setAttribute('d', clip.path);
  } else {
    mask = (0, _dom.domChild)(el, 0, 'rect', ns);
    mask.setAttribute('x', 0);
    mask.setAttribute('y', 0);
    mask.setAttribute('width', clip.width);
    mask.setAttribute('height', clip.height);
  }

  return index + 1;
}

prototype._resetDefs = function () {
  var def = this._defs;
  def.gradient = {};
  def.clipping = {};
}; // -- Manage rendering of items marked as dirty --


prototype.dirty = function (item) {
  if (item.dirty !== this._dirtyID) {
    item.dirty = this._dirtyID;

    this._dirty.push(item);
  }
};

prototype.isDirty = function (item) {
  return this._dirtyAll || !item._svg || item.dirty === this._dirtyID;
};

prototype._dirtyCheck = function () {
  this._dirtyAll = true;
  var items = this._dirty;
  if (!items.length) return true;
  var id = ++this._dirtyID,
      item,
      mark,
      type,
      mdef,
      i,
      n,
      o;

  for (i = 0, n = items.length; i < n; ++i) {
    item = items[i];
    mark = item.mark;

    if (mark.marktype !== type) {
      // memoize mark instance lookup
      type = mark.marktype;
      mdef = _index.default[type];
    }

    if (mark.zdirty && mark.dirty !== id) {
      this._dirtyAll = false;
      dirtyParents(item, id);
      mark.items.forEach(function (i) {
        i.dirty = id;
      });
    }

    if (mark.zdirty) continue; // handle in standard drawing pass

    if (item.exit) {
      // EXIT
      if (mdef.nested && mark.items.length) {
        // if nested mark with remaining points, update instead
        o = mark.items[0];
        if (o._svg) this._update(mdef, o._svg, o);
      } else if (item._svg) {
        // otherwise remove from DOM
        o = item._svg.parentNode;
        if (o) o.removeChild(item._svg);
      }

      item._svg = null;
      continue;
    }

    item = mdef.nested ? mark.items[0] : item;
    if (item._update === id) continue; // already visited

    if (!item._svg || !item._svg.ownerSVGElement) {
      // ENTER
      this._dirtyAll = false;
      dirtyParents(item, id);
    } else {
      // IN-PLACE UPDATE
      this._update(mdef, item._svg, item);
    }

    item._update = id;
  }

  return !this._dirtyAll;
};

function dirtyParents(item, id) {
  for (; item && item.dirty !== id; item = item.mark.group) {
    item.dirty = id;

    if (item.mark && item.mark.dirty !== id) {
      item.mark.dirty = id;
    } else return;
  }
} // -- Construct & maintain scenegraph to SVG mapping ---
// Draw a mark container.


prototype.draw = function (el, scene, prev) {
  if (!this.isDirty(scene)) return scene._svg;
  var renderer = this,
      svg = this._svg,
      mdef = _index.default[scene.marktype],
      events = scene.interactive === false ? 'none' : null,
      isGroup = mdef.tag === 'g',
      sibling = null,
      i = 0,
      parent;
  parent = bind(scene, el, prev, 'g', svg);
  parent.setAttribute('class', (0, _dom.cssClass)(scene));

  if (!isGroup) {
    parent.style.setProperty('pointer-events', events);
  }

  if (scene.clip) {
    parent.setAttribute('clip-path', (0, _clip.default)(renderer, scene, scene.group));
  } else {
    parent.removeAttribute('clip-path');
  }

  function process(item) {
    var dirty = renderer.isDirty(item),
        node = bind(item, parent, sibling, mdef.tag, svg);

    if (dirty) {
      renderer._update(mdef, node, item);

      if (isGroup) recurse(renderer, node, item);
    }

    sibling = node;
    ++i;
  }

  if (mdef.nested) {
    if (scene.items.length) process(scene.items[0]);
  } else {
    (0, _visit.visit)(scene, process);
  }

  (0, _dom.domClear)(parent, i);
  return parent;
}; // Recursively process group contents.


function recurse(renderer, el, group) {
  el = el.lastChild;
  var prev,
      idx = 0;
  (0, _visit.visit)(group, function (item) {
    prev = renderer.draw(el, item, prev);
    ++idx;
  }); // remove any extraneous DOM elements

  (0, _dom.domClear)(el, 1 + idx);
} // Bind a scenegraph item to an SVG DOM element.
// Create new SVG elements as needed.


function bind(item, el, sibling, tag, svg) {
  var node = item._svg,
      doc; // create a new dom node if needed

  if (!node) {
    doc = el.ownerDocument;
    node = (0, _dom.domCreate)(doc, tag, ns);
    item._svg = node;

    if (item.mark) {
      node.__data__ = item;
      node.__values__ = {
        fill: 'default'
      }; // if group, create background and foreground elements

      if (tag === 'g') {
        var bg = (0, _dom.domCreate)(doc, 'path', ns);
        bg.setAttribute('class', 'background');
        node.appendChild(bg);
        bg.__data__ = item;
        var fg = (0, _dom.domCreate)(doc, 'g', ns);
        node.appendChild(fg);
        fg.__data__ = item;
      }
    }
  } // (re-)insert if (a) not contained in SVG or (b) sibling order has changed


  if (node.ownerSVGElement !== svg || hasSiblings(item) && node.previousSibling !== sibling) {
    el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);
  }

  return node;
}

function hasSiblings(item) {
  var parent = item.mark || item.group;
  return parent && parent.items.length > 1;
} // -- Set attributes & styles on SVG elements ---


var element = null,
    // temp var for current SVG element
values = null; // temp var for current values hash
// Extra configuration for certain mark types

var mark_extras = {
  group: function (mdef, el, item) {
    values = el.__values__; // use parent's values hash

    element = el.childNodes[1];
    mdef.foreground(emit, item, this);
    element = el.childNodes[0];
    mdef.background(emit, item, this);
    var value = item.mark.interactive === false ? 'none' : null;

    if (value !== values.events) {
      element.style.setProperty('pointer-events', value);
      values.events = value;
    }
  },
  text: function (mdef, el, item) {
    var value;
    value = (0, _text.textValue)(item);

    if (value !== values.text) {
      el.textContent = value;
      values.text = value;
    }

    setStyle(el, 'font-family', (0, _text.fontFamily)(item));
    setStyle(el, 'font-size', (0, _text.fontSize)(item) + 'px');
    setStyle(el, 'font-style', item.fontStyle);
    setStyle(el, 'font-variant', item.fontVariant);
    setStyle(el, 'font-weight', item.fontWeight);
  }
};

function setStyle(el, name, value) {
  if (value !== values[name]) {
    if (value == null) {
      el.style.removeProperty(name);
    } else {
      el.style.setProperty(name, value + '');
    }

    values[name] = value;
  }
}

prototype._update = function (mdef, el, item) {
  // set dom element and values cache
  // provides access to emit method
  element = el;
  values = el.__values__; // apply svg attributes

  mdef.attr(emit, item, this); // some marks need special treatment

  var extra = mark_extras[mdef.type];
  if (extra) extra.call(this, mdef, el, item); // apply svg css styles
  // note: element may be modified by 'extra' method

  this.style(element, item);
};

function emit(name, value, ns) {
  // early exit if value is unchanged
  if (value === values[name]) return;

  if (value != null) {
    // if value is provided, update DOM attribute
    if (ns) {
      element.setAttributeNS(ns, name, value);
    } else {
      element.setAttribute(name, value);
    }
  } else {
    // else remove DOM attribute
    if (ns) {
      element.removeAttributeNS(ns, name);
    } else {
      element.removeAttribute(name);
    }
  } // note current value for future comparison


  values[name] = value;
}

prototype.style = function (el, o) {
  if (o == null) return;
  var i, n, prop, name, value;

  for (i = 0, n = _styles.styleProperties.length; i < n; ++i) {
    prop = _styles.styleProperties[i];
    value = o[prop];

    if (prop === 'font') {
      value = (0, _text.fontFamily)(o);
    }

    if (value === values[prop]) continue;
    name = _styles.styles[prop];

    if (value == null) {
      if (name === 'fill') {
        el.style.setProperty(name, 'none');
      } else {
        el.style.removeProperty(name);
      }
    } else {
      if ((0, _Gradient.isGradient)(value)) {
        value = (0, _Gradient.gradientRef)(value, this._defs.gradient, href());
      }

      el.style.setProperty(name, value + '');
    }

    values[prop] = value;
  }
};

function href() {
  var loc;
  return typeof window === 'undefined' ? '' : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length) : loc.href;
}
},{"./Renderer":"node_modules/vega-scenegraph/src/Renderer.js","./Gradient":"node_modules/vega-scenegraph/src/Gradient.js","./marks/index":"node_modules/vega-scenegraph/src/marks/index.js","./util/dom":"node_modules/vega-scenegraph/src/util/dom.js","./util/tags":"node_modules/vega-scenegraph/src/util/tags.js","./util/text":"node_modules/vega-scenegraph/src/util/text.js","./util/visit":"node_modules/vega-scenegraph/src/util/visit.js","./util/svg/clip":"node_modules/vega-scenegraph/src/util/svg/clip.js","./util/svg/metadata":"node_modules/vega-scenegraph/src/util/svg/metadata.js","./util/svg/styles":"node_modules/vega-scenegraph/src/util/svg/styles.js","vega-util":"node_modules/vega-util/index.js","process":"../../../../../usr/local/lib/node_modules/parcel/node_modules/process/browser.js"}],"node_modules/vega-scenegraph/src/SVGStringRenderer.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SVGStringRenderer;

var _Renderer = _interopRequireDefault(require("./Renderer"));

var _Gradient = require("./Gradient");

var _index = _interopRequireDefault(require("./marks/index"));

var _dom = require("./util/dom");

var _tags = require("./util/tags");

var _text = require("./util/text");

var _visit = require("./util/visit");

var _clip = _interopRequireDefault(require("./util/svg/clip"));

var _metadata = _interopRequireDefault(require("./util/svg/metadata"));

var _styles = require("./util/svg/styles");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SVGStringRenderer(loader) {
  _Renderer.default.call(this, loader);

  this._text = {
    head: '',
    bg: '',
    root: '',
    foot: '',
    defs: '',
    body: ''
  };
  this._defs = {
    gradient: {},
    clipping: {}
  };
}

var prototype = (0, _vegaUtil.inherits)(SVGStringRenderer, _Renderer.default);
var base = _Renderer.default.prototype;

prototype.resize = function (width, height, origin, scaleFactor) {
  base.resize.call(this, width, height, origin, scaleFactor);
  var o = this._origin,
      t = this._text;
  var attr = {
    class: 'marks',
    width: this._width * this._scale,
    height: this._height * this._scale,
    viewBox: '0 0 ' + this._width + ' ' + this._height
  };

  for (var key in _metadata.default) {
    attr[key] = _metadata.default[key];
  }

  t.head = (0, _tags.openTag)('svg', attr);
  var bg = this._bgcolor;
  if (bg === 'transparent' || bg === 'none') bg = null;

  if (bg) {
    t.bg = (0, _tags.openTag)('rect', {
      width: this._width,
      height: this._height,
      style: 'fill: ' + bg + ';'
    }) + (0, _tags.closeTag)('rect');
  } else {
    t.bg = '';
  }

  t.root = (0, _tags.openTag)('g', {
    transform: 'translate(' + o + ')'
  });
  t.foot = (0, _tags.closeTag)('g') + (0, _tags.closeTag)('svg');
  return this;
};

prototype.background = function () {
  var rv = base.background.apply(this, arguments);

  if (arguments.length && this._text.head) {
    this.resize(this._width, this._height, this._origin, this._scale);
  }

  return rv;
};

prototype.svg = function () {
  var t = this._text;
  return t.head + t.bg + t.defs + t.root + t.body + t.foot;
};

prototype._render = function (scene) {
  this._text.body = this.mark(scene);
  this._text.defs = this.buildDefs();
  return this;
};

prototype.buildDefs = function () {
  var all = this._defs,
      defs = '',
      i,
      id,
      def,
      tag,
      stops;

  for (id in all.gradient) {
    def = all.gradient[id];
    stops = def.stops;

    if (def.gradient === 'radial') {
      // SVG radial gradients automatically transform to normalized bbox
      // coordinates, in a way that is cumbersome to replicate in canvas.
      // So we wrap the radial gradient in a pattern element, allowing us
      // to mantain a circular gradient that matches what canvas provides.
      defs += (0, _tags.openTag)(tag = 'pattern', {
        id: _Gradient.patternPrefix + id,
        viewBox: '0,0,1,1',
        width: '100%',
        height: '100%',
        preserveAspectRatio: 'xMidYMid slice'
      });
      defs += (0, _tags.openTag)('rect', {
        width: '1',
        height: '1',
        fill: 'url(#' + id + ')'
      }) + (0, _tags.closeTag)('rect');
      defs += (0, _tags.closeTag)(tag);
      defs += (0, _tags.openTag)(tag = 'radialGradient', {
        id: id,
        fx: def.x1,
        fy: def.y1,
        fr: def.r1,
        cx: def.x2,
        cy: def.y2,
        r: def.r2
      });
    } else {
      defs += (0, _tags.openTag)(tag = 'linearGradient', {
        id: id,
        x1: def.x1,
        x2: def.x2,
        y1: def.y1,
        y2: def.y2
      });
    }

    for (i = 0; i < stops.length; ++i) {
      defs += (0, _tags.openTag)('stop', {
        offset: stops[i].offset,
        'stop-color': stops[i].color
      }) + (0, _tags.closeTag)('stop');
    }

    defs += (0, _tags.closeTag)(tag);
  }

  for (id in all.clipping) {
    def = all.clipping[id];
    defs += (0, _tags.openTag)('clipPath', {
      id: id
    });

    if (def.path) {
      defs += (0, _tags.openTag)('path', {
        d: def.path
      }) + (0, _tags.closeTag)('path');
    } else {
      defs += (0, _tags.openTag)('rect', {
        x: 0,
        y: 0,
        width: def.width,
        height: def.height
      }) + (0, _tags.closeTag)('rect');
    }

    defs += (0, _tags.closeTag)('clipPath');
  }

  return defs.length > 0 ? (0, _tags.openTag)('defs') + defs + (0, _tags.closeTag)('defs') : '';
};

var object;

function emit(name, value, ns, prefixed) {
  object[prefixed || name] = value;
}

prototype.attributes = function (attr, item) {
  object = {};
  attr(emit, item, this);
  return object;
};

prototype.href = function (item) {
  var that = this,
      href = item.href,
      attr;

  if (href) {
    if (attr = that._hrefs && that._hrefs[href]) {
      return attr;
    } else {
      that.sanitizeURL(href).then(function (attr) {
        // rewrite to use xlink namespace
        // note that this will be deprecated in SVG 2.0
        attr['xlink:href'] = attr.href;
        attr.href = null;
        (that._hrefs || (that._hrefs = {}))[href] = attr;
      });
    }
  }

  return null;
};

prototype.mark = function (scene) {
  var renderer = this,
      mdef = _index.default[scene.marktype],
      tag = mdef.tag,
      defs = this._defs,
      str = '',
      style;

  if (tag !== 'g' && scene.interactive === false) {
    style = 'style="pointer-events: none;"';
  } // render opening group tag


  str += (0, _tags.openTag)('g', {
    'class': (0, _dom.cssClass)(scene),
    'clip-path': scene.clip ? (0, _clip.default)(renderer, scene, scene.group) : null
  }, style); // render contained elements

  function process(item) {
    var href = renderer.href(item);
    if (href) str += (0, _tags.openTag)('a', href);
    style = tag !== 'g' ? applyStyles(item, scene, tag, defs) : null;
    str += (0, _tags.openTag)(tag, renderer.attributes(mdef.attr, item), style);

    if (tag === 'text') {
      str += escape_text((0, _text.textValue)(item));
    } else if (tag === 'g') {
      str += (0, _tags.openTag)('path', renderer.attributes(mdef.background, item), applyStyles(item, scene, 'bgrect', defs)) + (0, _tags.closeTag)('path');
      str += (0, _tags.openTag)('g', renderer.attributes(mdef.foreground, item)) + renderer.markGroup(item) + (0, _tags.closeTag)('g');
    }

    str += (0, _tags.closeTag)(tag);
    if (href) str += (0, _tags.closeTag)('a');
  }

  if (mdef.nested) {
    if (scene.items && scene.items.length) process(scene.items[0]);
  } else {
    (0, _visit.visit)(scene, process);
  } // render closing group tag


  return str + (0, _tags.closeTag)('g');
};

prototype.markGroup = function (scene) {
  var renderer = this,
      str = '';
  (0, _visit.visit)(scene, function (item) {
    str += renderer.mark(item);
  });
  return str;
};

function applyStyles(o, mark, tag, defs) {
  if (o == null) return '';
  var i,
      n,
      prop,
      name,
      value,
      s = '';

  if (tag === 'bgrect' && mark.interactive === false) {
    s += 'pointer-events: none; ';
  }

  if (tag === 'text') {
    s += 'font-family: ' + (0, _text.fontFamily)(o) + '; ';
    s += 'font-size: ' + (0, _text.fontSize)(o) + 'px; ';
    if (o.fontStyle) s += 'font-style: ' + o.fontStyle + '; ';
    if (o.fontVariant) s += 'font-variant: ' + o.fontVariant + '; ';
    if (o.fontWeight) s += 'font-weight: ' + o.fontWeight + '; ';
  }

  for (i = 0, n = _styles.styleProperties.length; i < n; ++i) {
    prop = _styles.styleProperties[i];
    name = _styles.styles[prop];
    value = o[prop];

    if (value == null) {
      if (name === 'fill') {
        s += 'fill: none; ';
      }
    } else if (value === 'transparent' && (name === 'fill' || name === 'stroke')) {
      // transparent is not a legal SVG value, so map to none instead
      s += name + ': none; ';
    } else {
      if ((0, _Gradient.isGradient)(value)) {
        value = (0, _Gradient.gradientRef)(value, defs.gradient, '');
      }

      s += name + ': ' + value + '; ';
    }
  }

  return s ? 'style="' + s.trim() + '"' : null;
}

function escape_text(s) {
  return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}
},{"./Renderer":"node_modules/vega-scenegraph/src/Renderer.js","./Gradient":"node_modules/vega-scenegraph/src/Gradient.js","./marks/index":"node_modules/vega-scenegraph/src/marks/index.js","./util/dom":"node_modules/vega-scenegraph/src/util/dom.js","./util/tags":"node_modules/vega-scenegraph/src/util/tags.js","./util/text":"node_modules/vega-scenegraph/src/util/text.js","./util/visit":"node_modules/vega-scenegraph/src/util/visit.js","./util/svg/clip":"node_modules/vega-scenegraph/src/util/svg/clip.js","./util/svg/metadata":"node_modules/vega-scenegraph/src/util/svg/metadata.js","./util/svg/styles":"node_modules/vega-scenegraph/src/util/svg/styles.js","vega-util":"node_modules/vega-util/index.js","process":"../../../../../usr/local/lib/node_modules/parcel/node_modules/process/browser.js"}],"node_modules/vega-scenegraph/src/modules.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderModule = renderModule;
exports.RenderType = void 0;

var _CanvasHandler = _interopRequireDefault(require("./CanvasHandler"));

var _CanvasRenderer = _interopRequireDefault(require("./CanvasRenderer"));

var _SVGHandler = _interopRequireDefault(require("./SVGHandler"));

var _SVGRenderer = _interopRequireDefault(require("./SVGRenderer"));

var _SVGStringRenderer = _interopRequireDefault(require("./SVGStringRenderer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Canvas = 'canvas';
var PNG = 'png';
var SVG = 'svg';
var None = 'none';
var RenderType = {
  Canvas: Canvas,
  PNG: PNG,
  SVG: SVG,
  None: None
};
exports.RenderType = RenderType;
var modules = {};
modules[Canvas] = modules[PNG] = {
  renderer: _CanvasRenderer.default,
  headless: _CanvasRenderer.default,
  handler: _CanvasHandler.default
};
modules[SVG] = {
  renderer: _SVGRenderer.default,
  headless: _SVGStringRenderer.default,
  handler: _SVGHandler.default
};
modules[None] = {};

function renderModule(name, _) {
  name = String(name || '').toLowerCase();

  if (arguments.length > 1) {
    modules[name] = _;
    return this;
  } else {
    return modules[name];
  }
}
},{"./CanvasHandler":"node_modules/vega-scenegraph/src/CanvasHandler.js","./CanvasRenderer":"node_modules/vega-scenegraph/src/CanvasRenderer.js","./SVGHandler":"node_modules/vega-scenegraph/src/SVGHandler.js","./SVGRenderer":"node_modules/vega-scenegraph/src/SVGRenderer.js","./SVGStringRenderer":"node_modules/vega-scenegraph/src/SVGStringRenderer.js"}],"node_modules/vega-scenegraph/src/intersect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.intersect = intersect;

var _index = _interopRequireDefault(require("./marks/index"));

var _vegaUtil = require("vega-util");

var _Bounds = _interopRequireDefault(require("./Bounds"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function intersect(scene, bounds, filter) {
  const hits = [],
        // intersection results
  box = new _Bounds.default().union(bounds),
        // defensive copy
  type = scene.marktype;
  return type ? intersectMark(scene, box, filter, hits) : type === 'group' ? intersectGroup(scene, box, filter, hits) : (0, _vegaUtil.error)('Intersect scene must be mark node or group item.');
}

function intersectMark(mark, box, filter, hits) {
  if (visitMark(mark, box, filter)) {
    const items = mark.items,
          type = mark.marktype,
          n = items.length;
    let i = 0;

    if (type === 'group') {
      for (; i < n; ++i) {
        intersectGroup(items[i], box, filter, hits);
      }
    } else {
      for (const test = _index.default[type].isect; i < n; ++i) {
        let item = items[i];
        if (intersectItem(item, box, test)) hits.push(item);
      }
    }
  }

  return hits;
}

function visitMark(mark, box, filter) {
  // process if bounds intersect and if
  // (1) mark is a group mark (so we must recurse), or
  // (2) mark is interactive and passes filter
  return mark.bounds && box.intersects(mark.bounds) && (mark.marktype === 'group' || mark.interactive !== false && (!filter || filter(mark)));
}

function intersectGroup(group, box, filter, hits) {
  // test intersect against group
  // skip groups by default unless filter says otherwise
  if (filter && filter(group.mark) && intersectItem(group, box, _index.default.group.isect)) {
    hits.push(group);
  } // recursively test children marks
  // translate box to group coordinate space


  const marks = group.items,
        n = marks && marks.length;

  if (n) {
    const x = group.x || 0,
          y = group.y || 0;
    box.translate(-x, -y);

    for (let i = 0; i < n; ++i) {
      intersectMark(marks[i], box, filter, hits);
    }

    box.translate(x, y);
  }

  return hits;
}

function intersectItem(item, box, test) {
  // test bounds enclosure, bounds intersection, then detailed test
  const bounds = item.bounds;
  return box.encloses(bounds) || box.intersects(bounds) && test(item, box);
}
},{"./marks/index":"node_modules/vega-scenegraph/src/marks/index.js","vega-util":"node_modules/vega-util/index.js","./Bounds":"node_modules/vega-scenegraph/src/Bounds.js"}],"node_modules/vega-scenegraph/src/bound/boundClip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _Bounds = _interopRequireDefault(require("../Bounds"));

var _boundContext = _interopRequireDefault(require("./boundContext"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clipBounds = new _Bounds.default();

function _default(mark) {
  var clip = mark.clip;

  if ((0, _vegaUtil.isFunction)(clip)) {
    clip((0, _boundContext.default)(clipBounds.clear()));
  } else if (clip) {
    clipBounds.set(0, 0, mark.group.width, mark.group.height);
  } else return;

  mark.bounds.intersect(clipBounds);
}
},{"../Bounds":"node_modules/vega-scenegraph/src/Bounds.js","./boundContext":"node_modules/vega-scenegraph/src/bound/boundContext.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-scenegraph/src/util/equal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sceneEqual = sceneEqual;
exports.pathEqual = pathEqual;

var _parse = _interopRequireDefault(require("../path/parse"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TOLERANCE = 1e-9;

function sceneEqual(a, b, key) {
  return a === b ? true : key === 'path' ? pathEqual(a, b) : a instanceof Date && b instanceof Date ? +a === +b : (0, _vegaUtil.isNumber)(a) && (0, _vegaUtil.isNumber)(b) ? Math.abs(a - b) <= TOLERANCE : !a || !b || !(0, _vegaUtil.isObject)(a) && !(0, _vegaUtil.isObject)(b) ? a == b : a == null || b == null ? false : objectEqual(a, b);
}

function pathEqual(a, b) {
  return sceneEqual((0, _parse.default)(a), (0, _parse.default)(b));
}

function objectEqual(a, b) {
  var ka = Object.keys(a),
      kb = Object.keys(b),
      key,
      i;
  if (ka.length !== kb.length) return false;
  ka.sort();
  kb.sort();

  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i]) return false;
  }

  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!sceneEqual(a[key], b[key], key)) return false;
  }

  return typeof a === typeof b;
}
},{"../path/parse":"node_modules/vega-scenegraph/src/path/parse.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-scenegraph/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Bounds", {
  enumerable: true,
  get: function () {
    return _Bounds.default;
  }
});
Object.defineProperty(exports, "Gradient", {
  enumerable: true,
  get: function () {
    return _Gradient.default;
  }
});
Object.defineProperty(exports, "GroupItem", {
  enumerable: true,
  get: function () {
    return _GroupItem.default;
  }
});
Object.defineProperty(exports, "ResourceLoader", {
  enumerable: true,
  get: function () {
    return _ResourceLoader.default;
  }
});
Object.defineProperty(exports, "Item", {
  enumerable: true,
  get: function () {
    return _Item.default;
  }
});
Object.defineProperty(exports, "Scenegraph", {
  enumerable: true,
  get: function () {
    return _Scenegraph.default;
  }
});
Object.defineProperty(exports, "Handler", {
  enumerable: true,
  get: function () {
    return _Handler.default;
  }
});
Object.defineProperty(exports, "Renderer", {
  enumerable: true,
  get: function () {
    return _Renderer.default;
  }
});
Object.defineProperty(exports, "CanvasHandler", {
  enumerable: true,
  get: function () {
    return _CanvasHandler.default;
  }
});
Object.defineProperty(exports, "CanvasRenderer", {
  enumerable: true,
  get: function () {
    return _CanvasRenderer.default;
  }
});
Object.defineProperty(exports, "SVGHandler", {
  enumerable: true,
  get: function () {
    return _SVGHandler.default;
  }
});
Object.defineProperty(exports, "SVGRenderer", {
  enumerable: true,
  get: function () {
    return _SVGRenderer.default;
  }
});
Object.defineProperty(exports, "SVGStringRenderer", {
  enumerable: true,
  get: function () {
    return _SVGStringRenderer.default;
  }
});
Object.defineProperty(exports, "RenderType", {
  enumerable: true,
  get: function () {
    return _modules.RenderType;
  }
});
Object.defineProperty(exports, "renderModule", {
  enumerable: true,
  get: function () {
    return _modules.renderModule;
  }
});
Object.defineProperty(exports, "intersect", {
  enumerable: true,
  get: function () {
    return _intersect.intersect;
  }
});
Object.defineProperty(exports, "Marks", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "boundClip", {
  enumerable: true,
  get: function () {
    return _boundClip.default;
  }
});
Object.defineProperty(exports, "boundContext", {
  enumerable: true,
  get: function () {
    return _boundContext.default;
  }
});
Object.defineProperty(exports, "boundStroke", {
  enumerable: true,
  get: function () {
    return _boundStroke.default;
  }
});
Object.defineProperty(exports, "boundItem", {
  enumerable: true,
  get: function () {
    return _boundItem.default;
  }
});
Object.defineProperty(exports, "boundMark", {
  enumerable: true,
  get: function () {
    return _boundMark.default;
  }
});
Object.defineProperty(exports, "pathCurves", {
  enumerable: true,
  get: function () {
    return _curves.default;
  }
});
Object.defineProperty(exports, "pathSymbols", {
  enumerable: true,
  get: function () {
    return _symbols.default;
  }
});
Object.defineProperty(exports, "pathRectangle", {
  enumerable: true,
  get: function () {
    return _rectangle.default;
  }
});
Object.defineProperty(exports, "pathTrail", {
  enumerable: true,
  get: function () {
    return _trail.default;
  }
});
Object.defineProperty(exports, "pathParse", {
  enumerable: true,
  get: function () {
    return _parse.default;
  }
});
Object.defineProperty(exports, "pathRender", {
  enumerable: true,
  get: function () {
    return _render.default;
  }
});
Object.defineProperty(exports, "point", {
  enumerable: true,
  get: function () {
    return _point.default;
  }
});
Object.defineProperty(exports, "domCreate", {
  enumerable: true,
  get: function () {
    return _dom.domCreate;
  }
});
Object.defineProperty(exports, "domFind", {
  enumerable: true,
  get: function () {
    return _dom.domFind;
  }
});
Object.defineProperty(exports, "domChild", {
  enumerable: true,
  get: function () {
    return _dom.domChild;
  }
});
Object.defineProperty(exports, "domClear", {
  enumerable: true,
  get: function () {
    return _dom.domClear;
  }
});
Object.defineProperty(exports, "openTag", {
  enumerable: true,
  get: function () {
    return _tags.openTag;
  }
});
Object.defineProperty(exports, "closeTag", {
  enumerable: true,
  get: function () {
    return _tags.closeTag;
  }
});
Object.defineProperty(exports, "font", {
  enumerable: true,
  get: function () {
    return _text.font;
  }
});
Object.defineProperty(exports, "fontFamily", {
  enumerable: true,
  get: function () {
    return _text.fontFamily;
  }
});
Object.defineProperty(exports, "fontSize", {
  enumerable: true,
  get: function () {
    return _text.fontSize;
  }
});
Object.defineProperty(exports, "textMetrics", {
  enumerable: true,
  get: function () {
    return _text.textMetrics;
  }
});
Object.defineProperty(exports, "resetSVGClipId", {
  enumerable: true,
  get: function () {
    return _clip.resetSVGClipId;
  }
});
Object.defineProperty(exports, "sceneEqual", {
  enumerable: true,
  get: function () {
    return _equal.sceneEqual;
  }
});
Object.defineProperty(exports, "pathEqual", {
  enumerable: true,
  get: function () {
    return _equal.pathEqual;
  }
});
Object.defineProperty(exports, "sceneToJSON", {
  enumerable: true,
  get: function () {
    return _serialize.sceneToJSON;
  }
});
Object.defineProperty(exports, "sceneFromJSON", {
  enumerable: true,
  get: function () {
    return _serialize.sceneFromJSON;
  }
});
Object.defineProperty(exports, "intersectPath", {
  enumerable: true,
  get: function () {
    return _intersect2.intersectPath;
  }
});
Object.defineProperty(exports, "intersectPoint", {
  enumerable: true,
  get: function () {
    return _intersect2.intersectPoint;
  }
});
Object.defineProperty(exports, "intersectRule", {
  enumerable: true,
  get: function () {
    return _intersect2.intersectRule;
  }
});
Object.defineProperty(exports, "intersectBoxLine", {
  enumerable: true,
  get: function () {
    return _intersect2.intersectBoxLine;
  }
});
Object.defineProperty(exports, "sceneZOrder", {
  enumerable: true,
  get: function () {
    return _visit.zorder;
  }
});
Object.defineProperty(exports, "sceneVisit", {
  enumerable: true,
  get: function () {
    return _visit.visit;
  }
});
Object.defineProperty(exports, "scenePickVisit", {
  enumerable: true,
  get: function () {
    return _visit.pickVisit;
  }
});

var _Bounds = _interopRequireDefault(require("./src/Bounds"));

var _Gradient = _interopRequireDefault(require("./src/Gradient"));

var _GroupItem = _interopRequireDefault(require("./src/GroupItem"));

var _ResourceLoader = _interopRequireDefault(require("./src/ResourceLoader"));

var _Item = _interopRequireDefault(require("./src/Item"));

var _Scenegraph = _interopRequireDefault(require("./src/Scenegraph"));

var _Handler = _interopRequireDefault(require("./src/Handler"));

var _Renderer = _interopRequireDefault(require("./src/Renderer"));

var _CanvasHandler = _interopRequireDefault(require("./src/CanvasHandler"));

var _CanvasRenderer = _interopRequireDefault(require("./src/CanvasRenderer"));

var _SVGHandler = _interopRequireDefault(require("./src/SVGHandler"));

var _SVGRenderer = _interopRequireDefault(require("./src/SVGRenderer"));

var _SVGStringRenderer = _interopRequireDefault(require("./src/SVGStringRenderer"));

var _modules = require("./src/modules");

var _intersect = require("./src/intersect");

var _index = _interopRequireDefault(require("./src/marks/index"));

var _boundClip = _interopRequireDefault(require("./src/bound/boundClip"));

var _boundContext = _interopRequireDefault(require("./src/bound/boundContext"));

var _boundStroke = _interopRequireDefault(require("./src/bound/boundStroke"));

var _boundItem = _interopRequireDefault(require("./src/bound/boundItem"));

var _boundMark = _interopRequireDefault(require("./src/bound/boundMark"));

var _curves = _interopRequireDefault(require("./src/path/curves"));

var _symbols = _interopRequireDefault(require("./src/path/symbols"));

var _rectangle = _interopRequireDefault(require("./src/path/rectangle"));

var _trail = _interopRequireDefault(require("./src/path/trail"));

var _parse = _interopRequireDefault(require("./src/path/parse"));

var _render = _interopRequireDefault(require("./src/path/render"));

var _point = _interopRequireDefault(require("./src/util/point"));

var _dom = require("./src/util/dom");

var _tags = require("./src/util/tags");

var _text = require("./src/util/text");

var _clip = require("./src/util/svg/clip");

var _equal = require("./src/util/equal");

var _serialize = require("./src/util/serialize");

var _intersect2 = require("./src/util/intersect");

var _visit = require("./src/util/visit");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/Bounds":"node_modules/vega-scenegraph/src/Bounds.js","./src/Gradient":"node_modules/vega-scenegraph/src/Gradient.js","./src/GroupItem":"node_modules/vega-scenegraph/src/GroupItem.js","./src/ResourceLoader":"node_modules/vega-scenegraph/src/ResourceLoader.js","./src/Item":"node_modules/vega-scenegraph/src/Item.js","./src/Scenegraph":"node_modules/vega-scenegraph/src/Scenegraph.js","./src/Handler":"node_modules/vega-scenegraph/src/Handler.js","./src/Renderer":"node_modules/vega-scenegraph/src/Renderer.js","./src/CanvasHandler":"node_modules/vega-scenegraph/src/CanvasHandler.js","./src/CanvasRenderer":"node_modules/vega-scenegraph/src/CanvasRenderer.js","./src/SVGHandler":"node_modules/vega-scenegraph/src/SVGHandler.js","./src/SVGRenderer":"node_modules/vega-scenegraph/src/SVGRenderer.js","./src/SVGStringRenderer":"node_modules/vega-scenegraph/src/SVGStringRenderer.js","./src/modules":"node_modules/vega-scenegraph/src/modules.js","./src/intersect":"node_modules/vega-scenegraph/src/intersect.js","./src/marks/index":"node_modules/vega-scenegraph/src/marks/index.js","./src/bound/boundClip":"node_modules/vega-scenegraph/src/bound/boundClip.js","./src/bound/boundContext":"node_modules/vega-scenegraph/src/bound/boundContext.js","./src/bound/boundStroke":"node_modules/vega-scenegraph/src/bound/boundStroke.js","./src/bound/boundItem":"node_modules/vega-scenegraph/src/bound/boundItem.js","./src/bound/boundMark":"node_modules/vega-scenegraph/src/bound/boundMark.js","./src/path/curves":"node_modules/vega-scenegraph/src/path/curves.js","./src/path/symbols":"node_modules/vega-scenegraph/src/path/symbols.js","./src/path/rectangle":"node_modules/vega-scenegraph/src/path/rectangle.js","./src/path/trail":"node_modules/vega-scenegraph/src/path/trail.js","./src/path/parse":"node_modules/vega-scenegraph/src/path/parse.js","./src/path/render":"node_modules/vega-scenegraph/src/path/render.js","./src/util/point":"node_modules/vega-scenegraph/src/util/point.js","./src/util/dom":"node_modules/vega-scenegraph/src/util/dom.js","./src/util/tags":"node_modules/vega-scenegraph/src/util/tags.js","./src/util/text":"node_modules/vega-scenegraph/src/util/text.js","./src/util/svg/clip":"node_modules/vega-scenegraph/src/util/svg/clip.js","./src/util/equal":"node_modules/vega-scenegraph/src/util/equal.js","./src/util/serialize":"node_modules/vega-scenegraph/src/util/serialize.js","./src/util/intersect":"node_modules/vega-scenegraph/src/util/intersect.js","./src/util/visit":"node_modules/vega-scenegraph/src/util/visit.js"}],"node_modules/vega-view-transforms/src/Bound.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Bound;

var _constants = require("./constants");

var _vegaDataflow = require("vega-dataflow");

var _vegaScenegraph = require("vega-scenegraph");

var _vegaUtil = require("vega-util");

/**
 * Calculate bounding boxes for scenegraph items.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.mark - The scenegraph mark instance to bound.
 */
function Bound(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(Bound, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var view = pulse.dataflow,
      mark = _.mark,
      type = mark.marktype,
      entry = _vegaScenegraph.Marks[type],
      bound = entry.bound,
      markBounds = mark.bounds,
      rebound;

  if (entry.nested) {
    // multi-item marks have a single bounds instance
    if (mark.items.length) view.dirty(mark.items[0]);
    markBounds = boundItem(mark, bound);
    mark.items.forEach(function (item) {
      item.bounds.clear().union(markBounds);
    });
  } else if (type === _constants.Group || _.modified()) {
    // operator parameters modified -> re-bound all items
    // updates group bounds in response to modified group content
    pulse.visit(pulse.MOD, function (item) {
      view.dirty(item);
    });
    markBounds.clear();
    mark.items.forEach(function (item) {
      markBounds.union(boundItem(item, bound));
    }); // force reflow for legends to propagate any layout changes
    // suppress other types to prevent overall layout jumpiness

    if (mark.role === _constants.LegendRole) pulse.reflow();
  } else {
    // incrementally update bounds, re-bound mark as needed
    rebound = pulse.changed(pulse.REM);
    pulse.visit(pulse.ADD, function (item) {
      markBounds.union(boundItem(item, bound));
    });
    pulse.visit(pulse.MOD, function (item) {
      rebound = rebound || markBounds.alignsWith(item.bounds);
      view.dirty(item);
      markBounds.union(boundItem(item, bound));
    });

    if (rebound) {
      markBounds.clear();
      mark.items.forEach(function (item) {
        markBounds.union(item.bounds);
      });
    }
  } // ensure mark bounds do not exceed any clipping region


  (0, _vegaScenegraph.boundClip)(mark);
  return pulse.modifies('bounds');
};

function boundItem(item, bound, opt) {
  return bound(item.bounds.clear(), item, opt);
}
},{"./constants":"node_modules/vega-view-transforms/src/constants.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view-transforms/src/Identifier.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Identifier;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var COUNTER_NAME = ':vega_identifier:';
/**
 * Adds a unique identifier to all added tuples.
 * This transform creates a new signal that serves as an id counter.
 * As a result, the id counter is shared across all instances of this
 * transform, generating unique ids across multiple data streams. In
 * addition, this signal value can be included in a snapshot of the
 * dataflow state, enabling correct resumption of id allocation.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {string} params.as - The field name for the generated identifier.
 */

function Identifier(params) {
  _vegaDataflow.Transform.call(this, 0, params);
}

Identifier.Definition = {
  "type": "Identifier",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "as",
    "type": "string",
    "required": true
  }]
};
var prototype = (0, _vegaUtil.inherits)(Identifier, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var counter = getCounter(pulse.dataflow),
      id = counter.value,
      as = _.as;
  pulse.visit(pulse.ADD, function (t) {
    if (!t[as]) t[as] = ++id;
  });
  counter.set(this.value = id);
  return pulse;
};

function getCounter(view) {
  var counter = view._signals[COUNTER_NAME];

  if (!counter) {
    view._signals[COUNTER_NAME] = counter = view.add(0);
  }

  return counter;
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view-transforms/src/Mark.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Mark;

var _constants = require("./constants");

var _vegaDataflow = require("vega-dataflow");

var _vegaScenegraph = require("vega-scenegraph");

var _vegaUtil = require("vega-util");

/**
 * Bind scenegraph items to a scenegraph mark instance.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.markdef - The mark definition for creating the mark.
 *   This is an object of legal scenegraph mark properties which *must* include
 *   the 'marktype' property.
 */
function Mark(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(Mark, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var mark = this.value; // acquire mark on first invocation, bind context and group

  if (!mark) {
    mark = pulse.dataflow.scenegraph().mark(_.markdef, lookup(_), _.index);
    mark.group.context = _.context;
    if (!_.context.group) _.context.group = mark.group;
    mark.source = this.source; // point to upstream collector

    mark.clip = _.clip;
    mark.interactive = _.interactive;
    this.value = mark;
  } // initialize entering items


  var Init = mark.marktype === _constants.Group ? _vegaScenegraph.GroupItem : _vegaScenegraph.Item;
  pulse.visit(pulse.ADD, function (item) {
    Init.call(item, mark);
  }); // update clipping and/or interactive status

  if (_.modified('clip') || _.modified('interactive')) {
    mark.clip = _.clip;
    mark.interactive = !!_.interactive;
    mark.zdirty = true; // force scenegraph re-eval

    pulse.reflow();
  } // bind items array to scenegraph mark


  mark.items = pulse.source;
  return pulse;
};

function lookup(_) {
  var g = _.groups,
      p = _.parent;
  return g && g.size === 1 ? g.get(Object.keys(g.object)[0]) : g && p ? g.lookup(p) : null;
}
},{"./constants":"node_modules/vega-view-transforms/src/constants.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view-transforms/src/Overlap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Overlap;

var _constants = require("./constants");

var _vegaDataflow = require("vega-dataflow");

var _vegaScenegraph = require("vega-scenegraph");

var _vegaUtil = require("vega-util");

/**
 * Analyze items for overlap, changing opacity to hide items with
 * overlapping bounding boxes. This transform will preserve at least
 * two items (e.g., first and last) even if overlap persists.
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - A comparator
 *   function for sorting items.
 * @param {object} [params.method] - The overlap removal method to apply.
 *   One of 'parity' (default, hide every other item until there is no
 *   more overlap) or 'greedy' (sequentially scan and hide and items that
 *   overlap with the last visible item).
 * @param {object} [params.boundScale] - A scale whose range should be used
 *   to bound the items. Items exceeding the bounds of the scale range
 *   will be treated as overlapping. If null or undefined, no bounds check
 *   will be applied.
 * @param {object} [params.boundOrient] - The orientation of the scale
 *   (top, bottom, left, or right) used to bound items. This parameter is
 *   ignored if boundScale is null or undefined.
 * @param {object} [params.boundTolerance] - The tolerance in pixels for
 *   bound inclusion testing (default 1). This specifies by how many pixels
 *   an item's bounds may exceed the scale range bounds and not be culled.
 * @constructor
 */
function Overlap(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(Overlap, _vegaDataflow.Transform);
var methods = {
  parity: function (items) {
    return items.filter((item, i) => i % 2 ? item.opacity = 0 : 1);
  },
  greedy: function (items, sep) {
    var a;
    return items.filter((b, i) => {
      if (!i || !intersect(a.bounds, b.bounds, sep)) {
        a = b;
        return 1;
      } else {
        return b.opacity = 0;
      }
    });
  }
}; // compute bounding box intersection
// including padding pixels of separation

function intersect(a, b, sep) {
  return sep > Math.max(b.x1 - a.x2, a.x1 - b.x2, b.y1 - a.y2, a.y1 - b.y2);
}

function hasOverlap(items, pad) {
  for (var i = 1, n = items.length, a = items[0].bounds, b; i < n; a = b, ++i) {
    if (intersect(a, b = items[i].bounds, pad)) return true;
  }
}

function hasBounds(item) {
  var b = item.bounds;
  return b.width() > 1 && b.height() > 1;
}

function boundTest(scale, orient, tolerance) {
  var range = scale.range(),
      b = new _vegaScenegraph.Bounds();

  if (orient === _constants.Top || orient === _constants.Bottom) {
    b.set(range[0], -Infinity, range[1], +Infinity);
  } else {
    b.set(-Infinity, range[0], +Infinity, range[1]);
  }

  b.expand(tolerance || 1);
  return item => b.encloses(item.bounds);
} // reset all items to be fully opaque


function reset(source) {
  source.forEach(item => item.opacity = 1);
  return source;
} // add all tuples to mod, fork pulse if parameters were modified
// fork prevents cross-stream tuple pollution (e.g., pulse from scale)


function reflow(pulse, _) {
  return pulse.reflow(_.modified()).modifies('opacity');
}

prototype.transform = function (_, pulse) {
  var reduce = methods[_.method] || methods.parity,
      source = pulse.materialize(pulse.SOURCE).source,
      sep = _.separation || 0,
      items,
      test,
      bounds;
  if (!source || !source.length) return;

  if (!_.method) {
    // early exit if method is falsy
    if (_.modified('method')) {
      reset(source);
      pulse = reflow(pulse, _);
    }

    return pulse;
  }

  if (_.sort) {
    source = source.slice().sort(_.sort);
  } // skip labels with no content


  source = source.filter(hasBounds);
  items = reset(source);
  pulse = reflow(pulse, _);

  if (items.length >= 3 && hasOverlap(items, sep)) {
    do {
      items = reduce(items, sep);
    } while (items.length >= 3 && hasOverlap(items, sep));

    if (items.length < 3 && !(0, _vegaUtil.peek)(source).opacity) {
      if (items.length > 1) (0, _vegaUtil.peek)(items).opacity = 0;
      (0, _vegaUtil.peek)(source).opacity = 1;
    }
  }

  if (_.boundScale && _.boundTolerance >= 0) {
    test = boundTest(_.boundScale, _.boundOrient, +_.boundTolerance);
    source.forEach(item => {
      if (!test(item)) item.opacity = 0;
    });
  } // re-calculate mark bounds


  bounds = items[0].mark.bounds.clear();
  source.forEach(item => {
    if (item.opacity) bounds.union(item.bounds);
  });
  return pulse;
};
},{"./constants":"node_modules/vega-view-transforms/src/constants.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view-transforms/src/Render.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Render;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Queue modified scenegraph items for rendering.
 * @constructor
 */
function Render(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(Render, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var view = pulse.dataflow;
  pulse.visit(pulse.ALL, function (item) {
    view.dirty(item);
  }); // set z-index dirty flag as needed

  if (pulse.fields && pulse.fields['zindex']) {
    var item = pulse.source && pulse.source[0];
    if (item) item.mark.zdirty = true;
  }
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view-transforms/src/layout/util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.set = set;
exports.tempBounds = void 0;

var _vegaScenegraph = require("vega-scenegraph");

const tempBounds = new _vegaScenegraph.Bounds();
exports.tempBounds = tempBounds;

function set(item, property, value) {
  return item[property] === value ? 0 : (item[property] = value, 1);
}
},{"vega-scenegraph":"node_modules/vega-scenegraph/index.js"}],"node_modules/vega-view-transforms/src/layout/axis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isYAxis = isYAxis;
exports.axisLayout = axisLayout;

var _constants = require("../constants");

var _util = require("./util");

var _vegaScenegraph = require("vega-scenegraph");

const AxisOffset = 0.5;

function isYAxis(mark) {
  var orient = mark.items[0].datum.orient;
  return orient === _constants.Left || orient === _constants.Right;
}

function axisIndices(datum) {
  var index = +datum.grid;
  return [datum.ticks ? index++ : -1, // ticks index
  datum.labels ? index++ : -1, // labels index
  index + +datum.domain // title index
  ];
}

function axisLayout(view, axis, width, height) {
  var item = axis.items[0],
      datum = item.datum,
      orient = datum.orient,
      indices = axisIndices(datum),
      range = item.range,
      offset = item.offset,
      position = item.position,
      minExtent = item.minExtent,
      maxExtent = item.maxExtent,
      title = datum.title && item.items[indices[2]].items[0],
      titlePadding = item.titlePadding,
      bounds = item.bounds,
      x = 0,
      y = 0,
      i,
      s;

  _util.tempBounds.clear().union(bounds);

  bounds.clear();
  if ((i = indices[0]) > -1) bounds.union(item.items[i].bounds);
  if ((i = indices[1]) > -1) bounds.union(item.items[i].bounds); // position axis group and title

  switch (orient) {
    case _constants.Top:
      x = position || 0;
      y = -offset;
      s = Math.max(minExtent, Math.min(maxExtent, -bounds.y1));
      if (title) s = axisTitleLayout(title, s, titlePadding, 0, -1, bounds);
      bounds.add(0, -s).add(range, 0);
      break;

    case _constants.Left:
      x = -offset;
      y = position || 0;
      s = Math.max(minExtent, Math.min(maxExtent, -bounds.x1));
      if (title) s = axisTitleLayout(title, s, titlePadding, 1, -1, bounds);
      bounds.add(-s, 0).add(0, range);
      break;

    case _constants.Right:
      x = width + offset;
      y = position || 0;
      s = Math.max(minExtent, Math.min(maxExtent, bounds.x2));
      if (title) s = axisTitleLayout(title, s, titlePadding, 1, 1, bounds);
      bounds.add(0, 0).add(s, range);
      break;

    case _constants.Bottom:
      x = position || 0;
      y = height + offset;
      s = Math.max(minExtent, Math.min(maxExtent, bounds.y2));
      if (title) s = axisTitleLayout(title, s, titlePadding, 0, 1, bounds);
      bounds.add(0, 0).add(range, s);
      break;

    default:
      x = item.x;
      y = item.y;
  } // update bounds


  (0, _vegaScenegraph.boundStroke)(bounds.translate(x, y), item);

  if ((0, _util.set)(item, 'x', x + AxisOffset) | (0, _util.set)(item, 'y', y + AxisOffset)) {
    item.bounds = _util.tempBounds;
    view.dirty(item);
    item.bounds = bounds;
    view.dirty(item);
  }

  return item.mark.bounds.clear().union(bounds);
}

function axisTitleLayout(title, offset, pad, isYAxis, sign, bounds) {
  var b = title.bounds,
      dx = 0,
      dy = 0;

  if (title.auto) {
    offset += pad;
    isYAxis ? dx = (title.x || 0) - (title.x = sign * offset) : dy = (title.y || 0) - (title.y = sign * offset);
    b.translate(-dx, -dy);
    title.mark.bounds.set(b.x1, b.y1, b.x2, b.y2);

    if (isYAxis) {
      bounds.add(0, b.y1).add(0, b.y2);
      offset += b.width();
    } else {
      bounds.add(b.x1, 0).add(b.x2, 0);
      offset += b.height();
    }
  } else {
    bounds.union(b);
  }

  return offset;
}
},{"../constants":"node_modules/vega-view-transforms/src/constants.js","./util":"node_modules/vega-view-transforms/src/layout/util.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js"}],"node_modules/vega-view-transforms/src/layout/grid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gridLayout = gridLayout;
exports.trellisLayout = trellisLayout;

var _constants = require("../constants");

var _util = require("./util");

var _vegaScenegraph = require("vega-scenegraph");

var _vegaUtil = require("vega-util");

function gridLayoutGroups(group) {
  var groups = group.items,
      n = groups.length,
      i = 0,
      mark,
      items;
  var views = {
    marks: [],
    rowheaders: [],
    rowfooters: [],
    colheaders: [],
    colfooters: [],
    rowtitle: null,
    coltitle: null
  }; // layout axes, gather legends, collect bounds

  for (; i < n; ++i) {
    mark = groups[i];
    items = mark.items;

    if (mark.marktype === _constants.Group) {
      switch (mark.role) {
        case _constants.AxisRole:
        case _constants.LegendRole:
          break;

        case _constants.RowHeader:
          views.rowheaders.push(...items);
          break;

        case _constants.RowFooter:
          views.rowfooters.push(...items);
          break;

        case _constants.ColHeader:
          views.colheaders.push(...items);
          break;

        case _constants.ColFooter:
          views.colfooters.push(...items);
          break;

        case _constants.RowTitle:
          views.rowtitle = items[0];
          break;

        case _constants.ColTitle:
          views.coltitle = items[0];
          break;

        default:
          views.marks.push(...items);
      }
    }
  }

  return views;
}

function bboxFlush(item) {
  return new _vegaScenegraph.Bounds().set(0, 0, item.width || 0, item.height || 0);
}

function bboxFull(item) {
  var b = item.bounds.clone();
  return b.empty() ? b.set(0, 0, 0, 0) : b.translate(-(item.x || 0), -(item.y || 0));
}

function get(opt, key, d) {
  var v = (0, _vegaUtil.isObject)(opt) ? opt[key] : opt;
  return v != null ? v : d !== undefined ? d : 0;
}

function offsetValue(v) {
  return v < 0 ? Math.ceil(-v) : 0;
}

function gridLayout(view, groups, opt) {
  var dirty = !opt.nodirty,
      bbox = opt.bounds === _constants.Flush ? bboxFlush : bboxFull,
      bounds = _util.tempBounds.set(0, 0, 0, 0),
      alignCol = get(opt.align, _constants.Column),
      alignRow = get(opt.align, _constants.Row),
      padCol = get(opt.padding, _constants.Column),
      padRow = get(opt.padding, _constants.Row),
      ncols = opt.columns || groups.length,
      nrows = ncols < 0 ? 1 : Math.ceil(groups.length / ncols),
      n = groups.length,
      xOffset = Array(n),
      xExtent = Array(ncols),
      xMax = 0,
      yOffset = Array(n),
      yExtent = Array(nrows),
      yMax = 0,
      dx = Array(n),
      dy = Array(n),
      boxes = Array(n),
      m,
      i,
      c,
      r,
      b,
      g,
      px,
      py,
      x,
      y,
      offset;

  for (i = 0; i < ncols; ++i) xExtent[i] = 0;

  for (i = 0; i < nrows; ++i) yExtent[i] = 0; // determine offsets for each group


  for (i = 0; i < n; ++i) {
    g = groups[i];
    b = boxes[i] = bbox(g);
    g.x = g.x || 0;
    dx[i] = 0;
    g.y = g.y || 0;
    dy[i] = 0;
    c = i % ncols;
    r = ~~(i / ncols);
    xMax = Math.max(xMax, px = Math.ceil(b.x2));
    yMax = Math.max(yMax, py = Math.ceil(b.y2));
    xExtent[c] = Math.max(xExtent[c], px);
    yExtent[r] = Math.max(yExtent[r], py);
    xOffset[i] = padCol + offsetValue(b.x1);
    yOffset[i] = padRow + offsetValue(b.y1);
    if (dirty) view.dirty(groups[i]);
  } // set initial alignment offsets


  for (i = 0; i < n; ++i) {
    if (i % ncols === 0) xOffset[i] = 0;
    if (i < ncols) yOffset[i] = 0;
  } // enforce column alignment constraints


  if (alignCol === _constants.Each) {
    for (c = 1; c < ncols; ++c) {
      for (offset = 0, i = c; i < n; i += ncols) {
        if (offset < xOffset[i]) offset = xOffset[i];
      }

      for (i = c; i < n; i += ncols) {
        xOffset[i] = offset + xExtent[c - 1];
      }
    }
  } else if (alignCol === _constants.All) {
    for (offset = 0, i = 0; i < n; ++i) {
      if (i % ncols && offset < xOffset[i]) offset = xOffset[i];
    }

    for (i = 0; i < n; ++i) {
      if (i % ncols) xOffset[i] = offset + xMax;
    }
  } else {
    for (alignCol = false, c = 1; c < ncols; ++c) {
      for (i = c; i < n; i += ncols) {
        xOffset[i] += xExtent[c - 1];
      }
    }
  } // enforce row alignment constraints


  if (alignRow === _constants.Each) {
    for (r = 1; r < nrows; ++r) {
      for (offset = 0, i = r * ncols, m = i + ncols; i < m; ++i) {
        if (offset < yOffset[i]) offset = yOffset[i];
      }

      for (i = r * ncols; i < m; ++i) {
        yOffset[i] = offset + yExtent[r - 1];
      }
    }
  } else if (alignRow === _constants.All) {
    for (offset = 0, i = ncols; i < n; ++i) {
      if (offset < yOffset[i]) offset = yOffset[i];
    }

    for (i = ncols; i < n; ++i) {
      yOffset[i] = offset + yMax;
    }
  } else {
    for (alignRow = false, r = 1; r < nrows; ++r) {
      for (i = r * ncols, m = i + ncols; i < m; ++i) {
        yOffset[i] += yExtent[r - 1];
      }
    }
  } // perform horizontal grid layout


  for (x = 0, i = 0; i < n; ++i) {
    x = xOffset[i] + (i % ncols ? x : 0);
    dx[i] += x - groups[i].x;
  } // perform vertical grid layout


  for (c = 0; c < ncols; ++c) {
    for (y = 0, i = c; i < n; i += ncols) {
      y += yOffset[i];
      dy[i] += y - groups[i].y;
    }
  } // perform horizontal centering


  if (alignCol && get(opt.center, _constants.Column) && nrows > 1) {
    for (i = 0; i < n; ++i) {
      b = alignCol === _constants.All ? xMax : xExtent[i % ncols];
      x = b - boxes[i].x2 - groups[i].x - dx[i];
      if (x > 0) dx[i] += x / 2;
    }
  } // perform vertical centering


  if (alignRow && get(opt.center, _constants.Row) && ncols !== 1) {
    for (i = 0; i < n; ++i) {
      b = alignRow === _constants.All ? yMax : yExtent[~~(i / ncols)];
      y = b - boxes[i].y2 - groups[i].y - dy[i];
      if (y > 0) dy[i] += y / 2;
    }
  } // position grid relative to anchor


  for (i = 0; i < n; ++i) {
    bounds.union(boxes[i].translate(dx[i], dy[i]));
  }

  x = get(opt.anchor, _constants.X);
  y = get(opt.anchor, _constants.Y);

  switch (get(opt.anchor, _constants.Column)) {
    case _constants.End:
      x -= bounds.width();
      break;

    case _constants.Middle:
      x -= bounds.width() / 2;
  }

  switch (get(opt.anchor, _constants.Row)) {
    case _constants.End:
      y -= bounds.height();
      break;

    case _constants.Middle:
      y -= bounds.height() / 2;
  }

  x = Math.round(x);
  y = Math.round(y); // update mark positions, bounds, dirty

  bounds.clear();

  for (i = 0; i < n; ++i) {
    groups[i].mark.bounds.clear();
  }

  for (i = 0; i < n; ++i) {
    g = groups[i];
    g.x += dx[i] += x;
    g.y += dy[i] += y;
    bounds.union(g.mark.bounds.union(g.bounds.translate(dx[i], dy[i])));
    if (dirty) view.dirty(g);
  }

  return bounds;
}

function trellisLayout(view, group, opt) {
  var views = gridLayoutGroups(group),
      groups = views.marks,
      bbox = opt.bounds === _constants.Flush ? boundFlush : boundFull,
      off = opt.offset,
      ncols = opt.columns || groups.length,
      nrows = ncols < 0 ? 1 : Math.ceil(groups.length / ncols),
      cells = nrows * ncols,
      x,
      y,
      x2,
      y2,
      anchor,
      band,
      offset; // -- initial grid layout

  const bounds = gridLayout(view, groups, opt); // -- layout grid headers and footers --
  // perform row header layout

  if (views.rowheaders) {
    band = get(opt.headerBand, _constants.Row, null);
    x = layoutHeaders(view, views.rowheaders, groups, ncols, nrows, -get(off, 'rowHeader'), min, 0, bbox, 'x1', 0, ncols, 1, band);
  } // perform column header layout


  if (views.colheaders) {
    band = get(opt.headerBand, _constants.Column, null);
    y = layoutHeaders(view, views.colheaders, groups, ncols, ncols, -get(off, 'columnHeader'), min, 1, bbox, 'y1', 0, 1, ncols, band);
  } // perform row footer layout


  if (views.rowfooters) {
    band = get(opt.footerBand, _constants.Row, null);
    x2 = layoutHeaders(view, views.rowfooters, groups, ncols, nrows, get(off, 'rowFooter'), max, 0, bbox, 'x2', ncols - 1, ncols, 1, band);
  } // perform column footer layout


  if (views.colfooters) {
    band = get(opt.footerBand, _constants.Column, null);
    y2 = layoutHeaders(view, views.colfooters, groups, ncols, ncols, get(off, 'columnFooter'), max, 1, bbox, 'y2', cells - ncols, 1, ncols, band);
  } // perform row title layout


  if (views.rowtitle) {
    anchor = get(opt.titleAnchor, _constants.Row);
    offset = get(off, 'rowTitle');
    offset = anchor === _constants.End ? x2 + offset : x - offset;
    band = get(opt.titleBand, _constants.Row, 0.5);
    layoutTitle(view, views.rowtitle, offset, 0, bounds, band);
  } // perform column title layout


  if (views.coltitle) {
    anchor = get(opt.titleAnchor, _constants.Column);
    offset = get(off, 'columnTitle');
    offset = anchor === _constants.End ? y2 + offset : y - offset;
    band = get(opt.titleBand, _constants.Column, 0.5);
    layoutTitle(view, views.coltitle, offset, 1, bounds, band);
  }
}

function boundFlush(item, field) {
  return field === 'x1' ? item.x || 0 : field === 'y1' ? item.y || 0 : field === 'x2' ? (item.x || 0) + (item.width || 0) : field === 'y2' ? (item.y || 0) + (item.height || 0) : undefined;
}

function boundFull(item, field) {
  return item.bounds[field];
} // aggregation functions for grid margin determination


function min(a, b) {
  return Math.floor(Math.min(a, b));
}

function max(a, b) {
  return Math.ceil(Math.max(a, b));
}

function layoutHeaders(view, headers, groups, ncols, limit, offset, agg, isX, bound, bf, start, stride, back, band) {
  var n = groups.length,
      init = 0,
      edge = 0,
      i,
      j,
      k,
      m,
      b,
      h,
      g,
      x,
      y; // if no groups, early exit and return 0

  if (!n) return init; // compute margin

  for (i = start; i < n; i += stride) {
    if (groups[i]) init = agg(init, bound(groups[i], bf));
  } // if no headers, return margin calculation


  if (!headers.length) return init; // check if number of headers exceeds number of rows or columns

  if (headers.length > limit) {
    view.warn('Grid headers exceed limit: ' + limit);
    headers = headers.slice(0, limit);
  } // apply offset


  init += offset; // clear mark bounds for all headers

  for (j = 0, m = headers.length; j < m; ++j) {
    view.dirty(headers[j]);
    headers[j].mark.bounds.clear();
  } // layout each header


  for (i = start, j = 0, m = headers.length; j < m; ++j, i += stride) {
    h = headers[j];
    b = h.mark.bounds; // search for nearest group to align to
    // necessary if table has empty cells

    for (k = i; k >= 0 && (g = groups[k]) == null; k -= back); // assign coordinates and update bounds


    if (isX) {
      x = band == null ? g.x : Math.round(g.bounds.x1 + band * g.bounds.width());
      y = init;
    } else {
      x = init;
      y = band == null ? g.y : Math.round(g.bounds.y1 + band * g.bounds.height());
    }

    b.union(h.bounds.translate(x - (h.x || 0), y - (h.y || 0)));
    h.x = x;
    h.y = y;
    view.dirty(h); // update current edge of layout bounds

    edge = agg(edge, b[bf]);
  }

  return edge;
}

function layoutTitle(view, g, offset, isX, bounds, band) {
  if (!g) return;
  view.dirty(g); // compute title coordinates

  var x = offset,
      y = offset;
  isX ? x = Math.round(bounds.x1 + band * bounds.width()) : y = Math.round(bounds.y1 + band * bounds.height()); // assign coordinates and update bounds

  g.bounds.translate(x - (g.x || 0), y - (g.y || 0));
  g.mark.bounds.clear().union(g.bounds);
  g.x = x;
  g.y = y; // queue title for redraw

  view.dirty(g);
}
},{"../constants":"node_modules/vega-view-transforms/src/constants.js","./util":"node_modules/vega-view-transforms/src/layout/util.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view-transforms/src/layout/legend.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.legendParams = legendParams;
exports.legendLayout = legendLayout;

var _constants = require("../constants");

var _vegaScenegraph = require("vega-scenegraph");

// utility for looking up legend layout configuration
function lookup(config, orient) {
  const opt = config[orient] || {};
  return (key, d) => opt[key] != null ? opt[key] : config[key] != null ? config[key] : d;
} // if legends specify offset directly, use the maximum specified value


function offsets(legends, value) {
  var max = -Infinity;
  legends.forEach(item => {
    if (item.offset != null) max = Math.max(max, item.offset);
  });
  return max > -Infinity ? max : value;
}

function legendParams(g, orient, config, xb, yb, w, h) {
  const _ = lookup(config, orient),
        offset = offsets(g, _('offset', 0)),
        anchor = _('anchor', _constants.Start),
        mult = anchor === _constants.End ? 1 : anchor === _constants.Middle ? 0.5 : 0;

  const p = {
    align: _constants.Each,
    bounds: _('bounds', _constants.Flush),
    columns: _('direction') === 'vertical' ? 1 : g.length,
    padding: _('margin', 8),
    center: _('center'),
    nodirty: true
  };

  switch (orient) {
    case _constants.Left:
      p.anchor = {
        x: Math.floor(xb.x1) - offset,
        column: _constants.End,
        y: mult * (h || xb.height() + 2 * xb.y1),
        row: anchor
      };
      break;

    case _constants.Right:
      p.anchor = {
        x: Math.ceil(xb.x2) + offset,
        y: mult * (h || xb.height() + 2 * xb.y1),
        row: anchor
      };
      break;

    case _constants.Top:
      p.anchor = {
        y: Math.floor(yb.y1) - offset,
        row: _constants.End,
        x: mult * (w || yb.width() + 2 * yb.x1),
        column: anchor
      };
      break;

    case _constants.Bottom:
      p.anchor = {
        y: Math.ceil(yb.y2) + offset,
        x: mult * (w || yb.width() + 2 * yb.x1),
        column: anchor
      };
      break;

    case _constants.TopLeft:
      p.anchor = {
        x: offset,
        y: offset
      };
      break;

    case _constants.TopRight:
      p.anchor = {
        x: w - offset,
        y: offset,
        column: _constants.End
      };
      break;

    case _constants.BottomLeft:
      p.anchor = {
        x: offset,
        y: h - offset,
        row: _constants.End
      };
      break;

    case _constants.BottomRight:
      p.anchor = {
        x: w - offset,
        y: h - offset,
        column: _constants.End,
        row: _constants.End
      };
      break;
  }

  return p;
}

function legendLayout(view, legend) {
  var item = legend.items[0],
      datum = item.datum,
      orient = item.orient,
      bounds = item.bounds,
      x = item.x,
      y = item.y,
      w,
      h; // cache current bounds for later comparison

  item._bounds ? item._bounds.clear().union(bounds) : item._bounds = bounds.clone();
  bounds.clear(); // adjust legend to accommodate padding and title

  legendGroupLayout(view, item, item.items[0].items[0]); // aggregate bounds to determine size, and include origin

  bounds = legendBounds(item, bounds);
  w = 2 * item.padding;
  h = 2 * item.padding;

  if (!bounds.empty()) {
    w = Math.ceil(bounds.width() + w);
    h = Math.ceil(bounds.height() + h);
  }

  if (datum.type === _constants.Symbols) {
    legendEntryLayout(item.items[0].items[0].items[0].items);
  }

  if (orient !== _constants.None) {
    item.x = x = 0;
    item.y = y = 0;
  }

  item.width = w;
  item.height = h;
  (0, _vegaScenegraph.boundStroke)(bounds.set(x, y, x + w, y + h), item);
  item.mark.bounds.clear().union(bounds);
  return item;
}

function legendBounds(item, b) {
  // aggregate item bounds
  item.items.forEach(_ => b.union(_.bounds)); // anchor to legend origin

  b.x1 = item.padding;
  b.y1 = item.padding;
  return b;
}

function legendGroupLayout(view, item, entry) {
  var pad = item.padding,
      ex = pad - entry.x,
      ey = pad - entry.y;

  if (!item.datum.title) {
    if (ex || ey) translate(view, entry, ex, ey);
  } else {
    var title = item.items[1].items[0],
        anchor = title.anchor,
        tpad = item.titlePadding || 0,
        tx = pad - title.x,
        ty = pad - title.y;

    switch (title.orient) {
      case _constants.Left:
        ex += Math.ceil(title.bounds.width()) + tpad;
        break;

      case _constants.Right:
      case _constants.Bottom:
        break;

      default:
        ey += title.fontSize + tpad;
    }

    if (ex || ey) translate(view, entry, ex, ey);

    switch (title.orient) {
      case _constants.Left:
        ty += legendTitleOffset(item, entry, title, anchor, 0, 1);
        break;

      case _constants.Right:
        tx += legendTitleOffset(item, entry, title, _constants.End, 1, 0) + tpad;
        ty += legendTitleOffset(item, entry, title, anchor, 0, 1);
        break;

      case _constants.Bottom:
        tx += legendTitleOffset(item, entry, title, anchor, 1, 0);
        ty += legendTitleOffset(item, entry, title, _constants.End, 0, 0, 1) + tpad;
        break;

      default:
        tx += legendTitleOffset(item, entry, title, anchor, 1, 0);
    }

    if (tx || ty) translate(view, title, tx, ty); // translate legend if title pushes into negative coordinates

    if ((tx = Math.round(title.bounds.x1 - pad)) < 0) {
      translate(view, entry, -tx, 0);
      translate(view, title, -tx, 0);
    }
  }
}

function legendTitleOffset(item, entry, title, anchor, x, lr, noBar) {
  const grad = item.datum.type !== 'symbol',
        vgrad = title.datum.vgrad,
        e = grad && (lr || !vgrad) && !noBar ? entry.items[0] : entry,
        s = e.bounds[x ? 'x2' : 'y2'] - item.padding,
        u = vgrad && lr ? s : 0,
        v = vgrad && lr ? 0 : s;
  return Math.round(anchor === _constants.Start ? u : anchor === _constants.End ? v : 0.5 * s);
}

function translate(view, item, dx, dy) {
  item.x += dx;
  item.y += dy;
  item.bounds.translate(dx, dy);
  item.mark.bounds.translate(dx, dy);
  view.dirty(item);
}

function legendEntryLayout(entries) {
  // get max widths for each column
  var widths = entries.reduce(function (w, g) {
    w[g.column] = Math.max(g.bounds.x2 - g.x, w[g.column] || 0);
    return w;
  }, {}); // set dimensions of legend entry groups

  entries.forEach(function (g) {
    g.width = widths[g.column];
    g.height = g.bounds.y2 - g.y;
  });
}
},{"../constants":"node_modules/vega-view-transforms/src/constants.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js"}],"node_modules/vega-view-transforms/src/layout/title.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.titleLayout = titleLayout;

var _constants = require("../constants");

var _util = require("./util");

function titleLayout(view, title, width, height, viewBounds) {
  var item = title.items[0],
      frame = item.frame,
      orient = item.orient,
      anchor = item.anchor,
      offset = item.offset,
      bounds = item.bounds,
      vertical = orient === _constants.Left || orient === _constants.Right,
      start = 0,
      end = vertical ? height : width,
      x = 0,
      y = 0,
      pos;

  if (frame !== _constants.Group) {
    orient === _constants.Left ? (start = viewBounds.y2, end = viewBounds.y1) : orient === _constants.Right ? (start = viewBounds.y1, end = viewBounds.y2) : (start = viewBounds.x1, end = viewBounds.x2);
  } else if (orient === _constants.Left) {
    start = height, end = 0;
  }

  pos = anchor === _constants.Start ? start : anchor === _constants.End ? end : (start + end) / 2;

  _util.tempBounds.clear().union(bounds); // position title text


  switch (orient) {
    case _constants.Top:
      x = pos;
      y = viewBounds.y1 - offset;
      break;

    case _constants.Left:
      x = viewBounds.x1 - offset;
      y = pos;
      break;

    case _constants.Right:
      x = viewBounds.x2 + offset;
      y = pos;
      break;

    case _constants.Bottom:
      x = pos;
      y = viewBounds.y2 + offset;
      break;

    default:
      x = item.x;
      y = item.y;
  }

  bounds.translate(x - (item.x || 0), y - (item.y || 0));

  if ((0, _util.set)(item, 'x', x) | (0, _util.set)(item, 'y', y)) {
    item.bounds = _util.tempBounds;
    view.dirty(item);
    item.bounds = bounds;
    view.dirty(item);
  } // update bounds


  return title.bounds.clear().union(bounds);
}
},{"../constants":"node_modules/vega-view-transforms/src/constants.js","./util":"node_modules/vega-view-transforms/src/layout/util.js"}],"node_modules/vega-view-transforms/src/ViewLayout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ViewLayout;

var _constants = require("./constants");

var _axis = require("./layout/axis");

var _grid = require("./layout/grid");

var _legend = require("./layout/legend");

var _title = require("./layout/title");

var _vegaDataflow = require("vega-dataflow");

var _vegaScenegraph = require("vega-scenegraph");

var _vegaUtil = require("vega-util");

/**
 * Layout view elements such as axes and legends.
 * Also performs size adjustments.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.mark - Scenegraph mark of groups to layout.
 */
function ViewLayout(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(ViewLayout, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  // TODO incremental update, output?
  var view = pulse.dataflow;

  _.mark.items.forEach(function (group) {
    if (_.layout) (0, _grid.trellisLayout)(view, group, _.layout);
    layoutGroup(view, group, _);
  });

  if (_.modified()) pulse.reflow();
  return pulse;
};

function layoutGroup(view, group, _) {
  var items = group.items,
      width = Math.max(0, group.width || 0),
      height = Math.max(0, group.height || 0),
      viewBounds = new _vegaScenegraph.Bounds().set(0, 0, width, height),
      xBounds = viewBounds.clone(),
      yBounds = viewBounds.clone(),
      legends = [],
      title,
      mark,
      orient,
      b,
      i,
      n; // layout axes, gather legends, collect bounds

  for (i = 0, n = items.length; i < n; ++i) {
    mark = items[i];

    switch (mark.role) {
      case _constants.AxisRole:
        b = (0, _axis.isYAxis)(mark) ? xBounds : yBounds;
        b.union((0, _axis.axisLayout)(view, mark, width, height));
        break;

      case _constants.TitleRole:
        title = mark;
        break;

      case _constants.LegendRole:
        legends.push((0, _legend.legendLayout)(view, mark));
        break;

      case _constants.FrameRole:
      case _constants.ScopeRole:
      case _constants.RowHeader:
      case _constants.RowFooter:
      case _constants.RowTitle:
      case _constants.ColHeader:
      case _constants.ColFooter:
      case _constants.ColTitle:
        xBounds.union(mark.bounds);
        yBounds.union(mark.bounds);
        break;

      default:
        viewBounds.union(mark.bounds);
    }
  } // layout legends, adjust viewBounds


  if (legends.length) {
    // group legends by orient
    const l = {};
    legends.forEach(item => {
      orient = item.orient || _constants.Right;
      if (orient !== _constants.None) (l[orient] || (l[orient] = [])).push(item);
    }); // perform grid layout for each orient group

    for (let orient in l) {
      const g = l[orient];
      (0, _grid.gridLayout)(view, g, (0, _legend.legendParams)(g, orient, _.legends, xBounds, yBounds, width, height));
    } // update view bounds


    legends.forEach(item => {
      const b = item.bounds;

      if (!b.equals(item._bounds)) {
        item.bounds = item._bounds;
        view.dirty(item); // dirty previous location

        item.bounds = b;
        view.dirty(item);
      }

      if (_.autosize && _.autosize.type === _constants.Fit) {
        // For autosize fit, incorporate the orthogonal dimension only.
        // Legends that overrun the chart area will then be clipped;
        // otherwise the chart area gets reduced to nothing!
        switch (item.orient) {
          case _constants.Left:
          case _constants.Right:
            viewBounds.add(b.x1, 0).add(b.x2, 0);
            break;

          case _constants.Top:
          case _constants.Bottom:
            viewBounds.add(0, b.y1).add(0, b.y2);
        }
      } else {
        viewBounds.union(b);
      }
    });
  } // combine bounding boxes


  viewBounds.union(xBounds).union(yBounds); // layout title, adjust bounds

  if (title) {
    viewBounds.union((0, _title.titleLayout)(view, title, width, height, viewBounds));
  } // override aggregated view bounds if content is clipped


  if (group.clip) {
    viewBounds.set(0, 0, group.width || 0, group.height || 0);
  } // perform size adjustment


  viewSizeLayout(view, group, viewBounds, _);
}

function viewSizeLayout(view, group, viewBounds, _) {
  var auto = _.autosize || {},
      type = auto.type,
      viewWidth = view._width,
      viewHeight = view._height,
      padding = view.padding();
  if (view._autosize < 1 || !type) return;
  var width = Math.max(0, group.width || 0),
      left = Math.max(0, Math.ceil(-viewBounds.x1)),
      right = Math.max(0, Math.ceil(viewBounds.x2 - width)),
      height = Math.max(0, group.height || 0),
      top = Math.max(0, Math.ceil(-viewBounds.y1)),
      bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));

  if (auto.contains === _constants.Padding) {
    viewWidth -= padding.left + padding.right;
    viewHeight -= padding.top + padding.bottom;
  }

  if (type === _constants.None) {
    left = 0;
    top = 0;
    width = viewWidth;
    height = viewHeight;
  } else if (type === _constants.Fit) {
    width = Math.max(0, viewWidth - left - right);
    height = Math.max(0, viewHeight - top - bottom);
  } else if (type === _constants.FitX) {
    width = Math.max(0, viewWidth - left - right);
    viewHeight = height + top + bottom;
  } else if (type === _constants.FitY) {
    viewWidth = width + left + right;
    height = Math.max(0, viewHeight - top - bottom);
  } else if (type === _constants.Pad) {
    viewWidth = width + left + right;
    viewHeight = height + top + bottom;
  }

  view._resizeView(viewWidth, viewHeight, width, height, [left, top], auto.resize);
}
},{"./constants":"node_modules/vega-view-transforms/src/constants.js","./layout/axis":"node_modules/vega-view-transforms/src/layout/axis.js","./layout/grid":"node_modules/vega-view-transforms/src/layout/grid.js","./layout/legend":"node_modules/vega-view-transforms/src/layout/legend.js","./layout/title":"node_modules/vega-view-transforms/src/layout/title.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view-transforms/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bound", {
  enumerable: true,
  get: function () {
    return _Bound.default;
  }
});
Object.defineProperty(exports, "identifier", {
  enumerable: true,
  get: function () {
    return _Identifier.default;
  }
});
Object.defineProperty(exports, "mark", {
  enumerable: true,
  get: function () {
    return _Mark.default;
  }
});
Object.defineProperty(exports, "overlap", {
  enumerable: true,
  get: function () {
    return _Overlap.default;
  }
});
Object.defineProperty(exports, "render", {
  enumerable: true,
  get: function () {
    return _Render.default;
  }
});
Object.defineProperty(exports, "viewlayout", {
  enumerable: true,
  get: function () {
    return _ViewLayout.default;
  }
});

var _Bound = _interopRequireDefault(require("./src/Bound"));

var _Identifier = _interopRequireDefault(require("./src/Identifier"));

var _Mark = _interopRequireDefault(require("./src/Mark"));

var _Overlap = _interopRequireDefault(require("./src/Overlap"));

var _Render = _interopRequireDefault(require("./src/Render"));

var _ViewLayout = _interopRequireDefault(require("./src/ViewLayout"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/Bound":"node_modules/vega-view-transforms/src/Bound.js","./src/Identifier":"node_modules/vega-view-transforms/src/Identifier.js","./src/Mark":"node_modules/vega-view-transforms/src/Mark.js","./src/Overlap":"node_modules/vega-view-transforms/src/Overlap.js","./src/Render":"node_modules/vega-view-transforms/src/Render.js","./src/ViewLayout":"node_modules/vega-view-transforms/src/ViewLayout.js"}],"node_modules/vega-scale/src/scales/bandSpace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(count, paddingInner, paddingOuter) {
  var space = count - paddingInner + paddingOuter * 2;
  return count ? space > 0 ? space : 1 : 0;
}
},{}],"node_modules/vega-scale/src/scales/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValidScaleType = isValidScaleType;
exports.isTemporal = isTemporal;
exports.isBinned = isBinned;
exports.isQuantile = isQuantile;
exports.isSequential = isSequential;
exports.isDiverging = isDiverging;
exports.isInterpolating = isInterpolating;
exports.isLogarithmic = isLogarithmic;
exports.isContinuous = isContinuous;
exports.isDiscrete = isDiscrete;
exports.isDiscretizing = isDiscretizing;
exports.BinOrdinal = exports.Band = exports.Point = exports.Ordinal = exports.Threshold = exports.Quantize = exports.Quantile = exports.Diverging = exports.Sequential = exports.UTC = exports.Time = exports.Symlog = exports.Sqrt = exports.Pow = exports.Log = exports.Linear = exports.Identity = void 0;
const Identity = 'identity';
exports.Identity = Identity;
const Linear = 'linear';
exports.Linear = Linear;
const Log = 'log';
exports.Log = Log;
const Pow = 'pow';
exports.Pow = Pow;
const Sqrt = 'sqrt';
exports.Sqrt = Sqrt;
const Symlog = 'symlog';
exports.Symlog = Symlog;
const Time = 'time';
exports.Time = Time;
const UTC = 'utc';
exports.UTC = UTC;
const Sequential = 'sequential';
exports.Sequential = Sequential;
const Diverging = 'diverging';
exports.Diverging = Diverging;
const Quantile = 'quantile';
exports.Quantile = Quantile;
const Quantize = 'quantize';
exports.Quantize = Quantize;
const Threshold = 'threshold';
exports.Threshold = Threshold;
const Ordinal = 'ordinal';
exports.Ordinal = Ordinal;
const Point = 'point';
exports.Point = Point;
const Band = 'band';
exports.Band = Band;
const BinOrdinal = 'bin-ordinal';
exports.BinOrdinal = BinOrdinal;

function isValidScaleType(type) {
  switch (type) {
    case Identity:
    case Linear:
    case Log:
    case Pow:
    case Sqrt:
    case Symlog:
    case Time:
    case UTC:
    case Sequential:
    case Quantile:
    case Quantize:
    case Threshold:
    case Ordinal:
    case Point:
    case Band:
    case BinOrdinal:
      return true;
  }

  return false;
}

function isTemporal(key) {
  return key === Time || key === UTC;
}

function isBinned(key) {
  return key === BinOrdinal;
}

function isQuantile(key) {
  return key === Quantile;
}

function isSequential(key) {
  return key && key.startsWith(Sequential);
}

function isDiverging(key) {
  return key && key.startsWith(Diverging);
}

function isInterpolating(key) {
  return isSequential(key) || isDiverging(key);
}

function isLogarithmic(key) {
  return key === Log || key.endsWith('-log');
}

function isContinuous(key) {
  switch (key) {
    case Linear:
    case Log:
    case Pow:
    case Sqrt:
    case Symlog:
    case Time:
    case UTC:
    case Sequential:
      return true;
  }

  return false;
}

function isDiscrete(key) {
  return key === BinOrdinal || key === Ordinal || key === Band || key === Point;
}

function isDiscretizing(key) {
  return key === BinOrdinal || key === Quantile || key === Quantize || key === Threshold;
}
},{}],"node_modules/vega-scale/src/scales/timeInterval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timeInterval = timeInterval;

var _vegaUtil = require("vega-util");

var _types = require("./types");

var _d3Time = require("d3-time");

var time = {
  millisecond: _d3Time.timeMillisecond,
  second: _d3Time.timeSecond,
  minute: _d3Time.timeMinute,
  hour: _d3Time.timeHour,
  day: _d3Time.timeDay,
  week: _d3Time.timeWeek,
  month: _d3Time.timeMonth,
  year: _d3Time.timeYear
};
var utc = {
  millisecond: _d3Time.utcMillisecond,
  second: _d3Time.utcSecond,
  minute: _d3Time.utcMinute,
  hour: _d3Time.utcHour,
  day: _d3Time.utcDay,
  week: _d3Time.utcWeek,
  month: _d3Time.utcMonth,
  year: _d3Time.utcYear
};

function timeInterval(unit, type) {
  const t = type === _types.UTC ? utc : time;
  return (0, _vegaUtil.hasOwnProperty)(t, unit) && t[unit];
}
},{"vega-util":"node_modules/vega-util/index.js","./types":"node_modules/vega-scale/src/scales/types.js","d3-time":"node_modules/d3-time/src/index.js"}],"node_modules/vega-scale/src/scales/invertRange.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(scale) {
  return function (_) {
    var lo = _[0],
        hi = _[1],
        t;

    if (hi < lo) {
      t = lo;
      lo = hi;
      hi = t;
    }

    return [scale.invert(lo), scale.invert(hi)];
  };
}
},{}],"node_modules/vega-scale/src/scales/invertRangeExtent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(scale) {
  return function (_) {
    var range = scale.range(),
        lo = _[0],
        hi = _[1],
        min = -1,
        max,
        t,
        i,
        n;

    if (hi < lo) {
      t = lo;
      lo = hi;
      hi = t;
    }

    for (i = 0, n = range.length; i < n; ++i) {
      if (range[i] >= lo && range[i] <= hi) {
        if (min < 0) min = i;
        max = i;
      }
    }

    if (min < 0) return undefined;
    lo = scale.invertExtent(range[min]);
    hi = scale.invertExtent(range[max]);
    return [lo[0] === undefined ? lo[1] : lo[0], hi[1] === undefined ? hi[0] : hi[1]];
  };
}
},{}],"node_modules/d3-scale/src/init.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initRange = initRange;
exports.initInterpolator = initInterpolator;

function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.range(domain);
      break;

    default:
      this.range(range).domain(domain);
      break;
  }

  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.interpolator(domain);
      break;

    default:
      this.interpolator(interpolator).domain(domain);
      break;
  }

  return this;
}
},{}],"node_modules/d3-scale/src/ordinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ordinal;
exports.implicit = void 0;

var _init = require("./init.js");

const implicit = Symbol("implicit");
exports.implicit = implicit;

function ordinal() {
  var index = new Map(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    var key = d + "",
        i = index.get(key);

    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }

    return range[(i - 1) % range.length];
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = new Map();

    for (const value of _) {
      const key = value + "";
      if (index.has(key)) continue;
      index.set(key, domain.push(value));
    }

    return scale;
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return ordinal(domain, range).unknown(unknown);
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}
},{"./init.js":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/band.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = band;
exports.point = point;

var _d3Array = require("d3-array");

var _init = require("./init.js");

var _ordinal = _interopRequireDefault(require("./ordinal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function band() {
  var scale = (0, _ordinal.default)().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      r0 = 0,
      r1 = 1,
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;
  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = r1 < r0,
        start = reverse ? r1 : r0,
        stop = reverse ? r0 : r1;
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = (0, _d3Array.range)(n).map(function (i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function (_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };

  scale.rangeRound = function (_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };

  scale.bandwidth = function () {
    return bandwidth;
  };

  scale.step = function () {
    return step;
  };

  scale.round = function (_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function (_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function (_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function () {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };

  return _init.initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function () {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}
},{"d3-array":"node_modules/d3-array/src/index.js","./init.js":"node_modules/d3-scale/src/init.js","./ordinal.js":"node_modules/d3-scale/src/ordinal.js"}],"node_modules/d3-color/src/define.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.extend = extend;

function _default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);

  for (var key in definition) prototype[key] = definition[key];

  return prototype;
}
},{}],"node_modules/d3-color/src/color.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Color = Color;
exports.default = color;
exports.rgbConvert = rgbConvert;
exports.rgb = rgb;
exports.Rgb = Rgb;
exports.hslConvert = hslConvert;
exports.hsl = hsl;
exports.brighter = exports.darker = void 0;

var _define = _interopRequireWildcard(require("./define"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function Color() {}

var darker = 0.7;
exports.darker = darker;
var brighter = 1 / darker;
exports.brighter = brighter;
var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex3 = /^#([0-9a-f]{3})$/,
    reHex6 = /^#([0-9a-f]{6})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};
(0, _define.default)(Color, color, {
  copy: function (channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function () {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m;
  format = (format + "").trim().toLowerCase();
  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 0xf | m >> 4 & 0x0f0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
  ) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
  : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
  : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Rgb, rgb, (0, _define.extend)(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function () {
    return this;
  },
  displayable: function () {
    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity;
  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;

  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }

  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Hsl, hsl, (0, _define.extend)(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function () {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  },
  formatHsl: function () {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
  }
}));
/* From FvD 13.37, CSS Color Module Level 3 */

function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
},{"./define":"node_modules/d3-color/src/define.js"}],"node_modules/d3-color/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rad2deg = exports.deg2rad = void 0;
var deg2rad = Math.PI / 180;
exports.deg2rad = deg2rad;
var rad2deg = 180 / Math.PI;
exports.rad2deg = rad2deg;
},{}],"node_modules/d3-color/src/lab.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gray = gray;
exports.default = lab;
exports.Lab = Lab;
exports.lch = lch;
exports.hcl = hcl;
exports.Hcl = Hcl;

var _define = _interopRequireWildcard(require("./define"));

var _color = require("./color");

var _math = require("./math");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// https://observablehq.com/@mbostock/lab-and-rgb
var K = 18,
    Xn = 0.96422,
    Yn = 1,
    Zn = 0.82521,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) return hcl2lab(o);
  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),
      x,
      z;
  if (r === g && g === b) x = z = y;else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Lab, lab, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function (k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function () {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new _color.Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);

  var h = Math.atan2(o.b, o.a) * _math.rad2deg;

  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function lch(l, c, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

function hcl2lab(o) {
  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * _math.deg2rad;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}

(0, _define.default)(Hcl, hcl, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker: function (k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb: function () {
    return hcl2lab(this).rgb();
  }
}));
},{"./define":"node_modules/d3-color/src/define.js","./color":"node_modules/d3-color/src/color.js","./math":"node_modules/d3-color/src/math.js"}],"node_modules/d3-color/src/cubehelix.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cubehelix;
exports.Cubehelix = Cubehelix;

var _define = _interopRequireWildcard(require("./define"));

var _color = require("./color");

var _math = require("./math");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
      // NaN if l=0 or l=1
  h = s ? Math.atan2(k, bl) * _math.rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Cubehelix, cubehelix, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    k = k == null ? _color.brighter : Math.pow(_color.brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? _color.darker : Math.pow(_color.darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * _math.deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new _color.Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
  }
}));
},{"./define":"node_modules/d3-color/src/define.js","./color":"node_modules/d3-color/src/color.js","./math":"node_modules/d3-color/src/math.js"}],"node_modules/d3-color/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "color", {
  enumerable: true,
  get: function () {
    return _color.default;
  }
});
Object.defineProperty(exports, "rgb", {
  enumerable: true,
  get: function () {
    return _color.rgb;
  }
});
Object.defineProperty(exports, "hsl", {
  enumerable: true,
  get: function () {
    return _color.hsl;
  }
});
Object.defineProperty(exports, "lab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "hcl", {
  enumerable: true,
  get: function () {
    return _lab.hcl;
  }
});
Object.defineProperty(exports, "lch", {
  enumerable: true,
  get: function () {
    return _lab.lch;
  }
});
Object.defineProperty(exports, "gray", {
  enumerable: true,
  get: function () {
    return _lab.gray;
  }
});
Object.defineProperty(exports, "cubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});

var _color = _interopRequireWildcard(require("./color"));

var _lab = _interopRequireWildcard(require("./lab"));

var _cubehelix = _interopRequireDefault(require("./cubehelix"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./color":"node_modules/d3-color/src/color.js","./lab":"node_modules/d3-color/src/lab.js","./cubehelix":"node_modules/d3-color/src/cubehelix.js"}],"node_modules/d3-interpolate/src/basis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basis = basis;
exports.default = _default;

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1,
      t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}

function _default(values) {
  var n = values.length - 1;
  return function (t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
},{}],"node_modules/d3-interpolate/src/basisClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis");

function _default(values) {
  var n = values.length;
  return function (t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return (0, _basis.basis)((t - i / n) * n, v0, v1, v2, v3);
  };
}
},{"./basis":"node_modules/d3-interpolate/src/basis.js"}],"node_modules/d3-interpolate/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-interpolate/src/color.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hue = hue;
exports.gamma = gamma;
exports.default = nogamma;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linear(a, d) {
  return function (t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0, _constant.default)(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential(a, b, y) : (0, _constant.default)(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : (0, _constant.default)(isNaN(a) ? b : a);
}
},{"./constant":"node_modules/d3-interpolate/src/constant.js"}],"node_modules/d3-interpolate/src/rgb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rgbBasisClosed = exports.rgbBasis = exports.default = void 0;

var _d3Color = require("d3-color");

var _basis = _interopRequireDefault(require("./basis"));

var _basisClosed = _interopRequireDefault(require("./basisClosed"));

var _color = _interopRequireWildcard(require("./color"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function rgbGamma(y) {
  var color = (0, _color.gamma)(y);

  function rgb(start, end) {
    var r = color((start = (0, _d3Color.rgb)(start)).r, (end = (0, _d3Color.rgb)(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;
  return rgb;
}(1);

exports.default = _default;

function rgbSpline(spline) {
  return function (colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i,
        color;

    for (i = 0; i < n; ++i) {
      color = (0, _d3Color.rgb)(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }

    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function (t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(_basis.default);
exports.rgbBasis = rgbBasis;
var rgbBasisClosed = rgbSpline(_basisClosed.default);
exports.rgbBasisClosed = rgbBasisClosed;
},{"d3-color":"node_modules/d3-color/src/index.js","./basis":"node_modules/d3-interpolate/src/basis.js","./basisClosed":"node_modules/d3-interpolate/src/basisClosed.js","./color":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _value = _interopRequireDefault(require("./value"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = (0, _value.default)(a[i], b[i]);

  for (; i < nb; ++i) c[i] = b[i];

  return function (t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);

    return c;
  };
}
},{"./value":"node_modules/d3-interpolate/src/value.js"}],"node_modules/d3-interpolate/src/date.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  var d = new Date();
  return a = +a, b -= a, function (t) {
    return d.setTime(a + b * t), d;
  };
}
},{}],"node_modules/d3-interpolate/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b -= a, function (t) {
    return a + b * t;
  };
}
},{}],"node_modules/d3-interpolate/src/object.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _value = _interopRequireDefault(require("./value"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var i = {},
      c = {},
      k;
  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = (0, _value.default)(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function (t) {
    for (k in i) c[k] = i[k](t);

    return c;
  };
}
},{"./value":"node_modules/d3-interpolate/src/value.js"}],"node_modules/d3-interpolate/src/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function () {
    return b;
  };
}

function one(b) {
  return function (t) {
    return b(t) + "";
  };
}

function _default(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0,
      // scan index for next number in b
  am,
      // current match in a
  bm,
      // current match in b
  bs,
      // string preceding current number in b, if any
  i = -1,
      // index in s
  s = [],
      // string constants and placeholders
  q = []; // number interpolators
  // Coerce inputs to strings.

  a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }

    if ((am = am[0]) === (bm = bm[0])) {
      // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else {
      // interpolate non-matching numbers
      s[++i] = null;
      q.push({
        i: i,
        x: (0, _number.default)(am, bm)
      });
    }

    bi = reB.lastIndex;
  } // Add remains of b.


  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  } // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.


  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);

    return s.join("");
  });
}
},{"./number":"node_modules/d3-interpolate/src/number.js"}],"node_modules/d3-interpolate/src/value.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var _rgb = _interopRequireDefault(require("./rgb"));

var _array = _interopRequireDefault(require("./array"));

var _date = _interopRequireDefault(require("./date"));

var _number = _interopRequireDefault(require("./number"));

var _object = _interopRequireDefault(require("./object"));

var _string = _interopRequireDefault(require("./string"));

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var t = typeof b,
      c;
  return b == null || t === "boolean" ? (0, _constant.default)(b) : (t === "number" ? _number.default : t === "string" ? (c = (0, _d3Color.color)(b)) ? (b = c, _rgb.default) : _string.default : b instanceof _d3Color.color ? _rgb.default : b instanceof Date ? _date.default : Array.isArray(b) ? _array.default : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? _object.default : _number.default)(a, b);
}
},{"d3-color":"node_modules/d3-color/src/index.js","./rgb":"node_modules/d3-interpolate/src/rgb.js","./array":"node_modules/d3-interpolate/src/array.js","./date":"node_modules/d3-interpolate/src/date.js","./number":"node_modules/d3-interpolate/src/number.js","./object":"node_modules/d3-interpolate/src/object.js","./string":"node_modules/d3-interpolate/src/string.js","./constant":"node_modules/d3-interpolate/src/constant.js"}],"node_modules/d3-interpolate/src/discrete.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
},{}],"node_modules/d3-interpolate/src/hue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _color = require("./color");

function _default(a, b) {
  var i = (0, _color.hue)(+a, +b);
  return function (t) {
    var x = i(t);
    return x - 360 * Math.floor(x / 360);
  };
}
},{"./color":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b -= a, function (t) {
    return Math.round(a + b * t);
  };
}
},{}],"node_modules/d3-interpolate/src/transform/decompose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.identity = void 0;
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
exports.identity = identity;

function _default(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}
},{}],"node_modules/d3-interpolate/src/transform/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseCss = parseCss;
exports.parseSvg = parseSvg;

var _decompose = _interopRequireWildcard(require("./decompose"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var cssNode, cssRoot, cssView, svgNode;

function parseCss(value) {
  if (value === "none") return _decompose.identity;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return (0, _decompose.default)(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return _decompose.identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return _decompose.identity;
  value = value.matrix;
  return (0, _decompose.default)(value.a, value.b, value.c, value.d, value.e, value.f);
}
},{"./decompose":"node_modules/d3-interpolate/src/transform/decompose.js"}],"node_modules/d3-interpolate/src/transform/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interpolateTransformSvg = exports.interpolateTransformCss = void 0;

var _number = _interopRequireDefault(require("../number"));

var _parse = require("./parse");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

      q.push({
        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({
        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function (a, b) {
    var s = [],
        // string constants and placeholders
    q = []; // number interpolators

    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc

    return function (t) {
      var i = -1,
          n = q.length,
          o;

      while (++i < n) s[(o = q[i]).i] = o.x(t);

      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(_parse.parseCss, "px, ", "px)", "deg)");
exports.interpolateTransformCss = interpolateTransformCss;
var interpolateTransformSvg = interpolateTransform(_parse.parseSvg, ", ", ")", ")");
exports.interpolateTransformSvg = interpolateTransformSvg;
},{"../number":"node_modules/d3-interpolate/src/number.js","./parse":"node_modules/d3-interpolate/src/transform/parse.js"}],"node_modules/d3-interpolate/src/zoom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
} // p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]


function _default(p0, p1) {
  var ux0 = p0[0],
      uy0 = p0[1],
      w0 = p0[2],
      ux1 = p1[0],
      uy1 = p1[1],
      w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S; // Special case for u0 ≅ u1.

  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;

    i = function (t) {
      return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
    };
  } // General case.
  else {
      var d1 = Math.sqrt(d2),
          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;

      i = function (t) {
        var s = t * S,
            coshr0 = cosh(r0),
            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
      };
    }

  i.duration = S * 1000;
  return i;
}
},{}],"node_modules/d3-interpolate/src/hsl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hslLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function hsl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _d3Color.hsl)(start)).h, (end = (0, _d3Color.hsl)(end)).h),
        s = (0, _color.default)(start.s, end.s),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hsl(_color.hue);

exports.default = _default;
var hslLong = hsl(_color.default);
exports.hslLong = hslLong;
},{"d3-color":"node_modules/d3-color/src/index.js","./color":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/lab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = lab;

var _d3Color = require("d3-color");

var _color = _interopRequireDefault(require("./color"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lab(start, end) {
  var l = (0, _color.default)((start = (0, _d3Color.lab)(start)).l, (end = (0, _d3Color.lab)(end)).l),
      a = (0, _color.default)(start.a, end.a),
      b = (0, _color.default)(start.b, end.b),
      opacity = (0, _color.default)(start.opacity, end.opacity);
  return function (t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}
},{"d3-color":"node_modules/d3-color/src/index.js","./color":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/hcl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hclLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function hcl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _d3Color.hcl)(start)).h, (end = (0, _d3Color.hcl)(end)).h),
        c = (0, _color.default)(start.c, end.c),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hcl(_color.hue);

exports.default = _default;
var hclLong = hcl(_color.default);
exports.hclLong = hclLong;
},{"d3-color":"node_modules/d3-color/src/index.js","./color":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/cubehelix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubehelixLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function cubehelix(hue) {
  return function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = (0, _d3Color.cubehelix)(start)).h, (end = (0, _d3Color.cubehelix)(end)).h),
          s = (0, _color.default)(start.s, end.s),
          l = (0, _color.default)(start.l, end.l),
          opacity = (0, _color.default)(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;
    return cubehelix;
  }(1);
}

var _default = cubehelix(_color.hue);

exports.default = _default;
var cubehelixLong = cubehelix(_color.default);
exports.cubehelixLong = cubehelixLong;
},{"d3-color":"node_modules/d3-color/src/index.js","./color":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/piecewise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = piecewise;

function piecewise(interpolate, values) {
  var i = 0,
      n = values.length - 1,
      v = values[0],
      I = new Array(n < 0 ? 0 : n);

  while (i < n) I[i] = interpolate(v, v = values[++i]);

  return function (t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}
},{}],"node_modules/d3-interpolate/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(interpolator, n) {
  var samples = new Array(n);

  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));

  return samples;
}
},{}],"node_modules/d3-interpolate/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "interpolate", {
  enumerable: true,
  get: function () {
    return _value.default;
  }
});
Object.defineProperty(exports, "interpolateArray", {
  enumerable: true,
  get: function () {
    return _array.default;
  }
});
Object.defineProperty(exports, "interpolateBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "interpolateBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "interpolateDate", {
  enumerable: true,
  get: function () {
    return _date.default;
  }
});
Object.defineProperty(exports, "interpolateDiscrete", {
  enumerable: true,
  get: function () {
    return _discrete.default;
  }
});
Object.defineProperty(exports, "interpolateHue", {
  enumerable: true,
  get: function () {
    return _hue.default;
  }
});
Object.defineProperty(exports, "interpolateNumber", {
  enumerable: true,
  get: function () {
    return _number.default;
  }
});
Object.defineProperty(exports, "interpolateObject", {
  enumerable: true,
  get: function () {
    return _object.default;
  }
});
Object.defineProperty(exports, "interpolateRound", {
  enumerable: true,
  get: function () {
    return _round.default;
  }
});
Object.defineProperty(exports, "interpolateString", {
  enumerable: true,
  get: function () {
    return _string.default;
  }
});
Object.defineProperty(exports, "interpolateTransformCss", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformCss;
  }
});
Object.defineProperty(exports, "interpolateTransformSvg", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformSvg;
  }
});
Object.defineProperty(exports, "interpolateZoom", {
  enumerable: true,
  get: function () {
    return _zoom.default;
  }
});
Object.defineProperty(exports, "interpolateRgb", {
  enumerable: true,
  get: function () {
    return _rgb.default;
  }
});
Object.defineProperty(exports, "interpolateRgbBasis", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasis;
  }
});
Object.defineProperty(exports, "interpolateRgbBasisClosed", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasisClosed;
  }
});
Object.defineProperty(exports, "interpolateHsl", {
  enumerable: true,
  get: function () {
    return _hsl.default;
  }
});
Object.defineProperty(exports, "interpolateHslLong", {
  enumerable: true,
  get: function () {
    return _hsl.hslLong;
  }
});
Object.defineProperty(exports, "interpolateLab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "interpolateHcl", {
  enumerable: true,
  get: function () {
    return _hcl.default;
  }
});
Object.defineProperty(exports, "interpolateHclLong", {
  enumerable: true,
  get: function () {
    return _hcl.hclLong;
  }
});
Object.defineProperty(exports, "interpolateCubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateCubehelixLong", {
  enumerable: true,
  get: function () {
    return _cubehelix.cubehelixLong;
  }
});
Object.defineProperty(exports, "piecewise", {
  enumerable: true,
  get: function () {
    return _piecewise.default;
  }
});
Object.defineProperty(exports, "quantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});

var _value = _interopRequireDefault(require("./value"));

var _array = _interopRequireDefault(require("./array"));

var _basis = _interopRequireDefault(require("./basis"));

var _basisClosed = _interopRequireDefault(require("./basisClosed"));

var _date = _interopRequireDefault(require("./date"));

var _discrete = _interopRequireDefault(require("./discrete"));

var _hue = _interopRequireDefault(require("./hue"));

var _number = _interopRequireDefault(require("./number"));

var _object = _interopRequireDefault(require("./object"));

var _round = _interopRequireDefault(require("./round"));

var _string = _interopRequireDefault(require("./string"));

var _index = require("./transform/index");

var _zoom = _interopRequireDefault(require("./zoom"));

var _rgb = _interopRequireWildcard(require("./rgb"));

var _hsl = _interopRequireWildcard(require("./hsl"));

var _lab = _interopRequireDefault(require("./lab"));

var _hcl = _interopRequireWildcard(require("./hcl"));

var _cubehelix = _interopRequireWildcard(require("./cubehelix"));

var _piecewise = _interopRequireDefault(require("./piecewise"));

var _quantize = _interopRequireDefault(require("./quantize"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./value":"node_modules/d3-interpolate/src/value.js","./array":"node_modules/d3-interpolate/src/array.js","./basis":"node_modules/d3-interpolate/src/basis.js","./basisClosed":"node_modules/d3-interpolate/src/basisClosed.js","./date":"node_modules/d3-interpolate/src/date.js","./discrete":"node_modules/d3-interpolate/src/discrete.js","./hue":"node_modules/d3-interpolate/src/hue.js","./number":"node_modules/d3-interpolate/src/number.js","./object":"node_modules/d3-interpolate/src/object.js","./round":"node_modules/d3-interpolate/src/round.js","./string":"node_modules/d3-interpolate/src/string.js","./transform/index":"node_modules/d3-interpolate/src/transform/index.js","./zoom":"node_modules/d3-interpolate/src/zoom.js","./rgb":"node_modules/d3-interpolate/src/rgb.js","./hsl":"node_modules/d3-interpolate/src/hsl.js","./lab":"node_modules/d3-interpolate/src/lab.js","./hcl":"node_modules/d3-interpolate/src/hcl.js","./cubehelix":"node_modules/d3-interpolate/src/cubehelix.js","./piecewise":"node_modules/d3-interpolate/src/piecewise.js","./quantize":"node_modules/d3-interpolate/src/quantize.js"}],"node_modules/d3-scale/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-scale/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return +x;
}
},{}],"node_modules/d3-scale/src/continuous.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.identity = identity;
exports.copy = copy;
exports.transformer = transformer;
exports.default = continuous;

var _d3Array = require("d3-array");

var _d3Interpolate = require("d3-interpolate");

var _constant = _interopRequireDefault(require("./constant.js"));

var _number = _interopRequireDefault(require("./number.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var unit = [0, 1];

function identity(x) {
  return x;
}

function normalize(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : (0, _constant.default)(isNaN(b) ? NaN : 0.5);
}

function clamper(a, b) {
  var t;
  if (a > b) t = a, a = b, b = t;
  return function (x) {
    return Math.max(a, Math.min(b, x));
  };
} // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


function bimap(domain, range, interpolate) {
  var d0 = domain[0],
      d1 = domain[1],
      r0 = range[0],
      r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1; // Reverse descending domains.

  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function (x) {
    var i = (0, _d3Array.bisect)(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}

function transformer() {
  var domain = unit,
      range = unit,
      interpolate = _d3Interpolate.interpolate,
      transform,
      untransform,
      unknown,
      clamp = identity,
      piecewise,
      output,
      input;

  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function (y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), _d3Interpolate.interpolateNumber)))(y)));
  };

  scale.domain = function (_) {
    return arguments.length ? (domain = Array.from(_, _number.default), rescale()) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = Array.from(_), interpolate = _d3Interpolate.interpolateRound, rescale();
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
  };

  scale.interpolate = function (_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous() {
  return transformer()(identity, identity);
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js","./constant.js":"node_modules/d3-scale/src/constant.js","./number.js":"node_modules/d3-scale/src/number.js"}],"node_modules/d3-format/src/formatDecimal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
function _default(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

  var i,
      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}
},{}],"node_modules/d3-format/src/exponent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x) {
  return x = (0, _formatDecimal.default)(Math.abs(x)), x ? x[1] : NaN;
}
},{"./formatDecimal.js":"node_modules/d3-format/src/formatDecimal.js"}],"node_modules/d3-format/src/formatGroup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(grouping, thousands) {
  return function (value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}
},{}],"node_modules/d3-format/src/formatNumerals.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}
},{}],"node_modules/d3-format/src/formatSpecifier.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatSpecifier;
exports.FormatSpecifier = FormatSpecifier;
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
},{}],"node_modules/d3-format/src/formatTrim.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function _default(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;

      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;

      default:
        if (i0 > 0) {
          if (!+s[i]) break out;
          i0 = 0;
        }

        break;
    }
  }

  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}
},{}],"node_modules/d3-format/src/formatPrefixAuto.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.prefixExponent = void 0;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixExponent;
exports.prefixExponent = prefixExponent;

function _default(x, p) {
  var d = (0, _formatDecimal.default)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (exports.prefixExponent = prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, _formatDecimal.default)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}
},{"./formatDecimal.js":"node_modules/d3-format/src/formatDecimal.js"}],"node_modules/d3-format/src/formatRounded.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, p) {
  var d = (0, _formatDecimal.default)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
},{"./formatDecimal.js":"node_modules/d3-format/src/formatDecimal.js"}],"node_modules/d3-format/src/formatTypes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formatPrefixAuto = _interopRequireDefault(require("./formatPrefixAuto.js"));

var _formatRounded = _interopRequireDefault(require("./formatRounded.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  "%": function (x, p) {
    return (x * 100).toFixed(p);
  },
  "b": function (x) {
    return Math.round(x).toString(2);
  },
  "c": function (x) {
    return x + "";
  },
  "d": function (x) {
    return Math.round(x).toString(10);
  },
  "e": function (x, p) {
    return x.toExponential(p);
  },
  "f": function (x, p) {
    return x.toFixed(p);
  },
  "g": function (x, p) {
    return x.toPrecision(p);
  },
  "o": function (x) {
    return Math.round(x).toString(8);
  },
  "p": function (x, p) {
    return (0, _formatRounded.default)(x * 100, p);
  },
  "r": _formatRounded.default,
  "s": _formatPrefixAuto.default,
  "X": function (x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function (x) {
    return Math.round(x).toString(16);
  }
};
exports.default = _default;
},{"./formatPrefixAuto.js":"node_modules/d3-format/src/formatPrefixAuto.js","./formatRounded.js":"node_modules/d3-format/src/formatRounded.js"}],"node_modules/d3-format/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-format/src/locale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

var _formatGroup = _interopRequireDefault(require("./formatGroup.js"));

var _formatNumerals = _interopRequireDefault(require("./formatNumerals.js"));

var _formatSpecifier = _interopRequireDefault(require("./formatSpecifier.js"));

var _formatTrim = _interopRequireDefault(require("./formatTrim.js"));

var _formatTypes = _interopRequireDefault(require("./formatTypes.js"));

var _formatPrefixAuto = require("./formatPrefixAuto.js");

var _identity = _interopRequireDefault(require("./identity.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var map = Array.prototype.map,
    prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];

function _default(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "-" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = (0, _formatSpecifier.default)(specifier);
    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type; // The "n" type is an alias for ",g".

    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!_formatTypes.default[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.

    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?

    var formatType = _formatTypes.default[type],
        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].

    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value; // Perform the initial formatting.

        var valueNegative = value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

        if (trim) value = (0, _formatTrim.default)(value); // If a negative value rounds to zero during formatting, treat as positive.

        if (valueNegative && +value === 0) valueNegative = false; // Compute the prefix and suffix.

        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.

        if (maybeSuffix) {
          i = -1, n = value.length;

          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      } // If the fill character is not "0", grouping is applied before padding.


      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;

        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;

        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;

        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }

      return numerals(value);
    }

    format.toString = function () {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}
},{"./exponent.js":"node_modules/d3-format/src/exponent.js","./formatGroup.js":"node_modules/d3-format/src/formatGroup.js","./formatNumerals.js":"node_modules/d3-format/src/formatNumerals.js","./formatSpecifier.js":"node_modules/d3-format/src/formatSpecifier.js","./formatTrim.js":"node_modules/d3-format/src/formatTrim.js","./formatTypes.js":"node_modules/d3-format/src/formatTypes.js","./formatPrefixAuto.js":"node_modules/d3-format/src/formatPrefixAuto.js","./identity.js":"node_modules/d3-format/src/identity.js"}],"node_modules/d3-format/src/defaultLocale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.formatPrefix = exports.format = void 0;

var _locale = _interopRequireDefault(require("./locale.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var format;
exports.format = format;
var formatPrefix;
exports.formatPrefix = formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.format = format = locale.format;
  exports.formatPrefix = formatPrefix = locale.formatPrefix;
  return locale;
}
},{"./locale.js":"node_modules/d3-format/src/locale.js"}],"node_modules/d3-format/src/precisionFixed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step) {
  return Math.max(0, -(0, _exponent.default)(Math.abs(step)));
}
},{"./exponent.js":"node_modules/d3-format/src/exponent.js"}],"node_modules/d3-format/src/precisionPrefix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3 - (0, _exponent.default)(Math.abs(step)));
}
},{"./exponent.js":"node_modules/d3-format/src/exponent.js"}],"node_modules/d3-format/src/precisionRound.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, (0, _exponent.default)(max) - (0, _exponent.default)(step)) + 1;
}
},{"./exponent.js":"node_modules/d3-format/src/exponent.js"}],"node_modules/d3-format/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "formatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "format", {
  enumerable: true,
  get: function () {
    return _defaultLocale.format;
  }
});
Object.defineProperty(exports, "formatPrefix", {
  enumerable: true,
  get: function () {
    return _defaultLocale.formatPrefix;
  }
});
Object.defineProperty(exports, "formatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "formatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.default;
  }
});
Object.defineProperty(exports, "FormatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.FormatSpecifier;
  }
});
Object.defineProperty(exports, "precisionFixed", {
  enumerable: true,
  get: function () {
    return _precisionFixed.default;
  }
});
Object.defineProperty(exports, "precisionPrefix", {
  enumerable: true,
  get: function () {
    return _precisionPrefix.default;
  }
});
Object.defineProperty(exports, "precisionRound", {
  enumerable: true,
  get: function () {
    return _precisionRound.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale.js"));

var _locale = _interopRequireDefault(require("./locale.js"));

var _formatSpecifier = _interopRequireWildcard(require("./formatSpecifier.js"));

var _precisionFixed = _interopRequireDefault(require("./precisionFixed.js"));

var _precisionPrefix = _interopRequireDefault(require("./precisionPrefix.js"));

var _precisionRound = _interopRequireDefault(require("./precisionRound.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./defaultLocale.js":"node_modules/d3-format/src/defaultLocale.js","./locale.js":"node_modules/d3-format/src/locale.js","./formatSpecifier.js":"node_modules/d3-format/src/formatSpecifier.js","./precisionFixed.js":"node_modules/d3-format/src/precisionFixed.js","./precisionPrefix.js":"node_modules/d3-format/src/precisionPrefix.js","./precisionRound.js":"node_modules/d3-format/src/precisionRound.js"}],"node_modules/d3-scale/src/tickFormat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

function _default(start, stop, count, specifier) {
  var step = (0, _d3Array.tickStep)(start, stop, count),
      precision;
  specifier = (0, _d3Format.formatSpecifier)(specifier == null ? ",f" : specifier);

  switch (specifier.type) {
    case "s":
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionPrefix)(step, value))) specifier.precision = precision;
        return (0, _d3Format.formatPrefix)(specifier, value);
      }

    case "":
    case "e":
    case "g":
    case "p":
    case "r":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionRound)(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }

    case "f":
    case "%":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionFixed)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
  }

  return (0, _d3Format.format)(specifier);
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-format":"node_modules/d3-format/src/index.js"}],"node_modules/d3-scale/src/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linearish = linearish;
exports.default = linear;

var _d3Array = require("d3-array");

var _continuous = _interopRequireWildcard(require("./continuous.js"));

var _init = require("./init.js");

var _tickFormat = _interopRequireDefault(require("./tickFormat.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function (count) {
    var d = domain();
    return (0, _d3Array.ticks)(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function (count, specifier) {
    var d = domain();
    return (0, _tickFormat.default)(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function (count) {
    if (count == null) count = 10;
    var d = domain(),
        i0 = 0,
        i1 = d.length - 1,
        start = d[i0],
        stop = d[i1],
        step;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    step = (0, _d3Array.tickIncrement)(start, stop, count);

    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = (0, _d3Array.tickIncrement)(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = (0, _d3Array.tickIncrement)(start, stop, count);
    }

    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = (0, _continuous.default)();

  scale.copy = function () {
    return (0, _continuous.copy)(scale, linear());
  };

  _init.initRange.apply(scale, arguments);

  return linearish(scale);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./continuous.js":"node_modules/d3-scale/src/continuous.js","./init.js":"node_modules/d3-scale/src/init.js","./tickFormat.js":"node_modules/d3-scale/src/tickFormat.js"}],"node_modules/d3-scale/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = identity;

var _linear = require("./linear.js");

var _number = _interopRequireDefault(require("./number.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function identity(domain) {
  var unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function (_) {
    return arguments.length ? (domain = Array.from(_, _number.default), scale) : domain.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return identity(domain).unknown(unknown);
  };

  domain = arguments.length ? Array.from(domain, _number.default) : [0, 1];
  return (0, _linear.linearish)(scale);
}
},{"./linear.js":"node_modules/d3-scale/src/linear.js","./number.js":"node_modules/d3-scale/src/number.js"}],"node_modules/d3-scale/src/nice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(domain, interval) {
  domain = domain.slice();
  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
},{}],"node_modules/d3-scale/src/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loggish = loggish;
exports.default = log;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

var _nice = _interopRequireDefault(require("./nice.js"));

var _continuous = require("./continuous.js");

var _init = require("./init.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
    return Math.pow(base, x);
  };
}

function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
    return Math.log(x) / base;
  });
}

function reflect(f) {
  return function (x) {
    return -f(-x);
  };
}

function loggish(transform) {
  var scale = transform(transformLog, transformExp),
      domain = scale.domain,
      base = 10,
      logs,
      pows;

  function rescale() {
    logs = logp(base), pows = powp(base);

    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }

    return scale;
  }

  scale.base = function (_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function (count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;
    if (r = v < u) i = u, u = v, v = i;
    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.floor(i), j = Math.ceil(j);
      if (u > 0) for (; i <= j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i <= j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
      if (!z.length) z = (0, _d3Array.ticks)(u, v, n);
    } else {
      z = (0, _d3Array.ticks)(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function (count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = (0, _d3Format.format)(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?

    return function (d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function () {
    return domain((0, _nice.default)(domain(), {
      floor: function (x) {
        return pows(Math.floor(logs(x)));
      },
      ceil: function (x) {
        return pows(Math.ceil(logs(x)));
      }
    }));
  };

  return scale;
}

function log() {
  var scale = loggish((0, _continuous.transformer)()).domain([1, 10]);

  scale.copy = function () {
    return (0, _continuous.copy)(scale, log()).base(scale.base());
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-format":"node_modules/d3-format/src/index.js","./nice.js":"node_modules/d3-scale/src/nice.js","./continuous.js":"node_modules/d3-scale/src/continuous.js","./init.js":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/symlog.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.symlogish = symlogish;
exports.default = symlog;

var _linear = require("./linear.js");

var _continuous = require("./continuous.js");

var _init = require("./init.js");

function transformSymlog(c) {
  return function (x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function transformSymexp(c) {
  return function (x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function symlogish(transform) {
  var c = 1,
      scale = transform(transformSymlog(c), transformSymexp(c));

  scale.constant = function (_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };

  return (0, _linear.linearish)(scale);
}

function symlog() {
  var scale = symlogish((0, _continuous.transformer)());

  scale.copy = function () {
    return (0, _continuous.copy)(scale, symlog()).constant(scale.constant());
  };

  return _init.initRange.apply(scale, arguments);
}
},{"./linear.js":"node_modules/d3-scale/src/linear.js","./continuous.js":"node_modules/d3-scale/src/continuous.js","./init.js":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.powish = powish;
exports.default = pow;
exports.sqrt = sqrt;

var _linear = require("./linear.js");

var _continuous = require("./continuous.js");

var _init = require("./init.js");

function transformPow(exponent) {
  return function (x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(_continuous.identity, _continuous.identity),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(_continuous.identity, _continuous.identity) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function (_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return (0, _linear.linearish)(scale);
}

function pow() {
  var scale = powish((0, _continuous.transformer)());

  scale.copy = function () {
    return (0, _continuous.copy)(scale, pow()).exponent(scale.exponent());
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}

function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}
},{"./linear.js":"node_modules/d3-scale/src/linear.js","./continuous.js":"node_modules/d3-scale/src/continuous.js","./init.js":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/radial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = radial;

var _continuous = _interopRequireDefault(require("./continuous.js"));

var _init = require("./init.js");

var _linear = require("./linear.js");

var _number = _interopRequireDefault(require("./number.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function square(x) {
  return Math.sign(x) * x * x;
}

function unsquare(x) {
  return Math.sign(x) * Math.sqrt(Math.abs(x));
}

function radial() {
  var squared = (0, _continuous.default)(),
      range = [0, 1],
      round = false,
      unknown;

  function scale(x) {
    var y = unsquare(squared(x));
    return isNaN(y) ? unknown : round ? Math.round(y) : y;
  }

  scale.invert = function (y) {
    return squared.invert(square(y));
  };

  scale.domain = function (_) {
    return arguments.length ? (squared.domain(_), scale) : squared.domain();
  };

  scale.range = function (_) {
    return arguments.length ? (squared.range((range = Array.from(_, _number.default)).map(square)), scale) : range.slice();
  };

  scale.rangeRound = function (_) {
    return scale.range(_).round(true);
  };

  scale.round = function (_) {
    return arguments.length ? (round = !!_, scale) : round;
  };

  scale.clamp = function (_) {
    return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return radial(squared.domain(), range).round(round).clamp(squared.clamp()).unknown(unknown);
  };

  _init.initRange.apply(scale, arguments);

  return (0, _linear.linearish)(scale);
}
},{"./continuous.js":"node_modules/d3-scale/src/continuous.js","./init.js":"node_modules/d3-scale/src/init.js","./linear.js":"node_modules/d3-scale/src/linear.js","./number.js":"node_modules/d3-scale/src/number.js"}],"node_modules/d3-scale/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantile;

var _d3Array = require("d3-array");

var _init = require("./init.js");

function quantile() {
  var domain = [],
      range = [],
      thresholds = [],
      unknown;

  function rescale() {
    var i = 0,
        n = Math.max(1, range.length);
    thresholds = new Array(n - 1);

    while (++i < n) thresholds[i - 1] = (0, _d3Array.quantile)(domain, i / n);

    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : range[(0, _d3Array.bisect)(thresholds, x)];
  }

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
  };

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_d3Array.ascending);
    return rescale();
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.quantiles = function () {
    return thresholds.slice();
  };

  scale.copy = function () {
    return quantile().domain(domain).range(range).unknown(unknown);
  };

  return _init.initRange.apply(scale, arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./init.js":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantize;

var _d3Array = require("d3-array");

var _linear = require("./linear.js");

var _init = require("./init.js");

function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1],
      unknown;

  function scale(x) {
    return x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);

    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);

    return scale;
  }

  scale.domain = function (_) {
    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
  };

  scale.range = function (_) {
    return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };

  scale.thresholds = function () {
    return domain.slice();
  };

  scale.copy = function () {
    return quantize().domain([x0, x1]).range(range).unknown(unknown);
  };

  return _init.initRange.apply((0, _linear.linearish)(scale), arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./linear.js":"node_modules/d3-scale/src/linear.js","./init.js":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/threshold.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = threshold;

var _d3Array = require("d3-array");

var _init = require("./init.js");

function threshold() {
  var domain = [0.5],
      range = [0, 1],
      unknown,
      n = 1;

  function scale(x) {
    return x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
  }

  scale.domain = function (_) {
    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return threshold().domain(domain).range(range).unknown(unknown);
  };

  return _init.initRange.apply(scale, arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./init.js":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calendar = calendar;
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Time = require("d3-time");

var _d3TimeFormat = require("d3-time-format");

var _continuous = _interopRequireWildcard(require("./continuous.js"));

var _init = require("./init.js");

var _nice = _interopRequireDefault(require("./nice.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var durationSecond = 1000,
    durationMinute = durationSecond * 60,
    durationHour = durationMinute * 60,
    durationDay = durationHour * 24,
    durationWeek = durationDay * 7,
    durationMonth = durationDay * 30,
    durationYear = durationDay * 365;

function date(t) {
  return new Date(t);
}

function number(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = (0, _continuous.default)(),
      invert = scale.invert,
      domain = scale.domain;
  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");
  var tickIntervals = [[second, 1, durationSecond], [second, 5, 5 * durationSecond], [second, 15, 15 * durationSecond], [second, 30, 30 * durationSecond], [minute, 1, durationMinute], [minute, 5, 5 * durationMinute], [minute, 15, 15 * durationMinute], [minute, 30, 30 * durationMinute], [hour, 1, durationHour], [hour, 3, 3 * durationHour], [hour, 6, 6 * durationHour], [hour, 12, 12 * durationHour], [day, 1, durationDay], [day, 2, 2 * durationDay], [week, 1, durationWeek], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
  }

  function tickInterval(interval, start, stop) {
    if (interval == null) interval = 10; // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.

    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = (0, _d3Array.bisector)(function (i) {
        return i[2];
      }).right(tickIntervals, target),
          step;

      if (i === tickIntervals.length) {
        step = (0, _d3Array.tickStep)(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max((0, _d3Array.tickStep)(start, stop, interval), 1);
        interval = millisecond;
      }

      return interval.every(step);
    }

    return interval;
  }

  scale.invert = function (y) {
    return new Date(invert(y));
  };

  scale.domain = function (_) {
    return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
  };

  scale.ticks = function (interval) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop

    return r ? t.reverse() : t;
  };

  scale.tickFormat = function (count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function (interval) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1])) ? domain((0, _nice.default)(d, interval)) : scale;
  };

  scale.copy = function () {
    return (0, _continuous.copy)(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}

function _default() {
  return _init.initRange.apply(calendar(_d3Time.timeYear, _d3Time.timeMonth, _d3Time.timeWeek, _d3Time.timeDay, _d3Time.timeHour, _d3Time.timeMinute, _d3Time.timeSecond, _d3Time.timeMillisecond, _d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-time":"node_modules/d3-time/src/index.js","d3-time-format":"node_modules/d3-time-format/src/index.js","./continuous.js":"node_modules/d3-scale/src/continuous.js","./init.js":"node_modules/d3-scale/src/init.js","./nice.js":"node_modules/d3-scale/src/nice.js"}],"node_modules/d3-scale/src/utcTime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _time = require("./time.js");

var _d3TimeFormat = require("d3-time-format");

var _d3Time = require("d3-time");

var _init = require("./init.js");

function _default() {
  return _init.initRange.apply((0, _time.calendar)(_d3Time.utcYear, _d3Time.utcMonth, _d3Time.utcWeek, _d3Time.utcDay, _d3Time.utcHour, _d3Time.utcMinute, _d3Time.utcSecond, _d3Time.utcMillisecond, _d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
}
},{"./time.js":"node_modules/d3-scale/src/time.js","d3-time-format":"node_modules/d3-time-format/src/index.js","d3-time":"node_modules/d3-time/src/index.js","./init.js":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/sequential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copy = copy;
exports.default = sequential;
exports.sequentialLog = sequentialLog;
exports.sequentialSymlog = sequentialSymlog;
exports.sequentialPow = sequentialPow;
exports.sequentialSqrt = sequentialSqrt;

var _continuous = require("./continuous.js");

var _init = require("./init.js");

var _linear = require("./linear.js");

var _log = require("./log.js");

var _symlog = require("./symlog.js");

var _pow = require("./pow.js");

function transformer() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = _continuous.identity,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.range = function () {
    return [interpolator(0), interpolator(1)];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function copy(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}

function sequential() {
  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));

  scale.copy = function () {
    return copy(scale, sequential());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialLog() {
  var scale = (0, _log.loggish)(transformer()).domain([1, 10]);

  scale.copy = function () {
    return copy(scale, sequentialLog()).base(scale.base());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialSymlog() {
  var scale = (0, _symlog.symlogish)(transformer());

  scale.copy = function () {
    return copy(scale, sequentialSymlog()).constant(scale.constant());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialPow() {
  var scale = (0, _pow.powish)(transformer());

  scale.copy = function () {
    return copy(scale, sequentialPow()).exponent(scale.exponent());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}
},{"./continuous.js":"node_modules/d3-scale/src/continuous.js","./init.js":"node_modules/d3-scale/src/init.js","./linear.js":"node_modules/d3-scale/src/linear.js","./log.js":"node_modules/d3-scale/src/log.js","./symlog.js":"node_modules/d3-scale/src/symlog.js","./pow.js":"node_modules/d3-scale/src/pow.js"}],"node_modules/d3-scale/src/sequentialQuantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sequentialQuantile;

var _d3Array = require("d3-array");

var _continuous = require("./continuous.js");

var _init = require("./init.js");

function sequentialQuantile() {
  var domain = [],
      interpolator = _continuous.identity;

  function scale(x) {
    if (!isNaN(x = +x)) return interpolator(((0, _d3Array.bisect)(domain, x, 1) - 1) / (domain.length - 1));
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_d3Array.ascending);
    return scale;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.range = function () {
    return domain.map((d, i) => interpolator(i / (domain.length - 1)));
  };

  scale.copy = function () {
    return sequentialQuantile(interpolator).domain(domain);
  };

  return _init.initInterpolator.apply(scale, arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./continuous.js":"node_modules/d3-scale/src/continuous.js","./init.js":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/diverging.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = diverging;
exports.divergingLog = divergingLog;
exports.divergingSymlog = divergingSymlog;
exports.divergingPow = divergingPow;
exports.divergingSqrt = divergingSqrt;

var _continuous = require("./continuous.js");

var _init = require("./init.js");

var _linear = require("./linear.js");

var _log = require("./log.js");

var _sequential = require("./sequential.js");

var _symlog = require("./symlog.js");

var _pow = require("./pow.js");

function transformer() {
  var x0 = 0,
      x1 = 0.5,
      x2 = 1,
      s = 1,
      t0,
      t1,
      t2,
      k10,
      k21,
      interpolator = _continuous.identity,
      transform,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.range = function () {
    return [interpolator(0), interpolator(0.5), interpolator(1)];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
    return scale;
  };
}

function diverging() {
  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));

  scale.copy = function () {
    return (0, _sequential.copy)(scale, diverging());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingLog() {
  var scale = (0, _log.loggish)(transformer()).domain([0.1, 1, 10]);

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingLog()).base(scale.base());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingSymlog() {
  var scale = (0, _symlog.symlogish)(transformer());

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingSymlog()).constant(scale.constant());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingPow() {
  var scale = (0, _pow.powish)(transformer());

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingPow()).exponent(scale.exponent());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}
},{"./continuous.js":"node_modules/d3-scale/src/continuous.js","./init.js":"node_modules/d3-scale/src/init.js","./linear.js":"node_modules/d3-scale/src/linear.js","./log.js":"node_modules/d3-scale/src/log.js","./sequential.js":"node_modules/d3-scale/src/sequential.js","./symlog.js":"node_modules/d3-scale/src/symlog.js","./pow.js":"node_modules/d3-scale/src/pow.js"}],"node_modules/d3-scale/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "scaleBand", {
  enumerable: true,
  get: function () {
    return _band.default;
  }
});
Object.defineProperty(exports, "scalePoint", {
  enumerable: true,
  get: function () {
    return _band.point;
  }
});
Object.defineProperty(exports, "scaleIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "scaleLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "scaleLog", {
  enumerable: true,
  get: function () {
    return _log.default;
  }
});
Object.defineProperty(exports, "scaleSymlog", {
  enumerable: true,
  get: function () {
    return _symlog.default;
  }
});
Object.defineProperty(exports, "scaleOrdinal", {
  enumerable: true,
  get: function () {
    return _ordinal.default;
  }
});
Object.defineProperty(exports, "scaleImplicit", {
  enumerable: true,
  get: function () {
    return _ordinal.implicit;
  }
});
Object.defineProperty(exports, "scalePow", {
  enumerable: true,
  get: function () {
    return _pow.default;
  }
});
Object.defineProperty(exports, "scaleSqrt", {
  enumerable: true,
  get: function () {
    return _pow.sqrt;
  }
});
Object.defineProperty(exports, "scaleRadial", {
  enumerable: true,
  get: function () {
    return _radial.default;
  }
});
Object.defineProperty(exports, "scaleQuantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "scaleQuantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "scaleThreshold", {
  enumerable: true,
  get: function () {
    return _threshold.default;
  }
});
Object.defineProperty(exports, "scaleTime", {
  enumerable: true,
  get: function () {
    return _time.default;
  }
});
Object.defineProperty(exports, "scaleUtc", {
  enumerable: true,
  get: function () {
    return _utcTime.default;
  }
});
Object.defineProperty(exports, "scaleSequential", {
  enumerable: true,
  get: function () {
    return _sequential.default;
  }
});
Object.defineProperty(exports, "scaleSequentialLog", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialLog;
  }
});
Object.defineProperty(exports, "scaleSequentialPow", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialPow;
  }
});
Object.defineProperty(exports, "scaleSequentialSqrt", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialSqrt;
  }
});
Object.defineProperty(exports, "scaleSequentialSymlog", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialSymlog;
  }
});
Object.defineProperty(exports, "scaleSequentialQuantile", {
  enumerable: true,
  get: function () {
    return _sequentialQuantile.default;
  }
});
Object.defineProperty(exports, "scaleDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "scaleDivergingLog", {
  enumerable: true,
  get: function () {
    return _diverging.divergingLog;
  }
});
Object.defineProperty(exports, "scaleDivergingPow", {
  enumerable: true,
  get: function () {
    return _diverging.divergingPow;
  }
});
Object.defineProperty(exports, "scaleDivergingSqrt", {
  enumerable: true,
  get: function () {
    return _diverging.divergingSqrt;
  }
});
Object.defineProperty(exports, "scaleDivergingSymlog", {
  enumerable: true,
  get: function () {
    return _diverging.divergingSymlog;
  }
});
Object.defineProperty(exports, "tickFormat", {
  enumerable: true,
  get: function () {
    return _tickFormat.default;
  }
});

var _band = _interopRequireWildcard(require("./band.js"));

var _identity = _interopRequireDefault(require("./identity.js"));

var _linear = _interopRequireDefault(require("./linear.js"));

var _log = _interopRequireDefault(require("./log.js"));

var _symlog = _interopRequireDefault(require("./symlog.js"));

var _ordinal = _interopRequireWildcard(require("./ordinal.js"));

var _pow = _interopRequireWildcard(require("./pow.js"));

var _radial = _interopRequireDefault(require("./radial.js"));

var _quantile = _interopRequireDefault(require("./quantile.js"));

var _quantize = _interopRequireDefault(require("./quantize.js"));

var _threshold = _interopRequireDefault(require("./threshold.js"));

var _time = _interopRequireDefault(require("./time.js"));

var _utcTime = _interopRequireDefault(require("./utcTime.js"));

var _sequential = _interopRequireWildcard(require("./sequential.js"));

var _sequentialQuantile = _interopRequireDefault(require("./sequentialQuantile.js"));

var _diverging = _interopRequireWildcard(require("./diverging.js"));

var _tickFormat = _interopRequireDefault(require("./tickFormat.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./band.js":"node_modules/d3-scale/src/band.js","./identity.js":"node_modules/d3-scale/src/identity.js","./linear.js":"node_modules/d3-scale/src/linear.js","./log.js":"node_modules/d3-scale/src/log.js","./symlog.js":"node_modules/d3-scale/src/symlog.js","./ordinal.js":"node_modules/d3-scale/src/ordinal.js","./pow.js":"node_modules/d3-scale/src/pow.js","./radial.js":"node_modules/d3-scale/src/radial.js","./quantile.js":"node_modules/d3-scale/src/quantile.js","./quantize.js":"node_modules/d3-scale/src/quantize.js","./threshold.js":"node_modules/d3-scale/src/threshold.js","./time.js":"node_modules/d3-scale/src/time.js","./utcTime.js":"node_modules/d3-scale/src/utcTime.js","./sequential.js":"node_modules/d3-scale/src/sequential.js","./sequentialQuantile.js":"node_modules/d3-scale/src/sequentialQuantile.js","./diverging.js":"node_modules/d3-scale/src/diverging.js","./tickFormat.js":"node_modules/d3-scale/src/tickFormat.js"}],"node_modules/vega-scale/src/scales/scaleBand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.band = band;
exports.point = point;

var _bandSpace = _interopRequireDefault(require("./bandSpace"));

var _d3Array = require("d3-array");

var _d3Scale = require("d3-scale");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function band() {
  var scale = (0, _d3Scale.scaleOrdinal)().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;
  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range[1] < range[0],
        start = range[reverse - 0],
        stop = range[1 - reverse],
        space = (0, _bandSpace.default)(n, paddingInner, paddingOuter);
    step = (stop - start) / (space || 1);

    if (round) {
      step = Math.floor(step);
    }

    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);

    if (round) {
      start = Math.round(start);
      bandwidth = Math.round(bandwidth);
    }

    var values = (0, _d3Array.range)(n).map(function (i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function (_) {
    if (arguments.length) {
      domain(_);
      return rescale();
    } else {
      return domain();
    }
  };

  scale.range = function (_) {
    if (arguments.length) {
      range = [+_[0], +_[1]];
      return rescale();
    } else {
      return range.slice();
    }
  };

  scale.rangeRound = function (_) {
    range = [+_[0], +_[1]];
    round = true;
    return rescale();
  };

  scale.bandwidth = function () {
    return bandwidth;
  };

  scale.step = function () {
    return step;
  };

  scale.round = function (_) {
    if (arguments.length) {
      round = !!_;
      return rescale();
    } else {
      return round;
    }
  };

  scale.padding = function (_) {
    if (arguments.length) {
      paddingOuter = Math.max(0, Math.min(1, _));
      paddingInner = paddingOuter;
      return rescale();
    } else {
      return paddingInner;
    }
  };

  scale.paddingInner = function (_) {
    if (arguments.length) {
      paddingInner = Math.max(0, Math.min(1, _));
      return rescale();
    } else {
      return paddingInner;
    }
  };

  scale.paddingOuter = function (_) {
    if (arguments.length) {
      paddingOuter = Math.max(0, Math.min(1, _));
      return rescale();
    } else {
      return paddingOuter;
    }
  };

  scale.align = function (_) {
    if (arguments.length) {
      align = Math.max(0, Math.min(1, _));
      return rescale();
    } else {
      return align;
    }
  };

  scale.invertRange = function (_) {
    // bail if range has null or undefined values
    if (_[0] == null || _[1] == null) return;
    var lo = +_[0],
        hi = +_[1],
        reverse = range[1] < range[0],
        values = reverse ? ordinalRange().reverse() : ordinalRange(),
        n = values.length - 1,
        a,
        b,
        t; // bail if either range endpoint is invalid

    if (lo !== lo || hi !== hi) return; // order range inputs, bail if outside of scale range

    if (hi < lo) {
      t = lo;
      lo = hi;
      hi = t;
    }

    if (hi < values[0] || lo > range[1 - reverse]) return; // binary search to index into scale range

    a = Math.max(0, (0, _d3Array.bisectRight)(values, lo) - 1);
    b = lo === hi ? a : (0, _d3Array.bisectRight)(values, hi) - 1; // increment index a if lo is within padding gap

    if (lo - values[a] > bandwidth + 1e-10) ++a;

    if (reverse) {
      // map + swap
      t = a;
      a = n - b;
      b = n - t;
    }

    return a > b ? undefined : domain().slice(a, b + 1);
  };

  scale.invert = function (_) {
    var value = scale.invertRange([_, _]);
    return value ? value[0] : value;
  };

  scale.copy = function () {
    return band().domain(domain()).range(range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };

  return rescale();
}

function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;

  scale.copy = function () {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band().paddingInner(1));
}
},{"./bandSpace":"node_modules/vega-scale/src/scales/bandSpace.js","d3-array":"node_modules/d3-array/src/index.js","d3-scale":"node_modules/d3-scale/src/index.js"}],"node_modules/vega-scale/src/scales/numbers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.numbers = numbers;
var map = Array.prototype.map;

function numbers(_) {
  return map.call(_, function (x) {
    return +x;
  });
}
},{}],"node_modules/vega-scale/src/scales/slice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"node_modules/vega-scale/src/scales/scaleBinOrdinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scaleBinOrdinal = scaleBinOrdinal;

var _d3Array = require("d3-array");

var _d3Scale = require("d3-scale");

var _vegaUtil = require("vega-util");

var _numbers = require("./numbers");

var _slice = require("./slice");

function scaleBinOrdinal() {
  var domain = [],
      range = [];

  function scale(x) {
    return x == null || x !== x ? undefined : range[((0, _d3Array.bisect)(domain, x) - 1) % range.length];
  }

  scale.domain = function (_) {
    if (arguments.length) {
      domain = (0, _numbers.numbers)(_);
      return scale;
    } else {
      return domain.slice();
    }
  };

  scale.range = function (_) {
    if (arguments.length) {
      range = _slice.slice.call(_);
      return scale;
    } else {
      return range.slice();
    }
  };

  scale.tickFormat = function (count, specifier) {
    return (0, _d3Scale.tickFormat)(domain[0], (0, _vegaUtil.peek)(domain), count == null ? 10 : count, specifier);
  };

  scale.copy = function () {
    return scaleBinOrdinal().domain(scale.domain()).range(scale.range());
  };

  return scale;
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-scale":"node_modules/d3-scale/src/index.js","vega-util":"node_modules/vega-util/index.js","./numbers":"node_modules/vega-scale/src/scales/numbers.js","./slice":"node_modules/vega-scale/src/scales/slice.js"}],"node_modules/vega-scale/src/scales.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = scale;

var _vegaUtil = require("vega-util");

var _invertRange = _interopRequireDefault(require("./scales/invertRange"));

var _invertRangeExtent = _interopRequireDefault(require("./scales/invertRangeExtent"));

var _types = require("./scales/types");

var _scaleBand = require("./scales/scaleBand");

var _scaleBinOrdinal = require("./scales/scaleBinOrdinal");

var $ = _interopRequireWildcard(require("d3-scale"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Augment scales with their type and needed inverse methods.
 */
function create(type, constructor) {
  return function scale() {
    var s = constructor();

    if (!s.invertRange) {
      s.invertRange = s.invert ? (0, _invertRange.default)(s) : s.invertExtent ? (0, _invertRangeExtent.default)(s) : undefined;
    }

    s.type = type;
    return s;
  };
}

function scale(type, scale) {
  if (arguments.length > 1) {
    scales[type] = create(type, scale);
    return this;
  } else {
    return (0, _vegaUtil.hasOwnProperty)(scales, type) ? scales[type] : undefined;
  }
}

var scales = {
  // identity scale
  [_types.Identity]: $.scaleIdentity,
  // continuous scales
  [_types.Linear]: $.scaleLinear,
  [_types.Log]: $.scaleLog,
  [_types.Pow]: $.scalePow,
  [_types.Sqrt]: $.scaleSqrt,
  [_types.Symlog]: $.scaleSymlog,
  [_types.Time]: $.scaleTime,
  [_types.UTC]: $.scaleUtc,
  // sequential scales
  [_types.Sequential]: $.scaleSequential,
  // backwards compat
  [_types.Sequential + '-' + _types.Linear]: $.scaleSequential,
  [_types.Sequential + '-' + _types.Log]: $.scaleSequentialLog,
  [_types.Sequential + '-' + _types.Pow]: $.scaleSequentialPow,
  [_types.Sequential + '-' + _types.Sqrt]: $.scaleSequentialSqrt,
  [_types.Sequential + '-' + _types.Symlog]: $.scaleSequentialSymlog,
  // diverging scales
  [_types.Diverging + '-' + _types.Linear]: $.scaleDiverging,
  [_types.Diverging + '-' + _types.Log]: $.scaleDivergingLog,
  [_types.Diverging + '-' + _types.Pow]: $.scaleDivergingPow,
  [_types.Diverging + '-' + _types.Sqrt]: $.scaleDivergingSqrt,
  [_types.Diverging + '-' + _types.Symlog]: $.scaleDivergingSymlog,
  // discretizing scales
  [_types.Quantile]: $.scaleQuantile,
  [_types.Quantize]: $.scaleQuantize,
  [_types.Threshold]: $.scaleThreshold,
  // discrete scales
  [_types.BinOrdinal]: _scaleBinOrdinal.scaleBinOrdinal,
  [_types.Ordinal]: $.scaleOrdinal,
  [_types.Band]: _scaleBand.band,
  [_types.Point]: _scaleBand.point
};

for (var key in scales) {
  scale(key, scales[key]);
}
},{"vega-util":"node_modules/vega-util/index.js","./scales/invertRange":"node_modules/vega-scale/src/scales/invertRange.js","./scales/invertRangeExtent":"node_modules/vega-scale/src/scales/invertRangeExtent.js","./scales/types":"node_modules/vega-scale/src/scales/types.js","./scales/scaleBand":"node_modules/vega-scale/src/scales/scaleBand.js","./scales/scaleBinOrdinal":"node_modules/vega-scale/src/scales/scaleBinOrdinal.js","d3-scale":"node_modules/d3-scale/src/index.js"}],"node_modules/vega-scale/src/interpolate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interpolateRange = interpolateRange;
exports.interpolateColors = interpolateColors;
exports.quantizeInterpolator = quantizeInterpolator;
exports.scaleCopy = scaleCopy;
exports.scaleFraction = scaleFraction;
exports.interpolate = interpolate;

var _scales = _interopRequireDefault(require("./scales"));

var _vegaUtil = require("vega-util");

var $ = _interopRequireWildcard(require("d3-interpolate"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const scaleProps = ['clamp', 'base', 'constant', 'exponent'];

function interpolateRange(interpolator, range) {
  var start = range[0],
      span = (0, _vegaUtil.peek)(range) - start;
  return function (i) {
    return interpolator(start + i * span);
  };
}

function interpolateColors(colors, type, gamma) {
  return $.piecewise(interpolate(type || 'rgb', gamma), colors);
}

function quantizeInterpolator(interpolator, count) {
  var samples = new Array(count),
      n = count + 1;

  for (var i = 0; i < count;) samples[i] = interpolator(++i / n);

  return samples;
}

function scaleCopy(scale) {
  const t = scale.type,
        s = scale.copy();
  s.type = t;
  return s;
}

function scaleFraction(scale, min, max) {
  var delta = max - min,
      i,
      t,
      s;

  if (!delta || !isFinite(delta)) {
    return (0, _vegaUtil.constant)(0.5);
  } else {
    i = (t = scale.type).indexOf('-');
    t = i < 0 ? t : t.slice(i + 1);
    s = (0, _scales.default)(t)().domain([min, max]).range([0, 1]);
    scaleProps.forEach(m => scale[m] ? s[m](scale[m]()) : 0);
    return s;
  }
}

function interpolate(type, gamma) {
  var interp = $[method(type)];
  return gamma != null && interp && interp.gamma ? interp.gamma(gamma) : interp;
}

function method(type) {
  return 'interpolate' + type.toLowerCase().split('-').map(function (s) {
    return s[0].toUpperCase() + s.slice(1);
  }).join('');
}
},{"./scales":"node_modules/vega-scale/src/scales.js","vega-util":"node_modules/vega-util/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js"}],"node_modules/vega-scale/src/palettes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.discrete = exports.continuous = void 0;
const continuous = {
  blues: 'cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90',
  greens: 'd3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429',
  greys: 'e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e',
  oranges: 'fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303',
  purples: 'e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c',
  reds: 'fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13',
  blueGreen: 'd5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429',
  bluePurple: 'ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71',
  greenBlue: 'd3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1',
  orangeRed: 'fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403',
  purpleBlue: 'dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281',
  purpleBlueGreen: 'dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353',
  purpleRed: 'dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a',
  redPurple: 'fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174',
  yellowGreen: 'e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034',
  yellowOrangeBrown: 'feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204',
  yellowOrangeRed: 'fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225',
  blueOrange: '134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07',
  brownBlueGreen: '704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147',
  purpleGreen: '5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29',
  purpleOrange: '4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07',
  redBlue: '8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85',
  redGrey: '8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434',
  yellowGreenBlue: 'eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185',
  redYellowBlue: 'a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695',
  redYellowGreen: 'a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837',
  pinkYellowGreen: '8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419',
  spectral: '9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2',
  viridis: '440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725',
  magma: '0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf',
  inferno: '0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4',
  plasma: '0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921',
  rainbow: '6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa',
  sinebow: 'ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040',
  browns: 'eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632',
  tealBlues: 'bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985',
  teals: 'bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667',
  warmGreys: 'dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e',
  goldGreen: 'f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36',
  goldOrange: 'f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26',
  goldRed: 'f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e',
  lightGreyRed: 'efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b',
  lightGreyTeal: 'e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc',
  lightMulti: 'e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c',
  lightOrange: 'f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b',
  lightTealBlue: 'e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988',
  darkBlue: '3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff',
  darkGold: '3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff',
  darkGreen: '3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa',
  darkMulti: '3737371f5287197d8c29a86995ce3fffe800ffffff',
  darkRed: '3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c'
};
exports.continuous = continuous;
const discrete = {
  category10: '1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf',
  category20: '1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5',
  category20b: '393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6',
  category20c: '3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9',
  tableau10: '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac',
  tableau20: '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5',
  accent: '7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666',
  dark2: '1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666',
  paired: 'a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928',
  pastel1: 'fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2',
  pastel2: 'b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc',
  set1: 'e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999',
  set2: '66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3',
  set3: '8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f'
};
exports.discrete = discrete;
},{}],"node_modules/vega-scale/src/schemes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scheme = scheme;

var _palettes = require("./palettes");

var _interpolate = require("./interpolate");

function colors(palette) {
  var n = palette.length / 6 | 0,
      c = new Array(n),
      i = 0;

  while (i < n) c[i] = '#' + palette.slice(i * 6, ++i * 6);

  return c;
}

function apply(_, f) {
  for (let k in _) scheme(k, f(_[k]));
}

const schemes = {};
apply(_palettes.discrete, colors);
apply(_palettes.continuous, _ => (0, _interpolate.interpolateColors)(colors(_)));

function scheme(name, scheme) {
  name = name && name.toLowerCase();

  if (arguments.length > 1) {
    schemes[name] = scheme;
    return this;
  } else {
    return schemes[name];
  }
}
},{"./palettes":"node_modules/vega-scale/src/palettes.js","./interpolate":"node_modules/vega-scale/src/interpolate.js"}],"node_modules/vega-scale/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bandSpace", {
  enumerable: true,
  get: function () {
    return _bandSpace.default;
  }
});
Object.defineProperty(exports, "timeInterval", {
  enumerable: true,
  get: function () {
    return _timeInterval.timeInterval;
  }
});
Object.defineProperty(exports, "Identity", {
  enumerable: true,
  get: function () {
    return _types.Identity;
  }
});
Object.defineProperty(exports, "Linear", {
  enumerable: true,
  get: function () {
    return _types.Linear;
  }
});
Object.defineProperty(exports, "Log", {
  enumerable: true,
  get: function () {
    return _types.Log;
  }
});
Object.defineProperty(exports, "Pow", {
  enumerable: true,
  get: function () {
    return _types.Pow;
  }
});
Object.defineProperty(exports, "Sqrt", {
  enumerable: true,
  get: function () {
    return _types.Sqrt;
  }
});
Object.defineProperty(exports, "Symlog", {
  enumerable: true,
  get: function () {
    return _types.Symlog;
  }
});
Object.defineProperty(exports, "Time", {
  enumerable: true,
  get: function () {
    return _types.Time;
  }
});
Object.defineProperty(exports, "UTC", {
  enumerable: true,
  get: function () {
    return _types.UTC;
  }
});
Object.defineProperty(exports, "Sequential", {
  enumerable: true,
  get: function () {
    return _types.Sequential;
  }
});
Object.defineProperty(exports, "Diverging", {
  enumerable: true,
  get: function () {
    return _types.Diverging;
  }
});
Object.defineProperty(exports, "Quantile", {
  enumerable: true,
  get: function () {
    return _types.Quantile;
  }
});
Object.defineProperty(exports, "Quantize", {
  enumerable: true,
  get: function () {
    return _types.Quantize;
  }
});
Object.defineProperty(exports, "Threshold", {
  enumerable: true,
  get: function () {
    return _types.Threshold;
  }
});
Object.defineProperty(exports, "BinOrdinal", {
  enumerable: true,
  get: function () {
    return _types.BinOrdinal;
  }
});
Object.defineProperty(exports, "Ordinal", {
  enumerable: true,
  get: function () {
    return _types.Ordinal;
  }
});
Object.defineProperty(exports, "Band", {
  enumerable: true,
  get: function () {
    return _types.Band;
  }
});
Object.defineProperty(exports, "Point", {
  enumerable: true,
  get: function () {
    return _types.Point;
  }
});
Object.defineProperty(exports, "isValidScaleType", {
  enumerable: true,
  get: function () {
    return _types.isValidScaleType;
  }
});
Object.defineProperty(exports, "isTemporal", {
  enumerable: true,
  get: function () {
    return _types.isTemporal;
  }
});
Object.defineProperty(exports, "isQuantile", {
  enumerable: true,
  get: function () {
    return _types.isQuantile;
  }
});
Object.defineProperty(exports, "isSequential", {
  enumerable: true,
  get: function () {
    return _types.isSequential;
  }
});
Object.defineProperty(exports, "isDiverging", {
  enumerable: true,
  get: function () {
    return _types.isDiverging;
  }
});
Object.defineProperty(exports, "isInterpolating", {
  enumerable: true,
  get: function () {
    return _types.isInterpolating;
  }
});
Object.defineProperty(exports, "isContinuous", {
  enumerable: true,
  get: function () {
    return _types.isContinuous;
  }
});
Object.defineProperty(exports, "isLogarithmic", {
  enumerable: true,
  get: function () {
    return _types.isLogarithmic;
  }
});
Object.defineProperty(exports, "isDiscrete", {
  enumerable: true,
  get: function () {
    return _types.isDiscrete;
  }
});
Object.defineProperty(exports, "isDiscretizing", {
  enumerable: true,
  get: function () {
    return _types.isDiscretizing;
  }
});
Object.defineProperty(exports, "interpolate", {
  enumerable: true,
  get: function () {
    return _interpolate.interpolate;
  }
});
Object.defineProperty(exports, "interpolateColors", {
  enumerable: true,
  get: function () {
    return _interpolate.interpolateColors;
  }
});
Object.defineProperty(exports, "interpolateRange", {
  enumerable: true,
  get: function () {
    return _interpolate.interpolateRange;
  }
});
Object.defineProperty(exports, "scaleCopy", {
  enumerable: true,
  get: function () {
    return _interpolate.scaleCopy;
  }
});
Object.defineProperty(exports, "scaleFraction", {
  enumerable: true,
  get: function () {
    return _interpolate.scaleFraction;
  }
});
Object.defineProperty(exports, "quantizeInterpolator", {
  enumerable: true,
  get: function () {
    return _interpolate.quantizeInterpolator;
  }
});
Object.defineProperty(exports, "scale", {
  enumerable: true,
  get: function () {
    return _scales.default;
  }
});
Object.defineProperty(exports, "scheme", {
  enumerable: true,
  get: function () {
    return _schemes.scheme;
  }
});
Object.defineProperty(exports, "scaleImplicit", {
  enumerable: true,
  get: function () {
    return _d3Scale.scaleImplicit;
  }
});
Object.defineProperty(exports, "tickFormat", {
  enumerable: true,
  get: function () {
    return _d3Scale.tickFormat;
  }
});

var _bandSpace = _interopRequireDefault(require("./src/scales/bandSpace"));

var _timeInterval = require("./src/scales/timeInterval");

var _types = require("./src/scales/types");

var _interpolate = require("./src/interpolate");

var _scales = _interopRequireDefault(require("./src/scales"));

var _schemes = require("./src/schemes");

var _d3Scale = require("d3-scale");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/scales/bandSpace":"node_modules/vega-scale/src/scales/bandSpace.js","./src/scales/timeInterval":"node_modules/vega-scale/src/scales/timeInterval.js","./src/scales/types":"node_modules/vega-scale/src/scales/types.js","./src/interpolate":"node_modules/vega-scale/src/interpolate.js","./src/scales":"node_modules/vega-scale/src/scales.js","./src/schemes":"node_modules/vega-scale/src/schemes.js","d3-scale":"node_modules/d3-scale/src/index.js"}],"node_modules/vega-encode/src/ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tickCount = tickCount;
exports.validTicks = validTicks;
exports.tickValues = tickValues;
exports.tickFormat = tickFormat;

var _vegaScale = require("vega-scale");

var _vegaUtil = require("vega-util");

var _d3TimeFormat = require("d3-time-format");

var _d3Format = require("d3-format");

/**
 * Determine the tick count or interval function.
 * @param {Scale} scale - The scale for which to generate tick values.
 * @param {*} count - The desired tick count or interval specifier.
 * @param {number} minStep - The desired minimum step between tick values.
 * @return {*} - The tick count or interval function.
 */
function tickCount(scale, count, minStep) {
  var step;

  if ((0, _vegaUtil.isNumber)(count) && minStep != null) {
    count = Math.min(count, ~~((0, _vegaUtil.span)(scale.domain()) / minStep) || 1);
  }

  if ((0, _vegaUtil.isObject)(count)) {
    step = count.step;
    count = count.interval;
  }

  if ((0, _vegaUtil.isString)(count)) {
    count = (0, _vegaScale.timeInterval)(count, scale.type) || (0, _vegaUtil.error)('Only time and utc scales accept interval strings.');
    if (step) count = count.every(step);
  }

  return count;
}
/**
 * Filter a set of candidate tick values, ensuring that only tick values
 * that lie within the scale range are included.
 * @param {Scale} scale - The scale for which to generate tick values.
 * @param {Array<*>} ticks - The candidate tick values.
 * @param {*} count - The tick count or interval function.
 * @return {Array<*>} - The filtered tick values.
 */


function validTicks(scale, ticks, count) {
  var range = scale.range(),
      lo = Math.floor(range[0]),
      hi = Math.ceil((0, _vegaUtil.peek)(range));

  if (lo > hi) {
    range = hi;
    hi = lo;
    lo = range;
  }

  ticks = ticks.filter(function (v) {
    v = scale(v);
    return lo <= v && v <= hi;
  });

  if (count > 0 && ticks.length > 1) {
    var endpoints = [ticks[0], (0, _vegaUtil.peek)(ticks)];

    while (ticks.length > count && ticks.length >= 3) {
      ticks = ticks.filter(function (_, i) {
        return !(i % 2);
      });
    }

    if (ticks.length < 3) {
      ticks = endpoints;
    }
  }

  return ticks;
}
/**
 * Generate tick values for the given scale and approximate tick count or
 * interval value. If the scale has a 'ticks' method, it will be used to
 * generate the ticks, with the count argument passed as a parameter. If the
 * scale lacks a 'ticks' method, the full scale domain will be returned.
 * @param {Scale} scale - The scale for which to generate tick values.
 * @param {*} [count] - The approximate number of desired ticks.
 * @return {Array<*>} - The generated tick values.
 */


function tickValues(scale, count) {
  return scale.bins ? validTicks(scale, scale.bins) : scale.ticks ? scale.ticks(count) : scale.domain();
}
/**
 * Generate a label format function for a scale. If the scale has a
 * 'tickFormat' method, it will be used to generate the formatter, with the
 * count and specifier arguments passed as parameters. If the scale lacks a
 * 'tickFormat' method, the returned formatter performs simple string coercion.
 * If the input scale is a logarithmic scale and the format specifier does not
 * indicate a desired decimal precision, a special variable precision formatter
 * that automatically trims trailing zeroes will be generated.
 * @param {Scale} scale - The scale for which to generate the label formatter.
 * @param {*} [count] - The approximate number of desired ticks.
 * @param {string} [specifier] - The format specifier. Must be a legal d3
 *   specifier string (see https://github.com/d3/d3-format#formatSpecifier).
 * @return {function(*):string} - The generated label formatter.
 */


function tickFormat(scale, count, specifier, formatType) {
  var format = scale.tickFormat ? scale.tickFormat(count, specifier) : specifier && formatType === _vegaScale.Time ? (0, _d3TimeFormat.timeFormat)(specifier) : specifier ? (0, _d3Format.format)(specifier) : String;

  if ((0, _vegaScale.isLogarithmic)(scale.type)) {
    var logfmt = variablePrecision(specifier);
    format = scale.bins ? logfmt : filter(format, logfmt);
  }

  return format;
}

function filter(sourceFormat, targetFormat) {
  return function (_) {
    return sourceFormat(_) ? targetFormat(_) : '';
  };
}

function variablePrecision(specifier) {
  var s = (0, _d3Format.formatSpecifier)(specifier || ',');

  if (s.precision == null) {
    s.precision = 12;

    switch (s.type) {
      case '%':
        s.precision -= 2;
        break;

      case 'e':
        s.precision -= 1;
        break;
    }

    return trimZeroes((0, _d3Format.format)(s), // number format
    (0, _d3Format.format)('.1f')(1)[1] // decimal point character
    );
  } else {
    return (0, _d3Format.format)(s);
  }
}

function trimZeroes(format, decimalChar) {
  return function (x) {
    var str = format(x),
        dec = str.indexOf(decimalChar),
        idx,
        end;
    if (dec < 0) return str;
    idx = rightmostDigit(str, dec);
    end = idx < str.length ? str.slice(idx) : '';

    while (--idx > dec) if (str[idx] !== '0') {
      ++idx;
      break;
    }

    return str.slice(0, idx) + end;
  };
}

function rightmostDigit(str, dec) {
  var i = str.lastIndexOf('e'),
      c;
  if (i > 0) return i;

  for (i = str.length; --i > dec;) {
    c = str.charCodeAt(i);
    if (c >= 48 && c <= 57) return i + 1; // is digit
  }
}
},{"vega-scale":"node_modules/vega-scale/index.js","vega-util":"node_modules/vega-util/index.js","d3-time-format":"node_modules/d3-time-format/src/index.js","d3-format":"node_modules/d3-format/src/index.js"}],"node_modules/vega-encode/src/AxisTicks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AxisTicks;

var _ticks = require("./ticks");

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Generates axis ticks for visualizing a spatial scale.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Scale} params.scale - The scale to generate ticks for.
 * @param {*} [params.count=10] - The approximate number of ticks, or
 *   desired tick interval, to use.
 * @param {Array<*>} [params.values] - The exact tick values to use.
 *   These must be legal domain values for the provided scale.
 *   If provided, the count argument is ignored.
 * @param {function(*):string} [params.formatSpecifier] - A format specifier
 *   to use in conjunction with scale.tickFormat. Legal values are
 *   any valid d3 4.0 format specifier.
 * @param {function(*):string} [params.format] - The format function to use.
 *   If provided, the formatSpecifier argument is ignored.
 */
function AxisTicks(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(AxisTicks, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  if (this.value && !_.modified()) {
    return pulse.StopPropagation;
  }

  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
      ticks = this.value,
      scale = _.scale,
      tally = _.count == null ? _.values ? _.values.length : 10 : _.count,
      count = (0, _ticks.tickCount)(scale, tally, _.minstep),
      format = _.format || (0, _ticks.tickFormat)(scale, count, _.formatSpecifier, _.formatType),
      values = _.values ? (0, _ticks.validTicks)(scale, _.values, count) : (0, _ticks.tickValues)(scale, count);
  if (ticks) out.rem = ticks;
  ticks = values.map(function (value, i) {
    return (0, _vegaDataflow.ingest)({
      index: i / (values.length - 1 || 1),
      value: value,
      label: format(value)
    });
  });

  if (_.extra && ticks.length) {
    // add an extra tick pegged to the initial domain value
    // this is used to generate axes with 'binned' domains
    ticks.push((0, _vegaDataflow.ingest)({
      index: -1,
      extra: {
        value: ticks[0].value
      },
      label: ''
    }));
  }

  out.source = ticks;
  out.add = ticks;
  this.value = ticks;
  return out;
};
},{"./ticks":"node_modules/vega-encode/src/ticks.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-encode/src/DataJoin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DataJoin;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Joins a set of data elements against a set of visual items.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): object} [params.item] - An item generator function.
 * @param {function(object): *} [params.key] - The key field associating data and visual items.
 */
function DataJoin(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(DataJoin, _vegaDataflow.Transform);

function defaultItemCreate() {
  return (0, _vegaDataflow.ingest)({});
}

function isExit(t) {
  return t.exit;
}

prototype.transform = function (_, pulse) {
  var df = pulse.dataflow,
      out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
      item = _.item || defaultItemCreate,
      key = _.key || _vegaDataflow.tupleid,
      map = this.value; // prevent transient (e.g., hover) requests from
  // cascading across marks derived from marks

  if ((0, _vegaUtil.isArray)(out.encode)) {
    out.encode = null;
  }

  if (map && (_.modified('key') || pulse.modified(key))) {
    (0, _vegaUtil.error)('DataJoin does not support modified key function or fields.');
  }

  if (!map) {
    pulse = pulse.addAll();
    this.value = map = (0, _vegaUtil.fastmap)().test(isExit);

    map.lookup = function (t) {
      return map.get(key(t));
    };
  }

  pulse.visit(pulse.ADD, function (t) {
    var k = key(t),
        x = map.get(k);

    if (x) {
      if (x.exit) {
        map.empty--;
        out.add.push(x);
      } else {
        out.mod.push(x);
      }
    } else {
      map.set(k, x = item(t));
      out.add.push(x);
    }

    x.datum = t;
    x.exit = false;
  });
  pulse.visit(pulse.MOD, function (t) {
    var k = key(t),
        x = map.get(k);

    if (x) {
      x.datum = t;
      out.mod.push(x);
    }
  });
  pulse.visit(pulse.REM, function (t) {
    var k = key(t),
        x = map.get(k);

    if (t === x.datum && !x.exit) {
      out.rem.push(x);
      x.exit = true;
      ++map.empty;
    }
  });
  if (pulse.changed(pulse.ADD_MOD)) out.modifies('datum');
  if (_.clean && map.empty > df.cleanThreshold) df.runAfter(map.clean);
  return out;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-encode/src/Encode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Encode;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Invokes encoding functions for visual items.
 * @constructor
 * @param {object} params - The parameters to the encoding functions. This
 *   parameter object will be passed through to all invoked encoding functions.
 * @param {object} [params.mod=false] - Flag indicating if tuples in the input
 *   mod set that are unmodified by encoders should be included in the output.
 * @param {object} param.encoders - The encoding functions
 * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set
 * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set
 * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set
 */
function Encode(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(Encode, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.ADD_REM),
      fmod = _.mod || false,
      encoders = _.encoders,
      encode = pulse.encode; // if an array, the encode directive includes additional sets
  // that must be defined in order for the primary set to be invoked
  // e.g., only run the update set if the hover set is defined

  if ((0, _vegaUtil.isArray)(encode)) {
    if (out.changed() || encode.every(function (e) {
      return encoders[e];
    })) {
      encode = encode[0];
      out.encode = null; // consume targeted encode directive
    } else {
      return pulse.StopPropagation;
    }
  } // marshall encoder functions


  var reenter = encode === 'enter',
      update = encoders.update || _vegaUtil.falsy,
      enter = encoders.enter || _vegaUtil.falsy,
      exit = encoders.exit || _vegaUtil.falsy,
      set = (encode && !reenter ? encoders[encode] : update) || _vegaUtil.falsy;

  if (pulse.changed(pulse.ADD)) {
    pulse.visit(pulse.ADD, function (t) {
      enter(t, _);
      update(t, _);
    });
    out.modifies(enter.output);
    out.modifies(update.output);

    if (set !== _vegaUtil.falsy && set !== update) {
      pulse.visit(pulse.ADD, function (t) {
        set(t, _);
      });
      out.modifies(set.output);
    }
  }

  if (pulse.changed(pulse.REM) && exit !== _vegaUtil.falsy) {
    pulse.visit(pulse.REM, function (t) {
      exit(t, _);
    });
    out.modifies(exit.output);
  }

  if (reenter || set !== _vegaUtil.falsy) {
    var flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);

    if (reenter) {
      pulse.visit(flag, function (t) {
        var mod = enter(t, _) || fmod;
        if (set(t, _) || mod) out.mod.push(t);
      });
      if (out.mod.length) out.modifies(enter.output);
    } else {
      pulse.visit(flag, function (t) {
        if (set(t, _) || fmod) out.mod.push(t);
      });
    }

    if (out.mod.length) out.modifies(set.output);
  }

  return out.changed() ? out : pulse.StopPropagation;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-encode/src/legend-types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Gradient = exports.Discrete = exports.Symbols = void 0;
var Symbols = 'symbol';
exports.Symbols = Symbols;
var Discrete = 'discrete';
exports.Discrete = Discrete;
var Gradient = 'gradient';
exports.Gradient = Gradient;
},{}],"node_modules/vega-encode/src/labels.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.labelValues = labelValues;
exports.thresholdFormat = thresholdFormat;
exports.labelFormat = labelFormat;
exports.labelFraction = labelFraction;

var _legendTypes = require("./legend-types");

var _ticks = require("./ticks");

var _vegaScale = require("vega-scale");

var _vegaUtil = require("vega-util");

const symbols = {
  [_vegaScale.Quantile]: 'quantiles',
  [_vegaScale.Quantize]: 'thresholds',
  [_vegaScale.Threshold]: 'domain'
};
const formats = {
  [_vegaScale.Quantile]: 'quantiles',
  [_vegaScale.Quantize]: 'domain'
};

function labelValues(scale, count) {
  return scale.bins ? binValues(scale.bins) : symbols[scale.type] ? thresholdValues(scale[symbols[scale.type]]()) : (0, _ticks.tickValues)(scale, count);
}

function thresholdFormat(scale, specifier) {
  var _ = scale[formats[scale.type]](),
      n = _.length,
      d = n > 1 ? _[1] - _[0] : _[0],
      i;

  for (i = 1; i < n; ++i) {
    d = Math.min(d, _[i] - _[i - 1]);
  } // 3 ticks times 10 for increased resolution


  return (0, _vegaScale.tickFormat)(0, d, 3 * 10, specifier);
}

function thresholdValues(thresholds) {
  const values = [-Infinity].concat(thresholds);
  values.max = +Infinity;
  return values;
}

function binValues(bins) {
  const values = bins.slice(0, -1);
  values.max = (0, _vegaUtil.peek)(bins);
  return values;
}

function isDiscreteRange(scale) {
  return symbols[scale.type] || scale.bins;
}

function labelFormat(scale, count, type, specifier, formatType) {
  const format = formats[scale.type] && formatType !== _vegaScale.Time ? thresholdFormat(scale, specifier) : (0, _ticks.tickFormat)(scale, count, specifier, formatType);
  return type === _legendTypes.Symbols && isDiscreteRange(scale) ? formatRange(format) : type === _legendTypes.Discrete ? formatDiscrete(format) : formatPoint(format);
}

function formatRange(format) {
  return function (value, index, array) {
    var limit = array[index + 1] || array.max || +Infinity,
        lo = formatValue(value, format),
        hi = formatValue(limit, format);
    return lo && hi ? lo + '\u2013' + hi : hi ? '< ' + hi : '\u2265 ' + lo;
  };
}

function formatDiscrete(format) {
  return function (value, index) {
    return index ? format(value) : null;
  };
}

function formatPoint(format) {
  return function (value) {
    return format(value);
  };
}

function formatValue(value, format) {
  return isFinite(value) ? format(value) : null;
}

function labelFraction(scale) {
  var domain = scale.domain(),
      count = domain.length - 1,
      lo = +domain[0],
      hi = +(0, _vegaUtil.peek)(domain),
      span = hi - lo;

  if (scale.type === _vegaScale.Threshold) {
    var adjust = count ? span / count : 0.1;
    lo -= adjust;
    hi += adjust;
    span = hi - lo;
  }

  return function (value) {
    return (value - lo) / span;
  };
}
},{"./legend-types":"node_modules/vega-encode/src/legend-types.js","./ticks":"node_modules/vega-encode/src/ticks.js","vega-scale":"node_modules/vega-scale/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-encode/src/LegendEntries.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LegendEntries;

var _labels = require("./labels");

var _legendTypes = require("./legend-types");

var _ticks = require("./ticks");

var _vegaDataflow = require("vega-dataflow");

var _vegaScale = require("vega-scale");

var _vegaUtil = require("vega-util");

/**
 * Generates legend entries for visualizing a scale.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Scale} params.scale - The scale to generate items for.
 * @param {*} [params.count=5] - The approximate number of items, or
 *   desired tick interval, to use.
 * @param {Array<*>} [params.values] - The exact tick values to use.
 *   These must be legal domain values for the provided scale.
 *   If provided, the count argument is ignored.
 * @param {string} [params.formatSpecifier] - A format specifier
 *   to use in conjunction with scale.tickFormat. Legal values are
 *   any valid D3 format specifier string.
 * @param {function(*):string} [params.format] - The format function to use.
 *   If provided, the formatSpecifier argument is ignored.
 */
function LegendEntries(params) {
  _vegaDataflow.Transform.call(this, [], params);
}

var prototype = (0, _vegaUtil.inherits)(LegendEntries, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  if (this.value != null && !_.modified()) {
    return pulse.StopPropagation;
  }

  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
      items = this.value,
      type = _.type || _legendTypes.Symbols,
      scale = _.scale,
      count = (0, _ticks.tickCount)(scale, _.count == null ? 5 : _.count, _.minstep),
      format = _.format || (0, _labels.labelFormat)(scale, count, type, _.formatSpecifier, _.formatType),
      values = _.values || (0, _labels.labelValues)(scale, count, type),
      domain,
      fraction,
      size,
      offset;
  if (items) out.rem = items;

  if (type === _legendTypes.Symbols) {
    if ((0, _vegaUtil.isFunction)(size = _.size)) {
      // if first value maps to size zero, remove from list (vega#717)
      if (!_.values && scale(values[0]) === 0) {
        values = values.slice(1);
      } // compute size offset for legend entries


      offset = values.reduce(function (max, value) {
        return Math.max(max, size(value, _));
      }, 0);
    } else {
      size = (0, _vegaUtil.constant)(offset = size || 8);
    }

    items = values.map(function (value, index) {
      return (0, _vegaDataflow.ingest)({
        index: index,
        label: format(value, index, values),
        value: value,
        offset: offset,
        size: size(value, _)
      });
    });
  } else if (type === _legendTypes.Gradient) {
    domain = scale.domain(), fraction = (0, _vegaScale.scaleFraction)(scale, domain[0], (0, _vegaUtil.peek)(domain)); // if automatic label generation produces 2 or fewer values,
    // use the domain end points instead (fixes vega/vega#1364)

    if (values.length < 3 && !_.values && domain[0] !== (0, _vegaUtil.peek)(domain)) {
      values = [domain[0], (0, _vegaUtil.peek)(domain)];
    }

    items = values.map(function (value, index) {
      return (0, _vegaDataflow.ingest)({
        index: index,
        label: format(value, index, values),
        value: value,
        perc: fraction(value)
      });
    });
  } else {
    size = values.length - 1;
    fraction = (0, _labels.labelFraction)(scale);
    items = values.map(function (value, index) {
      return (0, _vegaDataflow.ingest)({
        index: index,
        label: format(value, index, values),
        value: value,
        perc: index ? fraction(value) : 0,
        perc2: index === size ? 1 : fraction(values[index + 1])
      });
    });
  }

  out.source = items;
  out.add = items;
  this.value = items;
  return out;
};
},{"./labels":"node_modules/vega-encode/src/labels.js","./legend-types":"node_modules/vega-encode/src/legend-types.js","./ticks":"node_modules/vega-encode/src/ticks.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-scale":"node_modules/vega-scale/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-encode/src/LinkPath.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LinkPath;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var Paths = (0, _vegaUtil.fastmap)({
  'line': line,
  'line-radial': lineR,
  'arc': arc,
  'arc-radial': arcR,
  'curve': curve,
  'curve-radial': curveR,
  'orthogonal-horizontal': orthoX,
  'orthogonal-vertical': orthoY,
  'orthogonal-radial': orthoR,
  'diagonal-horizontal': diagonalX,
  'diagonal-vertical': diagonalY,
  'diagonal-radial': diagonalR
});

function sourceX(t) {
  return t.source.x;
}

function sourceY(t) {
  return t.source.y;
}

function targetX(t) {
  return t.target.x;
}

function targetY(t) {
  return t.target.y;
}
/**
 * Layout paths linking source and target elements.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */


function LinkPath(params) {
  _vegaDataflow.Transform.call(this, {}, params);
}

LinkPath.Definition = {
  "type": "LinkPath",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "sourceX",
    "type": "field",
    "default": "source.x"
  }, {
    "name": "sourceY",
    "type": "field",
    "default": "source.y"
  }, {
    "name": "targetX",
    "type": "field",
    "default": "target.x"
  }, {
    "name": "targetY",
    "type": "field",
    "default": "target.y"
  }, {
    "name": "orient",
    "type": "enum",
    "default": "vertical",
    "values": ["horizontal", "vertical", "radial"]
  }, {
    "name": "shape",
    "type": "enum",
    "default": "line",
    "values": ["line", "arc", "curve", "diagonal", "orthogonal"]
  }, {
    "name": "require",
    "type": "signal"
  }, {
    "name": "as",
    "type": "string",
    "default": "path"
  }]
};
var prototype = (0, _vegaUtil.inherits)(LinkPath, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var sx = _.sourceX || sourceX,
      sy = _.sourceY || sourceY,
      tx = _.targetX || targetX,
      ty = _.targetY || targetY,
      as = _.as || 'path',
      orient = _.orient || 'vertical',
      shape = _.shape || 'line',
      path = Paths.get(shape + '-' + orient) || Paths.get(shape);

  if (!path) {
    (0, _vegaUtil.error)('LinkPath unsupported type: ' + _.shape + (_.orient ? '-' + _.orient : ''));
  }

  pulse.visit(pulse.SOURCE, function (t) {
    t[as] = path(sx(t), sy(t), tx(t), ty(t));
  });
  return pulse.reflow(_.modified()).modifies(as);
}; // -- Link Path Generation Methods -----


function line(sx, sy, tx, ty) {
  return 'M' + sx + ',' + sy + 'L' + tx + ',' + ty;
}

function lineR(sa, sr, ta, tr) {
  return line(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
}

function arc(sx, sy, tx, ty) {
  var dx = tx - sx,
      dy = ty - sy,
      rr = Math.sqrt(dx * dx + dy * dy) / 2,
      ra = 180 * Math.atan2(dy, dx) / Math.PI;
  return 'M' + sx + ',' + sy + 'A' + rr + ',' + rr + ' ' + ra + ' 0 1' + ' ' + tx + ',' + ty;
}

function arcR(sa, sr, ta, tr) {
  return arc(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
}

function curve(sx, sy, tx, ty) {
  var dx = tx - sx,
      dy = ty - sy,
      ix = 0.2 * (dx + dy),
      iy = 0.2 * (dy - dx);
  return 'M' + sx + ',' + sy + 'C' + (sx + ix) + ',' + (sy + iy) + ' ' + (tx + iy) + ',' + (ty - ix) + ' ' + tx + ',' + ty;
}

function curveR(sa, sr, ta, tr) {
  return curve(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
}

function orthoX(sx, sy, tx, ty) {
  return 'M' + sx + ',' + sy + 'V' + ty + 'H' + tx;
}

function orthoY(sx, sy, tx, ty) {
  return 'M' + sx + ',' + sy + 'H' + tx + 'V' + ty;
}

function orthoR(sa, sr, ta, tr) {
  var sc = Math.cos(sa),
      ss = Math.sin(sa),
      tc = Math.cos(ta),
      ts = Math.sin(ta),
      sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;
  return 'M' + sr * sc + ',' + sr * ss + 'A' + sr + ',' + sr + ' 0 0,' + (sf ? 1 : 0) + ' ' + sr * tc + ',' + sr * ts + 'L' + tr * tc + ',' + tr * ts;
}

function diagonalX(sx, sy, tx, ty) {
  var m = (sx + tx) / 2;
  return 'M' + sx + ',' + sy + 'C' + m + ',' + sy + ' ' + m + ',' + ty + ' ' + tx + ',' + ty;
}

function diagonalY(sx, sy, tx, ty) {
  var m = (sy + ty) / 2;
  return 'M' + sx + ',' + sy + 'C' + sx + ',' + m + ' ' + tx + ',' + m + ' ' + tx + ',' + ty;
}

function diagonalR(sa, sr, ta, tr) {
  var sc = Math.cos(sa),
      ss = Math.sin(sa),
      tc = Math.cos(ta),
      ts = Math.sin(ta),
      mr = (sr + tr) / 2;
  return 'M' + sr * sc + ',' + sr * ss + 'C' + mr * sc + ',' + mr * ss + ' ' + mr * tc + ',' + mr * ts + ' ' + tr * tc + ',' + tr * ts;
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-encode/src/Pie.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Pie;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _d3Array = require("d3-array");

/**
 * Pie and donut chart layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size pie segments.
 * @param {number} [params.startAngle=0] - The start angle (in radians) of the layout.
 * @param {number} [params.endAngle=2π] - The end angle (in radians) of the layout.
 * @param {boolean} [params.sort] - Boolean flag for sorting sectors by value.
 */
function Pie(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Pie.Definition = {
  "type": "Pie",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "startAngle",
    "type": "number",
    "default": 0
  }, {
    "name": "endAngle",
    "type": "number",
    "default": 6.283185307179586
  }, {
    "name": "sort",
    "type": "boolean",
    "default": false
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": ["startAngle", "endAngle"]
  }]
};
var prototype = (0, _vegaUtil.inherits)(Pie, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var as = _.as || ['startAngle', 'endAngle'],
      startAngle = as[0],
      endAngle = as[1],
      field = _.field || _vegaUtil.one,
      start = _.startAngle || 0,
      stop = _.endAngle != null ? _.endAngle : 2 * Math.PI,
      data = pulse.source,
      values = data.map(field),
      n = values.length,
      a = start,
      k = (stop - start) / (0, _d3Array.sum)(values),
      index = (0, _d3Array.range)(n),
      i,
      t,
      v;

  if (_.sort) {
    index.sort(function (a, b) {
      return values[a] - values[b];
    });
  }

  for (i = 0; i < n; ++i) {
    v = values[index[i]];
    t = data[index[i]];
    t[startAngle] = a;
    t[endAngle] = a += v * k;
  }

  this.value = values;
  return pulse.reflow(_.modified()).modifies(as);
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/vega-encode/src/Scale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Scale;

var _ticks = require("./ticks");

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _vegaScale = require("vega-scale");

var _d3Array = require("d3-array");

var _d3Interpolate = require("d3-interpolate");

var DEFAULT_COUNT = 5;

function includeZero(scale) {
  const type = scale.type;
  return !scale.bins && (type === _vegaScale.Linear || type === _vegaScale.Pow || type === _vegaScale.Sqrt);
}

function includePad(type) {
  return (0, _vegaScale.isContinuous)(type) && type !== _vegaScale.Sequential;
}

var SKIP = (0, _vegaUtil.toSet)(['set', 'modified', 'clear', 'type', 'scheme', 'schemeExtent', 'schemeCount', 'domain', 'domainMin', 'domainMid', 'domainMax', 'domainRaw', 'domainImplicit', 'nice', 'zero', 'bins', 'range', 'rangeStep', 'round', 'reverse', 'interpolate', 'interpolateGamma']);
/**
 * Maintains a scale function mapping data values to visual channels.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */

function Scale(params) {
  _vegaDataflow.Transform.call(this, null, params);

  this.modified(true); // always treat as modified
}

var prototype = (0, _vegaUtil.inherits)(Scale, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var df = pulse.dataflow,
      scale = this.value,
      key = scaleKey(_);

  if (!scale || key !== scale.type) {
    this.value = scale = (0, _vegaScale.scale)(key)();
  }

  for (key in _) if (!SKIP[key]) {
    // padding is a scale property for band/point but not others
    if (key === 'padding' && includePad(scale.type)) continue; // invoke scale property setter, raise warning if not found

    (0, _vegaUtil.isFunction)(scale[key]) ? scale[key](_[key]) : df.warn('Unsupported scale property: ' + key);
  }

  configureRange(scale, _, configureBins(scale, _, configureDomain(scale, _, df)));
  return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
};

function scaleKey(_) {
  var t = _.type,
      d = '',
      n; // backwards compatibility pre Vega 5.

  if (t === _vegaScale.Sequential) return _vegaScale.Sequential + '-' + _vegaScale.Linear;

  if (isContinuousColor(_)) {
    n = _.rawDomain ? _.rawDomain.length : _.domain ? _.domain.length + +(_.domainMid != null) : 0;
    d = n === 2 ? _vegaScale.Sequential + '-' : n === 3 ? _vegaScale.Diverging + '-' : '';
  }

  return (d + t || _vegaScale.Linear).toLowerCase();
}

function isContinuousColor(_) {
  const t = _.type;
  return (0, _vegaScale.isContinuous)(t) && t !== _vegaScale.Time && t !== _vegaScale.UTC && (_.scheme || _.range && _.range.length && _.range.every(_vegaUtil.isString));
}

function configureDomain(scale, _, df) {
  // check raw domain, if provided use that and exit early
  var raw = rawDomain(scale, _.domainRaw, df);
  if (raw > -1) return raw;
  var domain = _.domain,
      type = scale.type,
      zero = _.zero || _.zero === undefined && includeZero(scale),
      n,
      mid;
  if (!domain) return 0; // adjust continuous domain for minimum pixel padding

  if (includePad(type) && _.padding && domain[0] !== (0, _vegaUtil.peek)(domain)) {
    domain = padDomain(type, domain, _.range, _.padding, _.exponent, _.constant);
  } // adjust domain based on zero, min, max settings


  if (zero || _.domainMin != null || _.domainMax != null || _.domainMid != null) {
    n = (domain = domain.slice()).length - 1 || 1;

    if (zero) {
      if (domain[0] > 0) domain[0] = 0;
      if (domain[n] < 0) domain[n] = 0;
    }

    if (_.domainMin != null) domain[0] = _.domainMin;
    if (_.domainMax != null) domain[n] = _.domainMax;

    if (_.domainMid != null) {
      mid = _.domainMid;

      if (mid < domain[0] || mid > domain[n]) {
        df.warn('Scale domainMid exceeds domain min or max.', mid);
      }

      domain.splice(n, 0, mid);
    }
  } // set the scale domain


  scale.domain(domainCheck(type, domain, df)); // if ordinal scale domain is defined, prevent implicit
  // domain construction as side-effect of scale lookup

  if (type === _vegaScale.Ordinal) {
    scale.unknown(_.domainImplicit ? _vegaScale.scaleImplicit : undefined);
  } // perform 'nice' adjustment as requested


  if (_.nice && scale.nice) {
    scale.nice(_.nice !== true && (0, _ticks.tickCount)(scale, _.nice) || null);
  } // return the cardinality of the domain


  return domain.length;
}

function rawDomain(scale, raw, df) {
  if (raw) {
    scale.domain(domainCheck(scale.type, raw, df));
    return raw.length;
  } else {
    return -1;
  }
}

function padDomain(type, domain, range, pad, exponent, constant) {
  var span = Math.abs((0, _vegaUtil.peek)(range) - range[0]),
      frac = span / (span - 2 * pad),
      d = type === _vegaScale.Log ? (0, _vegaUtil.zoomLog)(domain, null, frac) : type === _vegaScale.Sqrt ? (0, _vegaUtil.zoomPow)(domain, null, frac, 0.5) : type === _vegaScale.Pow ? (0, _vegaUtil.zoomPow)(domain, null, frac, exponent || 1) : type === _vegaScale.Symlog ? (0, _vegaUtil.zoomSymlog)(domain, null, frac, constant || 1) : (0, _vegaUtil.zoomLinear)(domain, null, frac);
  domain = domain.slice();
  domain[0] = d[0];
  domain[domain.length - 1] = d[1];
  return domain;
}

function domainCheck(type, domain, df) {
  if ((0, _vegaScale.isLogarithmic)(type)) {
    // sum signs of domain values
    // if all pos or all neg, abs(sum) === domain.length
    var s = Math.abs(domain.reduce(function (s, v) {
      return s + (v < 0 ? -1 : v > 0 ? 1 : 0);
    }, 0));

    if (s !== domain.length) {
      df.warn('Log scale domain includes zero: ' + (0, _vegaUtil.stringValue)(domain));
    }
  }

  return domain;
}

function configureBins(scale, _, count) {
  let bins = _.bins;

  if (bins && !(0, _vegaUtil.isArray)(bins)) {
    // generate bin boundary array
    let domain = scale.domain(),
        lo = domain[0],
        hi = (0, _vegaUtil.peek)(domain),
        start = bins.start == null ? lo : bins.start,
        stop = bins.stop == null ? hi : bins.stop,
        step = bins.step;
    if (!step) (0, _vegaUtil.error)('Scale bins parameter missing step property.');
    if (start < lo) start = step * Math.ceil(lo / step);
    if (stop > hi) stop = step * Math.floor(hi / step);
    bins = (0, _d3Array.range)(start, stop + step / 2, step);
  }

  if (bins) {
    // assign bin boundaries to scale instance
    scale.bins = bins;
  } else if (scale.bins) {
    // no current bins, remove bins if previously set
    delete scale.bins;
  } // special handling for bin-ordinal scales


  if (scale.type === _vegaScale.BinOrdinal) {
    if (!bins) {
      // the domain specifies the bins
      scale.bins = scale.domain();
    } else if (!_.domain && !_.domainRaw) {
      // the bins specify the domain
      scale.domain(bins);
      count = bins.length;
    }
  } // return domain cardinality


  return count;
}

function configureRange(scale, _, count) {
  var type = scale.type,
      round = _.round || false,
      range = _.range; // if range step specified, calculate full range extent

  if (_.rangeStep != null) {
    range = configureRangeStep(type, _, count);
  } // else if a range scheme is defined, use that
  else if (_.scheme) {
      range = configureScheme(type, _, count);

      if ((0, _vegaUtil.isFunction)(range)) {
        if (scale.interpolator) {
          return scale.interpolator(range);
        } else {
          (0, _vegaUtil.error)(`Scale type ${type} does not support interpolating color schemes.`);
        }
      }
    } // given a range array for an interpolating scale, convert to interpolator


  if (range && (0, _vegaScale.isInterpolating)(type)) {
    return scale.interpolator((0, _vegaScale.interpolateColors)(flip(range, _.reverse), _.interpolate, _.interpolateGamma));
  } // configure rounding / interpolation


  if (range && _.interpolate && scale.interpolate) {
    scale.interpolate((0, _vegaScale.interpolate)(_.interpolate, _.interpolateGamma));
  } else if ((0, _vegaUtil.isFunction)(scale.round)) {
    scale.round(round);
  } else if ((0, _vegaUtil.isFunction)(scale.rangeRound)) {
    scale.interpolate(round ? _d3Interpolate.interpolateRound : _d3Interpolate.interpolate);
  }

  if (range) scale.range(flip(range, _.reverse));
}

function configureRangeStep(type, _, count) {
  if (type !== _vegaScale.Band && type !== _vegaScale.Point) {
    (0, _vegaUtil.error)('Only band and point scales support rangeStep.');
  } // calculate full range based on requested step size and padding


  var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0,
      inner = type === _vegaScale.Point ? 1 : (_.paddingInner != null ? _.paddingInner : _.padding) || 0;
  return [0, _.rangeStep * (0, _vegaScale.bandSpace)(count, inner, outer)];
}

function configureScheme(type, _, count) {
  var extent = _.schemeExtent,
      name,
      scheme;

  if ((0, _vegaUtil.isArray)(_.scheme)) {
    scheme = (0, _vegaScale.interpolateColors)(_.scheme, _.interpolate, _.interpolateGamma);
  } else {
    name = _.scheme.toLowerCase();
    scheme = (0, _vegaScale.scheme)(name);
    if (!scheme) (0, _vegaUtil.error)(`Unrecognized scheme name: ${_.scheme}`);
  } // determine size for potential discrete range


  count = type === _vegaScale.Threshold ? count + 1 : type === _vegaScale.BinOrdinal ? count - 1 : type === _vegaScale.Quantile || type === _vegaScale.Quantize ? +_.schemeCount || DEFAULT_COUNT : count; // adjust and/or quantize scheme as appropriate

  return (0, _vegaScale.isInterpolating)(type) ? adjustScheme(scheme, extent, _.reverse) : (0, _vegaUtil.isFunction)(scheme) ? (0, _vegaScale.quantizeInterpolator)(adjustScheme(scheme, extent), count) : type === _vegaScale.Ordinal ? scheme : scheme.slice(0, count);
}

function adjustScheme(scheme, extent, reverse) {
  return (0, _vegaUtil.isFunction)(scheme) && (extent || reverse) ? (0, _vegaScale.interpolateRange)(scheme, flip(extent || [0, 1], reverse)) : scheme;
}

function flip(array, reverse) {
  return reverse ? array.slice().reverse() : array;
}
},{"./ticks":"node_modules/vega-encode/src/ticks.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","vega-scale":"node_modules/vega-scale/index.js","d3-array":"node_modules/d3-array/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js"}],"node_modules/vega-encode/src/SortItems.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SortItems;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Sorts scenegraph items in the pulse source array.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - A comparator
 *   function for sorting tuples.
 */
function SortItems(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(SortItems, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var mod = _.modified('sort') || pulse.changed(pulse.ADD) || pulse.modified(_.sort.fields) || pulse.modified('datum');
  if (mod) pulse.source.sort((0, _vegaDataflow.stableCompare)(_.sort));
  this.modified(mod);
  return pulse;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-encode/src/Stack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Stack;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var Zero = 'zero',
    Center = 'center',
    Normalize = 'normalize',
    DefOutput = ['y0', 'y1'];
/**
 * Stack layout for visualization elements.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to stack.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {function(object,object): number} [params.sort] - A comparator for stack sorting.
 * @param {string} [offset='zero'] - One of 'zero', 'center', 'normalize'.
 */

function Stack(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Stack.Definition = {
  "type": "Stack",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "sort",
    "type": "compare"
  }, {
    "name": "offset",
    "type": "enum",
    "default": Zero,
    "values": [Zero, Center, Normalize]
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": DefOutput
  }]
};
var prototype = (0, _vegaUtil.inherits)(Stack, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var as = _.as || DefOutput,
      y0 = as[0],
      y1 = as[1],
      sort = (0, _vegaDataflow.stableCompare)(_.sort),
      field = _.field || _vegaUtil.one,
      stack = _.offset === Center ? stackCenter : _.offset === Normalize ? stackNormalize : stackZero,
      groups,
      i,
      n,
      max; // partition, sum, and sort the stack groups

  groups = partition(pulse.source, _.groupby, sort, field); // compute stack layouts per group

  for (i = 0, n = groups.length, max = groups.max; i < n; ++i) {
    stack(groups[i], max, field, y0, y1);
  }

  return pulse.reflow(_.modified()).modifies(as);
};

function stackCenter(group, max, field, y0, y1) {
  var last = (max - group.sum) / 2,
      m = group.length,
      j = 0,
      t;

  for (; j < m; ++j) {
    t = group[j];
    t[y0] = last;
    t[y1] = last += Math.abs(field(t));
  }
}

function stackNormalize(group, max, field, y0, y1) {
  var scale = 1 / group.sum,
      last = 0,
      m = group.length,
      j = 0,
      v = 0,
      t;

  for (; j < m; ++j) {
    t = group[j];
    t[y0] = last;
    t[y1] = last = scale * (v += Math.abs(field(t)));
  }
}

function stackZero(group, max, field, y0, y1) {
  var lastPos = 0,
      lastNeg = 0,
      m = group.length,
      j = 0,
      v,
      t;

  for (; j < m; ++j) {
    t = group[j];
    v = +field(t);

    if (v < 0) {
      t[y0] = lastNeg;
      t[y1] = lastNeg += v;
    } else {
      t[y0] = lastPos;
      t[y1] = lastPos += v;
    }
  }
}

function partition(data, groupby, sort, field) {
  var groups = [],
      get = function (f) {
    return f(t);
  },
      map,
      i,
      n,
      m,
      t,
      k,
      g,
      s,
      max; // partition data points into stack groups


  if (groupby == null) {
    groups.push(data.slice());
  } else {
    for (map = {}, i = 0, n = data.length; i < n; ++i) {
      t = data[i];
      k = groupby.map(get);
      g = map[k];

      if (!g) {
        map[k] = g = [];
        groups.push(g);
      }

      g.push(t);
    }
  } // compute sums of groups, sort groups as needed


  for (k = 0, max = 0, m = groups.length; k < m; ++k) {
    g = groups[k];

    for (i = 0, s = 0, n = g.length; i < n; ++i) {
      s += Math.abs(field(g[i]));
    }

    g.sum = s;
    if (s > max) max = s;
    if (sort) g.sort(sort);
  }

  groups.max = max;
  return groups;
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-encode/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "axisticks", {
  enumerable: true,
  get: function () {
    return _AxisTicks.default;
  }
});
Object.defineProperty(exports, "datajoin", {
  enumerable: true,
  get: function () {
    return _DataJoin.default;
  }
});
Object.defineProperty(exports, "encode", {
  enumerable: true,
  get: function () {
    return _Encode.default;
  }
});
Object.defineProperty(exports, "legendentries", {
  enumerable: true,
  get: function () {
    return _LegendEntries.default;
  }
});
Object.defineProperty(exports, "linkpath", {
  enumerable: true,
  get: function () {
    return _LinkPath.default;
  }
});
Object.defineProperty(exports, "pie", {
  enumerable: true,
  get: function () {
    return _Pie.default;
  }
});
Object.defineProperty(exports, "scale", {
  enumerable: true,
  get: function () {
    return _Scale.default;
  }
});
Object.defineProperty(exports, "sortitems", {
  enumerable: true,
  get: function () {
    return _SortItems.default;
  }
});
Object.defineProperty(exports, "stack", {
  enumerable: true,
  get: function () {
    return _Stack.default;
  }
});
Object.defineProperty(exports, "validTicks", {
  enumerable: true,
  get: function () {
    return _ticks.validTicks;
  }
});

var _AxisTicks = _interopRequireDefault(require("./src/AxisTicks"));

var _DataJoin = _interopRequireDefault(require("./src/DataJoin"));

var _Encode = _interopRequireDefault(require("./src/Encode"));

var _LegendEntries = _interopRequireDefault(require("./src/LegendEntries"));

var _LinkPath = _interopRequireDefault(require("./src/LinkPath"));

var _Pie = _interopRequireDefault(require("./src/Pie"));

var _Scale = _interopRequireDefault(require("./src/Scale"));

var _SortItems = _interopRequireDefault(require("./src/SortItems"));

var _Stack = _interopRequireDefault(require("./src/Stack"));

var _ticks = require("./src/ticks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/AxisTicks":"node_modules/vega-encode/src/AxisTicks.js","./src/DataJoin":"node_modules/vega-encode/src/DataJoin.js","./src/Encode":"node_modules/vega-encode/src/Encode.js","./src/LegendEntries":"node_modules/vega-encode/src/LegendEntries.js","./src/LinkPath":"node_modules/vega-encode/src/LinkPath.js","./src/Pie":"node_modules/vega-encode/src/Pie.js","./src/Scale":"node_modules/vega-encode/src/Scale.js","./src/SortItems":"node_modules/vega-encode/src/SortItems.js","./src/Stack":"node_modules/vega-encode/src/Stack.js","./src/ticks":"node_modules/vega-encode/src/ticks.js"}],"node_modules/d3-contour/node_modules/d3-array/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/bisector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      }

      return lo;
    },
    right: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
      }

      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function (d, x) {
    return (0, _ascending.default)(f(d), x);
  };
}
},{"./ascending":"node_modules/d3-contour/node_modules/d3-array/src/ascending.js"}],"node_modules/d3-contour/node_modules/d3-array/src/bisect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bisectLeft = exports.bisectRight = void 0;

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ascendingBisect = (0, _bisector.default)(_ascending.default);
var bisectRight = ascendingBisect.right;
exports.bisectRight = bisectRight;
var bisectLeft = ascendingBisect.left;
exports.bisectLeft = bisectLeft;
var _default = bisectRight;
exports.default = _default;
},{"./ascending":"node_modules/d3-contour/node_modules/d3-array/src/ascending.js","./bisector":"node_modules/d3-contour/node_modules/d3-array/src/bisector.js"}],"node_modules/d3-contour/node_modules/d3-array/src/pairs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.pair = pair;

function _default(array, f) {
  if (f == null) f = pair;
  var i = 0,
      n = array.length - 1,
      p = array[0],
      pairs = new Array(n < 0 ? 0 : n);

  while (i < n) pairs[i] = f(p, p = array[++i]);

  return pairs;
}

function pair(a, b) {
  return [a, b];
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pairs = require("./pairs");

function _default(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;
  if (reduce == null) reduce = _pairs.pair;

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
}
},{"./pairs":"node_modules/d3-contour/node_modules/d3-array/src/pairs.js"}],"node_modules/d3-contour/node_modules/d3-array/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x === null ? NaN : +x;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/variance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
}
},{"./number":"node_modules/d3-contour/node_modules/d3-array/src/number.js"}],"node_modules/d3-contour/node_modules/d3-array/src/deviation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _variance = _interopRequireDefault(require("./variance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, f) {
  var v = (0, _variance.default)(array, f);
  return v ? Math.sqrt(v) : v;
}
},{"./variance":"node_modules/d3-contour/node_modules/d3-array/src/variance.js"}],"node_modules/d3-contour/node_modules/d3-array/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
var map = array.map;
exports.map = map;
},{}],"node_modules/d3-contour/node_modules/d3-array/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function _default(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));

    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));

    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();
  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/threshold/sturges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/histogram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _bisect = _interopRequireDefault(require("./bisect"));

var _constant = _interopRequireDefault(require("./constant"));

var _extent = _interopRequireDefault(require("./extent"));

var _identity = _interopRequireDefault(require("./identity"));

var _range = _interopRequireDefault(require("./range"));

var _ticks = require("./ticks");

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      domain = _extent.default,
      threshold = _sturges.default;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      tz = (0, _ticks.tickStep)(x0, x1, tz);
      tz = (0, _range.default)(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
    } // Remove any thresholds outside the domain.


    var m = tz.length;

    while (tz[0] <= x0) tz.shift(), --m;

    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin; // Initialize bins.

    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    } // Assign data to bins by value, ignoring any outside the domain.


    for (i = 0; i < n; ++i) {
      x = values[i];

      if (x0 <= x && x <= x1) {
        bins[(0, _bisect.default)(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(_), histogram) : value;
  };

  histogram.domain = function (_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constant.default)([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), histogram) : threshold;
  };

  return histogram;
}
},{"./array":"node_modules/d3-contour/node_modules/d3-array/src/array.js","./bisect":"node_modules/d3-contour/node_modules/d3-array/src/bisect.js","./constant":"node_modules/d3-contour/node_modules/d3-array/src/constant.js","./extent":"node_modules/d3-contour/node_modules/d3-array/src/extent.js","./identity":"node_modules/d3-contour/node_modules/d3-array/src/identity.js","./range":"node_modules/d3-contour/node_modules/d3-array/src/range.js","./ticks":"node_modules/d3-contour/node_modules/d3-array/src/ticks.js","./threshold/sturges":"node_modules/d3-contour/node_modules/d3-array/src/threshold/sturges.js"}],"node_modules/d3-contour/node_modules/d3-array/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, p, valueof) {
  if (valueof == null) valueof = _number.default;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
},{"./number":"node_modules/d3-contour/node_modules/d3-array/src/number.js"}],"node_modules/d3-contour/node_modules/d3-array/src/threshold/freedmanDiaconis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array");

var _ascending = _interopRequireDefault(require("../ascending"));

var _number = _interopRequireDefault(require("../number"));

var _quantile = _interopRequireDefault(require("../quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  values = _array.map.call(values, _number.default).sort(_ascending.default);
  return Math.ceil((max - min) / (2 * ((0, _quantile.default)(values, 0.75) - (0, _quantile.default)(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}
},{"../array":"node_modules/d3-contour/node_modules/d3-array/src/array.js","../ascending":"node_modules/d3-contour/node_modules/d3-array/src/ascending.js","../number":"node_modules/d3-contour/node_modules/d3-array/src/number.js","../quantile":"node_modules/d3-contour/node_modules/d3-array/src/quantile.js"}],"node_modules/d3-contour/node_modules/d3-array/src/threshold/scott.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _deviation = _interopRequireDefault(require("../deviation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  return Math.ceil((max - min) / (3.5 * (0, _deviation.default)(values) * Math.pow(values.length, -1 / 3)));
}
},{"../deviation":"node_modules/d3-contour/node_modules/d3-array/src/deviation.js"}],"node_modules/d3-contour/node_modules/d3-array/src/max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/mean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) sum += value;else --m;
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) sum += value;else --m;
    }
  }

  if (m) return sum / m;
}
},{"./number":"node_modules/d3-contour/node_modules/d3-array/src/number.js"}],"node_modules/d3-contour/node_modules/d3-array/src/median.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

var _number = _interopRequireDefault(require("./number"));

var _quantile = _interopRequireDefault(require("./quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        numbers.push(value);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return (0, _quantile.default)(numbers.sort(_ascending.default), 0.5);
}
},{"./ascending":"node_modules/d3-contour/node_modules/d3-array/src/ascending.js","./number":"node_modules/d3-contour/node_modules/d3-array/src/number.js","./quantile":"node_modules/d3-contour/node_modules/d3-array/src/quantile.js"}],"node_modules/d3-contour/node_modules/d3-array/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;

  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;

    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/min.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/permute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, indexes) {
  var i = indexes.length,
      permutes = new Array(i);

  while (i--) permutes[i] = array[indexes[i]];

  return permutes;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/scan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];
  if (compare == null) compare = _ascending.default;

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
}
},{"./ascending":"node_modules/d3-contour/node_modules/d3-array/src/ascending.js"}],"node_modules/d3-contour/node_modules/d3-array/src/shuffle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  } else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
}
},{}],"node_modules/d3-contour/node_modules/d3-array/src/transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _min = _interopRequireDefault(require("./min"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(matrix) {
  if (!(n = matrix.length)) return [];

  for (var i = -1, m = (0, _min.default)(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }

  return transpose;
}

function length(d) {
  return d.length;
}
},{"./min":"node_modules/d3-contour/node_modules/d3-array/src/min.js"}],"node_modules/d3-contour/node_modules/d3-array/src/zip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transpose = _interopRequireDefault(require("./transpose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _transpose.default)(arguments);
}
},{"./transpose":"node_modules/d3-contour/node_modules/d3-array/src/transpose.js"}],"node_modules/d3-contour/node_modules/d3-array/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bisect", {
  enumerable: true,
  get: function () {
    return _bisect.default;
  }
});
Object.defineProperty(exports, "bisectRight", {
  enumerable: true,
  get: function () {
    return _bisect.bisectRight;
  }
});
Object.defineProperty(exports, "bisectLeft", {
  enumerable: true,
  get: function () {
    return _bisect.bisectLeft;
  }
});
Object.defineProperty(exports, "ascending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "bisector", {
  enumerable: true,
  get: function () {
    return _bisector.default;
  }
});
Object.defineProperty(exports, "cross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "descending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "deviation", {
  enumerable: true,
  get: function () {
    return _deviation.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "histogram", {
  enumerable: true,
  get: function () {
    return _histogram.default;
  }
});
Object.defineProperty(exports, "thresholdFreedmanDiaconis", {
  enumerable: true,
  get: function () {
    return _freedmanDiaconis.default;
  }
});
Object.defineProperty(exports, "thresholdScott", {
  enumerable: true,
  get: function () {
    return _scott.default;
  }
});
Object.defineProperty(exports, "thresholdSturges", {
  enumerable: true,
  get: function () {
    return _sturges.default;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.default;
  }
});
Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function () {
    return _mean.default;
  }
});
Object.defineProperty(exports, "median", {
  enumerable: true,
  get: function () {
    return _median.default;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.default;
  }
});
Object.defineProperty(exports, "pairs", {
  enumerable: true,
  get: function () {
    return _pairs.default;
  }
});
Object.defineProperty(exports, "permute", {
  enumerable: true,
  get: function () {
    return _permute.default;
  }
});
Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.default;
  }
});
Object.defineProperty(exports, "scan", {
  enumerable: true,
  get: function () {
    return _scan.default;
  }
});
Object.defineProperty(exports, "shuffle", {
  enumerable: true,
  get: function () {
    return _shuffle.default;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function () {
    return _sum.default;
  }
});
Object.defineProperty(exports, "ticks", {
  enumerable: true,
  get: function () {
    return _ticks.default;
  }
});
Object.defineProperty(exports, "tickIncrement", {
  enumerable: true,
  get: function () {
    return _ticks.tickIncrement;
  }
});
Object.defineProperty(exports, "tickStep", {
  enumerable: true,
  get: function () {
    return _ticks.tickStep;
  }
});
Object.defineProperty(exports, "transpose", {
  enumerable: true,
  get: function () {
    return _transpose.default;
  }
});
Object.defineProperty(exports, "variance", {
  enumerable: true,
  get: function () {
    return _variance.default;
  }
});
Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function () {
    return _zip.default;
  }
});

var _bisect = _interopRequireWildcard(require("./bisect"));

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

var _cross = _interopRequireDefault(require("./cross"));

var _descending = _interopRequireDefault(require("./descending"));

var _deviation = _interopRequireDefault(require("./deviation"));

var _extent = _interopRequireDefault(require("./extent"));

var _histogram = _interopRequireDefault(require("./histogram"));

var _freedmanDiaconis = _interopRequireDefault(require("./threshold/freedmanDiaconis"));

var _scott = _interopRequireDefault(require("./threshold/scott"));

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

var _max = _interopRequireDefault(require("./max"));

var _mean = _interopRequireDefault(require("./mean"));

var _median = _interopRequireDefault(require("./median"));

var _merge = _interopRequireDefault(require("./merge"));

var _min = _interopRequireDefault(require("./min"));

var _pairs = _interopRequireDefault(require("./pairs"));

var _permute = _interopRequireDefault(require("./permute"));

var _quantile = _interopRequireDefault(require("./quantile"));

var _range = _interopRequireDefault(require("./range"));

var _scan = _interopRequireDefault(require("./scan"));

var _shuffle = _interopRequireDefault(require("./shuffle"));

var _sum = _interopRequireDefault(require("./sum"));

var _ticks = _interopRequireWildcard(require("./ticks"));

var _transpose = _interopRequireDefault(require("./transpose"));

var _variance = _interopRequireDefault(require("./variance"));

var _zip = _interopRequireDefault(require("./zip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./bisect":"node_modules/d3-contour/node_modules/d3-array/src/bisect.js","./ascending":"node_modules/d3-contour/node_modules/d3-array/src/ascending.js","./bisector":"node_modules/d3-contour/node_modules/d3-array/src/bisector.js","./cross":"node_modules/d3-contour/node_modules/d3-array/src/cross.js","./descending":"node_modules/d3-contour/node_modules/d3-array/src/descending.js","./deviation":"node_modules/d3-contour/node_modules/d3-array/src/deviation.js","./extent":"node_modules/d3-contour/node_modules/d3-array/src/extent.js","./histogram":"node_modules/d3-contour/node_modules/d3-array/src/histogram.js","./threshold/freedmanDiaconis":"node_modules/d3-contour/node_modules/d3-array/src/threshold/freedmanDiaconis.js","./threshold/scott":"node_modules/d3-contour/node_modules/d3-array/src/threshold/scott.js","./threshold/sturges":"node_modules/d3-contour/node_modules/d3-array/src/threshold/sturges.js","./max":"node_modules/d3-contour/node_modules/d3-array/src/max.js","./mean":"node_modules/d3-contour/node_modules/d3-array/src/mean.js","./median":"node_modules/d3-contour/node_modules/d3-array/src/median.js","./merge":"node_modules/d3-contour/node_modules/d3-array/src/merge.js","./min":"node_modules/d3-contour/node_modules/d3-array/src/min.js","./pairs":"node_modules/d3-contour/node_modules/d3-array/src/pairs.js","./permute":"node_modules/d3-contour/node_modules/d3-array/src/permute.js","./quantile":"node_modules/d3-contour/node_modules/d3-array/src/quantile.js","./range":"node_modules/d3-contour/node_modules/d3-array/src/range.js","./scan":"node_modules/d3-contour/node_modules/d3-array/src/scan.js","./shuffle":"node_modules/d3-contour/node_modules/d3-array/src/shuffle.js","./sum":"node_modules/d3-contour/node_modules/d3-array/src/sum.js","./ticks":"node_modules/d3-contour/node_modules/d3-array/src/ticks.js","./transpose":"node_modules/d3-contour/node_modules/d3-array/src/transpose.js","./variance":"node_modules/d3-contour/node_modules/d3-array/src/variance.js","./zip":"node_modules/d3-contour/node_modules/d3-array/src/zip.js"}],"node_modules/d3-contour/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
},{}],"node_modules/d3-contour/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a - b;
}
},{}],"node_modules/d3-contour/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring) {
  var i = 0,
      n = ring.length,
      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];

  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];

  return area;
}
},{}],"node_modules/d3-contour/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-contour/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring, hole) {
  var i = -1,
      n = hole.length,
      c;

  while (++i < n) if (c = ringContains(ring, hole[i])) return c;

  return 0;
}

function ringContains(ring, point) {
  var x = point[0],
      y = point[1],
      contains = -1;

  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi = ring[i],
        xi = pi[0],
        yi = pi[1],
        pj = ring[j],
        xj = pj[0],
        yj = pj[1];
    if (segmentContains(pi, pj, point)) return 0;
    if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
  }

  return contains;
}

function segmentContains(a, b, c) {
  var i;
  return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}

function collinear(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}

function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}
},{}],"node_modules/d3-contour/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
},{}],"node_modules/d3-contour/src/contours.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _array = require("./array");

var _ascending = _interopRequireDefault(require("./ascending"));

var _area = _interopRequireDefault(require("./area"));

var _constant = _interopRequireDefault(require("./constant"));

var _contains = _interopRequireDefault(require("./contains"));

var _noop = _interopRequireDefault(require("./noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cases = [[], [[[1.0, 1.5], [0.5, 1.0]]], [[[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [0.5, 1.0]]], [[[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 0.5], [1.0, 1.5]]], [[[1.0, 0.5], [0.5, 1.0]]], [[[0.5, 1.0], [1.0, 0.5]]], [[[1.0, 1.5], [1.0, 0.5]]], [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [1.0, 0.5]]], [[[0.5, 1.0], [1.5, 1.0]]], [[[1.0, 1.5], [1.5, 1.0]]], [[[0.5, 1.0], [1.0, 1.5]]], []];

function _default() {
  var dx = 1,
      dy = 1,
      threshold = _d3Array.thresholdSturges,
      smooth = smoothLinear;

  function contours(values) {
    var tz = threshold(values); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      var domain = (0, _d3Array.extent)(values),
          start = domain[0],
          stop = domain[1];
      tz = (0, _d3Array.tickStep)(start, stop, tz);
      tz = (0, _d3Array.range)(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
    } else {
      tz = tz.slice().sort(_ascending.default);
    }

    return tz.map(function (value) {
      return contour(values, value);
    });
  } // Accumulate, smooth contour rings, assign holes to exterior rings.
  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js


  function contour(values, value) {
    var polygons = [],
        holes = [];
    isorings(values, value, function (ring) {
      smooth(ring, values, value);
      if ((0, _area.default)(ring) > 0) polygons.push([ring]);else holes.push(ring);
    });
    holes.forEach(function (hole) {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if ((0, _contains.default)((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });
    return {
      type: "MultiPolygon",
      value: value,
      coordinates: polygons
    };
  } // Marching squares with isolines stitched into rings.
  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js


  function isorings(values, value, callback) {
    var fragmentByStart = new Array(),
        fragmentByEnd = new Array(),
        x,
        y,
        t0,
        t1,
        t2,
        t3; // Special case for the first row (y = -1, t2 = t3 = 0).

    x = y = -1;
    t1 = values[0] >= value;
    cases[t1 << 1].forEach(stitch);

    while (++x < dx - 1) {
      t0 = t1, t1 = values[x + 1] >= value;
      cases[t0 | t1 << 1].forEach(stitch);
    }

    cases[t1 << 0].forEach(stitch); // General case for the intermediate rows.

    while (++y < dy - 1) {
      x = -1;
      t1 = values[y * dx + dx] >= value;
      t2 = values[y * dx] >= value;
      cases[t1 << 1 | t2 << 2].forEach(stitch);

      while (++x < dx - 1) {
        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
        t3 = t2, t2 = values[y * dx + x + 1] >= value;
        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
      }

      cases[t1 | t2 << 3].forEach(stitch);
    } // Special case for the last row (y = dy - 1, t0 = t1 = 0).


    x = -1;
    t2 = values[y * dx] >= value;
    cases[t2 << 2].forEach(stitch);

    while (++x < dx - 1) {
      t3 = t2, t2 = values[y * dx + x + 1] >= value;
      cases[t2 << 2 | t3 << 3].forEach(stitch);
    }

    cases[t2 << 3].forEach(stitch);

    function stitch(line) {
      var start = [line[0][0] + x, line[0][1] + y],
          end = [line[1][0] + x, line[1][1] + y],
          startIndex = index(start),
          endIndex = index(end),
          f,
          g;

      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = {
              start: f.start,
              end: g.end,
              ring: f.ring.concat(g.ring)
            };
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = {
              start: g.start,
              end: f.end,
              ring: g.ring.concat(f.ring)
            };
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
          start: startIndex,
          end: endIndex,
          ring: [start, end]
        };
      }
    }
  }

  function index(point) {
    return point[0] * 2 + point[1] * (dx + 1) * 4;
  }

  function smoothLinear(ring, values, value) {
    ring.forEach(function (point) {
      var x = point[0],
          y = point[1],
          xt = x | 0,
          yt = y | 0,
          v0,
          v1 = values[yt * dx + xt];

      if (x > 0 && x < dx && xt === x) {
        v0 = values[yt * dx + xt - 1];
        point[0] = x + (value - v0) / (v1 - v0) - 0.5;
      }

      if (y > 0 && y < dy && yt === y) {
        v0 = values[(yt - 1) * dx + xt];
        point[1] = y + (value - v0) / (v1 - v0) - 0.5;
      }
    });
  }

  contours.contour = contour;

  contours.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.ceil(_[0]),
        _1 = Math.ceil(_[1]);

    if (!(_0 > 0) || !(_1 > 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, contours;
  };

  contours.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), contours) : threshold;
  };

  contours.smooth = function (_) {
    return arguments.length ? (smooth = _ ? smoothLinear : _noop.default, contours) : smooth === smoothLinear;
  };

  return contours;
}
},{"d3-array":"node_modules/d3-contour/node_modules/d3-array/src/index.js","./array":"node_modules/d3-contour/src/array.js","./ascending":"node_modules/d3-contour/src/ascending.js","./area":"node_modules/d3-contour/src/area.js","./constant":"node_modules/d3-contour/src/constant.js","./contains":"node_modules/d3-contour/src/contains.js","./noop":"node_modules/d3-contour/src/noop.js"}],"node_modules/d3-contour/src/blur.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blurX = blurX;
exports.blurY = blurY;

// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
function blurX(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;

  for (var j = 0; j < m; ++j) {
    for (var i = 0, sr = 0; i < n + r; ++i) {
      if (i < n) {
        sr += source.data[i + j * n];
      }

      if (i >= r) {
        if (i >= w) {
          sr -= source.data[i - w + j * n];
        }

        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
      }
    }
  }
} // TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.


function blurY(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;

  for (var i = 0; i < n; ++i) {
    for (var j = 0, sr = 0; j < m + r; ++j) {
      if (j < m) {
        sr += source.data[i + j * n];
      }

      if (j >= r) {
        if (j >= w) {
          sr -= source.data[i + (j - w) * n];
        }

        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
      }
    }
  }
}
},{}],"node_modules/d3-contour/src/density.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _array = require("./array");

var _blur = require("./blur");

var _constant = _interopRequireDefault(require("./constant"));

var _contours = _interopRequireDefault(require("./contours"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultX(d) {
  return d[0];
}

function defaultY(d) {
  return d[1];
}

function defaultWeight() {
  return 1;
}

function _default() {
  var x = defaultX,
      y = defaultY,
      weight = defaultWeight,
      dx = 960,
      dy = 500,
      r = 20,
      // blur radius
  k = 2,
      // log2(grid cell size)
  o = r * 3,
      // grid offset, to pad for blur
  n = dx + o * 2 >> k,
      // grid width
  m = dy + o * 2 >> k,
      // grid height
  threshold = (0, _constant.default)(20);

  function density(data) {
    var values0 = new Float32Array(n * m),
        values1 = new Float32Array(n * m);
    data.forEach(function (d, i, data) {
      var xi = +x(d, i, data) + o >> k,
          yi = +y(d, i, data) + o >> k,
          wi = +weight(d, i, data);

      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
        values0[xi + yi * n] += wi;
      }
    }); // TODO Optimize.

    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    var tz = threshold(values0); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      var stop = (0, _d3Array.max)(values0);
      tz = (0, _d3Array.tickStep)(0, stop, tz);
      tz = (0, _d3Array.range)(0, Math.floor(stop / tz) * tz, tz);
      tz.shift();
    }

    return (0, _contours.default)().thresholds(tz).size([n, m])(values0).map(transform);
  }

  function transform(geometry) {
    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.

    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  }

  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }

  function transformRing(coordinates) {
    coordinates.forEach(transformPoint);
  } // TODO Optimize.


  function transformPoint(coordinates) {
    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
  }

  function resize() {
    o = r * 3;
    n = dx + o * 2 >> k;
    m = dy + o * 2 >> k;
    return density;
  }

  density.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : x;
  };

  density.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : y;
  };

  density.weight = function (_) {
    return arguments.length ? (weight = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : weight;
  };

  density.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.ceil(_[0]),
        _1 = Math.ceil(_[1]);

    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, resize();
  };

  density.cellSize = function (_) {
    if (!arguments.length) return 1 << k;
    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
    return k = Math.floor(Math.log(_) / Math.LN2), resize();
  };

  density.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), density) : threshold;
  };

  density.bandwidth = function (_) {
    if (!arguments.length) return Math.sqrt(r * (r + 1));
    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
  };

  return density;
}
},{"d3-array":"node_modules/d3-contour/node_modules/d3-array/src/index.js","./array":"node_modules/d3-contour/src/array.js","./blur":"node_modules/d3-contour/src/blur.js","./constant":"node_modules/d3-contour/src/constant.js","./contours":"node_modules/d3-contour/src/contours.js"}],"node_modules/d3-contour/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "contours", {
  enumerable: true,
  get: function () {
    return _contours.default;
  }
});
Object.defineProperty(exports, "contourDensity", {
  enumerable: true,
  get: function () {
    return _density.default;
  }
});

var _contours = _interopRequireDefault(require("./contours"));

var _density = _interopRequireDefault(require("./density"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./contours":"node_modules/d3-contour/src/contours.js","./density":"node_modules/d3-contour/src/density.js"}],"node_modules/vega-geo/src/Contour.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Contour;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _d3Array = require("d3-array");

var _d3Contour = require("d3-contour");

var CONTOUR_PARAMS = ['size', 'smooth'];
var DENSITY_PARAMS = ['x', 'y', 'weight', 'size', 'cellSize', 'bandwidth'];
/**
 * Generate contours based on kernel-density estimation of point data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.
 *  If the values parameter is provided, this must be the dimensions of the input data.
 *  If density estimation is performed, this is the output view dimensions in pixels.
 * @param {Array<number>} [params.values] - An array of numeric values representing an
 *  width x height grid of values over which to compute contours. If unspecified, this
 *  transform will instead attempt to compute contours for the kernel density estimate
 *  using values drawn from data tuples in the input pulse.
 * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.
 * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.
 * @param {function(object): number} [params.weight] - The data point weight accessor for density estimation.
 * @param {number} [params.cellSize] - Contour density calculation cell size.
 * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.
 * @param {Array<number>} [params.thresholds] - Contour threshold array. If
 *   this parameter is set, the count and nice parameters will be ignored.
 * @param {number} [params.count] - The desired number of contours.
 * @param {boolean} [params.nice] - Boolean flag indicating if the contour
 *   threshold values should be automatically aligned to "nice"
 *   human-friendly values. Setting this flag may cause the number of
 *   thresholds to deviate from the specified count.
 * @param {boolean} [params.smooth] - Boolean flag indicating if the contour
 *   polygons should be smoothed using linear interpolation. The default is
 *   true. The parameter is ignored when using density estimation.
 */

function Contour(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Contour.Definition = {
  "type": "Contour",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2,
    "required": true
  }, {
    "name": "values",
    "type": "number",
    "array": true
  }, {
    "name": "x",
    "type": "field"
  }, {
    "name": "y",
    "type": "field"
  }, {
    "name": "weight",
    "type": "field"
  }, {
    "name": "cellSize",
    "type": "number"
  }, {
    "name": "bandwidth",
    "type": "number"
  }, {
    "name": "count",
    "type": "number"
  }, {
    "name": "smooth",
    "type": "boolean"
  }, {
    "name": "nice",
    "type": "boolean",
    "default": false
  }, {
    "name": "thresholds",
    "type": "number",
    "array": true
  }]
};
var prototype = (0, _vegaUtil.inherits)(Contour, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  if (this.value && !pulse.changed() && !_.modified()) return pulse.StopPropagation;
  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
      count = _.count || 10,
      contour,
      params,
      values;

  if (_.values) {
    contour = (0, _d3Contour.contours)();
    params = CONTOUR_PARAMS;
    values = _.values;
  } else {
    contour = (0, _d3Contour.contourDensity)();
    params = DENSITY_PARAMS;
    values = pulse.materialize(pulse.SOURCE).source;
  } // set threshold parameter


  contour.thresholds(_.thresholds || (_.nice ? count : quantize(count))); // set all other parameters

  params.forEach(function (param) {
    if (_[param] != null) contour[param](_[param]);
  });
  if (this.value) out.rem = this.value;
  values = values && values.length ? contour(values).map(_vegaDataflow.ingest) : [];
  this.value = out.source = out.add = values;
  return out;
};

function quantize(k) {
  return function (values) {
    var ex = (0, _d3Array.extent)(values),
        x0 = ex[0],
        dx = ex[1] - x0,
        t = [],
        i = 1;

    for (; i <= k; ++i) t.push(x0 + dx * i / (k + 1));

    return t;
  };
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","d3-array":"node_modules/d3-array/src/index.js","d3-contour":"node_modules/d3-contour/src/index.js"}],"node_modules/vega-geo/src/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiPoint = exports.FeatureCollection = exports.Feature = void 0;
var Feature = 'Feature';
exports.Feature = Feature;
var FeatureCollection = 'FeatureCollection';
exports.FeatureCollection = FeatureCollection;
var MultiPoint = 'MultiPoint';
exports.MultiPoint = MultiPoint;
},{}],"node_modules/vega-geo/src/GeoJSON.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = GeoJSON;

var _constants = require("./constants");

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Consolidate an array of [longitude, latitude] points or GeoJSON features
 * into a combined GeoJSON object. This transform is particularly useful for
 * combining geo data for a Projection's fit argument. The resulting GeoJSON
 * data is available as this transform's value. Input pulses are unchanged.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} [params.fields] - A two-element array
 *   of field accessors for the longitude and latitude values.
 * @param {function(object): *} params.geojson - A field accessor for
 *   retrieving GeoJSON feature data.
 */
function GeoJSON(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

GeoJSON.Definition = {
  "type": "GeoJSON",
  "metadata": {},
  "params": [{
    "name": "fields",
    "type": "field",
    "array": true,
    "length": 2
  }, {
    "name": "geojson",
    "type": "field"
  }]
};
var prototype = (0, _vegaUtil.inherits)(GeoJSON, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var features = this._features,
      points = this._points,
      fields = _.fields,
      lon = fields && fields[0],
      lat = fields && fields[1],
      geojson = _.geojson,
      flag = pulse.ADD,
      mod;
  mod = _.modified() || pulse.changed(pulse.REM) || pulse.modified((0, _vegaUtil.accessorFields)(geojson)) || lon && pulse.modified((0, _vegaUtil.accessorFields)(lon)) || lat && pulse.modified((0, _vegaUtil.accessorFields)(lat));

  if (!this.value || mod) {
    flag = pulse.SOURCE;
    this._features = features = [];
    this._points = points = [];
  }

  if (geojson) {
    pulse.visit(flag, function (t) {
      features.push(geojson(t));
    });
  }

  if (lon && lat) {
    pulse.visit(flag, function (t) {
      var x = lon(t),
          y = lat(t);

      if (x != null && y != null && (x = +x) === x && (y = +y) === y) {
        points.push([x, y]);
      }
    });
    features = features.concat({
      type: _constants.Feature,
      geometry: {
        type: _constants.MultiPoint,
        coordinates: points
      }
    });
  }

  this.value = {
    type: _constants.FeatureCollection,
    features: features
  };
};
},{"./constants":"node_modules/vega-geo/src/constants.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/d3-geo/src/adder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/
function _default() {
  return new Adder();
}

function Adder() {
  this.reset();
}

Adder.prototype = {
  constructor: Adder,
  reset: function () {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function (y) {
    add(temp, y, this.t);
    add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;else this.s = temp.t;
  },
  valueOf: function () {
    return this.s;
  }
};
var temp = new Adder();

function add(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = a - av + (b - bv);
}
},{}],"node_modules/d3-geo/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = acos;
exports.asin = asin;
exports.haversin = haversin;
exports.tan = exports.sqrt = exports.sign = exports.sin = exports.pow = exports.log = exports.floor = exports.exp = exports.ceil = exports.cos = exports.atan2 = exports.atan = exports.abs = exports.radians = exports.degrees = exports.tau = exports.quarterPi = exports.halfPi = exports.pi = exports.epsilon2 = exports.epsilon = void 0;
var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var quarterPi = pi / 4;
exports.quarterPi = quarterPi;
var tau = pi * 2;
exports.tau = tau;
var degrees = 180 / pi;
exports.degrees = degrees;
var radians = pi / 180;
exports.radians = radians;
var abs = Math.abs;
exports.abs = abs;
var atan = Math.atan;
exports.atan = atan;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var cos = Math.cos;
exports.cos = cos;
var ceil = Math.ceil;
exports.ceil = ceil;
var exp = Math.exp;
exports.exp = exp;
var floor = Math.floor;
exports.floor = floor;
var log = Math.log;
exports.log = log;
var pow = Math.pow;
exports.pow = pow;
var sin = Math.sin;
exports.sin = sin;

var sign = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};

exports.sign = sign;
var sqrt = Math.sqrt;
exports.sqrt = sqrt;
var tan = Math.tan;
exports.tan = tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function haversin(x) {
  return (x = sin(x / 2)) * x;
}
},{}],"node_modules/d3-geo/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = noop;

function noop() {}
},{}],"node_modules/d3-geo/src/stream.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function (object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function (object, stream) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function (object, stream) {
    stream.sphere();
  },
  Point: function (object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function (object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function (object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function (object, stream) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1,
      n = coordinates.length - closed,
      coordinate;
  stream.lineStart();

  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);

  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1,
      n = coordinates.length;
  stream.polygonStart();

  while (++i < n) streamLine(coordinates[i], stream, 1);

  stream.polygonEnd();
}

function _default(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
}
},{}],"node_modules/d3-geo/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.areaStream = exports.areaRingSum = void 0;

var _adder = _interopRequireDefault(require("./adder"));

var _math = require("./math");

var _noop = _interopRequireDefault(require("./noop"));

var _stream = _interopRequireDefault(require("./stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaRingSum = (0, _adder.default)();
exports.areaRingSum = areaRingSum;
var areaSum = (0, _adder.default)(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;
var areaStream = {
  point: _noop.default,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: function () {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? _math.tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = _noop.default;
  },
  sphere: function () {
    areaSum.add(_math.tau);
  }
};
exports.areaStream = areaStream;

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, cosPhi0 = (0, _math.cos)(phi = phi / 2 + _math.quarterPi), sinPhi0 = (0, _math.sin)(phi);
}

function areaPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  phi = phi / 2 + _math.quarterPi; // half the angular distance from south pole
  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).

  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = (0, _math.cos)(phi),
      sinPhi = (0, _math.sin)(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * (0, _math.cos)(adLambda),
      v = k * sdLambda * (0, _math.sin)(adLambda);
  areaRingSum.add((0, _math.atan2)(v, u)); // Advance the previous points.

  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

function _default(object) {
  areaSum.reset();
  (0, _stream.default)(object, areaStream);
  return areaSum * 2;
}
},{"./adder":"node_modules/d3-geo/src/adder.js","./math":"node_modules/d3-geo/src/math.js","./noop":"node_modules/d3-geo/src/noop.js","./stream":"node_modules/d3-geo/src/stream.js"}],"node_modules/d3-geo/src/cartesian.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spherical = spherical;
exports.cartesian = cartesian;
exports.cartesianDot = cartesianDot;
exports.cartesianCross = cartesianCross;
exports.cartesianAddInPlace = cartesianAddInPlace;
exports.cartesianScale = cartesianScale;
exports.cartesianNormalizeInPlace = cartesianNormalizeInPlace;

var _math = require("./math");

function spherical(cartesian) {
  return [(0, _math.atan2)(cartesian[1], cartesian[0]), (0, _math.asin)(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0],
      phi = spherical[1],
      cosPhi = (0, _math.cos)(phi);
  return [cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
} // TODO return a


function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
} // TODO return d


function cartesianNormalizeInPlace(d) {
  var l = (0, _math.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}
},{"./math":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder"));

var _area = require("./area");

var _cartesian = require("./cartesian");

var _math = require("./math");

var _stream = _interopRequireDefault(require("./stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lambda0,
    phi0,
    lambda1,
    phi1,
    // bounds
lambda2,
    // previous lambda-coordinate
lambda00,
    phi00,
    // first point
p0,
    // previous 3D point
deltaSum = (0, _adder.default)(),
    ranges,
    range;
var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function () {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();

    _area.areaStream.polygonStart();
  },
  polygonEnd: function () {
    _area.areaStream.polygonEnd();

    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (_area.areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > _math.epsilon) phi1 = 90;else if (deltaSum < -_math.epsilon) phi0 = -90;
    range[0] = lambda0, range[1] = lambda1;
  },
  sphere: function () {
    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = (0, _cartesian.cartesian)([lambda * _math.radians, phi * _math.radians]);

  if (p0) {
    var normal = (0, _cartesian.cartesianCross)(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = (0, _cartesian.cartesianCross)(equatorial, normal);
    (0, _cartesian.cartesianNormalizeInPlace)(inflection);
    inflection = (0, _cartesian.spherical)(inflection);
    var delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * _math.degrees * sign,
        phii,
        antimeridian = (0, _math.abs)(delta) > 180;

    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = inflection[1] * _math.degrees;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = -inflection[1] * _math.degrees;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }

    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
      }
    } else {
      if (lambda1 >= lambda0) {
        if (lambda < lambda0) lambda0 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  }

  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add((0, _math.abs)(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00 = lambda, phi00 = phi;
  }

  _area.areaStream.point(lambda, phi);

  linePoint(lambda, phi);
}

function boundsRingStart() {
  _area.areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00, phi00);

  _area.areaStream.lineEnd();

  if ((0, _math.abs)(deltaSum) > _math.epsilon) lambda0 = -(lambda1 = 180);
  range[0] = lambda0, range[1] = lambda1;
  p0 = null;
} // Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.


function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

function _default(feature) {
  var i, n, a, b, merged, deltaMax, delta;
  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
  ranges = [];
  (0, _stream.default)(feature, boundsStream); // First, sort ranges by their minimum longitudes.

  if (n = ranges.length) {
    ranges.sort(rangeCompare); // Then, merge any ranges that overlap.

    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];

      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    } // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.


    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;
  return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];
}
},{"./adder":"node_modules/d3-geo/src/adder.js","./area":"node_modules/d3-geo/src/area.js","./cartesian":"node_modules/d3-geo/src/cartesian.js","./math":"node_modules/d3-geo/src/math.js","./stream":"node_modules/d3-geo/src/stream.js"}],"node_modules/d3-geo/src/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math");

var _noop = _interopRequireDefault(require("./noop"));

var _stream = _interopRequireDefault(require("./stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, // first point
x0, y0, z0; // previous point

var centroidStream = {
  sphere: _noop.default,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
}; // Arithmetic mean of Cartesian vectors.

function centroidPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  centroidPointCartesian(cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      w = (0, _math.atan2)((0, _math.sqrt)((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
} // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).


function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00, phi00);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = (0, _math.sqrt)(cx * cx + cy * cy + cz * cz),
      w = (0, _math.asin)(m),
      // line weight = angle
  v = m && -w / m; // area weight multiplier

  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function _default(object) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
  (0, _stream.default)(object, centroidStream);
  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z; // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.

  if (m < _math.epsilon2) {
    x = X1, y = Y1, z = Z1; // If the feature has zero length, fall back to arithmetic mean of point vectors.

    if (W1 < _math.epsilon) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z; // If the feature still has an undefined ccentroid, then return.

    if (m < _math.epsilon2) return [NaN, NaN];
  }

  return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.asin)(z / (0, _math.sqrt)(m)) * _math.degrees];
}
},{"./math":"node_modules/d3-geo/src/math.js","./noop":"node_modules/d3-geo/src/noop.js","./stream":"node_modules/d3-geo/src/stream.js"}],"node_modules/d3-geo/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-geo/src/compose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function (x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };
  return compose;
}
},{}],"node_modules/d3-geo/src/rotation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rotateRadians = rotateRadians;
exports.default = _default;

var _compose = _interopRequireDefault(require("./compose"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rotationIdentity(lambda, phi) {
  return [(0, _math.abs)(lambda) > _math.pi ? lambda + Math.round(-lambda / _math.tau) * _math.tau : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= _math.tau) ? deltaPhi || deltaGamma ? (0, _compose.default)(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}

function forwardRotationLambda(deltaLambda) {
  return function (lambda, phi) {
    return lambda += deltaLambda, [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = (0, _math.cos)(deltaPhi),
      sinDeltaPhi = (0, _math.sin)(deltaPhi),
      cosDeltaGamma = (0, _math.cos)(deltaGamma),
      sinDeltaGamma = (0, _math.sin)(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [(0, _math.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), (0, _math.asin)(k * cosDeltaGamma + y * sinDeltaGamma)];
  }

  rotation.invert = function (lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [(0, _math.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), (0, _math.asin)(k * cosDeltaPhi - x * sinDeltaPhi)];
  };

  return rotation;
}

function _default(rotate) {
  rotate = rotateRadians(rotate[0] * _math.radians, rotate[1] * _math.radians, rotate.length > 2 ? rotate[2] * _math.radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  }

  forward.invert = function (coordinates) {
    coordinates = rotate.invert(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  };

  return forward;
}
},{"./compose":"node_modules/d3-geo/src/compose.js","./math":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleStream = circleStream;
exports.default = _default;

var _cartesian = require("./cartesian");

var _constant = _interopRequireDefault(require("./constant"));

var _math = require("./math");

var _rotation = require("./rotation");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = (0, _math.cos)(radius),
      sinRadius = (0, _math.sin)(radius),
      step = direction * delta;

  if (t0 == null) {
    t0 = radius + direction * _math.tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * _math.tau;
  }

  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = (0, _cartesian.spherical)([cosRadius, -sinRadius * (0, _math.cos)(t), -sinRadius * (0, _math.sin)(t)]);
    stream.point(point[0], point[1]);
  }
} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].


function circleRadius(cosRadius, point) {
  point = (0, _cartesian.cartesian)(point), point[0] -= cosRadius;
  (0, _cartesian.cartesianNormalizeInPlace)(point);
  var radius = (0, _math.acos)(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + _math.tau - _math.epsilon) % _math.tau;
}

function _default() {
  var center = (0, _constant.default)([0, 0]),
      radius = (0, _constant.default)(90),
      precision = (0, _constant.default)(6),
      ring,
      rotate,
      stream = {
    point: point
  };

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= _math.degrees, x[1] *= _math.degrees;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * _math.radians,
        p = precision.apply(this, arguments) * _math.radians;

    ring = [];
    rotate = (0, _rotation.rotateRadians)(-c[0] * _math.radians, -c[1] * _math.radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = {
      type: "Polygon",
      coordinates: [ring]
    };
    ring = rotate = null;
    return c;
  }

  circle.center = function (_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : (0, _constant.default)([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), circle) : radius;
  };

  circle.precision = function (_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : (0, _constant.default)(+_), circle) : precision;
  };

  return circle;
}
},{"./cartesian":"node_modules/d3-geo/src/cartesian.js","./constant":"node_modules/d3-geo/src/constant.js","./math":"node_modules/d3-geo/src/math.js","./rotation":"node_modules/d3-geo/src/rotation.js"}],"node_modules/d3-geo/src/clip/buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var lines = [],
      line;
  return {
    point: function (x, y) {
      line.push([x, y]);
    },
    lineStart: function () {
      lines.push(line = []);
    },
    lineEnd: _noop.default,
    rejoin: function () {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function () {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}
},{"../noop":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/pointEqual.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math");

function _default(a, b) {
  return (0, _math.abs)(a[0] - b[0]) < _math.epsilon && (0, _math.abs)(a[1] - b[1]) < _math.epsilon;
}
},{"./math":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/clip/rejoin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pointEqual = _interopRequireDefault(require("../pointEqual"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection

  this.e = entry; // is an entry?

  this.v = false; // visited

  this.n = this.p = null; // next & previous
} // A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.


function _default(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;
  segments.forEach(function (segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n,
        p0 = segment[0],
        p1 = segment[n],
        x; // If the first and last points of a segment are coincident, then treat as a
    // closed ring. TODO if all rings are closed, then the winding order of the
    // exterior ring should be checked.

    if ((0, _pointEqual.default)(p0, p1)) {
      stream.lineStart();

      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);

      stream.lineEnd();
      return;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });
  if (!subject.length) return;
  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;

    while (current.v) if ((current = current.n) === start) return;

    points = current.z;
    stream.lineStart();

    do {
      current.v = current.o.v = true;

      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }

        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;

          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }

        current = current.p;
      }

      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);

    stream.lineEnd();
  }
}

function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;

  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }

  a.n = b = array[0];
  b.p = a;
}
},{"../pointEqual":"node_modules/d3-geo/src/pointEqual.js"}],"node_modules/d3-geo/src/polygonContains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder"));

var _cartesian = require("./cartesian");

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sum = (0, _adder.default)();

function longitude(point) {
  if ((0, _math.abs)(point[0]) <= _math.pi) return point[0];else return (0, _math.sign)(point[0]) * (((0, _math.abs)(point[0]) + _math.pi) % _math.tau - _math.pi);
}

function _default(polygon, point) {
  var lambda = longitude(point),
      phi = point[1],
      sinPhi = (0, _math.sin)(phi),
      normal = [(0, _math.sin)(lambda), -(0, _math.cos)(lambda), 0],
      angle = 0,
      winding = 0;
  sum.reset();
  if (sinPhi === 1) phi = _math.halfPi + _math.epsilon;else if (sinPhi === -1) phi = -_math.halfPi - _math.epsilon;

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = longitude(point0),
        phi0 = point0[1] / 2 + _math.quarterPi,
        sinPhi0 = (0, _math.sin)(phi0),
        cosPhi0 = (0, _math.cos)(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = longitude(point1),
          phi1 = point1[1] / 2 + _math.quarterPi,
          sinPhi1 = (0, _math.sin)(phi1),
          cosPhi1 = (0, _math.cos)(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > _math.pi,
          k = sinPhi0 * sinPhi1;
      sum.add((0, _math.atan2)(k * sign * (0, _math.sin)(absDelta), cosPhi0 * cosPhi1 + k * (0, _math.cos)(absDelta)));
      angle += antimeridian ? delta + sign * _math.tau : delta; // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?

      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = (0, _cartesian.cartesianCross)((0, _cartesian.cartesian)(point0), (0, _cartesian.cartesian)(point1));
        (0, _cartesian.cartesianNormalizeInPlace)(arc);
        var intersection = (0, _cartesian.cartesianCross)(normal, arc);
        (0, _cartesian.cartesianNormalizeInPlace)(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * (0, _math.asin)(intersection[2]);

        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  } // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.


  return (angle < -_math.epsilon || angle < _math.epsilon && sum < -_math.epsilon) ^ winding & 1;
}
},{"./adder":"node_modules/d3-geo/src/adder.js","./cartesian":"node_modules/d3-geo/src/cartesian.js","./math":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/node_modules/d3-array/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/bisector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      }

      return lo;
    },
    right: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
      }

      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function (d, x) {
    return (0, _ascending.default)(f(d), x);
  };
}
},{"./ascending":"node_modules/d3-geo/node_modules/d3-array/src/ascending.js"}],"node_modules/d3-geo/node_modules/d3-array/src/bisect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bisectLeft = exports.bisectRight = void 0;

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ascendingBisect = (0, _bisector.default)(_ascending.default);
var bisectRight = ascendingBisect.right;
exports.bisectRight = bisectRight;
var bisectLeft = ascendingBisect.left;
exports.bisectLeft = bisectLeft;
var _default = bisectRight;
exports.default = _default;
},{"./ascending":"node_modules/d3-geo/node_modules/d3-array/src/ascending.js","./bisector":"node_modules/d3-geo/node_modules/d3-array/src/bisector.js"}],"node_modules/d3-geo/node_modules/d3-array/src/pairs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.pair = pair;

function _default(array, f) {
  if (f == null) f = pair;
  var i = 0,
      n = array.length - 1,
      p = array[0],
      pairs = new Array(n < 0 ? 0 : n);

  while (i < n) pairs[i] = f(p, p = array[++i]);

  return pairs;
}

function pair(a, b) {
  return [a, b];
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pairs = require("./pairs");

function _default(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;
  if (reduce == null) reduce = _pairs.pair;

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
}
},{"./pairs":"node_modules/d3-geo/node_modules/d3-array/src/pairs.js"}],"node_modules/d3-geo/node_modules/d3-array/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x === null ? NaN : +x;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/variance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
}
},{"./number":"node_modules/d3-geo/node_modules/d3-array/src/number.js"}],"node_modules/d3-geo/node_modules/d3-array/src/deviation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _variance = _interopRequireDefault(require("./variance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, f) {
  var v = (0, _variance.default)(array, f);
  return v ? Math.sqrt(v) : v;
}
},{"./variance":"node_modules/d3-geo/node_modules/d3-array/src/variance.js"}],"node_modules/d3-geo/node_modules/d3-array/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
var map = array.map;
exports.map = map;
},{}],"node_modules/d3-geo/node_modules/d3-array/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function _default(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));

    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));

    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();
  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/threshold/sturges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/histogram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _bisect = _interopRequireDefault(require("./bisect"));

var _constant = _interopRequireDefault(require("./constant"));

var _extent = _interopRequireDefault(require("./extent"));

var _identity = _interopRequireDefault(require("./identity"));

var _range = _interopRequireDefault(require("./range"));

var _ticks = require("./ticks");

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      domain = _extent.default,
      threshold = _sturges.default;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      tz = (0, _ticks.tickStep)(x0, x1, tz);
      tz = (0, _range.default)(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
    } // Remove any thresholds outside the domain.


    var m = tz.length;

    while (tz[0] <= x0) tz.shift(), --m;

    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin; // Initialize bins.

    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    } // Assign data to bins by value, ignoring any outside the domain.


    for (i = 0; i < n; ++i) {
      x = values[i];

      if (x0 <= x && x <= x1) {
        bins[(0, _bisect.default)(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(_), histogram) : value;
  };

  histogram.domain = function (_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constant.default)([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), histogram) : threshold;
  };

  return histogram;
}
},{"./array":"node_modules/d3-geo/node_modules/d3-array/src/array.js","./bisect":"node_modules/d3-geo/node_modules/d3-array/src/bisect.js","./constant":"node_modules/d3-geo/node_modules/d3-array/src/constant.js","./extent":"node_modules/d3-geo/node_modules/d3-array/src/extent.js","./identity":"node_modules/d3-geo/node_modules/d3-array/src/identity.js","./range":"node_modules/d3-geo/node_modules/d3-array/src/range.js","./ticks":"node_modules/d3-geo/node_modules/d3-array/src/ticks.js","./threshold/sturges":"node_modules/d3-geo/node_modules/d3-array/src/threshold/sturges.js"}],"node_modules/d3-geo/node_modules/d3-array/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, p, valueof) {
  if (valueof == null) valueof = _number.default;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
},{"./number":"node_modules/d3-geo/node_modules/d3-array/src/number.js"}],"node_modules/d3-geo/node_modules/d3-array/src/threshold/freedmanDiaconis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array");

var _ascending = _interopRequireDefault(require("../ascending"));

var _number = _interopRequireDefault(require("../number"));

var _quantile = _interopRequireDefault(require("../quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  values = _array.map.call(values, _number.default).sort(_ascending.default);
  return Math.ceil((max - min) / (2 * ((0, _quantile.default)(values, 0.75) - (0, _quantile.default)(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}
},{"../array":"node_modules/d3-geo/node_modules/d3-array/src/array.js","../ascending":"node_modules/d3-geo/node_modules/d3-array/src/ascending.js","../number":"node_modules/d3-geo/node_modules/d3-array/src/number.js","../quantile":"node_modules/d3-geo/node_modules/d3-array/src/quantile.js"}],"node_modules/d3-geo/node_modules/d3-array/src/threshold/scott.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _deviation = _interopRequireDefault(require("../deviation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  return Math.ceil((max - min) / (3.5 * (0, _deviation.default)(values) * Math.pow(values.length, -1 / 3)));
}
},{"../deviation":"node_modules/d3-geo/node_modules/d3-array/src/deviation.js"}],"node_modules/d3-geo/node_modules/d3-array/src/max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/mean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) sum += value;else --m;
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) sum += value;else --m;
    }
  }

  if (m) return sum / m;
}
},{"./number":"node_modules/d3-geo/node_modules/d3-array/src/number.js"}],"node_modules/d3-geo/node_modules/d3-array/src/median.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

var _number = _interopRequireDefault(require("./number"));

var _quantile = _interopRequireDefault(require("./quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        numbers.push(value);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return (0, _quantile.default)(numbers.sort(_ascending.default), 0.5);
}
},{"./ascending":"node_modules/d3-geo/node_modules/d3-array/src/ascending.js","./number":"node_modules/d3-geo/node_modules/d3-array/src/number.js","./quantile":"node_modules/d3-geo/node_modules/d3-array/src/quantile.js"}],"node_modules/d3-geo/node_modules/d3-array/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;

  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;

    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/min.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/permute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, indexes) {
  var i = indexes.length,
      permutes = new Array(i);

  while (i--) permutes[i] = array[indexes[i]];

  return permutes;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/scan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];
  if (compare == null) compare = _ascending.default;

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
}
},{"./ascending":"node_modules/d3-geo/node_modules/d3-array/src/ascending.js"}],"node_modules/d3-geo/node_modules/d3-array/src/shuffle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  } else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
}
},{}],"node_modules/d3-geo/node_modules/d3-array/src/transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _min = _interopRequireDefault(require("./min"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(matrix) {
  if (!(n = matrix.length)) return [];

  for (var i = -1, m = (0, _min.default)(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }

  return transpose;
}

function length(d) {
  return d.length;
}
},{"./min":"node_modules/d3-geo/node_modules/d3-array/src/min.js"}],"node_modules/d3-geo/node_modules/d3-array/src/zip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transpose = _interopRequireDefault(require("./transpose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _transpose.default)(arguments);
}
},{"./transpose":"node_modules/d3-geo/node_modules/d3-array/src/transpose.js"}],"node_modules/d3-geo/node_modules/d3-array/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bisect", {
  enumerable: true,
  get: function () {
    return _bisect.default;
  }
});
Object.defineProperty(exports, "bisectRight", {
  enumerable: true,
  get: function () {
    return _bisect.bisectRight;
  }
});
Object.defineProperty(exports, "bisectLeft", {
  enumerable: true,
  get: function () {
    return _bisect.bisectLeft;
  }
});
Object.defineProperty(exports, "ascending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "bisector", {
  enumerable: true,
  get: function () {
    return _bisector.default;
  }
});
Object.defineProperty(exports, "cross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "descending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "deviation", {
  enumerable: true,
  get: function () {
    return _deviation.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "histogram", {
  enumerable: true,
  get: function () {
    return _histogram.default;
  }
});
Object.defineProperty(exports, "thresholdFreedmanDiaconis", {
  enumerable: true,
  get: function () {
    return _freedmanDiaconis.default;
  }
});
Object.defineProperty(exports, "thresholdScott", {
  enumerable: true,
  get: function () {
    return _scott.default;
  }
});
Object.defineProperty(exports, "thresholdSturges", {
  enumerable: true,
  get: function () {
    return _sturges.default;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.default;
  }
});
Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function () {
    return _mean.default;
  }
});
Object.defineProperty(exports, "median", {
  enumerable: true,
  get: function () {
    return _median.default;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.default;
  }
});
Object.defineProperty(exports, "pairs", {
  enumerable: true,
  get: function () {
    return _pairs.default;
  }
});
Object.defineProperty(exports, "permute", {
  enumerable: true,
  get: function () {
    return _permute.default;
  }
});
Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.default;
  }
});
Object.defineProperty(exports, "scan", {
  enumerable: true,
  get: function () {
    return _scan.default;
  }
});
Object.defineProperty(exports, "shuffle", {
  enumerable: true,
  get: function () {
    return _shuffle.default;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function () {
    return _sum.default;
  }
});
Object.defineProperty(exports, "ticks", {
  enumerable: true,
  get: function () {
    return _ticks.default;
  }
});
Object.defineProperty(exports, "tickIncrement", {
  enumerable: true,
  get: function () {
    return _ticks.tickIncrement;
  }
});
Object.defineProperty(exports, "tickStep", {
  enumerable: true,
  get: function () {
    return _ticks.tickStep;
  }
});
Object.defineProperty(exports, "transpose", {
  enumerable: true,
  get: function () {
    return _transpose.default;
  }
});
Object.defineProperty(exports, "variance", {
  enumerable: true,
  get: function () {
    return _variance.default;
  }
});
Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function () {
    return _zip.default;
  }
});

var _bisect = _interopRequireWildcard(require("./bisect"));

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

var _cross = _interopRequireDefault(require("./cross"));

var _descending = _interopRequireDefault(require("./descending"));

var _deviation = _interopRequireDefault(require("./deviation"));

var _extent = _interopRequireDefault(require("./extent"));

var _histogram = _interopRequireDefault(require("./histogram"));

var _freedmanDiaconis = _interopRequireDefault(require("./threshold/freedmanDiaconis"));

var _scott = _interopRequireDefault(require("./threshold/scott"));

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

var _max = _interopRequireDefault(require("./max"));

var _mean = _interopRequireDefault(require("./mean"));

var _median = _interopRequireDefault(require("./median"));

var _merge = _interopRequireDefault(require("./merge"));

var _min = _interopRequireDefault(require("./min"));

var _pairs = _interopRequireDefault(require("./pairs"));

var _permute = _interopRequireDefault(require("./permute"));

var _quantile = _interopRequireDefault(require("./quantile"));

var _range = _interopRequireDefault(require("./range"));

var _scan = _interopRequireDefault(require("./scan"));

var _shuffle = _interopRequireDefault(require("./shuffle"));

var _sum = _interopRequireDefault(require("./sum"));

var _ticks = _interopRequireWildcard(require("./ticks"));

var _transpose = _interopRequireDefault(require("./transpose"));

var _variance = _interopRequireDefault(require("./variance"));

var _zip = _interopRequireDefault(require("./zip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./bisect":"node_modules/d3-geo/node_modules/d3-array/src/bisect.js","./ascending":"node_modules/d3-geo/node_modules/d3-array/src/ascending.js","./bisector":"node_modules/d3-geo/node_modules/d3-array/src/bisector.js","./cross":"node_modules/d3-geo/node_modules/d3-array/src/cross.js","./descending":"node_modules/d3-geo/node_modules/d3-array/src/descending.js","./deviation":"node_modules/d3-geo/node_modules/d3-array/src/deviation.js","./extent":"node_modules/d3-geo/node_modules/d3-array/src/extent.js","./histogram":"node_modules/d3-geo/node_modules/d3-array/src/histogram.js","./threshold/freedmanDiaconis":"node_modules/d3-geo/node_modules/d3-array/src/threshold/freedmanDiaconis.js","./threshold/scott":"node_modules/d3-geo/node_modules/d3-array/src/threshold/scott.js","./threshold/sturges":"node_modules/d3-geo/node_modules/d3-array/src/threshold/sturges.js","./max":"node_modules/d3-geo/node_modules/d3-array/src/max.js","./mean":"node_modules/d3-geo/node_modules/d3-array/src/mean.js","./median":"node_modules/d3-geo/node_modules/d3-array/src/median.js","./merge":"node_modules/d3-geo/node_modules/d3-array/src/merge.js","./min":"node_modules/d3-geo/node_modules/d3-array/src/min.js","./pairs":"node_modules/d3-geo/node_modules/d3-array/src/pairs.js","./permute":"node_modules/d3-geo/node_modules/d3-array/src/permute.js","./quantile":"node_modules/d3-geo/node_modules/d3-array/src/quantile.js","./range":"node_modules/d3-geo/node_modules/d3-array/src/range.js","./scan":"node_modules/d3-geo/node_modules/d3-array/src/scan.js","./shuffle":"node_modules/d3-geo/node_modules/d3-array/src/shuffle.js","./sum":"node_modules/d3-geo/node_modules/d3-array/src/sum.js","./ticks":"node_modules/d3-geo/node_modules/d3-array/src/ticks.js","./transpose":"node_modules/d3-geo/node_modules/d3-array/src/transpose.js","./variance":"node_modules/d3-geo/node_modules/d3-array/src/variance.js","./zip":"node_modules/d3-geo/node_modules/d3-array/src/zip.js"}],"node_modules/d3-geo/src/clip/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _buffer = _interopRequireDefault(require("./buffer"));

var _rejoin = _interopRequireDefault(require("./rejoin"));

var _math = require("../math");

var _polygonContains = _interopRequireDefault(require("../polygonContains"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(pointVisible, clipLine, interpolate, start) {
  return function (sink) {
    var line = clipLine(sink),
        ringBuffer = (0, _buffer.default)(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;
    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function () {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = (0, _d3Array.merge)(segments);
        var startInside = (0, _polygonContains.default)(polygon, start);

        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          (0, _rejoin.default)(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }

        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function () {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i,
          n = ringSegments.length,
          m,
          segment,
          point;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n) return; // No intersections.

      if (clean & 1) {
        segment = ringSegments[0];

        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();

          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);

          sink.lineEnd();
        }

        return;
      } // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?


      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
}

function validSegment(segment) {
  return segment.length > 1;
} // Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.


function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - _math.halfPi - _math.epsilon : _math.halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - _math.halfPi - _math.epsilon : _math.halfPi - b[1]);
}
},{"./buffer":"node_modules/d3-geo/src/clip/buffer.js","./rejoin":"node_modules/d3-geo/src/clip/rejoin.js","../math":"node_modules/d3-geo/src/math.js","../polygonContains":"node_modules/d3-geo/src/polygonContains.js","d3-array":"node_modules/d3-geo/node_modules/d3-array/src/index.js"}],"node_modules/d3-geo/src/clip/antimeridian.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(require("./index"));

var _math = require("../math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _index.default)(function () {
  return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [-_math.pi, -_math.halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.


exports.default = _default;

function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function () {
      stream.lineStart();
      clean = 1;
    },
    point: function (lambda1, phi1) {
      var sign1 = lambda1 > 0 ? _math.pi : -_math.pi,
          delta = (0, _math.abs)(lambda1 - lambda0);

      if ((0, _math.abs)(delta - _math.pi) < _math.epsilon) {
        // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? _math.halfPi : -_math.halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= _math.pi) {
        // line crosses antimeridian
        if ((0, _math.abs)(lambda0 - sign0) < _math.epsilon) lambda0 -= sign0 * _math.epsilon; // handle degeneracies

        if ((0, _math.abs)(lambda1 - sign1) < _math.epsilon) lambda1 -= sign1 * _math.epsilon;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }

      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function () {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function () {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = (0, _math.sin)(lambda0 - lambda1);
  return (0, _math.abs)(sinLambda0Lambda1) > _math.epsilon ? (0, _math.atan)(((0, _math.sin)(phi0) * (cosPhi1 = (0, _math.cos)(phi1)) * (0, _math.sin)(lambda1) - (0, _math.sin)(phi1) * (cosPhi0 = (0, _math.cos)(phi0)) * (0, _math.sin)(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;

  if (from == null) {
    phi = direction * _math.halfPi;
    stream.point(-_math.pi, phi);
    stream.point(0, phi);
    stream.point(_math.pi, phi);
    stream.point(_math.pi, 0);
    stream.point(_math.pi, -phi);
    stream.point(0, -phi);
    stream.point(-_math.pi, -phi);
    stream.point(-_math.pi, 0);
    stream.point(-_math.pi, phi);
  } else if ((0, _math.abs)(from[0] - to[0]) > _math.epsilon) {
    var lambda = from[0] < to[0] ? _math.pi : -_math.pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}
},{"./index":"node_modules/d3-geo/src/clip/index.js","../math":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/clip/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cartesian = require("../cartesian");

var _circle = require("../circle");

var _math = require("../math");

var _pointEqual = _interopRequireDefault(require("../pointEqual"));

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(radius) {
  var cr = (0, _math.cos)(radius),
      delta = 6 * _math.radians,
      smallRadius = cr > 0,
      notHemisphere = (0, _math.abs)(cr) > _math.epsilon; // TODO optimise for this common case


  function interpolate(from, to, direction, stream) {
    (0, _circle.circleStream)(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return (0, _math.cos)(lambda) * (0, _math.cos)(phi) > cr;
  } // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.


  function clipLine(stream) {
    var point0, // previous point
    c0, // code for previous point
    v0, // visibility of previous point
    v00, // visibility of first point
    clean; // no intersections

    return {
      lineStart: function () {
        v00 = v0 = false;
        clean = 1;
      },
      point: function (lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? _math.pi : -_math.pi), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart(); // Handle degeneracies.
        // TODO ignore if not clipping polygons.

        if (v !== v0) {
          point2 = intersect(point0, point1);

          if (!point2 || (0, _pointEqual.default)(point0, point2) || (0, _pointEqual.default)(point1, point2)) {
            point1[0] += _math.epsilon;
            point1[1] += _math.epsilon;
            v = visible(point1[0], point1[1]);
          }
        }

        if (v !== v0) {
          clean = 0;

          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1]);
            stream.lineEnd();
          }

          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t; // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.

          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;

            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
            }
          }
        }

        if (v && (!point0 || !(0, _pointEqual.default)(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }

        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function () {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function () {
        return clean | (v00 && v0) << 1;
      }
    };
  } // Intersects the great circle between a and b with the clip circle.


  function intersect(a, b, two) {
    var pa = (0, _cartesian.cartesian)(a),
        pb = (0, _cartesian.cartesian)(b); // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).

    var n1 = [1, 0, 0],
        // normal
    n2 = (0, _cartesian.cartesianCross)(pa, pb),
        n2n2 = (0, _cartesian.cartesianDot)(n2, n2),
        n1n2 = n2[0],
        // cartesianDot(n1, n2),
    determinant = n2n2 - n1n2 * n1n2; // Two polar points.

    if (!determinant) return !two && a;
    var c1 = cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = (0, _cartesian.cartesianCross)(n1, n2),
        A = (0, _cartesian.cartesianScale)(n1, c1),
        B = (0, _cartesian.cartesianScale)(n2, c2);
    (0, _cartesian.cartesianAddInPlace)(A, B); // Solve |p(t)|^2 = 1.

    var u = n1xn2,
        w = (0, _cartesian.cartesianDot)(A, u),
        uu = (0, _cartesian.cartesianDot)(u, u),
        t2 = w * w - uu * ((0, _cartesian.cartesianDot)(A, A) - 1);
    if (t2 < 0) return;
    var t = (0, _math.sqrt)(t2),
        q = (0, _cartesian.cartesianScale)(u, (-w - t) / uu);
    (0, _cartesian.cartesianAddInPlace)(q, A);
    q = (0, _cartesian.spherical)(q);
    if (!two) return q; // Two intersection points.

    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;
    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = (0, _math.abs)(delta - _math.pi) < _math.epsilon,
        meridian = polar || delta < _math.epsilon;

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.

    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < ((0, _math.abs)(q[0] - lambda0) < _math.epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > _math.pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = (0, _cartesian.cartesianScale)(u, (-w + t) / uu);
      (0, _cartesian.cartesianAddInPlace)(q1, A);
      return [q, (0, _cartesian.spherical)(q1)];
    }
  } // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.


  function code(lambda, phi) {
    var r = smallRadius ? radius : _math.pi - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right

    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above

    return code;
  }

  return (0, _index.default)(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-_math.pi, radius - _math.pi]);
}
},{"../cartesian":"node_modules/d3-geo/src/cartesian.js","../circle":"node_modules/d3-geo/src/circle.js","../math":"node_modules/d3-geo/src/math.js","../pointEqual":"node_modules/d3-geo/src/pointEqual.js","./index":"node_modules/d3-geo/src/clip/index.js"}],"node_modules/d3-geo/src/clip/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}
},{}],"node_modules/d3-geo/src/clip/rectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = clipRectangle;

var _math = require("../math");

var _buffer = _interopRequireDefault(require("./buffer"));

var _line = _interopRequireDefault(require("./line"));

var _rejoin = _interopRequireDefault(require("./rejoin"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clipMax = 1e9,
    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipRectangle(x0, y0, x1, y1) {
  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0,
        a1 = 0;

    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0); while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return (0, _math.abs)(p[0] - x0) < _math.epsilon ? direction > 0 ? 0 : 3 : (0, _math.abs)(p[0] - x1) < _math.epsilon ? direction > 0 ? 2 : 1 : (0, _math.abs)(p[1] - y0) < _math.epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
  }

  return function (stream) {
    var activeStream = stream,
        bufferStream = (0, _buffer.default)(),
        segments,
        polygon,
        ring,
        x__,
        y__,
        v__,
        // first point
    x_,
        y_,
        v_,
        // previous point
    first,
        clean;
    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

          if (a1 <= y1) {
            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
          } else {
            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
          }
        }
      }

      return winding;
    } // Buffer geometry within a polygon and then clip it en masse.


    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = (0, _d3Array.merge)(segments)).length;

      if (cleanInside || visible) {
        stream.polygonStart();

        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }

        if (visible) {
          (0, _rejoin.default)(segments, compareIntersection, startInside, interpolate, stream);
        }

        stream.polygonEnd();
      }

      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    } // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.


    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }

      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);

      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;

        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

          if ((0, _line.default)(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }

            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }

      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}
},{"../math":"node_modules/d3-geo/src/math.js","./buffer":"node_modules/d3-geo/src/clip/buffer.js","./line":"node_modules/d3-geo/src/clip/line.js","./rejoin":"node_modules/d3-geo/src/clip/rejoin.js","d3-array":"node_modules/d3-geo/node_modules/d3-array/src/index.js"}],"node_modules/d3-geo/src/clip/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _rectangle = _interopRequireDefault(require("./rectangle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;
  return clip = {
    stream: function (stream) {
      return cache && cacheStream === stream ? cache : cache = (0, _rectangle.default)(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function (_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
}
},{"./rectangle":"node_modules/d3-geo/src/clip/rectangle.js"}],"node_modules/d3-geo/src/length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder"));

var _math = require("./math");

var _noop = _interopRequireDefault(require("./noop"));

var _stream = _interopRequireDefault(require("./stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder.default)(),
    lambda0,
    sinPhi0,
    cosPhi0;
var lengthStream = {
  sphere: _noop.default,
  point: _noop.default,
  lineStart: lengthLineStart,
  lineEnd: _noop.default,
  polygonStart: _noop.default,
  polygonEnd: _noop.default
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = _noop.default;
}

function lengthPointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, sinPhi0 = (0, _math.sin)(phi), cosPhi0 = (0, _math.cos)(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var sinPhi = (0, _math.sin)(phi),
      cosPhi = (0, _math.cos)(phi),
      delta = (0, _math.abs)(lambda - lambda0),
      cosDelta = (0, _math.cos)(delta),
      sinDelta = (0, _math.sin)(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,
      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
  lengthSum.add((0, _math.atan2)((0, _math.sqrt)(x * x + y * y), z));
  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}

function _default(object) {
  lengthSum.reset();
  (0, _stream.default)(object, lengthStream);
  return +lengthSum;
}
},{"./adder":"node_modules/d3-geo/src/adder.js","./math":"node_modules/d3-geo/src/math.js","./noop":"node_modules/d3-geo/src/noop.js","./stream":"node_modules/d3-geo/src/stream.js"}],"node_modules/d3-geo/src/distance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _length = _interopRequireDefault(require("./length"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var coordinates = [null, null],
    object = {
  type: "LineString",
  coordinates: coordinates
};

function _default(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return (0, _length.default)(object);
}
},{"./length":"node_modules/d3-geo/src/length.js"}],"node_modules/d3-geo/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _polygonContains = _interopRequireDefault(require("./polygonContains"));

var _distance = _interopRequireDefault(require("./distance"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var containsObjectType = {
  Feature: function (object, point) {
    return containsGeometry(object.geometry, point);
  },
  FeatureCollection: function (object, point) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;

    return false;
  }
};
var containsGeometryType = {
  Sphere: function () {
    return true;
  },
  Point: function (object, point) {
    return containsPoint(object.coordinates, point);
  },
  MultiPoint: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsPoint(coordinates[i], point)) return true;

    return false;
  },
  LineString: function (object, point) {
    return containsLine(object.coordinates, point);
  },
  MultiLineString: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsLine(coordinates[i], point)) return true;

    return false;
  },
  Polygon: function (object, point) {
    return containsPolygon(object.coordinates, point);
  },
  MultiPolygon: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;

    return false;
  },
  GeometryCollection: function (object, point) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) if (containsGeometry(geometries[i], point)) return true;

    return false;
  }
};

function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;
}

function containsPoint(coordinates, point) {
  return (0, _distance.default)(coordinates, point) === 0;
}

function containsLine(coordinates, point) {
  var ao, bo, ab;

  for (var i = 0, n = coordinates.length; i < n; i++) {
    bo = (0, _distance.default)(coordinates[i], point);
    if (bo === 0) return true;

    if (i > 0) {
      ab = (0, _distance.default)(coordinates[i], coordinates[i - 1]);
      if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < _math.epsilon2 * ab) return true;
    }

    ao = bo;
  }

  return false;
}

function containsPolygon(coordinates, point) {
  return !!(0, _polygonContains.default)(coordinates.map(ringRadians), pointRadians(point));
}

function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}

function pointRadians(point) {
  return [point[0] * _math.radians, point[1] * _math.radians];
}

function _default(object, point) {
  return (object && containsObjectType.hasOwnProperty(object.type) ? containsObjectType[object.type] : containsGeometry)(object, point);
}
},{"./polygonContains":"node_modules/d3-geo/src/polygonContains.js","./distance":"node_modules/d3-geo/src/distance.js","./math":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/graticule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = graticule;
exports.graticule10 = graticule10;

var _d3Array = require("d3-array");

var _math = require("./math");

function graticuleX(y0, y1, dy) {
  var y = (0, _d3Array.range)(y0, y1 - _math.epsilon, dy).concat(y1);
  return function (x) {
    return y.map(function (y) {
      return [x, y];
    });
  };
}

function graticuleY(x0, x1, dx) {
  var x = (0, _d3Array.range)(x0, x1 - _math.epsilon, dx).concat(x1);
  return function (y) {
    return x.map(function (x) {
      return [x, y];
    });
  };
}

function graticule() {
  var x1,
      x0,
      X1,
      X0,
      y1,
      y0,
      Y1,
      Y0,
      dx = 10,
      dy = dx,
      DX = 90,
      DY = 360,
      x,
      y,
      X,
      Y,
      precision = 2.5;

  function graticule() {
    return {
      type: "MultiLineString",
      coordinates: lines()
    };
  }

  function lines() {
    return (0, _d3Array.range)((0, _math.ceil)(X0 / DX) * DX, X1, DX).map(X).concat((0, _d3Array.range)((0, _math.ceil)(Y0 / DY) * DY, Y1, DY).map(Y)).concat((0, _d3Array.range)((0, _math.ceil)(x0 / dx) * dx, x1, dx).filter(function (x) {
      return (0, _math.abs)(x % DX) > _math.epsilon;
    }).map(x)).concat((0, _d3Array.range)((0, _math.ceil)(y0 / dy) * dy, y1, dy).filter(function (y) {
      return (0, _math.abs)(y % DY) > _math.epsilon;
    }).map(y));
  }

  graticule.lines = function () {
    return lines().map(function (coordinates) {
      return {
        type: "LineString",
        coordinates: coordinates
      };
    });
  };

  graticule.outline = function () {
    return {
      type: "Polygon",
      coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
    };
  };

  graticule.extent = function (_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function (_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function (_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function (_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function (_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function (_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function (_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule.extentMajor([[-180, -90 + _math.epsilon], [180, 90 - _math.epsilon]]).extentMinor([[-180, -80 - _math.epsilon], [180, 80 + _math.epsilon]]);
}

function graticule10() {
  return graticule()();
}
},{"d3-array":"node_modules/d3-geo/node_modules/d3-array/src/index.js","./math":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/interpolate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math");

function _default(a, b) {
  var x0 = a[0] * _math.radians,
      y0 = a[1] * _math.radians,
      x1 = b[0] * _math.radians,
      y1 = b[1] * _math.radians,
      cy0 = (0, _math.cos)(y0),
      sy0 = (0, _math.sin)(y0),
      cy1 = (0, _math.cos)(y1),
      sy1 = (0, _math.sin)(y1),
      kx0 = cy0 * (0, _math.cos)(x0),
      ky0 = cy0 * (0, _math.sin)(x0),
      kx1 = cy1 * (0, _math.cos)(x1),
      ky1 = cy1 * (0, _math.sin)(x1),
      d = 2 * (0, _math.asin)((0, _math.sqrt)((0, _math.haversin)(y1 - y0) + cy0 * cy1 * (0, _math.haversin)(x1 - x0))),
      k = (0, _math.sin)(d);
  var interpolate = d ? function (t) {
    var B = (0, _math.sin)(t *= d) / k,
        A = (0, _math.sin)(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.atan2)(z, (0, _math.sqrt)(x * x + y * y)) * _math.degrees];
  } : function () {
    return [x0 * _math.degrees, y0 * _math.degrees];
  };
  interpolate.distance = d;
  return interpolate;
}
},{"./math":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-geo/src/path/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adder = _interopRequireDefault(require("../adder"));

var _math = require("../math");

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaSum = (0, _adder.default)(),
    areaRingSum = (0, _adder.default)(),
    x00,
    y00,
    x0,
    y0;
var areaStream = {
  point: _noop.default,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: function () {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = _noop.default;
    areaSum.add((0, _math.abs)(areaRingSum));
    areaRingSum.reset();
  },
  result: function () {
    var area = areaSum / 2;
    areaSum.reset();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}

function areaRingEnd() {
  areaPoint(x00, y00);
}

var _default = areaStream;
exports.default = _default;
},{"../adder":"node_modules/d3-geo/src/adder.js","../math":"node_modules/d3-geo/src/math.js","../noop":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/path/bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var x0 = Infinity,
    y0 = x0,
    x1 = -x0,
    y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: _noop.default,
  polygonEnd: _noop.default,
  result: function () {
    var bounds = [[x0, y0], [x1, y1]];
    x1 = y1 = -(y0 = x0 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < x0) x0 = x;
  if (x > x1) x1 = x;
  if (y < y0) y0 = y;
  if (y > y1) y1 = y;
}

var _default = boundsStream;
exports.default = _default;
},{"../noop":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/path/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math");

// TODO Enforce positive area for exterior, negative area for interior?
var X0 = 0,
    Y0 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    x00,
    y00,
    x0,
    y0;
var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function () {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0 = x, y0 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  centroidPoint(x0 = x, y0 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(x00, y00);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00 = x0 = x, y00 = y0 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  z = y0 * x - x0 * y;
  X2 += z * (x0 + x);
  Y2 += z * (y0 + y);
  Z2 += z * 3;
  centroidPoint(x0 = x, y0 = y);
}

var _default = centroidStream;
exports.default = _default;
},{"../math":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/path/context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PathContext;

var _math = require("../math");

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function (_) {
    return this._radius = _, this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._context.moveTo(x, y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._context.lineTo(x, y);

          break;
        }

      default:
        {
          this._context.moveTo(x + this._radius, y);

          this._context.arc(x, y, this._radius, 0, _math.tau);

          break;
        }
    }
  },
  result: _noop.default
};
},{"../math":"node_modules/d3-geo/src/math.js","../noop":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/path/measure.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adder = _interopRequireDefault(require("../adder"));

var _math = require("../math");

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder.default)(),
    lengthRing,
    x00,
    y00,
    x0,
    y0;
var lengthStream = {
  point: _noop.default,
  lineStart: function () {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function () {
    if (lengthRing) lengthPoint(x00, y00);
    lengthStream.point = _noop.default;
  },
  polygonStart: function () {
    lengthRing = true;
  },
  polygonEnd: function () {
    lengthRing = null;
  },
  result: function () {
    var length = +lengthSum;
    lengthSum.reset();
    return length;
  }
};

function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function lengthPoint(x, y) {
  x0 -= x, y0 -= y;
  lengthSum.add((0, _math.sqrt)(x0 * x0 + y0 * y0));
  x0 = x, y0 = y;
}

var _default = lengthStream;
exports.default = _default;
},{"../adder":"node_modules/d3-geo/src/adder.js","../math":"node_modules/d3-geo/src/math.js","../noop":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/path/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PathString;

function PathString() {
  this._string = [];
}

PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function (_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._string.push("M", x, ",", y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._string.push("L", x, ",", y);

          break;
        }

      default:
        {
          if (this._circle == null) this._circle = circle(this._radius);

          this._string.push("M", x, ",", y, this._circle);

          break;
        }
    }
  },
  result: function () {
    if (this._string.length) {
      var result = this._string.join("");

      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}
},{}],"node_modules/d3-geo/src/path/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("../identity"));

var _stream = _interopRequireDefault(require("../stream"));

var _area = _interopRequireDefault(require("./area"));

var _bounds = _interopRequireDefault(require("./bounds"));

var _centroid = _interopRequireDefault(require("./centroid"));

var _context = _interopRequireDefault(require("./context"));

var _measure = _interopRequireDefault(require("./measure"));

var _string = _interopRequireDefault(require("./string"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      (0, _stream.default)(object, projectionStream(contextStream));
    }

    return contextStream.result();
  }

  path.area = function (object) {
    (0, _stream.default)(object, projectionStream(_area.default));
    return _area.default.result();
  };

  path.measure = function (object) {
    (0, _stream.default)(object, projectionStream(_measure.default));
    return _measure.default.result();
  };

  path.bounds = function (object) {
    (0, _stream.default)(object, projectionStream(_bounds.default));
    return _bounds.default.result();
  };

  path.centroid = function (object) {
    (0, _stream.default)(object, projectionStream(_centroid.default));
    return _centroid.default.result();
  };

  path.projection = function (_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, _identity.default) : (projection = _).stream, path) : projection;
  };

  path.context = function (_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new _string.default()) : new _context.default(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function (_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
}
},{"../identity":"node_modules/d3-geo/src/identity.js","../stream":"node_modules/d3-geo/src/stream.js","./area":"node_modules/d3-geo/src/path/area.js","./bounds":"node_modules/d3-geo/src/path/bounds.js","./centroid":"node_modules/d3-geo/src/path/centroid.js","./context":"node_modules/d3-geo/src/path/context.js","./measure":"node_modules/d3-geo/src/path/measure.js","./string":"node_modules/d3-geo/src/path/string.js"}],"node_modules/d3-geo/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.transformer = transformer;

function _default(methods) {
  return {
    stream: transformer(methods)
  };
}

function transformer(methods) {
  return function (stream) {
    var s = new TransformStream();

    for (var key in methods) s[key] = methods[key];

    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function (x, y) {
    this.stream.point(x, y);
  },
  sphere: function () {
    this.stream.sphere();
  },
  lineStart: function () {
    this.stream.lineStart();
  },
  lineEnd: function () {
    this.stream.lineEnd();
  },
  polygonStart: function () {
    this.stream.polygonStart();
  },
  polygonEnd: function () {
    this.stream.polygonEnd();
  }
};
},{}],"node_modules/d3-geo/src/projection/fit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fitExtent = fitExtent;
exports.fitSize = fitSize;
exports.fitWidth = fitWidth;
exports.fitHeight = fitHeight;

var _stream = _interopRequireDefault(require("../stream"));

var _bounds = _interopRequireDefault(require("../path/bounds"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fit(projection, fitBounds, object) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null) projection.clipExtent(null);
  (0, _stream.default)(object, projection.stream(_bounds.default));
  fitBounds(_bounds.default.result());
  if (clip != null) projection.clipExtent(clip);
  return projection;
}

function fitExtent(projection, extent, object) {
  return fit(projection, function (b) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}

function fitWidth(projection, width, object) {
  return fit(projection, function (b) {
    var w = +width,
        k = w / (b[1][0] - b[0][0]),
        x = (w - k * (b[1][0] + b[0][0])) / 2,
        y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitHeight(projection, height, object) {
  return fit(projection, function (b) {
    var h = +height,
        k = h / (b[1][1] - b[0][1]),
        x = -k * b[0][0],
        y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}
},{"../stream":"node_modules/d3-geo/src/stream.js","../path/bounds":"node_modules/d3-geo/src/path/bounds.js"}],"node_modules/d3-geo/src/projection/resample.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cartesian = require("../cartesian");

var _math = require("../math");

var _transform = require("../transform");

var maxDepth = 16,
    // maximum depth of subdivision
cosMinDistance = (0, _math.cos)(30 * _math.radians); // cos(minimum angular distance)

function _default(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}

function resampleNone(project) {
  return (0, _transform.transformer)({
    point: function (x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample(project, delta2) {
  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;

    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = (0, _math.sqrt)(a * a + b * b + c * c),
          phi2 = (0, _math.asin)(c /= m),
          lambda2 = (0, _math.abs)((0, _math.abs)(c) - 1) < _math.epsilon || (0, _math.abs)(lambda0 - lambda1) < _math.epsilon ? (lambda0 + lambda1) / 2 : (0, _math.atan2)(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;

      if (dz * dz / d2 > delta2 // perpendicular projected distance
      || (0, _math.abs)((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }

  return function (stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
    lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function () {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = (0, _cartesian.cartesian)([lambda, phi]),
          p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}
},{"../cartesian":"node_modules/d3-geo/src/cartesian.js","../math":"node_modules/d3-geo/src/math.js","../transform":"node_modules/d3-geo/src/transform.js"}],"node_modules/d3-geo/src/projection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = projection;
exports.projectionMutator = projectionMutator;

var _antimeridian = _interopRequireDefault(require("../clip/antimeridian"));

var _circle = _interopRequireDefault(require("../clip/circle"));

var _rectangle = _interopRequireDefault(require("../clip/rectangle"));

var _compose = _interopRequireDefault(require("../compose"));

var _identity = _interopRequireDefault(require("../identity"));

var _math = require("../math");

var _rotation = require("../rotation");

var _transform = require("../transform");

var _fit = require("./fit");

var _resample = _interopRequireDefault(require("./resample"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transformRadians = (0, _transform.transformer)({
  point: function (x, y) {
    this.stream.point(x * _math.radians, y * _math.radians);
  }
});

function transformRotate(rotate) {
  return (0, _transform.transformer)({
    point: function (x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}

function scaleTranslate(k, dx, dy) {
  function transform(x, y) {
    return [dx + k * x, dy - k * y];
  }

  transform.invert = function (x, y) {
    return [(x - dx) / k, (dy - y) / k];
  };

  return transform;
}

function scaleTranslateRotate(k, dx, dy, alpha) {
  var cosAlpha = (0, _math.cos)(alpha),
      sinAlpha = (0, _math.sin)(alpha),
      a = cosAlpha * k,
      b = sinAlpha * k,
      ai = cosAlpha / k,
      bi = sinAlpha / k,
      ci = (sinAlpha * dy - cosAlpha * dx) / k,
      fi = (sinAlpha * dx + cosAlpha * dy) / k;

  function transform(x, y) {
    return [a * x - b * y + dx, dy - b * x - a * y];
  }

  transform.invert = function (x, y) {
    return [ai * x - bi * y + ci, fi - bi * x - ai * y];
  };

  return transform;
}

function projection(project) {
  return projectionMutator(function () {
    return project;
  })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150,
      // scale
  x = 480,
      y = 250,
      // translate
  lambda = 0,
      phi = 0,
      // center
  deltaLambda = 0,
      deltaPhi = 0,
      deltaGamma = 0,
      rotate,
      // pre-rotate
  alpha = 0,
      // post-rotate
  theta = null,
      preclip = _antimeridian.default,
      // pre-clip angle
  x0 = null,
      y0,
      x1,
      y1,
      postclip = _identity.default,
      // post-clip extent
  delta2 = 0.5,
      // precision
  projectResample,
      projectTransform,
      projectRotateTransform,
      cache,
      cacheStream;

  function projection(point) {
    return projectRotateTransform(point[0] * _math.radians, point[1] * _math.radians);
  }

  function invert(point) {
    point = projectRotateTransform.invert(point[0], point[1]);
    return point && [point[0] * _math.degrees, point[1] * _math.degrees];
  }

  projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };

  projection.preclip = function (_) {
    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
  };

  projection.postclip = function (_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipAngle = function (_) {
    return arguments.length ? (preclip = +_ ? (0, _circle.default)(theta = _ * _math.radians) : (theta = null, _antimeridian.default), reset()) : theta * _math.degrees;
  };

  projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function (_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function (_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function (_) {
    return arguments.length ? (lambda = _[0] % 360 * _math.radians, phi = _[1] % 360 * _math.radians, recenter()) : [lambda * _math.degrees, phi * _math.degrees];
  };

  projection.rotate = function (_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * _math.radians, deltaPhi = _[1] % 360 * _math.radians, deltaGamma = _.length > 2 ? _[2] % 360 * _math.radians : 0, recenter()) : [deltaLambda * _math.degrees, deltaPhi * _math.degrees, deltaGamma * _math.degrees];
  };

  projection.angle = function (_) {
    return arguments.length ? (alpha = _ % 360 * _math.radians, recenter()) : alpha * _math.degrees;
  };

  projection.precision = function (_) {
    return arguments.length ? (projectResample = (0, _resample.default)(projectTransform, delta2 = _ * _), reset()) : (0, _math.sqrt)(delta2);
  };

  projection.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(projection, extent, object);
  };

  projection.fitSize = function (size, object) {
    return (0, _fit.fitSize)(projection, size, object);
  };

  projection.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(projection, width, object);
  };

  projection.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(projection, height, object);
  };

  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),
        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);
    rotate = (0, _rotation.rotateRadians)(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = (0, _compose.default)(project, transform);
    projectRotateTransform = (0, _compose.default)(rotate, projectTransform);
    projectResample = (0, _resample.default)(projectTransform, delta2);
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function () {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}
},{"../clip/antimeridian":"node_modules/d3-geo/src/clip/antimeridian.js","../clip/circle":"node_modules/d3-geo/src/clip/circle.js","../clip/rectangle":"node_modules/d3-geo/src/clip/rectangle.js","../compose":"node_modules/d3-geo/src/compose.js","../identity":"node_modules/d3-geo/src/identity.js","../math":"node_modules/d3-geo/src/math.js","../rotation":"node_modules/d3-geo/src/rotation.js","../transform":"node_modules/d3-geo/src/transform.js","./fit":"node_modules/d3-geo/src/projection/fit.js","./resample":"node_modules/d3-geo/src/projection/resample.js"}],"node_modules/d3-geo/src/projection/conic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicProjection = conicProjection;

var _math = require("../math");

var _index = require("./index");

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = _math.pi / 3,
      m = (0, _index.projectionMutator)(projectAt),
      p = m(phi0, phi1);

  p.parallels = function (_) {
    return arguments.length ? m(phi0 = _[0] * _math.radians, phi1 = _[1] * _math.radians) : [phi0 * _math.degrees, phi1 * _math.degrees];
  };

  return p;
}
},{"../math":"node_modules/d3-geo/src/math.js","./index":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/cylindricalEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cylindricalEqualAreaRaw = cylindricalEqualAreaRaw;

var _math = require("../math");

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = (0, _math.cos)(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, (0, _math.sin)(phi) / cosPhi0];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, (0, _math.asin)(y * cosPhi0)];
  };

  return forward;
}
},{"../math":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/conicEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicEqualAreaRaw = conicEqualAreaRaw;
exports.default = _default;

var _math = require("../math");

var _conic = require("./conic");

var _cylindricalEqualArea = require("./cylindricalEqualArea");

function conicEqualAreaRaw(y0, y1) {
  var sy0 = (0, _math.sin)(y0),
      n = (sy0 + (0, _math.sin)(y1)) / 2; // Are the parallels symmetrical around the Equator?

  if ((0, _math.abs)(n) < _math.epsilon) return (0, _cylindricalEqualArea.cylindricalEqualAreaRaw)(y0);
  var c = 1 + sy0 * (2 * n - sy0),
      r0 = (0, _math.sqrt)(c) / n;

  function project(x, y) {
    var r = (0, _math.sqrt)(c - 2 * n * (0, _math.sin)(y)) / n;
    return [r * (0, _math.sin)(x *= n), r0 - r * (0, _math.cos)(x)];
  }

  project.invert = function (x, y) {
    var r0y = r0 - y;
    return [(0, _math.atan2)(x, (0, _math.abs)(r0y)) / n * (0, _math.sign)(r0y), (0, _math.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
}
},{"../math":"node_modules/d3-geo/src/math.js","./conic":"node_modules/d3-geo/src/projection/conic.js","./cylindricalEqualArea":"node_modules/d3-geo/src/projection/cylindricalEqualArea.js"}],"node_modules/d3-geo/src/projection/albers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _conicEqualArea = _interopRequireDefault(require("./conicEqualArea"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _conicEqualArea.default)().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
}
},{"./conicEqualArea":"node_modules/d3-geo/src/projection/conicEqualArea.js"}],"node_modules/d3-geo/src/projection/albersUsa.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("../math");

var _albers = _interopRequireDefault(require("./albers"));

var _conicEqualArea = _interopRequireDefault(require("./conicEqualArea"));

var _fit = require("./fit");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function (x, y) {
      var i = -1;

      while (++i < n) streams[i].point(x, y);
    },
    sphere: function () {
      var i = -1;

      while (++i < n) streams[i].sphere();
    },
    lineStart: function () {
      var i = -1;

      while (++i < n) streams[i].lineStart();
    },
    lineEnd: function () {
      var i = -1;

      while (++i < n) streams[i].lineEnd();
    },
    polygonStart: function () {
      var i = -1;

      while (++i < n) streams[i].polygonStart();
    },
    polygonEnd: function () {
      var i = -1;

      while (++i < n) streams[i].polygonEnd();
    }
  };
} // A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers


function _default() {
  var cache,
      cacheStream,
      lower48 = (0, _albers.default)(),
      lower48Point,
      alaska = (0, _conicEqualArea.default)().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
      alaskaPoint,
      // EPSG:3338
  hawaii = (0, _conicEqualArea.default)().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
      hawaiiPoint,
      // ESRI:102007
  point,
      pointStream = {
    point: function (x, y) {
      point = [x, y];
    }
  };

  function albersUsa(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function (coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
  };

  albersUsa.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function (_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function (_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function (_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(),
        x = +_[0],
        y = +_[1];
    lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);
    alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + _math.epsilon, y + 0.120 * k + _math.epsilon], [x - 0.214 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);
    hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + _math.epsilon, y + 0.166 * k + _math.epsilon], [x - 0.115 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);
    return reset();
  };

  albersUsa.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(albersUsa, extent, object);
  };

  albersUsa.fitSize = function (size, object) {
    return (0, _fit.fitSize)(albersUsa, size, object);
  };

  albersUsa.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(albersUsa, width, object);
  };

  albersUsa.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(albersUsa, height, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
}
},{"../math":"node_modules/d3-geo/src/math.js","./albers":"node_modules/d3-geo/src/projection/albers.js","./conicEqualArea":"node_modules/d3-geo/src/projection/conicEqualArea.js","./fit":"node_modules/d3-geo/src/projection/fit.js"}],"node_modules/d3-geo/src/projection/azimuthal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.azimuthalRaw = azimuthalRaw;
exports.azimuthalInvert = azimuthalInvert;

var _math = require("../math");

function azimuthalRaw(scale) {
  return function (x, y) {
    var cx = (0, _math.cos)(x),
        cy = (0, _math.cos)(y),
        k = scale(cx * cy);
    return [k * cy * (0, _math.sin)(x), k * (0, _math.sin)(y)];
  };
}

function azimuthalInvert(angle) {
  return function (x, y) {
    var z = (0, _math.sqrt)(x * x + y * y),
        c = angle(z),
        sc = (0, _math.sin)(c),
        cc = (0, _math.cos)(c);
    return [(0, _math.atan2)(x * sc, z * cc), (0, _math.asin)(z && y * sc / z)];
  };
}
},{"../math":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/azimuthalEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.azimuthalEqualAreaRaw = void 0;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEqualAreaRaw = (0, _azimuthal.azimuthalRaw)(function (cxcy) {
  return (0, _math.sqrt)(2 / (1 + cxcy));
});
exports.azimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
azimuthalEqualAreaRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.asin)(z / 2);
});

function _default() {
  return (0, _index.default)(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
}
},{"../math":"node_modules/d3-geo/src/math.js","./azimuthal":"node_modules/d3-geo/src/projection/azimuthal.js","./index":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/azimuthalEquidistant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.azimuthalEquidistantRaw = void 0;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEquidistantRaw = (0, _azimuthal.azimuthalRaw)(function (c) {
  return (c = (0, _math.acos)(c)) && c / (0, _math.sin)(c);
});
exports.azimuthalEquidistantRaw = azimuthalEquidistantRaw;
azimuthalEquidistantRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return z;
});

function _default() {
  return (0, _index.default)(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
}
},{"../math":"node_modules/d3-geo/src/math.js","./azimuthal":"node_modules/d3-geo/src/projection/azimuthal.js","./index":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/mercator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mercatorRaw = mercatorRaw;
exports.default = _default;
exports.mercatorProjection = mercatorProjection;

var _math = require("../math");

var _rotation = _interopRequireDefault(require("../rotation"));

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mercatorRaw(lambda, phi) {
  return [lambda, (0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2))];
}

mercatorRaw.invert = function (x, y) {
  return [x, 2 * (0, _math.atan)((0, _math.exp)(y)) - _math.halfPi];
};

function _default() {
  return mercatorProjection(mercatorRaw).scale(961 / _math.tau);
}

function mercatorProjection(project) {
  var m = (0, _index.default)(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null,
      y0,
      x1,
      y1; // clip extent

  m.scale = function (_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function (_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function (_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function (_) {
    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = _math.pi * scale(),
        t = m((0, _rotation.default)(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}
},{"../math":"node_modules/d3-geo/src/math.js","../rotation":"node_modules/d3-geo/src/rotation.js","./index":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/conicConformal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicConformalRaw = conicConformalRaw;
exports.default = _default;

var _math = require("../math");

var _conic = require("./conic");

var _mercator = require("./mercator");

function tany(y) {
  return (0, _math.tan)((_math.halfPi + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (0, _math.log)(cy0 / (0, _math.cos)(y1)) / (0, _math.log)(tany(y1) / tany(y0)),
      f = cy0 * (0, _math.pow)(tany(y0), n) / n;
  if (!n) return _mercator.mercatorRaw;

  function project(x, y) {
    if (f > 0) {
      if (y < -_math.halfPi + _math.epsilon) y = -_math.halfPi + _math.epsilon;
    } else {
      if (y > _math.halfPi - _math.epsilon) y = _math.halfPi - _math.epsilon;
    }

    var r = f / (0, _math.pow)(tany(y), n);
    return [r * (0, _math.sin)(n * x), f - r * (0, _math.cos)(n * x)];
  }

  project.invert = function (x, y) {
    var fy = f - y,
        r = (0, _math.sign)(n) * (0, _math.sqrt)(x * x + fy * fy);
    return [(0, _math.atan2)(x, (0, _math.abs)(fy)) / n * (0, _math.sign)(fy), 2 * (0, _math.atan)((0, _math.pow)(f / r, 1 / n)) - _math.halfPi];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicConformalRaw).scale(109.5).parallels([30, 30]);
}
},{"../math":"node_modules/d3-geo/src/math.js","./conic":"node_modules/d3-geo/src/projection/conic.js","./mercator":"node_modules/d3-geo/src/projection/mercator.js"}],"node_modules/d3-geo/src/projection/equirectangular.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equirectangularRaw = equirectangularRaw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

function _default() {
  return (0, _index.default)(equirectangularRaw).scale(152.63);
}
},{"./index":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/conicEquidistant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicEquidistantRaw = conicEquidistantRaw;
exports.default = _default;

var _math = require("../math");

var _conic = require("./conic");

var _equirectangular = require("./equirectangular");

function conicEquidistantRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (cy0 - (0, _math.cos)(y1)) / (y1 - y0),
      g = cy0 / n + y0;
  if ((0, _math.abs)(n) < _math.epsilon) return _equirectangular.equirectangularRaw;

  function project(x, y) {
    var gy = g - y,
        nx = n * x;
    return [gy * (0, _math.sin)(nx), g - gy * (0, _math.cos)(nx)];
  }

  project.invert = function (x, y) {
    var gy = g - y;
    return [(0, _math.atan2)(x, (0, _math.abs)(gy)) / n * (0, _math.sign)(gy), g - (0, _math.sign)(n) * (0, _math.sqrt)(x * x + gy * gy)];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
}
},{"../math":"node_modules/d3-geo/src/math.js","./conic":"node_modules/d3-geo/src/projection/conic.js","./equirectangular":"node_modules/d3-geo/src/projection/equirectangular.js"}],"node_modules/d3-geo/src/projection/equalEarth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalEarthRaw = equalEarthRaw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var A1 = 1.340264,
    A2 = -0.081106,
    A3 = 0.000893,
    A4 = 0.003796,
    M = (0, _math.sqrt)(3) / 2,
    iterations = 12;

function equalEarthRaw(lambda, phi) {
  var l = (0, _math.asin)(M * (0, _math.sin)(phi)),
      l2 = l * l,
      l6 = l2 * l2 * l2;
  return [lambda * (0, _math.cos)(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];
}

equalEarthRaw.invert = function (x, y) {
  var l = y,
      l2 = l * l,
      l6 = l2 * l2 * l2;

  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if ((0, _math.abs)(delta) < _math.epsilon2) break;
  }

  return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / (0, _math.cos)(l), (0, _math.asin)((0, _math.sin)(l) / M)];
};

function _default() {
  return (0, _index.default)(equalEarthRaw).scale(177.158);
}
},{"./index.js":"node_modules/d3-geo/src/projection/index.js","../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/gnomonic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gnomonicRaw = gnomonicRaw;
exports.default = _default;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function gnomonicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

gnomonicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.atan);

function _default() {
  return (0, _index.default)(gnomonicRaw).scale(144.049).clipAngle(60);
}
},{"../math":"node_modules/d3-geo/src/math.js","./azimuthal":"node_modules/d3-geo/src/projection/azimuthal.js","./index":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _rectangle = _interopRequireDefault(require("../clip/rectangle"));

var _identity = _interopRequireDefault(require("../identity"));

var _transform = require("../transform");

var _fit = require("./fit");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function scaleTranslate(kx, ky, tx, ty) {
  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? _identity.default : (0, _transform.transformer)({
    point: function (x, y) {
      this.stream.point(x * kx + tx, y * ky + ty);
    }
  });
}

function _default() {
  var k = 1,
      tx = 0,
      ty = 0,
      sx = 1,
      sy = 1,
      transform = _identity.default,
      // scale, translate and reflect
  x0 = null,
      y0,
      x1,
      y1,
      // clip extent
  postclip = _identity.default,
      cache,
      cacheStream,
      projection;

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return projection = {
    stream: function (stream) {
      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
    },
    postclip: function (_) {
      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    },
    clipExtent: function (_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    },
    scale: function (_) {
      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
    },
    translate: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
    },
    reflectX: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
    },
    reflectY: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
    },
    fitExtent: function (extent, object) {
      return (0, _fit.fitExtent)(projection, extent, object);
    },
    fitSize: function (size, object) {
      return (0, _fit.fitSize)(projection, size, object);
    },
    fitWidth: function (width, object) {
      return (0, _fit.fitWidth)(projection, width, object);
    },
    fitHeight: function (height, object) {
      return (0, _fit.fitHeight)(projection, height, object);
    }
  };
}
},{"../clip/rectangle":"node_modules/d3-geo/src/clip/rectangle.js","../identity":"node_modules/d3-geo/src/identity.js","../transform":"node_modules/d3-geo/src/transform.js","./fit":"node_modules/d3-geo/src/projection/fit.js"}],"node_modules/d3-geo/src/projection/naturalEarth1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naturalEarth1Raw = naturalEarth1Raw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index"));

var _math = require("../math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi,
      phi4 = phi2 * phi2;
  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
}

naturalEarth1Raw.invert = function (x, y) {
  var phi = y,
      i = 25,
      delta;

  do {
    var phi2 = phi * phi,
        phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
};

function _default() {
  return (0, _index.default)(naturalEarth1Raw).scale(175.295);
}
},{"./index":"node_modules/d3-geo/src/projection/index.js","../math":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/orthographic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.orthographicRaw = orthographicRaw;
exports.default = _default;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function orthographicRaw(x, y) {
  return [(0, _math.cos)(y) * (0, _math.sin)(x), (0, _math.sin)(y)];
}

orthographicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.asin);

function _default() {
  return (0, _index.default)(orthographicRaw).scale(249.5).clipAngle(90 + _math.epsilon);
}
},{"../math":"node_modules/d3-geo/src/math.js","./azimuthal":"node_modules/d3-geo/src/projection/azimuthal.js","./index":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/stereographic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stereographicRaw = stereographicRaw;
exports.default = _default;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stereographicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = 1 + (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

stereographicRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.atan)(z);
});

function _default() {
  return (0, _index.default)(stereographicRaw).scale(250).clipAngle(142);
}
},{"../math":"node_modules/d3-geo/src/math.js","./azimuthal":"node_modules/d3-geo/src/projection/azimuthal.js","./index":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/transverseMercator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transverseMercatorRaw = transverseMercatorRaw;
exports.default = _default;

var _math = require("../math");

var _mercator = require("./mercator");

function transverseMercatorRaw(lambda, phi) {
  return [(0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function (x, y) {
  return [-y, 2 * (0, _math.atan)((0, _math.exp)(x)) - _math.halfPi];
};

function _default() {
  var m = (0, _mercator.mercatorProjection)(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function (_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function (_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90]).scale(159.155);
}
},{"../math":"node_modules/d3-geo/src/math.js","./mercator":"node_modules/d3-geo/src/projection/mercator.js"}],"node_modules/d3-geo/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "geoArea", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "geoBounds", {
  enumerable: true,
  get: function () {
    return _bounds.default;
  }
});
Object.defineProperty(exports, "geoCentroid", {
  enumerable: true,
  get: function () {
    return _centroid.default;
  }
});
Object.defineProperty(exports, "geoCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "geoClipAntimeridian", {
  enumerable: true,
  get: function () {
    return _antimeridian.default;
  }
});
Object.defineProperty(exports, "geoClipCircle", {
  enumerable: true,
  get: function () {
    return _circle2.default;
  }
});
Object.defineProperty(exports, "geoClipExtent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "geoClipRectangle", {
  enumerable: true,
  get: function () {
    return _rectangle.default;
  }
});
Object.defineProperty(exports, "geoContains", {
  enumerable: true,
  get: function () {
    return _contains.default;
  }
});
Object.defineProperty(exports, "geoDistance", {
  enumerable: true,
  get: function () {
    return _distance.default;
  }
});
Object.defineProperty(exports, "geoGraticule", {
  enumerable: true,
  get: function () {
    return _graticule.default;
  }
});
Object.defineProperty(exports, "geoGraticule10", {
  enumerable: true,
  get: function () {
    return _graticule.graticule10;
  }
});
Object.defineProperty(exports, "geoInterpolate", {
  enumerable: true,
  get: function () {
    return _interpolate.default;
  }
});
Object.defineProperty(exports, "geoLength", {
  enumerable: true,
  get: function () {
    return _length.default;
  }
});
Object.defineProperty(exports, "geoPath", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "geoAlbers", {
  enumerable: true,
  get: function () {
    return _albers.default;
  }
});
Object.defineProperty(exports, "geoAlbersUsa", {
  enumerable: true,
  get: function () {
    return _albersUsa.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualArea", {
  enumerable: true,
  get: function () {
    return _azimuthalEqualArea.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _azimuthalEqualArea.azimuthalEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistant", {
  enumerable: true,
  get: function () {
    return _azimuthalEquidistant.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _azimuthalEquidistant.azimuthalEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoConicConformal", {
  enumerable: true,
  get: function () {
    return _conicConformal.default;
  }
});
Object.defineProperty(exports, "geoConicConformalRaw", {
  enumerable: true,
  get: function () {
    return _conicConformal.conicConformalRaw;
  }
});
Object.defineProperty(exports, "geoConicEqualArea", {
  enumerable: true,
  get: function () {
    return _conicEqualArea.default;
  }
});
Object.defineProperty(exports, "geoConicEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _conicEqualArea.conicEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoConicEquidistant", {
  enumerable: true,
  get: function () {
    return _conicEquidistant.default;
  }
});
Object.defineProperty(exports, "geoConicEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _conicEquidistant.conicEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoEqualEarth", {
  enumerable: true,
  get: function () {
    return _equalEarth.default;
  }
});
Object.defineProperty(exports, "geoEqualEarthRaw", {
  enumerable: true,
  get: function () {
    return _equalEarth.equalEarthRaw;
  }
});
Object.defineProperty(exports, "geoEquirectangular", {
  enumerable: true,
  get: function () {
    return _equirectangular.default;
  }
});
Object.defineProperty(exports, "geoEquirectangularRaw", {
  enumerable: true,
  get: function () {
    return _equirectangular.equirectangularRaw;
  }
});
Object.defineProperty(exports, "geoGnomonic", {
  enumerable: true,
  get: function () {
    return _gnomonic.default;
  }
});
Object.defineProperty(exports, "geoGnomonicRaw", {
  enumerable: true,
  get: function () {
    return _gnomonic.gnomonicRaw;
  }
});
Object.defineProperty(exports, "geoIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "geoProjection", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "geoProjectionMutator", {
  enumerable: true,
  get: function () {
    return _index2.projectionMutator;
  }
});
Object.defineProperty(exports, "geoMercator", {
  enumerable: true,
  get: function () {
    return _mercator.default;
  }
});
Object.defineProperty(exports, "geoMercatorRaw", {
  enumerable: true,
  get: function () {
    return _mercator.mercatorRaw;
  }
});
Object.defineProperty(exports, "geoNaturalEarth1", {
  enumerable: true,
  get: function () {
    return _naturalEarth.default;
  }
});
Object.defineProperty(exports, "geoNaturalEarth1Raw", {
  enumerable: true,
  get: function () {
    return _naturalEarth.naturalEarth1Raw;
  }
});
Object.defineProperty(exports, "geoOrthographic", {
  enumerable: true,
  get: function () {
    return _orthographic.default;
  }
});
Object.defineProperty(exports, "geoOrthographicRaw", {
  enumerable: true,
  get: function () {
    return _orthographic.orthographicRaw;
  }
});
Object.defineProperty(exports, "geoStereographic", {
  enumerable: true,
  get: function () {
    return _stereographic.default;
  }
});
Object.defineProperty(exports, "geoStereographicRaw", {
  enumerable: true,
  get: function () {
    return _stereographic.stereographicRaw;
  }
});
Object.defineProperty(exports, "geoTransverseMercator", {
  enumerable: true,
  get: function () {
    return _transverseMercator.default;
  }
});
Object.defineProperty(exports, "geoTransverseMercatorRaw", {
  enumerable: true,
  get: function () {
    return _transverseMercator.transverseMercatorRaw;
  }
});
Object.defineProperty(exports, "geoRotation", {
  enumerable: true,
  get: function () {
    return _rotation.default;
  }
});
Object.defineProperty(exports, "geoStream", {
  enumerable: true,
  get: function () {
    return _stream.default;
  }
});
Object.defineProperty(exports, "geoTransform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});

var _area = _interopRequireDefault(require("./area"));

var _bounds = _interopRequireDefault(require("./bounds"));

var _centroid = _interopRequireDefault(require("./centroid"));

var _circle = _interopRequireDefault(require("./circle"));

var _antimeridian = _interopRequireDefault(require("./clip/antimeridian"));

var _circle2 = _interopRequireDefault(require("./clip/circle"));

var _extent = _interopRequireDefault(require("./clip/extent"));

var _rectangle = _interopRequireDefault(require("./clip/rectangle"));

var _contains = _interopRequireDefault(require("./contains"));

var _distance = _interopRequireDefault(require("./distance"));

var _graticule = _interopRequireWildcard(require("./graticule"));

var _interpolate = _interopRequireDefault(require("./interpolate"));

var _length = _interopRequireDefault(require("./length"));

var _index = _interopRequireDefault(require("./path/index"));

var _albers = _interopRequireDefault(require("./projection/albers"));

var _albersUsa = _interopRequireDefault(require("./projection/albersUsa"));

var _azimuthalEqualArea = _interopRequireWildcard(require("./projection/azimuthalEqualArea"));

var _azimuthalEquidistant = _interopRequireWildcard(require("./projection/azimuthalEquidistant"));

var _conicConformal = _interopRequireWildcard(require("./projection/conicConformal"));

var _conicEqualArea = _interopRequireWildcard(require("./projection/conicEqualArea"));

var _conicEquidistant = _interopRequireWildcard(require("./projection/conicEquidistant"));

var _equalEarth = _interopRequireWildcard(require("./projection/equalEarth"));

var _equirectangular = _interopRequireWildcard(require("./projection/equirectangular"));

var _gnomonic = _interopRequireWildcard(require("./projection/gnomonic"));

var _identity = _interopRequireDefault(require("./projection/identity"));

var _index2 = _interopRequireWildcard(require("./projection/index"));

var _mercator = _interopRequireWildcard(require("./projection/mercator"));

var _naturalEarth = _interopRequireWildcard(require("./projection/naturalEarth1"));

var _orthographic = _interopRequireWildcard(require("./projection/orthographic"));

var _stereographic = _interopRequireWildcard(require("./projection/stereographic"));

var _transverseMercator = _interopRequireWildcard(require("./projection/transverseMercator"));

var _rotation = _interopRequireDefault(require("./rotation"));

var _stream = _interopRequireDefault(require("./stream"));

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./area":"node_modules/d3-geo/src/area.js","./bounds":"node_modules/d3-geo/src/bounds.js","./centroid":"node_modules/d3-geo/src/centroid.js","./circle":"node_modules/d3-geo/src/circle.js","./clip/antimeridian":"node_modules/d3-geo/src/clip/antimeridian.js","./clip/circle":"node_modules/d3-geo/src/clip/circle.js","./clip/extent":"node_modules/d3-geo/src/clip/extent.js","./clip/rectangle":"node_modules/d3-geo/src/clip/rectangle.js","./contains":"node_modules/d3-geo/src/contains.js","./distance":"node_modules/d3-geo/src/distance.js","./graticule":"node_modules/d3-geo/src/graticule.js","./interpolate":"node_modules/d3-geo/src/interpolate.js","./length":"node_modules/d3-geo/src/length.js","./path/index":"node_modules/d3-geo/src/path/index.js","./projection/albers":"node_modules/d3-geo/src/projection/albers.js","./projection/albersUsa":"node_modules/d3-geo/src/projection/albersUsa.js","./projection/azimuthalEqualArea":"node_modules/d3-geo/src/projection/azimuthalEqualArea.js","./projection/azimuthalEquidistant":"node_modules/d3-geo/src/projection/azimuthalEquidistant.js","./projection/conicConformal":"node_modules/d3-geo/src/projection/conicConformal.js","./projection/conicEqualArea":"node_modules/d3-geo/src/projection/conicEqualArea.js","./projection/conicEquidistant":"node_modules/d3-geo/src/projection/conicEquidistant.js","./projection/equalEarth":"node_modules/d3-geo/src/projection/equalEarth.js","./projection/equirectangular":"node_modules/d3-geo/src/projection/equirectangular.js","./projection/gnomonic":"node_modules/d3-geo/src/projection/gnomonic.js","./projection/identity":"node_modules/d3-geo/src/projection/identity.js","./projection/index":"node_modules/d3-geo/src/projection/index.js","./projection/mercator":"node_modules/d3-geo/src/projection/mercator.js","./projection/naturalEarth1":"node_modules/d3-geo/src/projection/naturalEarth1.js","./projection/orthographic":"node_modules/d3-geo/src/projection/orthographic.js","./projection/stereographic":"node_modules/d3-geo/src/projection/stereographic.js","./projection/transverseMercator":"node_modules/d3-geo/src/projection/transverseMercator.js","./rotation":"node_modules/d3-geo/src/rotation.js","./stream":"node_modules/d3-geo/src/stream.js","./transform":"node_modules/d3-geo/src/transform.js"}],"node_modules/vega-projection/src/projections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.projection = projection;
exports.getProjectionPath = getProjectionPath;
exports.projectionProperties = void 0;

var _d3Geo = require("d3-geo");

var defaultPath = (0, _d3Geo.geoPath)();
var projectionProperties = [// standard properties in d3-geo
'clipAngle', 'clipExtent', 'scale', 'translate', 'center', 'rotate', 'parallels', 'precision', 'reflectX', 'reflectY', // extended properties in d3-geo-projections
'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];
/**
 * Augment projections with their type and a copy method.
 */

exports.projectionProperties = projectionProperties;

function create(type, constructor) {
  return function projection() {
    var p = constructor();
    p.type = type;
    p.path = (0, _d3Geo.geoPath)().projection(p);

    p.copy = p.copy || function () {
      var c = projection();
      projectionProperties.forEach(function (prop) {
        if (p[prop]) c[prop](p[prop]());
      });
      c.path.pointRadius(p.path.pointRadius());
      return c;
    };

    return p;
  };
}

function projection(type, proj) {
  if (!type || typeof type !== 'string') {
    throw new Error('Projection type must be a name string.');
  }

  type = type.toLowerCase();

  if (arguments.length > 1) {
    projections[type] = create(type, proj);
    return this;
  } else {
    return projections[type] || null;
  }
}

function getProjectionPath(proj) {
  return proj && proj.path || defaultPath;
}

var projections = {
  // base d3-geo projection types
  albers: _d3Geo.geoAlbers,
  albersusa: _d3Geo.geoAlbersUsa,
  azimuthalequalarea: _d3Geo.geoAzimuthalEqualArea,
  azimuthalequidistant: _d3Geo.geoAzimuthalEquidistant,
  conicconformal: _d3Geo.geoConicConformal,
  conicequalarea: _d3Geo.geoConicEqualArea,
  conicequidistant: _d3Geo.geoConicEquidistant,
  equalEarth: _d3Geo.geoEqualEarth,
  equirectangular: _d3Geo.geoEquirectangular,
  gnomonic: _d3Geo.geoGnomonic,
  identity: _d3Geo.geoIdentity,
  mercator: _d3Geo.geoMercator,
  naturalEarth1: _d3Geo.geoNaturalEarth1,
  orthographic: _d3Geo.geoOrthographic,
  stereographic: _d3Geo.geoStereographic,
  transversemercator: _d3Geo.geoTransverseMercator
};

for (var key in projections) {
  projection(key, projections[key]);
}
},{"d3-geo":"node_modules/d3-geo/src/index.js"}],"node_modules/vega-projection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "projection", {
  enumerable: true,
  get: function () {
    return _projections.projection;
  }
});
Object.defineProperty(exports, "projectionProperties", {
  enumerable: true,
  get: function () {
    return _projections.projectionProperties;
  }
});
Object.defineProperty(exports, "getProjectionPath", {
  enumerable: true,
  get: function () {
    return _projections.getProjectionPath;
  }
});

var _projections = require("./src/projections");
},{"./src/projections":"node_modules/vega-projection/src/projections.js"}],"node_modules/vega-geo/src/GeoPath.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = GeoPath;

var _vegaDataflow = require("vega-dataflow");

var _vegaProjection = require("vega-projection");

var _vegaUtil = require("vega-util");

/**
 * Map GeoJSON data to an SVG path string.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(number, number): *} params.projection - The cartographic
 *   projection to apply.
 * @param {function(object): *} [params.field] - The field with GeoJSON data,
 *   or null if the tuple itself is a GeoJSON feature.
 * @param {string} [params.as='path'] - The output field in which to store
 *   the generated path data (default 'path').
 */
function GeoPath(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

GeoPath.Definition = {
  "type": "GeoPath",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "projection",
    "type": "projection"
  }, {
    "name": "field",
    "type": "field"
  }, {
    "name": "pointRadius",
    "type": "number",
    "expr": true
  }, {
    "name": "as",
    "type": "string",
    "default": "path"
  }]
};
var prototype = (0, _vegaUtil.inherits)(GeoPath, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.ALL),
      path = this.value,
      field = _.field || _vegaUtil.identity,
      as = _.as || 'path',
      flag = out.SOURCE;

  function set(t) {
    t[as] = path(field(t));
  }

  if (!path || _.modified()) {
    // parameters updated, reset and reflow
    this.value = path = (0, _vegaProjection.getProjectionPath)(_.projection);
    out.materialize().reflow();
  } else {
    flag = field === _vegaUtil.identity || pulse.modified(field.fields) ? out.ADD_MOD : out.ADD;
  }

  var prev = initPath(path, _.pointRadius);
  out.visit(flag, set);
  path.pointRadius(prev);
  return out.modifies(as);
};

function initPath(path, pointRadius) {
  var prev = path.pointRadius();
  path.context(null);

  if (pointRadius != null) {
    path.pointRadius(pointRadius);
  }

  return prev;
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-projection":"node_modules/vega-projection/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-geo/src/GeoPoint.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = GeoPoint;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Geo-code a longitude/latitude point to an x/y coordinate.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(number, number): *} params.projection - The cartographic
 *   projection to apply.
 * @param {Array<function(object): *>} params.fields - A two-element array of
 *   field accessors for the longitude and latitude values.
 * @param {Array<string>} [params.as] - A two-element array of field names
 *   under which to store the result. Defaults to ['x','y'].
 */
function GeoPoint(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

GeoPoint.Definition = {
  "type": "GeoPoint",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "projection",
    "type": "projection",
    "required": true
  }, {
    "name": "fields",
    "type": "field",
    "array": true,
    "required": true,
    "length": 2
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": ["x", "y"]
  }]
};
var prototype = (0, _vegaUtil.inherits)(GeoPoint, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var proj = _.projection,
      lon = _.fields[0],
      lat = _.fields[1],
      as = _.as || ['x', 'y'],
      x = as[0],
      y = as[1],
      mod;

  function set(t) {
    var xy = proj([lon(t), lat(t)]);

    if (xy) {
      t[x] = xy[0];
      t[y] = xy[1];
    } else {
      t[x] = undefined;
      t[y] = undefined;
    }
  }

  if (_.modified()) {
    // parameters updated, reflow
    pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);
  } else {
    mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);
    pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);
  }

  return pulse.modifies(as);
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-geo/src/GeoShape.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = GeoShape;

var _vegaDataflow = require("vega-dataflow");

var _vegaProjection = require("vega-projection");

var _vegaUtil = require("vega-util");

/**
 * Annotate items with a geopath shape generator.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(number, number): *} params.projection - The cartographic
 *   projection to apply.
 * @param {function(object): *} [params.field] - The field with GeoJSON data,
 *   or null if the tuple itself is a GeoJSON feature.
 * @param {string} [params.as='shape'] - The output field in which to store
 *   the generated path data (default 'shape').
 */
function GeoShape(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

GeoShape.Definition = {
  "type": "GeoShape",
  "metadata": {
    "modifies": true,
    "nomod": true
  },
  "params": [{
    "name": "projection",
    "type": "projection"
  }, {
    "name": "field",
    "type": "field",
    "default": "datum"
  }, {
    "name": "pointRadius",
    "type": "number",
    "expr": true
  }, {
    "name": "as",
    "type": "string",
    "default": "shape"
  }]
};
var prototype = (0, _vegaUtil.inherits)(GeoShape, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.ALL),
      shape = this.value,
      as = _.as || 'shape',
      flag = out.ADD;

  if (!shape || _.modified()) {
    // parameters updated, reset and reflow
    this.value = shape = shapeGenerator((0, _vegaProjection.getProjectionPath)(_.projection), _.field || (0, _vegaUtil.field)('datum'), _.pointRadius);
    out.materialize().reflow();
    flag = out.SOURCE;
  }

  out.visit(flag, function (t) {
    t[as] = shape;
  });
  return out.modifies(as);
};

function shapeGenerator(path, field, pointRadius) {
  var shape = pointRadius == null ? function (_) {
    return path(field(_));
  } : function (_) {
    var prev = path.pointRadius(),
        value = path.pointRadius(pointRadius)(field(_));
    path.pointRadius(prev);
    return value;
  };

  shape.context = function (_) {
    path.context(_);
    return shape;
  };

  return shape;
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-projection":"node_modules/vega-projection/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-geo/src/Graticule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Graticule;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _d3Geo = require("d3-geo");

/**
 * GeoJSON feature generator for creating graticules.
 * @constructor
 */
function Graticule(params) {
  _vegaDataflow.Transform.call(this, [], params);

  this.generator = (0, _d3Geo.geoGraticule)();
}

Graticule.Definition = {
  "type": "Graticule",
  "metadata": {
    "changes": true,
    "generates": true
  },
  "params": [{
    "name": "extent",
    "type": "array",
    "array": true,
    "length": 2,
    "content": {
      "type": "number",
      "array": true,
      "length": 2
    }
  }, {
    "name": "extentMajor",
    "type": "array",
    "array": true,
    "length": 2,
    "content": {
      "type": "number",
      "array": true,
      "length": 2
    }
  }, {
    "name": "extentMinor",
    "type": "array",
    "array": true,
    "length": 2,
    "content": {
      "type": "number",
      "array": true,
      "length": 2
    }
  }, {
    "name": "step",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "stepMajor",
    "type": "number",
    "array": true,
    "length": 2,
    "default": [90, 360]
  }, {
    "name": "stepMinor",
    "type": "number",
    "array": true,
    "length": 2,
    "default": [10, 10]
  }, {
    "name": "precision",
    "type": "number",
    "default": 2.5
  }]
};
var prototype = (0, _vegaUtil.inherits)(Graticule, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var src = this.value,
      gen = this.generator,
      t;

  if (!src.length || _.modified()) {
    for (var prop in _) {
      if ((0, _vegaUtil.isFunction)(gen[prop])) {
        gen[prop](_[prop]);
      }
    }
  }

  t = gen();

  if (src.length) {
    pulse.mod.push((0, _vegaDataflow.replace)(src[0], t));
  } else {
    pulse.add.push((0, _vegaDataflow.ingest)(t));
  }

  src[0] = t;
  return pulse;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","d3-geo":"node_modules/d3-geo/src/index.js"}],"node_modules/vega-geo/src/Projection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Projection;
exports.collectGeoJSON = collectGeoJSON;

var _constants = require("./constants");

var _vegaDataflow = require("vega-dataflow");

var _vegaProjection = require("vega-projection");

var _vegaUtil = require("vega-util");

/**
 * Maintains a cartographic projection.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */
function Projection(params) {
  _vegaDataflow.Transform.call(this, null, params);

  this.modified(true); // always treat as modified
}

var prototype = (0, _vegaUtil.inherits)(Projection, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var proj = this.value;

  if (!proj || _.modified('type')) {
    this.value = proj = create(_.type);

    _vegaProjection.projectionProperties.forEach(function (prop) {
      if (_[prop] != null) set(proj, prop, _[prop]);
    });
  } else {
    _vegaProjection.projectionProperties.forEach(function (prop) {
      if (_.modified(prop)) set(proj, prop, _[prop]);
    });
  }

  if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);
  if (_.fit) fit(proj, _);
  return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
};

function fit(proj, _) {
  var data = collectGeoJSON(_.fit);
  _.extent ? proj.fitExtent(_.extent, data) : _.size ? proj.fitSize(_.size, data) : 0;
}

function create(type) {
  var constructor = (0, _vegaProjection.projection)((type || 'mercator').toLowerCase());
  if (!constructor) (0, _vegaUtil.error)('Unrecognized projection type: ' + type);
  return constructor();
}

function set(proj, key, value) {
  if ((0, _vegaUtil.isFunction)(proj[key])) proj[key](value);
}

function collectGeoJSON(data) {
  data = (0, _vegaUtil.array)(data);
  return data.length === 1 ? data[0] : {
    type: _constants.FeatureCollection,
    features: data.reduce((a, f) => a.concat(featurize(f)), [])
  };
}

function featurize(f) {
  return f.type === _constants.FeatureCollection ? f.features : (0, _vegaUtil.array)(f).filter(d => d != null).map(d => d.type === _constants.Feature ? d : {
    type: _constants.Feature,
    geometry: d
  });
}
},{"./constants":"node_modules/vega-geo/src/constants.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-projection":"node_modules/vega-projection/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-geo/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "contour", {
  enumerable: true,
  get: function () {
    return _Contour.default;
  }
});
Object.defineProperty(exports, "geojson", {
  enumerable: true,
  get: function () {
    return _GeoJSON.default;
  }
});
Object.defineProperty(exports, "geopath", {
  enumerable: true,
  get: function () {
    return _GeoPath.default;
  }
});
Object.defineProperty(exports, "geopoint", {
  enumerable: true,
  get: function () {
    return _GeoPoint.default;
  }
});
Object.defineProperty(exports, "geoshape", {
  enumerable: true,
  get: function () {
    return _GeoShape.default;
  }
});
Object.defineProperty(exports, "graticule", {
  enumerable: true,
  get: function () {
    return _Graticule.default;
  }
});
Object.defineProperty(exports, "projection", {
  enumerable: true,
  get: function () {
    return _Projection.default;
  }
});

var _Contour = _interopRequireDefault(require("./src/Contour"));

var _GeoJSON = _interopRequireDefault(require("./src/GeoJSON"));

var _GeoPath = _interopRequireDefault(require("./src/GeoPath"));

var _GeoPoint = _interopRequireDefault(require("./src/GeoPoint"));

var _GeoShape = _interopRequireDefault(require("./src/GeoShape"));

var _Graticule = _interopRequireDefault(require("./src/Graticule"));

var _Projection = _interopRequireDefault(require("./src/Projection"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/Contour":"node_modules/vega-geo/src/Contour.js","./src/GeoJSON":"node_modules/vega-geo/src/GeoJSON.js","./src/GeoPath":"node_modules/vega-geo/src/GeoPath.js","./src/GeoPoint":"node_modules/vega-geo/src/GeoPoint.js","./src/GeoShape":"node_modules/vega-geo/src/GeoShape.js","./src/Graticule":"node_modules/vega-geo/src/Graticule.js","./src/Projection":"node_modules/vega-geo/src/Projection.js"}],"node_modules/d3-force/src/center.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  var nodes;
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force() {
    var i,
        n = nodes.length,
        node,
        sx = 0,
        sy = 0;

    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }

    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }

  force.initialize = function (_) {
    nodes = _;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}
},{}],"node_modules/d3-quadtree/src/add.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.addAll = addAll;

function _default(d) {
  var x = +this._x.call(null, d),
      y = +this._y.call(null, d);
  return add(this.cover(x, y), x, y, d);
}

function add(tree, x, y, d) {
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

  var parent,
      node = tree._root,
      leaf = {
    data: d
  },
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return tree._root = leaf, tree; // Find the existing leaf for the new point, or add it.

  while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
  } // Is the new point is exactly coincident with the existing point?


  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree; // Otherwise, split the leaf node until the old and new point are separated.

  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));

  return parent[j] = node, parent[i] = leaf, tree;
}

function addAll(data) {
  var d,
      i,
      n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity; // Compute the points and their extent.

  for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  } // If there were no (valid) points, abort.


  if (x0 > x1 || y0 > y1) return this; // Expand the tree to cover the new points.

  this.cover(x0, y0).cover(x1, y1); // Add the new points.

  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }

  return this;
}
},{}],"node_modules/d3-quadtree/src/cover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

  var x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1; // If the quadtree has no extent, initialize them.
  // Integer extent are necessary so that if we later double the extent,
  // the existing quadrant boundaries don’t change due to floating point error!

  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
  } // Otherwise, double repeatedly to cover.
  else {
      var z = x1 - x0,
          node = this._root,
          parent,
          i;

      while (x0 > x || x >= x1 || y0 > y || y >= y1) {
        i = (y < y0) << 1 | x < x0;
        parent = new Array(4), parent[i] = node, node = parent, z *= 2;

        switch (i) {
          case 0:
            x1 = x0 + z, y1 = y0 + z;
            break;

          case 1:
            x0 = x1 - z, y1 = y0 + z;
            break;

          case 2:
            x1 = x0 + z, y0 = y1 - z;
            break;

          case 3:
            x0 = x1 - z, y0 = y1 - z;
            break;
        }
      }

      if (this._root && this._root.length) this._root = node;
    }

  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}
},{}],"node_modules/d3-quadtree/src/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var data = [];
  this.visit(function (node) {
    if (!node.length) do data.push(node.data); while (node = node.next);
  });
  return data;
}
},{}],"node_modules/d3-quadtree/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
}
},{}],"node_modules/d3-quadtree/src/quad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}
},{}],"node_modules/d3-quadtree/src/find.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i;
  if (node) quads.push(new _quad.default(node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {
    // Stop searching if this quadrant can’t contain a closer node.
    if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue; // Bisect the current quadrant.

    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;
      quads.push(new _quad.default(node[3], xm, ym, x2, y2), new _quad.default(node[2], x1, ym, xm, y2), new _quad.default(node[1], xm, y1, x2, ym), new _quad.default(node[0], x1, y1, xm, ym)); // Visit the closest quadrant first.

      if (i = (y >= ym) << 1 | x >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } // Visit this point. (Visiting coincident points isn’t necessary!)
    else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            d2 = dx * dx + dy * dy;

        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x - d, y0 = y - d;
          x3 = x + d, y3 = y + d;
          data = node.data;
        }
      }
  }

  return data;
}
},{"./quad":"node_modules/d3-quadtree/src/quad.js"}],"node_modules/d3-quadtree/src/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.removeAll = removeAll;

function _default(d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return this; // Find the leaf node for the point.
  // While descending, also retain the deepest parent with a non-removed sibling.

  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
  } // Find the point to remove.

  while (node.data !== d) if (!(previous = node, node = node.next)) return this;

  if (next = node.next) delete node.next; // If there are multiple coincident points, remove just the point.

  if (previous) return next ? previous.next = next : delete previous.next, this; // If this is the root point, remove it.

  if (!parent) return this._root = next, this; // Remove this leaf.

  next ? parent[i] = next : delete parent[i]; // If the parent now contains exactly one leaf, collapse superfluous parents.

  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer) retainer[j] = node;else this._root = node;
  }

  return this;
}

function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);

  return this;
}
},{}],"node_modules/d3-quadtree/src/root.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return this._root;
}
},{}],"node_modules/d3-quadtree/src/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.visit(function (node) {
    if (!node.length) do ++size; while (node = node.next);
  });
  return size;
}
},{}],"node_modules/d3-quadtree/src/visit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(callback) {
  var quads = [],
      q,
      node = this._root,
      child,
      x0,
      y0,
      x1,
      y1;
  if (node) quads.push(new _quad.default(node, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[3]) quads.push(new _quad.default(child, xm, ym, x1, y1));
      if (child = node[2]) quads.push(new _quad.default(child, x0, ym, xm, y1));
      if (child = node[1]) quads.push(new _quad.default(child, xm, y0, x1, ym));
      if (child = node[0]) quads.push(new _quad.default(child, x0, y0, xm, ym));
    }
  }

  return this;
}
},{"./quad":"node_modules/d3-quadtree/src/quad.js"}],"node_modules/d3-quadtree/src/visitAfter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(callback) {
  var quads = [],
      next = [],
      q;
  if (this._root) quads.push(new _quad.default(this._root, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    var node = q.node;

    if (node.length) {
      var child,
          x0 = q.x0,
          y0 = q.y0,
          x1 = q.x1,
          y1 = q.y1,
          xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[0]) quads.push(new _quad.default(child, x0, y0, xm, ym));
      if (child = node[1]) quads.push(new _quad.default(child, xm, y0, x1, ym));
      if (child = node[2]) quads.push(new _quad.default(child, x0, ym, xm, y1));
      if (child = node[3]) quads.push(new _quad.default(child, xm, ym, x1, y1));
    }

    next.push(q);
  }

  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }

  return this;
}
},{"./quad":"node_modules/d3-quadtree/src/quad.js"}],"node_modules/d3-quadtree/src/x.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultX = defaultX;
exports.default = _default;

function defaultX(d) {
  return d[0];
}

function _default(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}
},{}],"node_modules/d3-quadtree/src/y.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultY = defaultY;
exports.default = _default;

function defaultY(d) {
  return d[1];
}

function _default(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}
},{}],"node_modules/d3-quadtree/src/quadtree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quadtree;

var _add = _interopRequireWildcard(require("./add"));

var _cover = _interopRequireDefault(require("./cover"));

var _data = _interopRequireDefault(require("./data"));

var _extent = _interopRequireDefault(require("./extent"));

var _find = _interopRequireDefault(require("./find"));

var _remove = _interopRequireWildcard(require("./remove"));

var _root = _interopRequireDefault(require("./root"));

var _size = _interopRequireDefault(require("./size"));

var _visit = _interopRequireDefault(require("./visit"));

var _visitAfter = _interopRequireDefault(require("./visitAfter"));

var _x = _interopRequireWildcard(require("./x"));

var _y = _interopRequireWildcard(require("./y"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function quadtree(nodes, x, y) {
  var tree = new Quadtree(x == null ? _x.defaultX : x, y == null ? _y.defaultY : y, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}

function Quadtree(x, y, x0, y0, x1, y1) {
  this._x = x;
  this._y = y;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = undefined;
}

function leaf_copy(leaf) {
  var copy = {
    data: leaf.data
  },
      next = copy;

  while (leaf = leaf.next) next = next.next = {
    data: leaf.data
  };

  return copy;
}

var treeProto = quadtree.prototype = Quadtree.prototype;

treeProto.copy = function () {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child;
  if (!node) return copy;
  if (!node.length) return copy._root = leaf_copy(node), copy;
  nodes = [{
    source: node,
    target: copy._root = new Array(4)
  }];

  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length) nodes.push({
          source: child,
          target: node.target[i] = new Array(4)
        });else node.target[i] = leaf_copy(child);
      }
    }
  }

  return copy;
};

treeProto.add = _add.default;
treeProto.addAll = _add.addAll;
treeProto.cover = _cover.default;
treeProto.data = _data.default;
treeProto.extent = _extent.default;
treeProto.find = _find.default;
treeProto.remove = _remove.default;
treeProto.removeAll = _remove.removeAll;
treeProto.root = _root.default;
treeProto.size = _size.default;
treeProto.visit = _visit.default;
treeProto.visitAfter = _visitAfter.default;
treeProto.x = _x.default;
treeProto.y = _y.default;
},{"./add":"node_modules/d3-quadtree/src/add.js","./cover":"node_modules/d3-quadtree/src/cover.js","./data":"node_modules/d3-quadtree/src/data.js","./extent":"node_modules/d3-quadtree/src/extent.js","./find":"node_modules/d3-quadtree/src/find.js","./remove":"node_modules/d3-quadtree/src/remove.js","./root":"node_modules/d3-quadtree/src/root.js","./size":"node_modules/d3-quadtree/src/size.js","./visit":"node_modules/d3-quadtree/src/visit.js","./visitAfter":"node_modules/d3-quadtree/src/visitAfter.js","./x":"node_modules/d3-quadtree/src/x.js","./y":"node_modules/d3-quadtree/src/y.js"}],"node_modules/d3-quadtree/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "quadtree", {
  enumerable: true,
  get: function () {
    return _quadtree.default;
  }
});

var _quadtree = _interopRequireDefault(require("./quadtree"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./quadtree":"node_modules/d3-quadtree/src/quadtree.js"}],"node_modules/d3-force/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-force/src/jiggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return (Math.random() - 0.5) * 1e-6;
}
},{}],"node_modules/d3-force/src/collide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Quadtree = require("d3-quadtree");

var _constant = _interopRequireDefault(require("./constant.js"));

var _jiggle = _interopRequireDefault(require("./jiggle.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function x(d) {
  return d.x + d.vx;
}

function y(d) {
  return d.y + d.vy;
}

function _default(radius) {
  var nodes,
      radii,
      strength = 1,
      iterations = 1;
  if (typeof radius !== "function") radius = (0, _constant.default)(radius == null ? 1 : +radius);

  function force() {
    var i,
        n = nodes.length,
        tree,
        node,
        xi,
        yi,
        ri,
        ri2;

    for (var k = 0; k < iterations; ++k) {
      tree = (0, _d3Quadtree.quadtree)(nodes, x, y).visitAfter(prepare);

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }

    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data,
          rj = quad.r,
          r = ri + rj;

      if (data) {
        if (data.index > node.index) {
          var x = xi - data.x - data.vx,
              y = yi - data.y - data.vy,
              l = x * x + y * y;

          if (l < r * r) {
            if (x === 0) x = (0, _jiggle.default)(), l += x * x;
            if (y === 0) y = (0, _jiggle.default)(), l += y * y;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y *= l) * r;
            data.vx -= x * (r = 1 - r);
            data.vy -= y * r;
          }
        }

        return;
      }

      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }

  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];

    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    radii = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : radius;
  };

  return force;
}
},{"d3-quadtree":"node_modules/d3-quadtree/src/index.js","./constant.js":"node_modules/d3-force/src/constant.js","./jiggle.js":"node_modules/d3-force/src/jiggle.js"}],"node_modules/d3-force/src/link.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant.js"));

var _jiggle = _interopRequireDefault(require("./jiggle.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function index(d) {
  return d.index;
}

function find(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("missing: " + nodeId);
  return node;
}

function _default(links) {
  var id = index,
      strength = defaultStrength,
      strengths,
      distance = (0, _constant.default)(30),
      distances,
      nodes,
      count,
      bias,
      iterations = 1;
  if (links == null) links = [];

  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }

  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x = target.x + target.vx - source.x - source.vx || (0, _jiggle.default)();
        y = target.y + target.vy - source.y - source.vy || (0, _jiggle.default)();
        l = Math.sqrt(x * x + y * y);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x *= l, y *= l;
        target.vx -= x * (b = bias[i]);
        target.vy -= y * b;
        source.vx += x * (b = 1 - b);
        source.vy += y * b;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        m = links.length,
        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),
        link;

    for (i = 0, count = new Array(n); i < m; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }

    for (i = 0, bias = new Array(m); i < m; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }

    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }

  function initializeStrength() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }

  function initializeDistance() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.links = function (_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };

  force.id = function (_) {
    return arguments.length ? (id = _, force) : id;
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initializeStrength(), force) : strength;
  };

  force.distance = function (_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : (0, _constant.default)(+_), initializeDistance(), force) : distance;
  };

  return force;
}
},{"./constant.js":"node_modules/d3-force/src/constant.js","./jiggle.js":"node_modules/d3-force/src/jiggle.js"}],"node_modules/d3-dispatch/src/dispatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var noop = {
  value: function () {}
};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _) throw new Error("illegal type: " + t);
    _[t] = [];
  }

  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {
      type: t,
      name: name
    };
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function (typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length; // If no callback was specified, return the callback of the given type and name.

    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;

      return;
    } // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.


    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function () {
    var copy = {},
        _ = this._;

    for (var t in _) copy[t] = _[t].slice();

    return new Dispatch(copy);
  },
  call: function (type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function (type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }

  if (callback != null) type.push({
    name: name,
    value: callback
  });
  return type;
}

var _default = dispatch;
exports.default = _default;
},{}],"node_modules/d3-dispatch/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dispatch", {
  enumerable: true,
  get: function () {
    return _dispatch.default;
  }
});

var _dispatch = _interopRequireDefault(require("./dispatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./dispatch":"node_modules/d3-dispatch/src/dispatch.js"}],"node_modules/d3-timer/src/timer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.now = now;
exports.Timer = Timer;
exports.timer = timer;
exports.timerFlush = timerFlush;
var frame = 0,
    // is an animation frame pending?
timeout = 0,
    // is a timeout pending?
interval = 0,
    // are any timers active?
pokeDelay = 1000,
    // how frequently we check for clock skew
taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
  setTimeout(f, 17);
};

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call = this._time = this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function (callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;else taskHead = this;
      taskTail = this;
    }

    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function () {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.

  ++frame; // Pretend we’ve set an alarm, if we haven’t already.

  var t = taskHead,
      e;

  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }

  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;

  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(),
      delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0,
      t1 = taskHead,
      t2,
      time = Infinity;

  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }

  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.

  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
},{}],"node_modules/d3-timer/src/timeout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer");

function _default(callback, delay, time) {
  var t = new _timer.Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(function (elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}
},{"./timer":"node_modules/d3-timer/src/timer.js"}],"node_modules/d3-timer/src/interval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer");

function _default(callback, delay, time) {
  var t = new _timer.Timer(),
      total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? (0, _timer.now)() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
}
},{"./timer":"node_modules/d3-timer/src/timer.js"}],"node_modules/d3-timer/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "now", {
  enumerable: true,
  get: function () {
    return _timer.now;
  }
});
Object.defineProperty(exports, "timer", {
  enumerable: true,
  get: function () {
    return _timer.timer;
  }
});
Object.defineProperty(exports, "timerFlush", {
  enumerable: true,
  get: function () {
    return _timer.timerFlush;
  }
});
Object.defineProperty(exports, "timeout", {
  enumerable: true,
  get: function () {
    return _timeout.default;
  }
});
Object.defineProperty(exports, "interval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});

var _timer = require("./timer");

var _timeout = _interopRequireDefault(require("./timeout"));

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./timer":"node_modules/d3-timer/src/timer.js","./timeout":"node_modules/d3-timer/src/timeout.js","./interval":"node_modules/d3-timer/src/interval.js"}],"node_modules/d3-force/src/simulation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Timer = require("d3-timer");

function x(d) {
  return d.x;
}

function y(d) {
  return d.y;
}

var initialRadius = 10,
    initialAngle = Math.PI * (3 - Math.sqrt(5));

function _default(nodes) {
  var simulation,
      alpha = 1,
      alphaMin = 0.001,
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
      alphaTarget = 0,
      velocityDecay = 0.6,
      forces = new Map(),
      stepper = (0, _d3Timer.timer)(step),
      event = (0, _d3Dispatch.dispatch)("tick", "end");
  if (nodes == null) nodes = [];

  function step() {
    tick();
    event.call("tick", simulation);

    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }

  function tick(iterations) {
    var i,
        n = nodes.length,
        node;
    if (iterations === undefined) iterations = 1;

    for (var k = 0; k < iterations; ++k) {
      alpha += (alphaTarget - alpha) * alphaDecay;
      forces.forEach(function (force) {
        force(alpha);
      });

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null) node.x += node.vx *= velocityDecay;else node.x = node.fx, node.vx = 0;
        if (node.fy == null) node.y += node.vy *= velocityDecay;else node.y = node.fy, node.vy = 0;
      }
    }

    return simulation;
  }

  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null) node.x = node.fx;
      if (node.fy != null) node.y = node.fy;

      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(i),
            angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }

      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }

  function initializeForce(force) {
    if (force.initialize) force.initialize(nodes);
    return force;
  }

  initializeNodes();
  return simulation = {
    tick: tick,
    restart: function () {
      return stepper.restart(step), simulation;
    },
    stop: function () {
      return stepper.stop(), simulation;
    },
    nodes: function (_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
    },
    alpha: function (_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },
    alphaMin: function (_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },
    alphaDecay: function (_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },
    alphaTarget: function (_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },
    velocityDecay: function (_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },
    force: function (name, _) {
      return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function (x, y, radius) {
      var i = 0,
          n = nodes.length,
          dx,
          dy,
          d2,
          node,
          closest;
      if (radius == null) radius = Infinity;else radius *= radius;

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x - node.x;
        dy = y - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }

      return closest;
    },
    on: function (name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}
},{"d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-timer":"node_modules/d3-timer/src/index.js"}],"node_modules/d3-force/src/manyBody.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Quadtree = require("d3-quadtree");

var _constant = _interopRequireDefault(require("./constant.js"));

var _jiggle = _interopRequireDefault(require("./jiggle.js"));

var _simulation = require("./simulation.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var nodes,
      node,
      alpha,
      strength = (0, _constant.default)(-30),
      strengths,
      distanceMin2 = 1,
      distanceMax2 = Infinity,
      theta2 = 0.81;

  function force(_) {
    var i,
        n = nodes.length,
        tree = (0, _d3Quadtree.quadtree)(nodes, _simulation.x, _simulation.y).visitAfter(accumulate);

    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    strengths = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
  }

  function accumulate(quad) {
    var strength = 0,
        q,
        c,
        weight = 0,
        x,
        y,
        i; // For internal nodes, accumulate forces from child quadrants.

    if (quad.length) {
      for (x = y = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c = Math.abs(q.value))) {
          strength += q.value, weight += c, x += c * q.x, y += c * q.y;
        }
      }

      quad.x = x / weight;
      quad.y = y / weight;
    } // For leaf nodes, accumulate forces from coincident quadrants.
    else {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;

        do strength += strengths[q.data.index]; while (q = q.next);
      }

    quad.value = strength;
  }

  function apply(quad, x1, _, x2) {
    if (!quad.value) return true;
    var x = quad.x - node.x,
        y = quad.y - node.y,
        w = x2 - x1,
        l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.
    // Limit forces for very close nodes; randomize direction if coincident.

    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x === 0) x = (0, _jiggle.default)(), l += x * x;
        if (y === 0) y = (0, _jiggle.default)(), l += y * y;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        node.vx += x * quad.value * alpha / l;
        node.vy += y * quad.value * alpha / l;
      }

      return true;
    } // Otherwise, process points directly.
    else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.


    if (quad.data !== node || quad.next) {
      if (x === 0) x = (0, _jiggle.default)(), l += x * x;
      if (y === 0) y = (0, _jiggle.default)(), l += y * y;
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
    }

    do if (quad.data !== node) {
      w = strengths[quad.data.index] * alpha / l;
      node.vx += x * w;
      node.vy += y * w;
    } while (quad = quad.next);
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.distanceMin = function (_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };

  force.distanceMax = function (_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };

  force.theta = function (_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };

  return force;
}
},{"d3-quadtree":"node_modules/d3-quadtree/src/index.js","./constant.js":"node_modules/d3-force/src/constant.js","./jiggle.js":"node_modules/d3-force/src/jiggle.js","./simulation.js":"node_modules/d3-force/src/simulation.js"}],"node_modules/d3-force/src/radial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(radius, x, y) {
  var nodes,
      strength = (0, _constant.default)(0.1),
      strengths,
      radiuses;
  if (typeof radius !== "function") radius = (0, _constant.default)(+radius);
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force(alpha) {
    for (var i = 0, n = nodes.length; i < n; ++i) {
      var node = nodes[i],
          dx = node.x - x || 1e-6,
          dy = node.y - y || 1e-6,
          r = Math.sqrt(dx * dx + dy * dy),
          k = (radiuses[i] - r) * strengths[i] * alpha / r;
      node.vx += dx * k;
      node.vy += dy * k;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    radiuses = new Array(n);

    for (i = 0; i < n; ++i) {
      radiuses[i] = +radius(nodes[i], i, nodes);
      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _, initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : radius;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}
},{"./constant.js":"node_modules/d3-force/src/constant.js"}],"node_modules/d3-force/src/x.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x) {
  var strength = (0, _constant.default)(0.1),
      nodes,
      strengths,
      xz;
  if (typeof x !== "function") x = (0, _constant.default)(x == null ? 0 : +x);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : x;
  };

  return force;
}
},{"./constant.js":"node_modules/d3-force/src/constant.js"}],"node_modules/d3-force/src/y.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(y) {
  var strength = (0, _constant.default)(0.1),
      nodes,
      strengths,
      yz;
  if (typeof y !== "function") y = (0, _constant.default)(y == null ? 0 : +y);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : y;
  };

  return force;
}
},{"./constant.js":"node_modules/d3-force/src/constant.js"}],"node_modules/d3-force/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "forceCenter", {
  enumerable: true,
  get: function () {
    return _center.default;
  }
});
Object.defineProperty(exports, "forceCollide", {
  enumerable: true,
  get: function () {
    return _collide.default;
  }
});
Object.defineProperty(exports, "forceLink", {
  enumerable: true,
  get: function () {
    return _link.default;
  }
});
Object.defineProperty(exports, "forceManyBody", {
  enumerable: true,
  get: function () {
    return _manyBody.default;
  }
});
Object.defineProperty(exports, "forceRadial", {
  enumerable: true,
  get: function () {
    return _radial.default;
  }
});
Object.defineProperty(exports, "forceSimulation", {
  enumerable: true,
  get: function () {
    return _simulation.default;
  }
});
Object.defineProperty(exports, "forceX", {
  enumerable: true,
  get: function () {
    return _x.default;
  }
});
Object.defineProperty(exports, "forceY", {
  enumerable: true,
  get: function () {
    return _y.default;
  }
});

var _center = _interopRequireDefault(require("./center"));

var _collide = _interopRequireDefault(require("./collide"));

var _link = _interopRequireDefault(require("./link"));

var _manyBody = _interopRequireDefault(require("./manyBody"));

var _radial = _interopRequireDefault(require("./radial"));

var _simulation = _interopRequireDefault(require("./simulation"));

var _x = _interopRequireDefault(require("./x"));

var _y = _interopRequireDefault(require("./y"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./center":"node_modules/d3-force/src/center.js","./collide":"node_modules/d3-force/src/collide.js","./link":"node_modules/d3-force/src/link.js","./manyBody":"node_modules/d3-force/src/manyBody.js","./radial":"node_modules/d3-force/src/radial.js","./simulation":"node_modules/d3-force/src/simulation.js","./x":"node_modules/d3-force/src/x.js","./y":"node_modules/d3-force/src/y.js"}],"node_modules/vega-force/src/Force.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Force;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _d3Force = require("d3-force");

var ForceMap = {
  center: _d3Force.forceCenter,
  collide: _d3Force.forceCollide,
  nbody: _d3Force.forceManyBody,
  link: _d3Force.forceLink,
  x: _d3Force.forceX,
  y: _d3Force.forceY
};
var Forces = 'forces',
    ForceParams = ['alpha', 'alphaMin', 'alphaTarget', 'velocityDecay', 'forces'],
    ForceConfig = ['static', 'iterations'],
    ForceOutput = ['x', 'y', 'vx', 'vy'];
/**
 * Force simulation layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<object>} params.forces - The forces to apply.
 */

function Force(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Force.Definition = {
  "type": "Force",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "static",
    "type": "boolean",
    "default": false
  }, {
    "name": "restart",
    "type": "boolean",
    "default": false
  }, {
    "name": "iterations",
    "type": "number",
    "default": 300
  }, {
    "name": "alpha",
    "type": "number",
    "default": 1
  }, {
    "name": "alphaMin",
    "type": "number",
    "default": 0.001
  }, {
    "name": "alphaTarget",
    "type": "number",
    "default": 0
  }, {
    "name": "velocityDecay",
    "type": "number",
    "default": 0.4
  }, {
    "name": "forces",
    "type": "param",
    "array": true,
    "params": [{
      "key": {
        "force": "center"
      },
      "params": [{
        "name": "x",
        "type": "number",
        "default": 0
      }, {
        "name": "y",
        "type": "number",
        "default": 0
      }]
    }, {
      "key": {
        "force": "collide"
      },
      "params": [{
        "name": "radius",
        "type": "number",
        "expr": true
      }, {
        "name": "strength",
        "type": "number",
        "default": 0.7
      }, {
        "name": "iterations",
        "type": "number",
        "default": 1
      }]
    }, {
      "key": {
        "force": "nbody"
      },
      "params": [{
        "name": "strength",
        "type": "number",
        "default": -30
      }, {
        "name": "theta",
        "type": "number",
        "default": 0.9
      }, {
        "name": "distanceMin",
        "type": "number",
        "default": 1
      }, {
        "name": "distanceMax",
        "type": "number"
      }]
    }, {
      "key": {
        "force": "link"
      },
      "params": [{
        "name": "links",
        "type": "data"
      }, {
        "name": "id",
        "type": "field"
      }, {
        "name": "distance",
        "type": "number",
        "default": 30,
        "expr": true
      }, {
        "name": "strength",
        "type": "number",
        "expr": true
      }, {
        "name": "iterations",
        "type": "number",
        "default": 1
      }]
    }, {
      "key": {
        "force": "x"
      },
      "params": [{
        "name": "strength",
        "type": "number",
        "default": 0.1
      }, {
        "name": "x",
        "type": "field"
      }]
    }, {
      "key": {
        "force": "y"
      },
      "params": [{
        "name": "strength",
        "type": "number",
        "default": 0.1
      }, {
        "name": "y",
        "type": "field"
      }]
    }]
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "modify": false,
    "default": ForceOutput
  }]
};
var prototype = (0, _vegaUtil.inherits)(Force, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var sim = this.value,
      change = pulse.changed(pulse.ADD_REM),
      params = _.modified(ForceParams),
      iters = _.iterations || 300; // configure simulation


  if (!sim) {
    this.value = sim = simulation(pulse.source, _);
    sim.on('tick', rerun(pulse.dataflow, this));

    if (!_.static) {
      change = true;
      sim.tick(); // ensure we run on init
    }

    pulse.modifies('index');
  } else {
    if (change) {
      pulse.modifies('index');
      sim.nodes(pulse.source);
    }

    if (params || pulse.changed(pulse.MOD)) {
      setup(sim, _, 0, pulse);
    }
  } // run simulation


  if (params || change || _.modified(ForceConfig) || pulse.changed() && _.restart) {
    sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));

    if (_.static) {
      for (sim.stop(); --iters >= 0;) sim.tick();
    } else {
      if (sim.stopped()) sim.restart();
      if (!change) return pulse.StopPropagation; // defer to sim ticks
    }
  }

  return this.finish(_, pulse);
};

prototype.finish = function (_, pulse) {
  var dataflow = pulse.dataflow; // inspect dependencies, touch link source data

  for (var args = this._argops, j = 0, m = args.length, arg; j < m; ++j) {
    arg = args[j];

    if (arg.name !== Forces || arg.op._argval.force !== 'link') {
      continue;
    }

    for (var ops = arg.op._argops, i = 0, n = ops.length, op; i < n; ++i) {
      if (ops[i].name === 'links' && (op = ops[i].op.source)) {
        dataflow.pulse(op, dataflow.changeset().reflow());
        break;
      }
    }
  } // reflow all nodes


  return pulse.reflow(_.modified()).modifies(ForceOutput);
};

function rerun(df, op) {
  return function () {
    df.touch(op).run();
  };
}

function simulation(nodes, _) {
  var sim = (0, _d3Force.forceSimulation)(nodes),
      stopped = false,
      stop = sim.stop,
      restart = sim.restart;

  sim.stopped = function () {
    return stopped;
  };

  sim.restart = function () {
    stopped = false;
    return restart();
  };

  sim.stop = function () {
    stopped = true;
    return stop();
  };

  return setup(sim, _, true).on('end', function () {
    stopped = true;
  });
}

function setup(sim, _, init, pulse) {
  var f = (0, _vegaUtil.array)(_.forces),
      i,
      n,
      p,
      name;

  for (i = 0, n = ForceParams.length; i < n; ++i) {
    p = ForceParams[i];
    if (p !== Forces && _.modified(p)) sim[p](_[p]);
  }

  for (i = 0, n = f.length; i < n; ++i) {
    name = Forces + i;
    p = init || _.modified(Forces, i) ? getForce(f[i]) : pulse && modified(f[i], pulse) ? sim.force(name) : null;
    if (p) sim.force(name, p);
  }

  for (n = sim.numForces || 0; i < n; ++i) {
    sim.force(Forces + i, null); // remove
  }

  sim.numForces = f.length;
  return sim;
}

function modified(f, pulse) {
  var k, v;

  for (k in f) {
    if ((0, _vegaUtil.isFunction)(v = f[k]) && pulse.modified((0, _vegaUtil.accessorFields)(v))) return 1;
  }

  return 0;
}

function getForce(_) {
  var f, p;

  if (!(0, _vegaUtil.hasOwnProperty)(ForceMap, _.force)) {
    (0, _vegaUtil.error)('Unrecognized force: ' + _.force);
  }

  f = ForceMap[_.force]();

  for (p in _) {
    if ((0, _vegaUtil.isFunction)(f[p])) setForceParam(f[p], _[p], _);
  }

  return f;
}

function setForceParam(f, v, _) {
  f((0, _vegaUtil.isFunction)(v) ? function (d) {
    return v(d, _);
  } : v);
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","d3-force":"node_modules/d3-force/src/index.js"}],"node_modules/vega-force/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "force", {
  enumerable: true,
  get: function () {
    return _Force.default;
  }
});

var _Force = _interopRequireDefault(require("./src/Force"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/Force":"node_modules/vega-force/src/Force.js"}],"node_modules/vega-hierarchy/src/lookup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Build lookup table mapping tuple keys to tree node instances
function _default(tree, key, filter) {
  var map = {};
  tree.each(function (node) {
    var t = node.data;
    if (filter(t)) map[key(t)] = node;
  });
  tree.lookup = map;
  return tree;
}
},{}],"node_modules/d3-hierarchy/src/cluster.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;

  while (children = node.children) node = children[0];

  return node;
}

function leafRight(node) {
  var children;

  while (children = node.children) node = children[children.length - 1];

  return node;
}

function _default() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0; // First walk, computing the initial x & y values.

    root.eachAfter(function (node) {
      var children = node.children;

      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });
    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2; // Second walk, normalizing x & y to the desired size.

    return root.eachAfter(nodeSize ? function (node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function (node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function (x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];
  };

  cluster.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;
  };

  return cluster;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/count.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;else while (--i >= 0) sum += children[i].value;
  node.value = sum;
}

function _default() {
  return this.eachAfter(count);
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/each.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      current,
      next = [node],
      children,
      i,
      n;

  do {
    current = next.reverse(), next = [];

    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        next.push(children[i]);
      }
    }
  } while (next.length);

  return this;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/eachBefore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      nodes = [node],
      children,
      i;

  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children) for (i = children.length - 1; i >= 0; --i) {
      nodes.push(children[i]);
    }
  }

  return this;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/eachAfter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      nodes = [node],
      next = [],
      children,
      i,
      n;

  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children) for (i = 0, n = children.length; i < n; ++i) {
      nodes.push(children[i]);
    }
  }

  while (node = next.pop()) {
    callback(node);
  }

  return this;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return this.eachAfter(function (node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;

    while (--i >= 0) sum += children[i].value;

    node.value = sum;
  });
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(compare) {
  return this.eachBefore(function (node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];

  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }

  var k = nodes.length;

  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }

  return nodes;
}

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();

  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }

  return c;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/ancestors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var node = this,
      nodes = [node];

  while (node = node.parent) {
    nodes.push(node);
  }

  return nodes;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/descendants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = [];
  this.each(function (node) {
    nodes.push(node);
  });
  return nodes;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/leaves.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var leaves = [];
  this.eachBefore(function (node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/links.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var root = this,
      links = [];
  root.each(function (node) {
    if (node !== root) {
      // Don’t include the root’s parent, if any.
      links.push({
        source: node.parent,
        target: node
      });
    }
  });
  return links;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hierarchy;
exports.computeHeight = computeHeight;
exports.Node = Node;

var _count = _interopRequireDefault(require("./count"));

var _each = _interopRequireDefault(require("./each"));

var _eachBefore = _interopRequireDefault(require("./eachBefore"));

var _eachAfter = _interopRequireDefault(require("./eachAfter"));

var _sum = _interopRequireDefault(require("./sum"));

var _sort = _interopRequireDefault(require("./sort"));

var _path = _interopRequireDefault(require("./path"));

var _ancestors = _interopRequireDefault(require("./ancestors"));

var _descendants = _interopRequireDefault(require("./descendants"));

var _leaves = _interopRequireDefault(require("./leaves"));

var _links = _interopRequireDefault(require("./links"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hierarchy(data, children) {
  var root = new Node(data),
      valued = +data.value && (root.value = data.value),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;
  if (children == null) children = defaultChildren;

  while (node = nodes.pop()) {
    if (valued) node.value = +node.data.value;

    if ((childs = children(node.data)) && (n = childs.length)) {
      node.children = new Array(n);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function defaultChildren(d) {
  return d.children;
}

function copyData(node) {
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;

  do node.height = height; while ((node = node.parent) && node.height < ++height);
}

function Node(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}

Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: _count.default,
  each: _each.default,
  eachAfter: _eachAfter.default,
  eachBefore: _eachBefore.default,
  sum: _sum.default,
  sort: _sort.default,
  path: _path.default,
  ancestors: _ancestors.default,
  descendants: _descendants.default,
  leaves: _leaves.default,
  links: _links.default,
  copy: node_copy
};
},{"./count":"node_modules/d3-hierarchy/src/hierarchy/count.js","./each":"node_modules/d3-hierarchy/src/hierarchy/each.js","./eachBefore":"node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","./eachAfter":"node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","./sum":"node_modules/d3-hierarchy/src/hierarchy/sum.js","./sort":"node_modules/d3-hierarchy/src/hierarchy/sort.js","./path":"node_modules/d3-hierarchy/src/hierarchy/path.js","./ancestors":"node_modules/d3-hierarchy/src/hierarchy/ancestors.js","./descendants":"node_modules/d3-hierarchy/src/hierarchy/descendants.js","./leaves":"node_modules/d3-hierarchy/src/hierarchy/leaves.js","./links":"node_modules/d3-hierarchy/src/hierarchy/links.js"}],"node_modules/d3-hierarchy/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffle = shuffle;
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;

function shuffle(array) {
  var m = array.length,
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m];
    array[m] = array[i];
    array[i] = t;
  }

  return array;
}
},{}],"node_modules/d3-hierarchy/src/pack/enclose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array");

function _default(circles) {
  var i = 0,
      n = (circles = (0, _array.shuffle)(_array.slice.call(circles))).length,
      B = [],
      p,
      e;

  while (i < n) {
    p = circles[i];
    if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;
  }

  return e;
}

function extendBasis(B, p) {
  var i, j;
  if (enclosesWeakAll(p, B)) return [p]; // If we get here then B must have at least one element.

  for (i = 0; i < B.length; ++i) {
    if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
      return [B[i], p];
    }
  } // If we get here then B must have at least two elements.


  for (i = 0; i < B.length - 1; ++i) {
    for (j = i + 1; j < B.length; ++j) {
      if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
        return [B[i], B[j], p];
      }
    }
  } // If we get here then something is very wrong.


  throw new Error();
}

function enclosesNot(a, b) {
  var dr = a.r - b.r,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}

function enclosesWeak(a, b) {
  var dr = a.r - b.r + 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function enclosesWeakAll(a, B) {
  for (var i = 0; i < B.length; ++i) {
    if (!enclosesWeak(a, B[i])) {
      return false;
    }
  }

  return true;
}

function encloseBasis(B) {
  switch (B.length) {
    case 1:
      return encloseBasis1(B[0]);

    case 2:
      return encloseBasis2(B[0], B[1]);

    case 3:
      return encloseBasis3(B[0], B[1], B[2]);
  }
}

function encloseBasis1(a) {
  return {
    x: a.x,
    y: a.y,
    r: a.r
  };
}

function encloseBasis2(a, b) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x21 = x2 - x1,
      y21 = y2 - y1,
      r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}

function encloseBasis3(a, b, c) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x3 = c.x,
      y3 = c.y,
      r3 = c.r,
      a2 = x1 - x2,
      a3 = x1 - x3,
      b2 = y1 - y2,
      b3 = y1 - y3,
      c2 = r2 - r1,
      c3 = r3 - r1,
      d1 = x1 * x1 + y1 * y1 - r1 * r1,
      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (r1 + xa * xb + ya * yb),
      C = xa * xa + ya * ya - r1 * r1,
      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
  return {
    x: x1 + xa + xb * r,
    y: y1 + ya + yb * r,
    r: r
  };
}
},{"../array":"node_modules/d3-hierarchy/src/array.js"}],"node_modules/d3-hierarchy/src/pack/siblings.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packEnclose = packEnclose;
exports.default = _default;

var _enclose = _interopRequireDefault(require("./enclose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function place(b, a, c) {
  var dx = b.x - a.x,
      x,
      a2,
      dy = b.y - a.y,
      y,
      b2,
      d2 = dx * dx + dy * dy;

  if (d2) {
    a2 = a.r + c.r, a2 *= a2;
    b2 = b.r + c.r, b2 *= b2;

    if (a2 > b2) {
      x = (d2 + b2 - a2) / (2 * d2);
      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
      c.x = b.x - x * dx - y * dy;
      c.y = b.y - x * dy + y * dx;
    } else {
      x = (d2 + a2 - b2) / (2 * d2);
      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
      c.x = a.x + x * dx - y * dy;
      c.y = a.y + x * dy + y * dx;
    }
  } else {
    c.x = a.x + c.r;
    c.y = a.y;
  }
}

function intersects(a, b) {
  var dr = a.r + b.r - 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function score(node) {
  var a = node._,
      b = node.next._,
      ab = a.r + b.r,
      dx = (a.x * b.r + b.x * a.r) / ab,
      dy = (a.y * b.r + b.y * a.r) / ab;
  return dx * dx + dy * dy;
}

function Node(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}

function packEnclose(circles) {
  if (!(n = circles.length)) return 0;
  var a, b, c, n, aa, ca, i, j, k, sj, sk; // Place the first circle.

  a = circles[0], a.x = 0, a.y = 0;
  if (!(n > 1)) return a.r; // Place the second circle.

  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
  if (!(n > 2)) return a.r + b.r; // Place the third circle.

  place(b, a, c = circles[2]); // Initialize the front-chain using the first three circles a, b and c.

  a = new Node(a), b = new Node(b), c = new Node(c);
  a.next = c.previous = b;
  b.next = a.previous = c;
  c.next = b.previous = a; // Attempt to place each remaining circle…

  pack: for (i = 3; i < n; ++i) {
    place(a._, b._, c = circles[i]), c = new Node(c); // Find the closest intersecting circle on the front-chain, if any.
    // “Closeness” is determined by linear distance along the front-chain.
    // “Ahead” or “behind” is likewise determined by linear distance.

    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;

    do {
      if (sj <= sk) {
        if (intersects(j._, c._)) {
          b = j, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sj += j._.r, j = j.next;
      } else {
        if (intersects(k._, c._)) {
          a = k, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sk += k._.r, k = k.previous;
      }
    } while (j !== k.next); // Success! Insert the new circle c between a and b.


    c.previous = a, c.next = b, a.next = b.previous = b = c; // Compute the new closest circle pair to the centroid.

    aa = score(a);

    while ((c = c.next) !== b) {
      if ((ca = score(c)) < aa) {
        a = c, aa = ca;
      }
    }

    b = a.next;
  } // Compute the enclosing circle of the front chain.


  a = [b._], c = b;

  while ((c = c.next) !== b) a.push(c._);

  c = (0, _enclose.default)(a); // Translate the circles to put the enclosing circle around the origin.

  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

  return c.r;
}

function _default(circles) {
  packEnclose(circles);
  return circles;
}
},{"./enclose":"node_modules/d3-hierarchy/src/pack/enclose.js"}],"node_modules/d3-hierarchy/src/accessors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.optional = optional;
exports.required = required;

function optional(f) {
  return f == null ? null : required(f);
}

function required(f) {
  if (typeof f !== "function") throw new Error();
  return f;
}
},{}],"node_modules/d3-hierarchy/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constantZero = constantZero;
exports.default = _default;

function constantZero() {
  return 0;
}

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-hierarchy/src/pack/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _siblings = require("./siblings");

var _accessors = require("../accessors");

var _constant = _interopRequireWildcard(require("../constant"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function defaultRadius(d) {
  return Math.sqrt(d.value);
}

function _default() {
  var radius = null,
      dx = 1,
      dy = 1,
      padding = _constant.constantZero;

  function pack(root) {
    root.x = dx / 2, root.y = dy / 2;

    if (radius) {
      root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(_constant.constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }

    return root;
  }

  pack.radius = function (x) {
    return arguments.length ? (radius = (0, _accessors.optional)(x), pack) : radius;
  };

  pack.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
  };

  pack.padding = function (x) {
    return arguments.length ? (padding = typeof x === "function" ? x : (0, _constant.default)(+x), pack) : padding;
  };

  return pack;
}

function radiusLeaf(radius) {
  return function (node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}

function packChildren(padding, k) {
  return function (node) {
    if (children = node.children) {
      var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e;
      if (r) for (i = 0; i < n; ++i) children[i].r += r;
      e = (0, _siblings.packEnclose)(children);
      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
      node.r = e + r;
    }
  };
}

function translateChild(k) {
  return function (node) {
    var parent = node.parent;
    node.r *= k;

    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}
},{"./siblings":"node_modules/d3-hierarchy/src/pack/siblings.js","../accessors":"node_modules/d3-hierarchy/src/accessors.js","../constant":"node_modules/d3-hierarchy/src/constant.js"}],"node_modules/d3-hierarchy/src/treemap/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}
},{}],"node_modules/d3-hierarchy/src/treemap/dice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
}
},{}],"node_modules/d3-hierarchy/src/partition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _round = _interopRequireDefault(require("./treemap/round"));

var _dice = _interopRequireDefault(require("./treemap/dice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var dx = 1,
      dy = 1,
      padding = 0,
      round = false;

  function partition(root) {
    var n = root.height + 1;
    root.x0 = root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round) root.eachBefore(_round.default);
    return root;
  }

  function positionNode(dy, n) {
    return function (node) {
      if (node.children) {
        (0, _dice.default)(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
      }

      var x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }

  partition.round = function (x) {
    return arguments.length ? (round = !!x, partition) : round;
  };

  partition.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
  };

  partition.padding = function (x) {
    return arguments.length ? (padding = +x, partition) : padding;
  };

  return partition;
}
},{"./treemap/round":"node_modules/d3-hierarchy/src/treemap/round.js","./treemap/dice":"node_modules/d3-hierarchy/src/treemap/dice.js"}],"node_modules/d3-hierarchy/src/stratify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _accessors = require("./accessors");

var _index = require("./hierarchy/index");

var keyPrefix = "$",
    // Protect against keys like “__proto__”.
preroot = {
  depth: -1
},
    ambiguous = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

function _default() {
  var id = defaultId,
      parentId = defaultParentId;

  function stratify(data) {
    var d,
        i,
        n = data.length,
        root,
        parent,
        node,
        nodes = new Array(n),
        nodeId,
        nodeKey,
        nodeByKey = {};

    for (i = 0; i < n; ++i) {
      d = data[i], node = nodes[i] = new _index.Node(d);

      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
        nodeKey = keyPrefix + (node.id = nodeId);
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i], nodeId = parentId(data[i], i, data);

      if (nodeId == null || !(nodeId += "")) {
        if (root) throw new Error("multiple roots");
        root = node;
      } else {
        parent = nodeByKey[keyPrefix + nodeId];
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);else parent.children = [node];
        node.parent = parent;
      }
    }

    if (!root) throw new Error("no root");
    root.parent = preroot;
    root.eachBefore(function (node) {
      node.depth = node.parent.depth + 1;
      --n;
    }).eachBefore(_index.computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");
    return root;
  }

  stratify.id = function (x) {
    return arguments.length ? (id = (0, _accessors.required)(x), stratify) : id;
  };

  stratify.parentId = function (x) {
    return arguments.length ? (parentId = (0, _accessors.required)(x), stratify) : parentId;
  };

  return stratify;
}
},{"./accessors":"node_modules/d3-hierarchy/src/accessors.js","./hierarchy/index":"node_modules/d3-hierarchy/src/hierarchy/index.js"}],"node_modules/d3-hierarchy/src/tree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./hierarchy/index");

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
} // function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }
// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.


function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
} // This function works analogously to nextLeft.


function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
} // Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.


function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
} // All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).


function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;

  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
} // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.


function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor

  this.a = this; // ancestor

  this.z = 0; // prelim

  this.m = 0; // mod

  this.c = 0; // change

  this.s = 0; // shift

  this.t = null; // thread

  this.i = i; // number
}

TreeNode.prototype = Object.create(_index.Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
} // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm


function _default() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root); // Compute the layout using Buchheim et al.’s algorithm.

    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk); // If a fixed node size is specified, scale x and y.

    if (nodeSize) root.eachBefore(sizeNode); // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
        var left = root,
            right = root,
            bottom = root;
        root.eachBefore(function (node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var s = left === right ? 1 : separation(left, right) / 2,
            tx = s - left.x,
            kx = dx / (right.x + s + tx),
            ky = dy / (bottom.depth || 1);
        root.eachBefore(function (node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
    return root;
  } // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.


  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;

    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;

      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }

    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  } // Computes all real x-coordinates by summing up the modifiers recursively.


  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  } // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).


  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;

      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);

        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }

        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }

      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }

      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }

    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function (x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];
  };

  tree.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;
  };

  return tree;
}
},{"./hierarchy/index":"node_modules/d3-hierarchy/src/hierarchy/index.js"}],"node_modules/d3-hierarchy/src/treemap/slice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
}
},{}],"node_modules/d3-hierarchy/src/treemap/squarify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squarifyRatio = squarifyRatio;
exports.default = exports.phi = void 0;

var _dice = _interopRequireDefault(require("./dice"));

var _slice = _interopRequireDefault(require("./slice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var phi = (1 + Math.sqrt(5)) / 2;
exports.phi = phi;

function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1 = 0,
      n = nodes.length,
      dx,
      dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta;

  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.

    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);

    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.

    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);

      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }

      minRatio = newRatio;
    } // Position and record the row orientation.


    rows.push(row = {
      value: sumValue,
      dice: dx < dy,
      children: nodes.slice(i0, i1)
    });
    if (row.dice) (0, _dice.default)(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else (0, _slice.default)(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }

  return rows;
}

var _default = function custom(ratio) {
  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }

  squarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return squarify;
}(phi);

exports.default = _default;
},{"./dice":"node_modules/d3-hierarchy/src/treemap/dice.js","./slice":"node_modules/d3-hierarchy/src/treemap/slice.js"}],"node_modules/d3-hierarchy/src/treemap/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _round = _interopRequireDefault(require("./round"));

var _squarify = _interopRequireDefault(require("./squarify"));

var _accessors = require("../accessors");

var _constant = _interopRequireWildcard(require("../constant"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var tile = _squarify.default,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = _constant.constantZero,
      paddingTop = _constant.constantZero,
      paddingRight = _constant.constantZero,
      paddingBottom = _constant.constantZero,
      paddingLeft = _constant.constantZero;

  function treemap(root) {
    root.x0 = root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root.eachBefore(_round.default);
    return root;
  }

  function positionNode(node) {
    var p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p;
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;

    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }

  treemap.round = function (x) {
    return arguments.length ? (round = !!x, treemap) : round;
  };

  treemap.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
  };

  treemap.tile = function (x) {
    return arguments.length ? (tile = (0, _accessors.required)(x), treemap) : tile;
  };

  treemap.padding = function (x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
  };

  treemap.paddingInner = function (x) {
    return arguments.length ? (paddingInner = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingInner;
  };

  treemap.paddingOuter = function (x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };

  treemap.paddingTop = function (x) {
    return arguments.length ? (paddingTop = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingTop;
  };

  treemap.paddingRight = function (x) {
    return arguments.length ? (paddingRight = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingRight;
  };

  treemap.paddingBottom = function (x) {
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingBottom;
  };

  treemap.paddingLeft = function (x) {
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingLeft;
  };

  return treemap;
}
},{"./round":"node_modules/d3-hierarchy/src/treemap/round.js","./squarify":"node_modules/d3-hierarchy/src/treemap/squarify.js","../accessors":"node_modules/d3-hierarchy/src/accessors.js","../constant":"node_modules/d3-hierarchy/src/constant.js"}],"node_modules/d3-hierarchy/src/treemap/binary.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      i,
      n = nodes.length,
      sum,
      sums = new Array(n + 1);

  for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
  }

  partition(0, n, parent.value, x0, y0, x1, y1);

  function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
      var node = nodes[i];
      node.x0 = x0, node.y0 = y0;
      node.x1 = x1, node.y1 = y1;
      return;
    }

    var valueOffset = sums[i],
        valueTarget = value / 2 + valueOffset,
        k = i + 1,
        hi = j - 1;

    while (k < hi) {
      var mid = k + hi >>> 1;
      if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;
    }

    if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;
    var valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft;

    if (x1 - x0 > y1 - y0) {
      var xk = (x0 * valueRight + x1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, xk, y1);
      partition(k, j, valueRight, xk, y0, x1, y1);
    } else {
      var yk = (y0 * valueRight + y1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, x1, yk);
      partition(k, j, valueRight, x0, yk, x1, y1);
    }
  }
}
},{}],"node_modules/d3-hierarchy/src/treemap/sliceDice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _dice = _interopRequireDefault(require("./dice"));

var _slice = _interopRequireDefault(require("./slice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(parent, x0, y0, x1, y1) {
  (parent.depth & 1 ? _slice.default : _dice.default)(parent, x0, y0, x1, y1);
}
},{"./dice":"node_modules/d3-hierarchy/src/treemap/dice.js","./slice":"node_modules/d3-hierarchy/src/treemap/slice.js"}],"node_modules/d3-hierarchy/src/treemap/resquarify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dice = _interopRequireDefault(require("./dice"));

var _slice = _interopRequireDefault(require("./slice"));

var _squarify = require("./squarify");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function custom(ratio) {
  function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && rows.ratio === ratio) {
      var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value;

      while (++j < m) {
        row = rows[j], nodes = row.children;

        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;

        if (row.dice) (0, _dice.default)(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);else (0, _slice.default)(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = (0, _squarify.squarifyRatio)(ratio, parent, x0, y0, x1, y1);
      rows.ratio = ratio;
    }
  }

  resquarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return resquarify;
}(_squarify.phi);

exports.default = _default;
},{"./dice":"node_modules/d3-hierarchy/src/treemap/dice.js","./slice":"node_modules/d3-hierarchy/src/treemap/slice.js","./squarify":"node_modules/d3-hierarchy/src/treemap/squarify.js"}],"node_modules/d3-hierarchy/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "cluster", {
  enumerable: true,
  get: function () {
    return _cluster.default;
  }
});
Object.defineProperty(exports, "hierarchy", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "pack", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "packSiblings", {
  enumerable: true,
  get: function () {
    return _siblings.default;
  }
});
Object.defineProperty(exports, "packEnclose", {
  enumerable: true,
  get: function () {
    return _enclose.default;
  }
});
Object.defineProperty(exports, "partition", {
  enumerable: true,
  get: function () {
    return _partition.default;
  }
});
Object.defineProperty(exports, "stratify", {
  enumerable: true,
  get: function () {
    return _stratify.default;
  }
});
Object.defineProperty(exports, "tree", {
  enumerable: true,
  get: function () {
    return _tree.default;
  }
});
Object.defineProperty(exports, "treemap", {
  enumerable: true,
  get: function () {
    return _index3.default;
  }
});
Object.defineProperty(exports, "treemapBinary", {
  enumerable: true,
  get: function () {
    return _binary.default;
  }
});
Object.defineProperty(exports, "treemapDice", {
  enumerable: true,
  get: function () {
    return _dice.default;
  }
});
Object.defineProperty(exports, "treemapSlice", {
  enumerable: true,
  get: function () {
    return _slice.default;
  }
});
Object.defineProperty(exports, "treemapSliceDice", {
  enumerable: true,
  get: function () {
    return _sliceDice.default;
  }
});
Object.defineProperty(exports, "treemapSquarify", {
  enumerable: true,
  get: function () {
    return _squarify.default;
  }
});
Object.defineProperty(exports, "treemapResquarify", {
  enumerable: true,
  get: function () {
    return _resquarify.default;
  }
});

var _cluster = _interopRequireDefault(require("./cluster"));

var _index = _interopRequireDefault(require("./hierarchy/index"));

var _index2 = _interopRequireDefault(require("./pack/index"));

var _siblings = _interopRequireDefault(require("./pack/siblings"));

var _enclose = _interopRequireDefault(require("./pack/enclose"));

var _partition = _interopRequireDefault(require("./partition"));

var _stratify = _interopRequireDefault(require("./stratify"));

var _tree = _interopRequireDefault(require("./tree"));

var _index3 = _interopRequireDefault(require("./treemap/index"));

var _binary = _interopRequireDefault(require("./treemap/binary"));

var _dice = _interopRequireDefault(require("./treemap/dice"));

var _slice = _interopRequireDefault(require("./treemap/slice"));

var _sliceDice = _interopRequireDefault(require("./treemap/sliceDice"));

var _squarify = _interopRequireDefault(require("./treemap/squarify"));

var _resquarify = _interopRequireDefault(require("./treemap/resquarify"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./cluster":"node_modules/d3-hierarchy/src/cluster.js","./hierarchy/index":"node_modules/d3-hierarchy/src/hierarchy/index.js","./pack/index":"node_modules/d3-hierarchy/src/pack/index.js","./pack/siblings":"node_modules/d3-hierarchy/src/pack/siblings.js","./pack/enclose":"node_modules/d3-hierarchy/src/pack/enclose.js","./partition":"node_modules/d3-hierarchy/src/partition.js","./stratify":"node_modules/d3-hierarchy/src/stratify.js","./tree":"node_modules/d3-hierarchy/src/tree.js","./treemap/index":"node_modules/d3-hierarchy/src/treemap/index.js","./treemap/binary":"node_modules/d3-hierarchy/src/treemap/binary.js","./treemap/dice":"node_modules/d3-hierarchy/src/treemap/dice.js","./treemap/slice":"node_modules/d3-hierarchy/src/treemap/slice.js","./treemap/sliceDice":"node_modules/d3-hierarchy/src/treemap/sliceDice.js","./treemap/squarify":"node_modules/d3-hierarchy/src/treemap/squarify.js","./treemap/resquarify":"node_modules/d3-hierarchy/src/treemap/resquarify.js"}],"node_modules/vega-hierarchy/src/Nest.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Nest;

var _lookup = _interopRequireDefault(require("./lookup"));

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _d3Hierarchy = require("d3-hierarchy");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Nest tuples into a tree structure, grouped by key values.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.
 * @param {boolean} [params.generate=false] - A boolean flag indicating if
 *   non-leaf nodes generated by this transform should be included in the
 *   output. The default (false) includes only the input data (leaf nodes)
 *   in the data stream.
 */
function Nest(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Nest.Definition = {
  "type": "Nest",
  "metadata": {
    "treesource": true,
    "changes": true
  },
  "params": [{
    "name": "keys",
    "type": "field",
    "array": true
  }, {
    "name": "generate",
    "type": "boolean"
  }]
};
var prototype = (0, _vegaUtil.inherits)(Nest, _vegaDataflow.Transform);

function children(n) {
  return n.values;
}

prototype.transform = function (_, pulse) {
  if (!pulse.source) {
    (0, _vegaUtil.error)('Nest transform requires an upstream data source.');
  }

  var gen = _.generate,
      mod = _.modified(),
      out = pulse.clone(),
      tree = this.value;

  if (!tree || mod || pulse.changed()) {
    // collect nodes to remove
    if (tree) {
      tree.each(node => {
        if (node.children && (0, _vegaDataflow.isTuple)(node.data)) {
          out.rem.push(node.data);
        }
      });
    } // generate new tree structure


    this.value = tree = (0, _d3Hierarchy.hierarchy)({
      values: (0, _vegaUtil.array)(_.keys).reduce((n, k) => {
        n.key(k);
        return n;
      }, nest()).entries(out.source)
    }, children); // collect nodes to add

    if (gen) {
      tree.each(node => {
        if (node.children) {
          node = (0, _vegaDataflow.ingest)(node.data);
          out.add.push(node);
          out.source.push(node);
        }
      });
    } // build lookup table


    (0, _lookup.default)(tree, _vegaDataflow.tupleid, _vegaDataflow.tupleid);
  }

  out.source.root = tree;
  return out;
};

function nest() {
  var keys = [],
      nest;

  function apply(array, depth) {
    if (depth >= keys.length) {
      return array;
    }

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = {},
        values,
        result = {};

    while (++i < n) {
      keyValue = key(value = array[i]) + '';

      if (values = valuesByKey[keyValue]) {
        values.push(value);
      } else {
        valuesByKey[keyValue] = [value];
      }
    }

    for (keyValue in valuesByKey) {
      result[keyValue] = apply(valuesByKey[keyValue], depth);
    }

    return result;
  }

  function entries(map, depth) {
    if (++depth > keys.length) return map;
    var array = [],
        k;

    for (k in map) {
      array.push({
        key: k,
        values: entries(map[k], depth)
      });
    }

    return array;
  }

  return nest = {
    entries: array => entries(apply(array, 0), 0),
    key: d => {
      keys.push(d);
      return nest;
    }
  };
}
},{"./lookup":"node_modules/vega-hierarchy/src/lookup.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","d3-hierarchy":"node_modules/d3-hierarchy/src/index.js"}],"node_modules/vega-hierarchy/src/HierarchyLayout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HierarchyLayout;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Abstract class for tree layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */
function HierarchyLayout(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

var prototype = (0, _vegaUtil.inherits)(HierarchyLayout, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  if (!pulse.source || !pulse.source.root) {
    (0, _vegaUtil.error)(this.constructor.name + ' transform requires a backing tree data source.');
  }

  var layout = this.layout(_.method),
      fields = this.fields,
      root = pulse.source.root,
      as = _.as || fields;
  if (_.field) root.sum(_.field);else root.count();
  if (_.sort) root.sort((0, _vegaDataflow.stableCompare)(_.sort, d => d.data));
  setParams(layout, this.params, _);

  if (layout.separation) {
    layout.separation(_.separation !== false ? defaultSeparation : _vegaUtil.one);
  }

  try {
    this.value = layout(root);
  } catch (err) {
    (0, _vegaUtil.error)(err);
  }

  root.each(function (node) {
    setFields(node, fields, as);
  });
  return pulse.reflow(_.modified()).modifies(as).modifies('leaf');
};

function setParams(layout, params, _) {
  for (var p, i = 0, n = params.length; i < n; ++i) {
    p = params[i];
    if (p in _) layout[p](_[p]);
  }
}

function setFields(node, fields, as) {
  var t = node.data;

  for (var i = 0, n = fields.length - 1; i < n; ++i) {
    t[as[i]] = node[fields[i]];
  }

  t[as[n]] = node.children ? node.children.length : 0;
}

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-hierarchy/src/Pack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Pack;

var _HierarchyLayout = _interopRequireDefault(require("./HierarchyLayout"));

var _vegaUtil = require("vega-util");

var _d3Hierarchy = require("d3-hierarchy");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Output = ['x', 'y', 'r', 'depth', 'children'];
/**
 * Packed circle tree layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size nodes.
 */

function Pack(params) {
  _HierarchyLayout.default.call(this, params);
}

Pack.Definition = {
  "type": "Pack",
  "metadata": {
    "tree": true,
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "sort",
    "type": "compare"
  }, {
    "name": "padding",
    "type": "number",
    "default": 0
  }, {
    "name": "radius",
    "type": "field",
    "default": null
  }, {
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": Output.length,
    "default": Output
  }]
};
var prototype = (0, _vegaUtil.inherits)(Pack, _HierarchyLayout.default);
prototype.layout = _d3Hierarchy.pack;
prototype.params = ['radius', 'size', 'padding'];
prototype.fields = Output;
},{"./HierarchyLayout":"node_modules/vega-hierarchy/src/HierarchyLayout.js","vega-util":"node_modules/vega-util/index.js","d3-hierarchy":"node_modules/d3-hierarchy/src/index.js"}],"node_modules/vega-hierarchy/src/Partition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Partition;

var _HierarchyLayout = _interopRequireDefault(require("./HierarchyLayout"));

var _vegaUtil = require("vega-util");

var _d3Hierarchy = require("d3-hierarchy");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Output = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];
/**
 * Partition tree layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size nodes.
 */

function Partition(params) {
  _HierarchyLayout.default.call(this, params);
}

Partition.Definition = {
  "type": "Partition",
  "metadata": {
    "tree": true,
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "sort",
    "type": "compare"
  }, {
    "name": "padding",
    "type": "number",
    "default": 0
  }, {
    "name": "round",
    "type": "boolean",
    "default": false
  }, {
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": Output.length,
    "default": Output
  }]
};
var prototype = (0, _vegaUtil.inherits)(Partition, _HierarchyLayout.default);
prototype.layout = _d3Hierarchy.partition;
prototype.params = ['size', 'round', 'padding'];
prototype.fields = Output;
},{"./HierarchyLayout":"node_modules/vega-hierarchy/src/HierarchyLayout.js","vega-util":"node_modules/vega-util/index.js","d3-hierarchy":"node_modules/d3-hierarchy/src/index.js"}],"node_modules/vega-hierarchy/src/Stratify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Stratify;

var _lookup = _interopRequireDefault(require("./lookup"));

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _d3Hierarchy = require("d3-hierarchy");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Stratify a collection of tuples into a tree structure based on
 * id and parent id fields.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.key - Unique key field for each tuple.
 * @param {function(object): *} params.parentKey - Field with key for parent tuple.
 */
function Stratify(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Stratify.Definition = {
  "type": "Stratify",
  "metadata": {
    "treesource": true
  },
  "params": [{
    "name": "key",
    "type": "field",
    "required": true
  }, {
    "name": "parentKey",
    "type": "field",
    "required": true
  }]
};
var prototype = (0, _vegaUtil.inherits)(Stratify, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  if (!pulse.source) {
    (0, _vegaUtil.error)('Stratify transform requires an upstream data source.');
  }

  var tree = this.value,
      mod = _.modified(),
      out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),
      run = !this.value || mod || pulse.changed(pulse.ADD_REM) || pulse.modified(_.key.fields) || pulse.modified(_.parentKey.fields); // prevent upstream source pollution


  out.source = out.source.slice();

  if (run) {
    if (out.source.length) {
      tree = (0, _lookup.default)((0, _d3Hierarchy.stratify)().id(_.key).parentId(_.parentKey)(out.source), _.key, _vegaUtil.truthy);
    } else {
      tree = (0, _lookup.default)((0, _d3Hierarchy.stratify)()([{}]), _.key, _.key);
    }
  }

  out.source.root = this.value = tree;
  return out;
};
},{"./lookup":"node_modules/vega-hierarchy/src/lookup.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","d3-hierarchy":"node_modules/d3-hierarchy/src/index.js"}],"node_modules/vega-hierarchy/src/Tree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Tree;

var _HierarchyLayout = _interopRequireDefault(require("./HierarchyLayout"));

var _vegaUtil = require("vega-util");

var _d3Hierarchy = require("d3-hierarchy");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Layouts = {
  tidy: _d3Hierarchy.tree,
  cluster: _d3Hierarchy.cluster
};
var Output = ['x', 'y', 'depth', 'children'];
/**
 * Tree layout. Depending on the method parameter, performs either
 * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */

function Tree(params) {
  _HierarchyLayout.default.call(this, params);
}

Tree.Definition = {
  "type": "Tree",
  "metadata": {
    "tree": true,
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "sort",
    "type": "compare"
  }, {
    "name": "method",
    "type": "enum",
    "default": "tidy",
    "values": ["tidy", "cluster"]
  }, {
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "nodeSize",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "separation",
    "type": "boolean",
    "default": true
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": Output.length,
    "default": Output
  }]
};
var prototype = (0, _vegaUtil.inherits)(Tree, _HierarchyLayout.default);
/**
 * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.
 */

prototype.layout = function (method) {
  var m = method || 'tidy';
  if ((0, _vegaUtil.hasOwnProperty)(Layouts, m)) return Layouts[m]();else (0, _vegaUtil.error)('Unrecognized Tree layout method: ' + m);
};

prototype.params = ['size', 'nodeSize'];
prototype.fields = Output;
},{"./HierarchyLayout":"node_modules/vega-hierarchy/src/HierarchyLayout.js","vega-util":"node_modules/vega-util/index.js","d3-hierarchy":"node_modules/d3-hierarchy/src/index.js"}],"node_modules/vega-hierarchy/src/TreeLinks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TreeLinks;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Generate tuples representing links between tree nodes.
 * The resulting tuples will contain 'source' and 'target' fields,
 * which point to parent and child node tuples, respectively.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */
function TreeLinks(params) {
  _vegaDataflow.Transform.call(this, [], params);
}

TreeLinks.Definition = {
  "type": "TreeLinks",
  "metadata": {
    "tree": true,
    "generates": true,
    "changes": true
  },
  "params": []
};
var prototype = (0, _vegaUtil.inherits)(TreeLinks, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var links = this.value,
      tree = pulse.source && pulse.source.root,
      out = pulse.fork(pulse.NO_SOURCE),
      lut = {};
  if (!tree) (0, _vegaUtil.error)('TreeLinks transform requires a tree data source.');

  if (pulse.changed(pulse.ADD_REM)) {
    // remove previous links
    out.rem = links; // build lookup table of valid tuples

    pulse.visit(pulse.SOURCE, function (t) {
      lut[(0, _vegaDataflow.tupleid)(t)] = 1;
    }); // generate links for all edges incident on valid tuples

    tree.each(function (node) {
      var t = node.data,
          p = node.parent && node.parent.data;

      if (p && lut[(0, _vegaDataflow.tupleid)(t)] && lut[(0, _vegaDataflow.tupleid)(p)]) {
        out.add.push((0, _vegaDataflow.ingest)({
          source: p,
          target: t
        }));
      }
    });
    this.value = out.add;
  } else if (pulse.changed(pulse.MOD)) {
    // build lookup table of modified tuples
    pulse.visit(pulse.MOD, function (t) {
      lut[(0, _vegaDataflow.tupleid)(t)] = 1;
    }); // gather links incident on modified tuples

    links.forEach(function (link) {
      if (lut[(0, _vegaDataflow.tupleid)(link.source)] || lut[(0, _vegaDataflow.tupleid)(link.target)]) {
        out.mod.push(link);
      }
    });
  }

  return out;
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-hierarchy/src/Treemap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Treemap;

var _HierarchyLayout = _interopRequireDefault(require("./HierarchyLayout"));

var _vegaUtil = require("vega-util");

var _d3Hierarchy = require("d3-hierarchy");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Tiles = {
  binary: _d3Hierarchy.treemapBinary,
  dice: _d3Hierarchy.treemapDice,
  slice: _d3Hierarchy.treemapSlice,
  slicedice: _d3Hierarchy.treemapSliceDice,
  squarify: _d3Hierarchy.treemapSquarify,
  resquarify: _d3Hierarchy.treemapResquarify
};
var Output = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];
/**
 * Treemap layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size nodes.
 */

function Treemap(params) {
  _HierarchyLayout.default.call(this, params);
}

Treemap.Definition = {
  "type": "Treemap",
  "metadata": {
    "tree": true,
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "sort",
    "type": "compare"
  }, {
    "name": "method",
    "type": "enum",
    "default": "squarify",
    "values": ["squarify", "resquarify", "binary", "dice", "slice", "slicedice"]
  }, {
    "name": "padding",
    "type": "number",
    "default": 0
  }, {
    "name": "paddingInner",
    "type": "number",
    "default": 0
  }, {
    "name": "paddingOuter",
    "type": "number",
    "default": 0
  }, {
    "name": "paddingTop",
    "type": "number",
    "default": 0
  }, {
    "name": "paddingRight",
    "type": "number",
    "default": 0
  }, {
    "name": "paddingBottom",
    "type": "number",
    "default": 0
  }, {
    "name": "paddingLeft",
    "type": "number",
    "default": 0
  }, {
    "name": "ratio",
    "type": "number",
    "default": 1.618033988749895
  }, {
    "name": "round",
    "type": "boolean",
    "default": false
  }, {
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": Output.length,
    "default": Output
  }]
};
var prototype = (0, _vegaUtil.inherits)(Treemap, _HierarchyLayout.default);
/**
 * Treemap layout generator. Adds 'method' and 'ratio' parameters
 * to configure the underlying tile method.
 */

prototype.layout = function () {
  var x = (0, _d3Hierarchy.treemap)();

  x.ratio = function (_) {
    var t = x.tile();
    if (t.ratio) x.tile(t.ratio(_));
  };

  x.method = function (_) {
    if ((0, _vegaUtil.hasOwnProperty)(Tiles, _)) x.tile(Tiles[_]);else (0, _vegaUtil.error)('Unrecognized Treemap layout method: ' + _);
  };

  return x;
};

prototype.params = ['method', 'ratio', 'size', 'round', 'padding', 'paddingInner', 'paddingOuter', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'];
prototype.fields = Output;
},{"./HierarchyLayout":"node_modules/vega-hierarchy/src/HierarchyLayout.js","vega-util":"node_modules/vega-util/index.js","d3-hierarchy":"node_modules/d3-hierarchy/src/index.js"}],"node_modules/vega-hierarchy/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "nest", {
  enumerable: true,
  get: function () {
    return _Nest.default;
  }
});
Object.defineProperty(exports, "pack", {
  enumerable: true,
  get: function () {
    return _Pack.default;
  }
});
Object.defineProperty(exports, "partition", {
  enumerable: true,
  get: function () {
    return _Partition.default;
  }
});
Object.defineProperty(exports, "stratify", {
  enumerable: true,
  get: function () {
    return _Stratify.default;
  }
});
Object.defineProperty(exports, "tree", {
  enumerable: true,
  get: function () {
    return _Tree.default;
  }
});
Object.defineProperty(exports, "treelinks", {
  enumerable: true,
  get: function () {
    return _TreeLinks.default;
  }
});
Object.defineProperty(exports, "treemap", {
  enumerable: true,
  get: function () {
    return _Treemap.default;
  }
});

var _Nest = _interopRequireDefault(require("./src/Nest"));

var _Pack = _interopRequireDefault(require("./src/Pack"));

var _Partition = _interopRequireDefault(require("./src/Partition"));

var _Stratify = _interopRequireDefault(require("./src/Stratify"));

var _Tree = _interopRequireDefault(require("./src/Tree"));

var _TreeLinks = _interopRequireDefault(require("./src/TreeLinks"));

var _Treemap = _interopRequireDefault(require("./src/Treemap"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/Nest":"node_modules/vega-hierarchy/src/Nest.js","./src/Pack":"node_modules/vega-hierarchy/src/Pack.js","./src/Partition":"node_modules/vega-hierarchy/src/Partition.js","./src/Stratify":"node_modules/vega-hierarchy/src/Stratify.js","./src/Tree":"node_modules/vega-hierarchy/src/Tree.js","./src/TreeLinks":"node_modules/vega-hierarchy/src/TreeLinks.js","./src/Treemap":"node_modules/vega-hierarchy/src/Treemap.js"}],"node_modules/vega-regression/src/partition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(data, groupby) {
  var groups = [],
      get = function (f) {
    return f(t);
  },
      map,
      i,
      n,
      t,
      k,
      g; // partition data points into stack groups


  if (groupby == null) {
    groups.push(data);
  } else {
    for (map = {}, i = 0, n = data.length; i < n; ++i) {
      t = data[i];
      k = groupby.map(get);
      g = map[k];

      if (!g) {
        map[k] = g = [];
        g.dims = k;
        groups.push(g);
      }

      g.push(t);
    }
  }

  return groups;
}
},{}],"node_modules/vega-regression/src/Loess.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Loess;

var _partition = _interopRequireDefault(require("./partition"));

var _vegaStatistics = require("vega-statistics");

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Compute locally-weighted regression fits for one or more data groups.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.x - An accessor for the predictor data field.
 * @param {function(object): *} params.y - An accessor for the predicted data field.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {number} [params.bandwidth=0.3] - The loess bandwidth.
 */
function Loess(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Loess.Definition = {
  "type": "Loess",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "x",
    "type": "field",
    "required": true
  }, {
    "name": "y",
    "type": "field",
    "required": true
  }, {
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "bandwidth",
    "type": "number",
    "default": 0.3
  }, {
    "name": "as",
    "type": "string",
    "array": true
  }]
};
var prototype = (0, _vegaUtil.inherits)(Loess, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

  if (!this.value || pulse.changed() || _.modified()) {
    const source = pulse.materialize(pulse.SOURCE).source,
          groups = (0, _partition.default)(source, _.groupby),
          names = (_.groupby || []).map(_vegaUtil.accessorName),
          m = names.length,
          as = _.as || [(0, _vegaUtil.accessorName)(_.x), (0, _vegaUtil.accessorName)(_.y)],
          values = [];
    groups.forEach(g => {
      (0, _vegaStatistics.regressionLoess)(g, _.x, _.y, _.bandwidth || 0.3).forEach(p => {
        const t = {};

        for (let i = 0; i < m; ++i) {
          t[names[i]] = g.dims[i];
        }

        t[as[0]] = p[0];
        t[as[1]] = p[1];
        values.push((0, _vegaDataflow.ingest)(t));
      });
    });
    if (this.value) out.rem = this.value;
    this.value = out.add = out.source = values;
  }

  return out;
};
},{"./partition":"node_modules/vega-regression/src/partition.js","vega-statistics":"node_modules/vega-statistics/index.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-regression/src/Regression.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Regression;

var _partition = _interopRequireDefault(require("./partition"));

var _vegaDataflow = require("vega-dataflow");

var _vegaStatistics = require("vega-statistics");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Methods = {
  linear: _vegaStatistics.regressionLinear,
  log: _vegaStatistics.regressionLog,
  exp: _vegaStatistics.regressionExp,
  pow: _vegaStatistics.regressionPow,
  quad: _vegaStatistics.regressionQuad,
  poly: _vegaStatistics.regressionPoly
};

function degreesOfFreedom(method, order) {
  return method === 'poly' ? order : method === 'quad' ? 2 : 1;
}
/**
 * Compute regression fits for one or more data groups.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.x - An accessor for the predictor data field.
 * @param {function(object): *} params.y - An accessor for the predicted data field.
 * @param {string} [params.method='linear'] - The regression method to apply.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {Array<number>} [params.extent] - The domain extent over which to plot the regression line.
 * @param {number} [params.order=3] - The polynomial order. Only applies to the 'poly' method.
 */


function Regression(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Regression.Definition = {
  "type": "Regression",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "x",
    "type": "field",
    "required": true
  }, {
    "name": "y",
    "type": "field",
    "required": true
  }, {
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "method",
    "type": "string",
    "default": "linear",
    "values": Object.keys(Methods)
  }, {
    "name": "order",
    "type": "number",
    "default": 3
  }, {
    "name": "extent",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "params",
    "type": "boolean",
    "default": false
  }, {
    "name": "as",
    "type": "string",
    "array": true
  }]
};
var prototype = (0, _vegaUtil.inherits)(Regression, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

  if (!this.value || pulse.changed() || _.modified()) {
    const source = pulse.materialize(pulse.SOURCE).source,
          groups = (0, _partition.default)(source, _.groupby),
          names = (_.groupby || []).map(_vegaUtil.accessorName),
          method = _.method || 'linear',
          order = _.order || 3,
          dof = degreesOfFreedom(method, order),
          as = _.as || [(0, _vegaUtil.accessorName)(_.x), (0, _vegaUtil.accessorName)(_.y)],
          fit = Methods[method],
          values = [];
    let domain = _.extent;

    if (!(0, _vegaUtil.hasOwnProperty)(Methods, method)) {
      (0, _vegaUtil.error)('Invalid regression method: ' + method);
    }

    if (domain != null) {
      if (method === 'log' && domain[0] <= 0) {
        pulse.dataflow.warn('Ignoring extent with values <= 0 for log regression.');
        domain = null;
      }
    }

    groups.forEach(g => {
      const n = g.length;

      if (n <= dof) {
        pulse.dataflow.warn('Skipping regression with more parameters than data points.');
        return;
      }

      const model = fit(g, _.x, _.y, order);

      if (_.params) {
        // if parameter vectors requested return those
        values.push((0, _vegaDataflow.ingest)({
          keys: g.dims,
          coef: model.coef,
          rSquared: model.rSquared
        }));
        return;
      }

      const dom = domain || (0, _vegaUtil.extent)(g, _.x),
            add = p => {
        const t = {};

        for (let i = 0; i < names.length; ++i) {
          t[names[i]] = g.dims[i];
        }

        t[as[0]] = p[0];
        t[as[1]] = p[1];
        values.push((0, _vegaDataflow.ingest)(t));
      };

      if (method === 'linear') {
        // for linear regression we only need the end points
        dom.forEach(x => add([x, model.predict(x)]));
      } else {
        // otherwise return trend line sample points
        (0, _vegaStatistics.sampleCurve)(model.predict, dom, 25, 200).forEach(add);
      }
    });
    if (this.value) out.rem = this.value;
    this.value = out.add = out.source = values;
  }

  return out;
};
},{"./partition":"node_modules/vega-regression/src/partition.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-statistics":"node_modules/vega-statistics/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-regression/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "loess", {
  enumerable: true,
  get: function () {
    return _Loess.default;
  }
});
Object.defineProperty(exports, "regression", {
  enumerable: true,
  get: function () {
    return _Regression.default;
  }
});

var _Loess = _interopRequireDefault(require("./src/Loess"));

var _Regression = _interopRequireDefault(require("./src/Regression"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/Loess":"node_modules/vega-regression/src/Loess.js","./src/Regression":"node_modules/vega-regression/src/Regression.js"}],"node_modules/delaunator/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const EPSILON = Math.pow(2, -52);
const EDGE_STACK = new Uint32Array(512);

class Delaunator {
  static from(points, getX = defaultGetX, getY = defaultGetY) {
    const n = points.length;
    const coords = new Float64Array(n * 2);

    for (let i = 0; i < n; i++) {
      const p = points[i];
      coords[2 * i] = getX(p);
      coords[2 * i + 1] = getY(p);
    }

    return new Delaunator(coords);
  }

  constructor(coords) {
    const n = coords.length >> 1;
    if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');
    this.coords = coords; // arrays that will store the triangulation graph

    const maxTriangles = Math.max(2 * n - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3); // temporary arrays for tracking the edges of the advancing convex hull

    this._hashSize = Math.ceil(Math.sqrt(n));
    this._hullPrev = new Uint32Array(n); // edge to prev edge

    this._hullNext = new Uint32Array(n); // edge to next edge

    this._hullTri = new Uint32Array(n); // edge to adjacent triangle

    this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash
    // temporary arrays for sorting points

    this._ids = new Uint32Array(n);
    this._dists = new Float64Array(n);
    this.update();
  }

  update() {
    const {
      coords,
      _hullPrev: hullPrev,
      _hullNext: hullNext,
      _hullTri: hullTri,
      _hullHash: hullHash
    } = this;
    const n = coords.length >> 1; // populate an array of point indices; calculate input data bbox

    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;

    for (let i = 0; i < n; i++) {
      const x = coords[2 * i];
      const y = coords[2 * i + 1];
      if (x < minX) minX = x;
      if (y < minY) minY = y;
      if (x > maxX) maxX = x;
      if (y > maxY) maxY = y;
      this._ids[i] = i;
    }

    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY) / 2;
    let minDist = Infinity;
    let i0, i1, i2; // pick a seed point close to the center

    for (let i = 0; i < n; i++) {
      const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);

      if (d < minDist) {
        i0 = i;
        minDist = d;
      }
    }

    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    minDist = Infinity; // find the point closest to the seed

    for (let i = 0; i < n; i++) {
      if (i === i0) continue;
      const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);

      if (d < minDist && d > 0) {
        i1 = i;
        minDist = d;
      }
    }

    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity; // find the third point which forms the smallest circumcircle with the first two

    for (let i = 0; i < n; i++) {
      if (i === i0 || i === i1) continue;
      const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);

      if (r < minRadius) {
        i2 = i;
        minRadius = r;
      }
    }

    let i2x = coords[2 * i2];
    let i2y = coords[2 * i2 + 1];

    if (minRadius === Infinity) {
      // order collinear points by dx (or dy if all x are identical)
      // and return the list as a hull
      for (let i = 0; i < n; i++) {
        this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
      }

      quicksort(this._ids, this._dists, 0, n - 1);
      const hull = new Uint32Array(n);
      let j = 0;

      for (let i = 0, d0 = -Infinity; i < n; i++) {
        const id = this._ids[i];

        if (this._dists[id] > d0) {
          hull[j++] = id;
          d0 = this._dists[id];
        }
      }

      this.hull = hull.subarray(0, j);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    } // swap the order of the seed points for counter-clockwise orientation


    if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
      const i = i1;
      const x = i1x;
      const y = i1y;
      i1 = i2;
      i1x = i2x;
      i1y = i2y;
      i2 = i;
      i2x = x;
      i2y = y;
    }

    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center.x;
    this._cy = center.y;

    for (let i = 0; i < n; i++) {
      this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
    } // sort the points by distance from the seed triangle circumcenter


    quicksort(this._ids, this._dists, 0, n - 1); // set up the seed triangle as the starting hull

    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i2] = i1;
    hullNext[i1] = hullPrev[i0] = i2;
    hullNext[i2] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i2] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i2;
    this.trianglesLen = 0;

    this._addTriangle(i0, i1, i2, -1, -1, -1);

    for (let k = 0, xp, yp; k < this._ids.length; k++) {
      const i = this._ids[k];
      const x = coords[2 * i];
      const y = coords[2 * i + 1]; // skip near-duplicate points

      if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;
      xp = x;
      yp = y; // skip seed triangle points

      if (i === i0 || i === i1 || i === i2) continue; // find a visible edge on the convex hull using edge hash

      let start = 0;

      for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
        start = hullHash[(key + j) % this._hashSize];
        if (start !== -1 && start !== hullNext[start]) break;
      }

      start = hullPrev[start];
      let e = start,
          q;

      while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {
        e = q;

        if (e === start) {
          e = -1;
          break;
        }
      }

      if (e === -1) continue; // likely a near-duplicate point; skip it
      // add the first triangle from the point

      let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]); // recursively flip triangles from the point until they satisfy the Delaunay condition


      hullTri[i] = this._legalize(t + 2);
      hullTri[e] = t; // keep track of boundary triangles on the hull

      hullSize++; // walk forward through the hull, adding more triangles and flipping recursively

      let n = hullNext[e];

      while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {
        t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);
        hullTri[i] = this._legalize(t + 2);
        hullNext[n] = n; // mark as removed

        hullSize--;
        n = q;
      } // walk backward from the other side, adding more triangles and flipping


      if (e === start) {
        while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {
          t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);

          this._legalize(t + 2);

          hullTri[q] = t;
          hullNext[e] = e; // mark as removed

          hullSize--;
          e = q;
        }
      } // update the hull indices


      this._hullStart = hullPrev[i] = e;
      hullNext[e] = hullPrev[n] = i;
      hullNext[i] = n; // save the two new edges in the hash table

      hullHash[this._hashKey(x, y)] = i;
      hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
    }

    this.hull = new Uint32Array(hullSize);

    for (let i = 0, e = this._hullStart; i < hullSize; i++) {
      this.hull[i] = e;
      e = hullNext[e];
    } // trim typed triangle mesh arrays


    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }

  _hashKey(x, y) {
    return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
  }

  _legalize(a) {
    const {
      _triangles: triangles,
      _halfedges: halfedges,
      coords
    } = this;
    let i = 0;
    let ar = 0; // recursion eliminated with a fixed-size stack

    while (true) {
      const b = halfedges[a];
      /* if the pair of triangles doesn't satisfy the Delaunay condition
       * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
       * then do the same check/flip recursively for the new pair of triangles
       *
       *           pl                    pl
       *          /||\                  /  \
       *       al/ || \bl            al/    \a
       *        /  ||  \              /      \
       *       /  a||b  \    flip    /___ar___\
       *     p0\   ||   /p1   =>   p0\---bl---/p1
       *        \  ||  /              \      /
       *       ar\ || /br             b\    /br
       *          \||/                  \  /
       *           pr                    pr
       */

      const a0 = a - a % 3;
      ar = a0 + (a + 2) % 3;

      if (b === -1) {
        // convex hull edge
        if (i === 0) break;
        a = EDGE_STACK[--i];
        continue;
      }

      const b0 = b - b % 3;
      const al = a0 + (a + 1) % 3;
      const bl = b0 + (b + 2) % 3;
      const p0 = triangles[ar];
      const pr = triangles[a];
      const pl = triangles[al];
      const p1 = triangles[bl];
      const illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);

      if (illegal) {
        triangles[a] = p1;
        triangles[b] = p0;
        const hbl = halfedges[bl]; // edge swapped on the other side of the hull (rare); fix the halfedge reference

        if (hbl === -1) {
          let e = this._hullStart;

          do {
            if (this._hullTri[e] === bl) {
              this._hullTri[e] = a;
              break;
            }

            e = this._hullPrev[e];
          } while (e !== this._hullStart);
        }

        this._link(a, hbl);

        this._link(b, halfedges[ar]);

        this._link(ar, bl);

        const br = b0 + (b + 1) % 3; // don't worry about hitting the cap: it can only happen on extremely degenerate input

        if (i < EDGE_STACK.length) {
          EDGE_STACK[i++] = br;
        }
      } else {
        if (i === 0) break;
        a = EDGE_STACK[--i];
      }
    }

    return ar;
  }

  _link(a, b) {
    this._halfedges[a] = b;
    if (b !== -1) this._halfedges[b] = a;
  } // add a new triangle given vertex indices and adjacent half-edge ids


  _addTriangle(i0, i1, i2, a, b, c) {
    const t = this.trianglesLen;
    this._triangles[t] = i0;
    this._triangles[t + 1] = i1;
    this._triangles[t + 2] = i2;

    this._link(t, a);

    this._link(t + 1, b);

    this._link(t + 2, c);

    this.trianglesLen += 3;
    return t;
  }

} // monotonically increases with real angle, but doesn't need expensive trigonometry


exports.default = Delaunator;

function pseudoAngle(dx, dy) {
  const p = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
}

function dist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
} // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check


function orientIfSure(px, py, rx, ry, qx, qy) {
  const l = (ry - py) * (qx - px);
  const r = (rx - px) * (qy - py);
  return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;
} // a more robust orientation test that's stable in a given triangle (to fix robustness issues)


function orient(rx, ry, qx, qy, px, py) {
  const sign = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);
  return sign < 0;
}

function inCircle(ax, ay, bx, by, cx, cy, px, py) {
  const dx = ax - px;
  const dy = ay - py;
  const ex = bx - px;
  const ey = by - py;
  const fx = cx - px;
  const fy = cy - py;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}

function circumradius(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = (ey * bl - dy * cl) * d;
  const y = (dx * cl - ex * bl) * d;
  return x * x + y * y;
}

function circumcenter(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = ax + (ey * bl - dy * cl) * d;
  const y = ay + (dx * cl - ex * bl) * d;
  return {
    x,
    y
  };
}

function quicksort(ids, dists, left, right) {
  if (right - left <= 20) {
    for (let i = left + 1; i <= right; i++) {
      const temp = ids[i];
      const tempDist = dists[temp];
      let j = i - 1;

      while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];

      ids[j + 1] = temp;
    }
  } else {
    const median = left + right >> 1;
    let i = left + 1;
    let j = right;
    swap(ids, median, i);
    if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
    if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);
    if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);
    const temp = ids[i];
    const tempDist = dists[temp];

    while (true) {
      do i++; while (dists[ids[i]] < tempDist);

      do j--; while (dists[ids[j]] > tempDist);

      if (j < i) break;
      swap(ids, i, j);
    }

    ids[left + 1] = ids[j];
    ids[j] = temp;

    if (right - i + 1 >= j - left) {
      quicksort(ids, dists, i, right);
      quicksort(ids, dists, left, j - 1);
    } else {
      quicksort(ids, dists, left, j - 1);
      quicksort(ids, dists, i, right);
    }
  }
}

function swap(arr, i, j) {
  const tmp = arr[i];
  arr[i] = arr[j];
  arr[j] = tmp;
}

function defaultGetX(p) {
  return p[0];
}

function defaultGetY(p) {
  return p[1];
}
},{}],"node_modules/d3-delaunay/src/path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const epsilon = 1e-6;

class Path {
  constructor() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null; // end of current subpath

    this._ = "";
  }

  moveTo(x, y) {
    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
  }

  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  }

  lineTo(x, y) {
    this._ += `L${this._x1 = +x},${this._y1 = +y}`;
  }

  arc(x, y, r) {
    x = +x, y = +y, r = +r;
    const x0 = x + r;
    const y0 = y;
    if (r < 0) throw new Error("negative radius");
    if (this._x1 === null) this._ += `M${x0},${y0}`;else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += "L" + x0 + "," + y0;
    if (!r) return;
    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
  }

  rect(x, y, w, h) {
    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
  }

  value() {
    return this._ || null;
  }

}

exports.default = Path;
},{}],"node_modules/d3-delaunay/src/polygon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class Polygon {
  constructor() {
    this._ = [];
  }

  moveTo(x, y) {
    this._.push([x, y]);
  }

  closePath() {
    this._.push(this._[0].slice());
  }

  lineTo(x, y) {
    this._.push([x, y]);
  }

  value() {
    return this._.length ? this._ : null;
  }

}

exports.default = Polygon;
},{}],"node_modules/d3-delaunay/src/voronoi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("./path.js"));

var _polygon = _interopRequireDefault(require("./polygon.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Voronoi {
  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;

    this._init();
  }

  update() {
    this.delaunay.update();

    this._init();

    return this;
  }

  _init() {
    const {
      delaunay: {
        points,
        hull,
        triangles
      },
      vectors
    } = this; // Compute circumcenters.

    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);

    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
      const t1 = triangles[i] * 2;
      const t2 = triangles[i + 1] * 2;
      const t3 = triangles[i + 2] * 2;
      const x1 = points[t1];
      const y1 = points[t1 + 1];
      const x2 = points[t2];
      const y2 = points[t2 + 1];
      const x3 = points[t3];
      const y3 = points[t3 + 1];
      const dx = x2 - x1;
      const dy = y2 - y1;
      const ex = x3 - x1;
      const ey = y3 - y1;
      const bl = dx * dx + dy * dy;
      const cl = ex * ex + ey * ey;
      const ab = (dx * ey - dy * ex) * 2;

      if (!ab) {
        // degenerate case (collinear diagram)
        x = (x1 + x3) / 2 - 1e8 * ey;
        y = (y1 + y3) / 2 + 1e8 * ex;
      } else if (Math.abs(ab) < 1e-8) {
        // almost equal points (degenerate triangle)
        x = (x1 + x3) / 2;
        y = (y1 + y3) / 2;
      } else {
        const d = 1 / ab;
        x = x1 + (ey * bl - dy * cl) * d;
        y = y1 + (dx * cl - ex * bl) * d;
      }

      circumcenters[j] = x;
      circumcenters[j + 1] = y;
    } // Compute exterior cell rays.


    let h = hull[hull.length - 1];
    let p0,
        p1 = h * 4;
    let x0,
        x1 = points[2 * h];
    let y0,
        y1 = points[2 * h + 1];
    vectors.fill(0);

    for (let i = 0; i < hull.length; ++i) {
      h = hull[i];
      p0 = p1, x0 = x1, y0 = y1;
      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
      vectors[p0 + 2] = vectors[p1] = y0 - y1;
      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
    }
  }

  render(context) {
    const buffer = context == null ? context = new _path.default() : undefined;
    const {
      delaunay: {
        halfedges,
        inedges,
        hull
      },
      circumcenters,
      vectors
    } = this;
    if (hull.length <= 1) return null;

    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i) continue;
      const ti = Math.floor(i / 3) * 2;
      const tj = Math.floor(j / 3) * 2;
      const xi = circumcenters[ti];
      const yi = circumcenters[ti + 1];
      const xj = circumcenters[tj];
      const yj = circumcenters[tj + 1];

      this._renderSegment(xi, yi, xj, yj, context);
    }

    let h0,
        h1 = hull[hull.length - 1];

    for (let i = 0; i < hull.length; ++i) {
      h0 = h1, h1 = hull[i];
      const t = Math.floor(inedges[h1] / 3) * 2;
      const x = circumcenters[t];
      const y = circumcenters[t + 1];
      const v = h0 * 4;

      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);

      if (p) this._renderSegment(x, y, p[0], p[1], context);
    }

    return buffer && buffer.value();
  }

  renderBounds(context) {
    const buffer = context == null ? context = new _path.default() : undefined;
    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
    return buffer && buffer.value();
  }

  renderCell(i, context) {
    const buffer = context == null ? context = new _path.default() : undefined;

    const points = this._clip(i);

    if (points === null) return;
    context.moveTo(points[0], points[1]);
    let n = points.length;

    while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1) n -= 2;

    for (let i = 2; i < n; i += 2) {
      if (points[i] !== points[i - 2] || points[i + 1] !== points[i - 1]) context.lineTo(points[i], points[i + 1]);
    }

    context.closePath();
    return buffer && buffer.value();
  }

  *cellPolygons() {
    const {
      delaunay: {
        points
      }
    } = this;

    for (let i = 0, n = points.length / 2; i < n; ++i) {
      const cell = this.cellPolygon(i);
      if (cell) yield cell;
    }
  }

  cellPolygon(i) {
    const polygon = new _polygon.default();
    this.renderCell(i, polygon);
    return polygon.value();
  }

  _renderSegment(x0, y0, x1, y1, context) {
    let S;

    const c0 = this._regioncode(x0, y0);

    const c1 = this._regioncode(x1, y1);

    if (c0 === 0 && c1 === 0) {
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
      context.moveTo(S[0], S[1]);
      context.lineTo(S[2], S[3]);
    }
  }

  contains(i, x, y) {
    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
    return this.delaunay._step(i, x, y) === i;
  }

  _cell(i) {
    const {
      circumcenters,
      delaunay: {
        inedges,
        halfedges,
        triangles
      }
    } = this;
    const e0 = inedges[i];
    if (e0 === -1) return null; // coincident point

    const points = [];
    let e = e0;

    do {
      const t = Math.floor(e / 3);
      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i) break; // bad triangulation

      e = halfedges[e];
    } while (e !== e0 && e !== -1);

    return points;
  }

  _clip(i) {
    // degenerate case (1 valid point: return the box)
    if (i === 0 && this.delaunay.hull.length === 1) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }

    const points = this._cell(i);

    if (points === null) return null;
    const {
      vectors: V
    } = this;
    const v = i * 4;
    return V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points);
  }

  _clipFinite(i, points) {
    const n = points.length;
    let P = null;
    let x0,
        y0,
        x1 = points[n - 2],
        y1 = points[n - 1];

    let c0,
        c1 = this._regioncode(x1, y1);

    let e0, e1;

    for (let j = 0; j < n; j += 2) {
      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
      c0 = c1, c1 = this._regioncode(x1, y1);

      if (c0 === 0 && c1 === 0) {
        e0 = e1, e1 = 0;
        if (P) P.push(x1, y1);else P = [x1, y1];
      } else {
        let S, sx0, sy0, sx1, sy1;

        if (c0 === 0) {
          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
          [sx0, sy0, sx1, sy1] = S;
        } else {
          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
          [sx1, sy1, sx0, sy0] = S;
          e0 = e1, e1 = this._edgecode(sx0, sy0);
          if (e0 && e1) this._edge(i, e0, e1, P, P.length);
          if (P) P.push(sx0, sy0);else P = [sx0, sy0];
        }

        e0 = e1, e1 = this._edgecode(sx1, sy1);
        if (e0 && e1) this._edge(i, e0, e1, P, P.length);
        if (P) P.push(sx1, sy1);else P = [sx1, sy1];
      }
    }

    if (P) {
      e0 = e1, e1 = this._edgecode(P[0], P[1]);
      if (e0 && e1) this._edge(i, e0, e1, P, P.length);
    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }

    return P;
  }

  _clipSegment(x0, y0, x1, y1, c0, c1) {
    while (true) {
      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];
      if (c0 & c1) return null;
      let x,
          y,
          c = c0 || c1;
      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
    }
  }

  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
    let P = Array.from(points),
        p;
    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);

    if (P = this._clipFinite(i, P)) {
      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
      }
    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
    }

    return P;
  }

  _edge(i, e0, e1, P, j) {
    while (e0 !== e1) {
      let x, y;

      switch (e0) {
        case 0b0101:
          e0 = 0b0100;
          continue;
        // top-left

        case 0b0100:
          e0 = 0b0110, x = this.xmax, y = this.ymin;
          break;
        // top

        case 0b0110:
          e0 = 0b0010;
          continue;
        // top-right

        case 0b0010:
          e0 = 0b1010, x = this.xmax, y = this.ymax;
          break;
        // right

        case 0b1010:
          e0 = 0b1000;
          continue;
        // bottom-right

        case 0b1000:
          e0 = 0b1001, x = this.xmin, y = this.ymax;
          break;
        // bottom

        case 0b1001:
          e0 = 0b0001;
          continue;
        // bottom-left

        case 0b0001:
          e0 = 0b0101, x = this.xmin, y = this.ymin;
          break;
        // left
      }

      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
        P.splice(j, 0, x, y), j += 2;
      }
    }

    if (P.length > 4) {
      for (let i = 0; i < P.length; i += 2) {
        const j = (i + 2) % P.length,
              k = (i + 4) % P.length;
        if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) P.splice(j, 2), i -= 2;
      }
    }

    return j;
  }

  _project(x0, y0, vx, vy) {
    let t = Infinity,
        c,
        x,
        y;

    if (vy < 0) {
      // top
      if (y0 <= this.ymin) return null;
      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
    } else if (vy > 0) {
      // bottom
      if (y0 >= this.ymax) return null;
      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
    }

    if (vx > 0) {
      // right
      if (x0 >= this.xmax) return null;
      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
    } else if (vx < 0) {
      // left
      if (x0 <= this.xmin) return null;
      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
    }

    return [x, y];
  }

  _edgecode(x, y) {
    return (x === this.xmin ? 0b0001 : x === this.xmax ? 0b0010 : 0b0000) | (y === this.ymin ? 0b0100 : y === this.ymax ? 0b1000 : 0b0000);
  }

  _regioncode(x, y) {
    return (x < this.xmin ? 0b0001 : x > this.xmax ? 0b0010 : 0b0000) | (y < this.ymin ? 0b0100 : y > this.ymax ? 0b1000 : 0b0000);
  }

}

exports.default = Voronoi;
},{"./path.js":"node_modules/d3-delaunay/src/path.js","./polygon.js":"node_modules/d3-delaunay/src/polygon.js"}],"node_modules/d3-delaunay/src/delaunay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _delaunator = _interopRequireDefault(require("delaunator"));

var _path = _interopRequireDefault(require("./path.js"));

var _polygon = _interopRequireDefault(require("./polygon.js"));

var _voronoi = _interopRequireDefault(require("./voronoi.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const tau = 2 * Math.PI;

function pointX(p) {
  return p[0];
}

function pointY(p) {
  return p[1];
}

function area(hull, points) {
  let n = hull.length,
      x0,
      y0,
      x1 = points[2 * hull[n - 1]],
      y1 = points[2 * hull[n - 1] + 1],
      area = 0;

  for (let i = 0; i < n; i++) {
    x0 = x1, y0 = y1;
    x1 = points[2 * hull[i]];
    y1 = points[2 * hull[i] + 1];
    area += y0 * x1 - x0 * y1;
  }

  return area / 2;
}

function jitter(x, y, r) {
  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];
}

class Delaunay {
  constructor(points) {
    this._delaunator = new _delaunator.default(points);
    this.inedges = new Int32Array(points.length / 2);
    this._hullIndex = new Int32Array(points.length / 2);
    this.points = this._delaunator.coords;

    this._init();
  }

  update() {
    this._delaunator.update();

    this._init();

    return this;
  }

  _init() {
    const d = this._delaunator,
          points = this.points; // check for collinear

    if (d.hull && d.hull.length > 2 && area(d.hull, points) < 1e-10) {
      this.collinear = Int32Array.from({
        length: points.length / 2
      }, (_, i) => i).sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors

      const e = this.collinear[0],
            f = this.collinear[this.collinear.length - 1],
            bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]],
            r = 1e-8 * Math.sqrt((bounds[3] - bounds[1]) ** 2 + (bounds[2] - bounds[0]) ** 2);

      for (let i = 0, n = points.length / 2; i < n; ++i) {
        const p = jitter(points[2 * i], points[2 * i + 1], r);
        points[2 * i] = p[0];
        points[2 * i + 1] = p[1];
      }

      this._delaunator = new _delaunator.default(points);
    } else {
      delete this.collinear;
    }

    const halfedges = this.halfedges = this._delaunator.halfedges;
    const hull = this.hull = this._delaunator.hull;
    const triangles = this.triangles = this._delaunator.triangles;
    const inedges = this.inedges.fill(-1);

    const hullIndex = this._hullIndex.fill(-1); // Compute an index from each point to an (arbitrary) incoming halfedge
    // Used to give the first neighbor of each point; for this reason,
    // on the hull we give priority to exterior halfedges


    for (let e = 0, n = halfedges.length; e < n; ++e) {
      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;
    }

    for (let i = 0, n = hull.length; i < n; ++i) {
      hullIndex[hull[i]] = i;
    } // degenerate case: 1 or 2 (distinct) points


    if (hull.length <= 2 && hull.length > 0) {
      this.triangles = new Int32Array(3).fill(-1);
      this.halfedges = new Int32Array(3).fill(-1);
      this.triangles[0] = hull[0];
      this.triangles[1] = hull[1];
      this.triangles[2] = hull[1];
      inedges[hull[0]] = 1;
      if (hull.length === 2) inedges[hull[1]] = 0;
    }
  }

  voronoi(bounds) {
    return new _voronoi.default(this, bounds);
  }

  *neighbors(i) {
    const {
      inedges,
      hull,
      _hullIndex,
      halfedges,
      triangles
    } = this; // degenerate case with several collinear points

    if (this.collinear) {
      const l = this.collinear.indexOf(i);
      if (l > 0) yield this.collinear[l - 1];
      if (l < this.collinear.length - 1) yield this.collinear[l + 1];
      return;
    }

    const e0 = inedges[i];
    if (e0 === -1) return; // coincident point

    let e = e0,
        p0 = -1;

    do {
      yield p0 = triangles[e];
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i) return; // bad triangulation

      e = halfedges[e];

      if (e === -1) {
        const p = hull[(_hullIndex[i] + 1) % hull.length];
        if (p !== p0) yield p;
        return;
      }
    } while (e !== e0);
  }

  find(x, y, i = 0) {
    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
    const i0 = i;
    let c;

    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;

    return c;
  }

  _step(i, x, y) {
    const {
      inedges,
      hull,
      _hullIndex,
      halfedges,
      triangles,
      points
    } = this;
    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
    let c = i;
    let dc = (x - points[i * 2]) ** 2 + (y - points[i * 2 + 1]) ** 2;
    const e0 = inedges[i];
    let e = e0;

    do {
      let t = triangles[e];
      const dt = (x - points[t * 2]) ** 2 + (y - points[t * 2 + 1]) ** 2;
      if (dt < dc) dc = dt, c = t;
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i) break; // bad triangulation

      e = halfedges[e];

      if (e === -1) {
        e = hull[(_hullIndex[i] + 1) % hull.length];

        if (e !== t) {
          if ((x - points[e * 2]) ** 2 + (y - points[e * 2 + 1]) ** 2 < dc) return e;
        }

        break;
      }
    } while (e !== e0);

    return c;
  }

  render(context) {
    const buffer = context == null ? context = new _path.default() : undefined;
    const {
      points,
      halfedges,
      triangles
    } = this;

    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i) continue;
      const ti = triangles[i] * 2;
      const tj = triangles[j] * 2;
      context.moveTo(points[ti], points[ti + 1]);
      context.lineTo(points[tj], points[tj + 1]);
    }

    this.renderHull(context);
    return buffer && buffer.value();
  }

  renderPoints(context, r = 2) {
    const buffer = context == null ? context = new _path.default() : undefined;
    const {
      points
    } = this;

    for (let i = 0, n = points.length; i < n; i += 2) {
      const x = points[i],
            y = points[i + 1];
      context.moveTo(x + r, y);
      context.arc(x, y, r, 0, tau);
    }

    return buffer && buffer.value();
  }

  renderHull(context) {
    const buffer = context == null ? context = new _path.default() : undefined;
    const {
      hull,
      points
    } = this;
    const h = hull[0] * 2,
          n = hull.length;
    context.moveTo(points[h], points[h + 1]);

    for (let i = 1; i < n; ++i) {
      const h = 2 * hull[i];
      context.lineTo(points[h], points[h + 1]);
    }

    context.closePath();
    return buffer && buffer.value();
  }

  hullPolygon() {
    const polygon = new _polygon.default();
    this.renderHull(polygon);
    return polygon.value();
  }

  renderTriangle(i, context) {
    const buffer = context == null ? context = new _path.default() : undefined;
    const {
      points,
      triangles
    } = this;
    const t0 = triangles[i *= 3] * 2;
    const t1 = triangles[i + 1] * 2;
    const t2 = triangles[i + 2] * 2;
    context.moveTo(points[t0], points[t0 + 1]);
    context.lineTo(points[t1], points[t1 + 1]);
    context.lineTo(points[t2], points[t2 + 1]);
    context.closePath();
    return buffer && buffer.value();
  }

  *trianglePolygons() {
    const {
      triangles
    } = this;

    for (let i = 0, n = triangles.length / 3; i < n; ++i) {
      yield this.trianglePolygon(i);
    }
  }

  trianglePolygon(i) {
    const polygon = new _polygon.default();
    this.renderTriangle(i, polygon);
    return polygon.value();
  }

}

exports.default = Delaunay;

Delaunay.from = function (points, fx = pointX, fy = pointY, that) {
  return new Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
};

function flatArray(points, fx, fy, that) {
  const n = points.length;
  const array = new Float64Array(n * 2);

  for (let i = 0; i < n; ++i) {
    const p = points[i];
    array[i * 2] = fx.call(that, p, i, points);
    array[i * 2 + 1] = fy.call(that, p, i, points);
  }

  return array;
}

function* flatIterable(points, fx, fy, that) {
  let i = 0;

  for (const p of points) {
    yield fx.call(that, p, i, points);
    yield fy.call(that, p, i, points);
    ++i;
  }
}
},{"delaunator":"node_modules/delaunator/index.js","./path.js":"node_modules/d3-delaunay/src/path.js","./polygon.js":"node_modules/d3-delaunay/src/polygon.js","./voronoi.js":"node_modules/d3-delaunay/src/voronoi.js"}],"node_modules/d3-delaunay/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Delaunay", {
  enumerable: true,
  get: function () {
    return _delaunay.default;
  }
});
Object.defineProperty(exports, "Voronoi", {
  enumerable: true,
  get: function () {
    return _voronoi.default;
  }
});

var _delaunay = _interopRequireDefault(require("./delaunay.js"));

var _voronoi = _interopRequireDefault(require("./voronoi.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./delaunay.js":"node_modules/d3-delaunay/src/delaunay.js","./voronoi.js":"node_modules/d3-delaunay/src/voronoi.js"}],"node_modules/vega-voronoi/src/Voronoi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Voronoi;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _d3Delaunay = require("d3-delaunay");

function Voronoi(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

Voronoi.Definition = {
  "type": "Voronoi",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "x",
    "type": "field",
    "required": true
  }, {
    "name": "y",
    "type": "field",
    "required": true
  }, {
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "extent",
    "type": "array",
    "array": true,
    "length": 2,
    "default": [[-1e5, -1e5], [1e5, 1e5]],
    "content": {
      "type": "number",
      "array": true,
      "length": 2
    }
  }, {
    "name": "as",
    "type": "string",
    "default": "path"
  }]
};
const prototype = (0, _vegaUtil.inherits)(Voronoi, _vegaDataflow.Transform);
const defaultExtent = [-1e5, -1e5, 1e5, 1e5];

prototype.transform = function (_, pulse) {
  const as = _.as || 'path',
        data = pulse.source; // nothing to do if no data

  if (!data || !data.length) return pulse; // configure and construct voronoi diagram

  let s = _.size;
  s = s ? [0, 0, s[0], s[1]] : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]] : defaultExtent;

  const voronoi = this.value = _d3Delaunay.Delaunay.from(data, _.x, _.y).voronoi(s); // map polygons to paths


  for (let i = 0, n = data.length; i < n; ++i) {
    const polygon = voronoi.cellPolygon(i);
    data[i][as] = polygon ? toPathString(polygon) : null;
  }

  return pulse.reflow(_.modified()).modifies(as);
}; // suppress duplicated end point vertices


function toPathString(p) {
  const x = p[0][0],
        y = p[0][1];
  let n = p.length - 1;

  for (; p[n][0] === x && p[n][1] === y; --n);

  return 'M' + p.slice(0, n + 1).join('L') + 'Z';
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","d3-delaunay":"node_modules/d3-delaunay/src/index.js"}],"node_modules/vega-voronoi/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "voronoi", {
  enumerable: true,
  get: function () {
    return _Voronoi.default;
  }
});

var _Voronoi = _interopRequireDefault(require("./src/Voronoi"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/Voronoi":"node_modules/vega-voronoi/src/Voronoi.js"}],"node_modules/vega-wordcloud/src/CloudLayout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaCanvas = require("vega-canvas");

/*
Copyright (c) 2013, Jason Davies.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  * The name Jason Davies may not be used to endorse or promote products
    derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JASON DAVIES BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/
// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf
var cloudRadians = Math.PI / 180,
    cw = 1 << 11 >> 5,
    ch = 1 << 11;

function _default() {
  var size = [256, 256],
      text,
      font,
      fontSize,
      fontStyle,
      fontWeight,
      rotate,
      padding,
      spiral = archimedeanSpiral,
      words = [],
      random = Math.random,
      cloud = {};

  cloud.layout = function () {
    var contextAndRatio = getContext((0, _vegaCanvas.canvas)()),
        board = zeroArray((size[0] >> 5) * size[1]),
        bounds = null,
        n = words.length,
        i = -1,
        tags = [],
        data = words.map(function (d) {
      return {
        text: text(d),
        font: font(d),
        style: fontStyle(d),
        weight: fontWeight(d),
        rotate: rotate(d),
        size: ~~fontSize(d),
        padding: padding(d),
        xoff: 0,
        yoff: 0,
        x1: 0,
        y1: 0,
        x0: 0,
        y0: 0,
        hasText: false,
        sprite: null,
        datum: d
      };
    }).sort(function (a, b) {
      return b.size - a.size;
    });

    while (++i < n) {
      var d = data[i];
      d.x = size[0] * (random() + .5) >> 1;
      d.y = size[1] * (random() + .5) >> 1;
      cloudSprite(contextAndRatio, d, data, i);

      if (d.hasText && place(board, d, bounds)) {
        tags.push(d);
        if (bounds) cloudBounds(bounds, d);else bounds = [{
          x: d.x + d.x0,
          y: d.y + d.y0
        }, {
          x: d.x + d.x1,
          y: d.y + d.y1
        }]; // Temporary hack

        d.x -= size[0] >> 1;
        d.y -= size[1] >> 1;
      }
    }

    return tags;
  };

  function getContext(canvas) {
    canvas.width = canvas.height = 1;
    var ratio = Math.sqrt(canvas.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);
    canvas.width = (cw << 5) / ratio;
    canvas.height = ch / ratio;
    var context = canvas.getContext("2d");
    context.fillStyle = context.strokeStyle = "red";
    context.textAlign = "center";
    return {
      context: context,
      ratio: ratio
    };
  }

  function place(board, tag, bounds) {
    var startX = tag.x,
        startY = tag.y,
        maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),
        s = spiral(size),
        dt = random() < .5 ? 1 : -1,
        t = -dt,
        dxdy,
        dx,
        dy;

    while (dxdy = s(t += dt)) {
      dx = ~~dxdy[0];
      dy = ~~dxdy[1];
      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;
      tag.x = startX + dx;
      tag.y = startY + dy;
      if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue; // TODO only check for collisions within current bounds.

      if (!bounds || !cloudCollide(tag, board, size[0])) {
        if (!bounds || collideRects(tag, bounds)) {
          var sprite = tag.sprite,
              w = tag.width >> 5,
              sw = size[0] >> 5,
              lx = tag.x - (w << 4),
              sx = lx & 0x7f,
              msx = 32 - sx,
              h = tag.y1 - tag.y0,
              x = (tag.y + tag.y0) * sw + (lx >> 5),
              last;

          for (var j = 0; j < h; j++) {
            last = 0;

            for (var i = 0; i <= w; i++) {
              board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
            }

            x += sw;
          }

          tag.sprite = null;
          return true;
        }
      }
    }

    return false;
  }

  cloud.words = function (_) {
    if (arguments.length) {
      words = _;
      return cloud;
    } else {
      return words;
    }
  };

  cloud.size = function (_) {
    if (arguments.length) {
      size = [+_[0], +_[1]];
      return cloud;
    } else {
      return size;
    }
  };

  cloud.font = function (_) {
    if (arguments.length) {
      font = functor(_);
      return cloud;
    } else {
      return font;
    }
  };

  cloud.fontStyle = function (_) {
    if (arguments.length) {
      fontStyle = functor(_);
      return cloud;
    } else {
      return fontStyle;
    }
  };

  cloud.fontWeight = function (_) {
    if (arguments.length) {
      fontWeight = functor(_);
      return cloud;
    } else {
      return fontWeight;
    }
  };

  cloud.rotate = function (_) {
    if (arguments.length) {
      rotate = functor(_);
      return cloud;
    } else {
      return rotate;
    }
  };

  cloud.text = function (_) {
    if (arguments.length) {
      text = functor(_);
      return cloud;
    } else {
      return text;
    }
  };

  cloud.spiral = function (_) {
    if (arguments.length) {
      spiral = spirals[_] || _;
      return cloud;
    } else {
      return spiral;
    }
  };

  cloud.fontSize = function (_) {
    if (arguments.length) {
      fontSize = functor(_);
      return cloud;
    } else {
      return fontSize;
    }
  };

  cloud.padding = function (_) {
    if (arguments.length) {
      padding = functor(_);
      return cloud;
    } else {
      return padding;
    }
  };

  cloud.random = function (_) {
    if (arguments.length) {
      random = _;
      return cloud;
    } else {
      return random;
    }
  };

  return cloud;
} // Fetches a monochrome sprite bitmap for the specified text.
// Load in batches for speed.


function cloudSprite(contextAndRatio, d, data, di) {
  if (d.sprite) return;
  var c = contextAndRatio.context,
      ratio = contextAndRatio.ratio;
  c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
  var x = 0,
      y = 0,
      maxh = 0,
      n = data.length,
      w,
      w32,
      h,
      i,
      j;
  --di;

  while (++di < n) {
    d = data[di];
    c.save();
    c.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;
    w = c.measureText(d.text + "m").width * ratio;
    h = d.size << 1;

    if (d.rotate) {
      var sr = Math.sin(d.rotate * cloudRadians),
          cr = Math.cos(d.rotate * cloudRadians),
          wcr = w * cr,
          wsr = w * sr,
          hcr = h * cr,
          hsr = h * sr;
      w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;
      h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
    } else {
      w = w + 0x1f >> 5 << 5;
    }

    if (h > maxh) maxh = h;

    if (x + w >= cw << 5) {
      x = 0;
      y += maxh;
      maxh = 0;
    }

    if (y + h >= ch) break;
    c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
    if (d.rotate) c.rotate(d.rotate * cloudRadians);
    c.fillText(d.text, 0, 0);

    if (d.padding) {
      c.lineWidth = 2 * d.padding;
      c.strokeText(d.text, 0, 0);
    }

    c.restore();
    d.width = w;
    d.height = h;
    d.xoff = x;
    d.yoff = y;
    d.x1 = w >> 1;
    d.y1 = h >> 1;
    d.x0 = -d.x1;
    d.y0 = -d.y1;
    d.hasText = true;
    x += w;
  }

  var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,
      sprite = [];

  while (--di >= 0) {
    d = data[di];
    if (!d.hasText) continue;
    w = d.width;
    w32 = w >> 5;
    h = d.y1 - d.y0; // Zero the buffer

    for (i = 0; i < h * w32; i++) sprite[i] = 0;

    x = d.xoff;
    if (x == null) return;
    y = d.yoff;
    var seen = 0,
        seenRow = -1;

    for (j = 0; j < h; j++) {
      for (i = 0; i < w; i++) {
        var k = w32 * j + (i >> 5),
            m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;
        sprite[k] |= m;
        seen |= m;
      }

      if (seen) seenRow = j;else {
        d.y0++;
        h--;
        j--;
        y++;
      }
    }

    d.y1 = d.y0 + seenRow;
    d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
  }
} // Use mask-based collision detection.


function cloudCollide(tag, board, sw) {
  sw >>= 5;
  var sprite = tag.sprite,
      w = tag.width >> 5,
      lx = tag.x - (w << 4),
      sx = lx & 0x7f,
      msx = 32 - sx,
      h = tag.y1 - tag.y0,
      x = (tag.y + tag.y0) * sw + (lx >> 5),
      last;

  for (var j = 0; j < h; j++) {
    last = 0;

    for (var i = 0; i <= w; i++) {
      if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;
    }

    x += sw;
  }

  return false;
}

function cloudBounds(bounds, d) {
  var b0 = bounds[0],
      b1 = bounds[1];
  if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
  if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
  if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
  if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
}

function collideRects(a, b) {
  return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
}

function archimedeanSpiral(size) {
  var e = size[0] / size[1];
  return function (t) {
    return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];
  };
}

function rectangularSpiral(size) {
  var dy = 4,
      dx = dy * size[0] / size[1],
      x = 0,
      y = 0;
  return function (t) {
    var sign = t < 0 ? -1 : 1; // See triangular numbers: T_n = n * (n + 1) / 2.

    switch (Math.sqrt(1 + 4 * sign * t) - sign & 3) {
      case 0:
        x += dx;
        break;

      case 1:
        y += dy;
        break;

      case 2:
        x -= dx;
        break;

      default:
        y -= dy;
        break;
    }

    return [x, y];
  };
} // TODO reuse arrays?


function zeroArray(n) {
  var a = [],
      i = -1;

  while (++i < n) a[i] = 0;

  return a;
}

function functor(d) {
  return typeof d === "function" ? d : function () {
    return d;
  };
}

var spirals = {
  archimedean: archimedeanSpiral,
  rectangular: rectangularSpiral
};
},{"vega-canvas":"node_modules/vega-canvas/index.browser.js"}],"node_modules/vega-wordcloud/src/Wordcloud.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Wordcloud;

var _CloudLayout = _interopRequireDefault(require("./CloudLayout"));

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _vegaScale = require("vega-scale");

var _vegaStatistics = require("vega-statistics");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Output = ['x', 'y', 'font', 'fontSize', 'fontStyle', 'fontWeight', 'angle'];
var Params = ['text', 'font', 'rotate', 'fontSize', 'fontStyle', 'fontWeight'];

function Wordcloud(params) {
  _vegaDataflow.Transform.call(this, (0, _CloudLayout.default)(), params);
}

Wordcloud.Definition = {
  "type": "Wordcloud",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "font",
    "type": "string",
    "expr": true,
    "default": "sans-serif"
  }, {
    "name": "fontStyle",
    "type": "string",
    "expr": true,
    "default": "normal"
  }, {
    "name": "fontWeight",
    "type": "string",
    "expr": true,
    "default": "normal"
  }, {
    "name": "fontSize",
    "type": "number",
    "expr": true,
    "default": 14
  }, {
    "name": "fontSizeRange",
    "type": "number",
    "array": "nullable",
    "default": [10, 50]
  }, {
    "name": "rotate",
    "type": "number",
    "expr": true,
    "default": 0
  }, {
    "name": "text",
    "type": "field"
  }, {
    "name": "spiral",
    "type": "string",
    "values": ["archimedean", "rectangular"]
  }, {
    "name": "padding",
    "type": "number",
    "expr": true
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 7,
    "default": Output
  }]
};
var prototype = (0, _vegaUtil.inherits)(Wordcloud, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  if (_.size && !(_.size[0] && _.size[1])) {
    (0, _vegaUtil.error)('Wordcloud size dimensions must be non-zero.');
  }

  function modp(param) {
    var p = _[param];
    return (0, _vegaUtil.isFunction)(p) && pulse.modified(p.fields);
  }

  var mod = _.modified();

  if (!(mod || pulse.changed(pulse.ADD_REM) || Params.some(modp))) return;
  var data = pulse.materialize(pulse.SOURCE).source,
      layout = this.value,
      as = _.as || Output,
      fontSize = _.fontSize || 14,
      range;
  (0, _vegaUtil.isFunction)(fontSize) ? range = _.fontSizeRange : fontSize = (0, _vegaUtil.constant)(fontSize); // create font size scaling function as needed

  if (range) {
    var fsize = fontSize,
        sizeScale = (0, _vegaScale.scale)('sqrt')().domain(extent(fsize, data)).range(range);

    fontSize = function (x) {
      return sizeScale(fsize(x));
    };
  }

  data.forEach(function (t) {
    t[as[0]] = NaN;
    t[as[1]] = NaN;
    t[as[3]] = 0;
  }); // configure layout

  var words = layout.words(data).text(_.text).size(_.size || [500, 500]).padding(_.padding || 1).spiral(_.spiral || 'archimedean').rotate(_.rotate || 0).font(_.font || 'sans-serif').fontStyle(_.fontStyle || 'normal').fontWeight(_.fontWeight || 'normal').fontSize(fontSize).random(_vegaStatistics.random).layout();
  var size = layout.size(),
      dx = size[0] >> 1,
      dy = size[1] >> 1,
      i = 0,
      n = words.length,
      w,
      t;

  for (; i < n; ++i) {
    w = words[i];
    t = w.datum;
    t[as[0]] = w.x + dx;
    t[as[1]] = w.y + dy;
    t[as[2]] = w.font;
    t[as[3]] = w.size;
    t[as[4]] = w.style;
    t[as[5]] = w.weight;
    t[as[6]] = w.rotate;
  }

  return pulse.reflow(mod).modifies(as);
};

function extent(field, data) {
  var min = +Infinity,
      max = -Infinity,
      i = 0,
      n = data.length,
      v;

  for (; i < n; ++i) {
    v = field(data[i]);
    if (v < min) min = v;
    if (v > max) max = v;
  }

  return [min, max];
}
},{"./CloudLayout":"node_modules/vega-wordcloud/src/CloudLayout.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","vega-scale":"node_modules/vega-scale/index.js","vega-statistics":"node_modules/vega-statistics/index.js"}],"node_modules/vega-wordcloud/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "wordcloud", {
  enumerable: true,
  get: function () {
    return _Wordcloud.default;
  }
});

var _Wordcloud = _interopRequireDefault(require("./src/Wordcloud"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/Wordcloud":"node_modules/vega-wordcloud/src/Wordcloud.js"}],"node_modules/vega-crossfilter/src/arrays.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.array8 = array8;
exports.array16 = array16;
exports.array32 = array32;

function array8(n) {
  return new Uint8Array(n);
}

function array16(n) {
  return new Uint16Array(n);
}

function array32(n) {
  return new Uint32Array(n);
}
},{}],"node_modules/vega-crossfilter/src/Bitmaps.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Bitmaps;

var _arrays = require("./arrays");

/**
 * Maintains CrossFilter state.
 */
function Bitmaps() {
  var width = 8,
      data = [],
      seen = (0, _arrays.array32)(0),
      curr = array(0, width),
      prev = array(0, width);
  return {
    data: function () {
      return data;
    },
    seen: function () {
      return seen = lengthen(seen, data.length);
    },
    add: function (array) {
      for (var i = 0, j = data.length, n = array.length, t; i < n; ++i) {
        t = array[i];
        t._index = j++;
        data.push(t);
      }
    },
    remove: function (num, map) {
      // map: index -> boolean (true => remove)
      var n = data.length,
          copy = Array(n - num),
          reindex = data,
          // reuse old data array for index map
      t,
          i,
          j; // seek forward to first removal

      for (i = 0; !map[i] && i < n; ++i) {
        copy[i] = data[i];
        reindex[i] = i;
      } // condense arrays


      for (j = i; i < n; ++i) {
        t = data[i];

        if (!map[i]) {
          reindex[i] = j;
          curr[j] = curr[i];
          prev[j] = prev[i];
          copy[j] = t;
          t._index = j++;
        } else {
          reindex[i] = -1;
        }

        curr[i] = 0; // clear unused bits
      }

      data = copy;
      return reindex;
    },
    size: function () {
      return data.length;
    },
    curr: function () {
      return curr;
    },
    prev: function () {
      return prev;
    },
    reset: function (k) {
      prev[k] = curr[k];
    },
    all: function () {
      return width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff;
    },
    set: function (k, one) {
      curr[k] |= one;
    },
    clear: function (k, one) {
      curr[k] &= ~one;
    },
    resize: function (n, m) {
      var k = curr.length;

      if (n > k || m > width) {
        width = Math.max(m, width);
        curr = array(n, width, curr);
        prev = array(n, width);
      }
    }
  };
}

function lengthen(array, length, copy) {
  if (array.length >= length) return array;
  copy = copy || new array.constructor(length);
  copy.set(array);
  return copy;
}

function array(n, m, array) {
  var copy = (m < 0x101 ? _arrays.array8 : m < 0x10001 ? _arrays.array16 : _arrays.array32)(n);
  if (array) copy.set(array);
  return copy;
}
},{"./arrays":"node_modules/vega-crossfilter/src/arrays.js"}],"node_modules/vega-crossfilter/src/Dimension.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(index, i, query) {
  var bit = 1 << i;
  return {
    one: bit,
    zero: ~bit,
    range: query.slice(),
    bisect: index.bisect,
    index: index.index,
    size: index.size,
    onAdd: function (added, curr) {
      var dim = this,
          range = dim.bisect(dim.range, added.value),
          idx = added.index,
          lo = range[0],
          hi = range[1],
          n1 = idx.length,
          i;

      for (i = 0; i < lo; ++i) curr[idx[i]] |= bit;

      for (i = hi; i < n1; ++i) curr[idx[i]] |= bit;

      return dim;
    }
  };
}
},{}],"node_modules/vega-crossfilter/src/SortedIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SortedIndex;

var _arrays = require("./arrays");

var _d3Array = require("d3-array");

/**
 * Maintains a list of values, sorted by key.
 */
function SortedIndex() {
  var index = (0, _arrays.array32)(0),
      value = [],
      size = 0;

  function insert(key, data, base) {
    if (!data.length) return [];
    var n0 = size,
        n1 = data.length,
        addv = Array(n1),
        addi = (0, _arrays.array32)(n1),
        oldv,
        oldi,
        i;

    for (i = 0; i < n1; ++i) {
      addv[i] = key(data[i]);
      addi[i] = i;
    }

    addv = sort(addv, addi);

    if (n0) {
      oldv = value;
      oldi = index;
      value = Array(n0 + n1);
      index = (0, _arrays.array32)(n0 + n1);
      merge(base, oldv, oldi, n0, addv, addi, n1, value, index);
    } else {
      if (base > 0) for (i = 0; i < n1; ++i) {
        addi[i] += base;
      }
      value = addv;
      index = addi;
    }

    size = n0 + n1;
    return {
      index: addi,
      value: addv
    };
  }

  function remove(num, map) {
    // map: index -> remove
    var n = size,
        idx,
        i,
        j; // seek forward to first removal

    for (i = 0; !map[index[i]] && i < n; ++i); // condense index and value arrays


    for (j = i; i < n; ++i) {
      if (!map[idx = index[i]]) {
        index[j] = idx;
        value[j] = value[i];
        ++j;
      }
    }

    size = n - num;
  }

  function reindex(map) {
    for (var i = 0, n = size; i < n; ++i) {
      index[i] = map[index[i]];
    }
  }

  function bisect(range, array) {
    var n;

    if (array) {
      n = array.length;
    } else {
      array = value;
      n = size;
    }

    return [(0, _d3Array.bisectLeft)(array, range[0], 0, n), (0, _d3Array.bisectRight)(array, range[1], 0, n)];
  }

  return {
    insert: insert,
    remove: remove,
    bisect: bisect,
    reindex: reindex,
    index: function () {
      return index;
    },
    size: function () {
      return size;
    }
  };
}

function sort(values, index) {
  values.sort.call(index, function (a, b) {
    var x = values[a],
        y = values[b];
    return x < y ? -1 : x > y ? 1 : 0;
  });
  return (0, _d3Array.permute)(values, index);
}

function merge(base, value0, index0, n0, value1, index1, n1, value, index) {
  var i0 = 0,
      i1 = 0,
      i;

  for (i = 0; i0 < n0 && i1 < n1; ++i) {
    if (value0[i0] < value1[i1]) {
      value[i] = value0[i0];
      index[i] = index0[i0++];
    } else {
      value[i] = value1[i1];
      index[i] = index1[i1++] + base;
    }
  }

  for (; i0 < n0; ++i0, ++i) {
    value[i] = value0[i0];
    index[i] = index0[i0];
  }

  for (; i1 < n1; ++i1, ++i) {
    value[i] = value1[i1];
    index[i] = index1[i1] + base;
  }
}
},{"./arrays":"node_modules/vega-crossfilter/src/arrays.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/vega-crossfilter/src/CrossFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CrossFilter;

var _Bitmaps = _interopRequireDefault(require("./Bitmaps"));

var _Dimension = _interopRequireDefault(require("./Dimension"));

var _SortedIndex = _interopRequireDefault(require("./SortedIndex"));

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An indexed multi-dimensional filter.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.
 * @param {Array} params.query - An array of per-dimension range queries.
 */
function CrossFilter(params) {
  _vegaDataflow.Transform.call(this, (0, _Bitmaps.default)(), params);

  this._indices = null;
  this._dims = null;
}

CrossFilter.Definition = {
  "type": "CrossFilter",
  "metadata": {},
  "params": [{
    "name": "fields",
    "type": "field",
    "array": true,
    "required": true
  }, {
    "name": "query",
    "type": "array",
    "array": true,
    "required": true,
    "content": {
      "type": "number",
      "array": true,
      "length": 2
    }
  }]
};
var prototype = (0, _vegaUtil.inherits)(CrossFilter, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  if (!this._dims) {
    return this.init(_, pulse);
  } else {
    var init = _.modified('fields') || _.fields.some(function (f) {
      return pulse.modified(f.fields);
    });

    return init ? this.reinit(_, pulse) : this.eval(_, pulse);
  }
};

prototype.init = function (_, pulse) {
  var fields = _.fields,
      query = _.query,
      indices = this._indices = {},
      dims = this._dims = [],
      m = query.length,
      i = 0,
      key,
      index; // instantiate indices and dimensions

  for (; i < m; ++i) {
    key = fields[i].fname;
    index = indices[key] || (indices[key] = (0, _SortedIndex.default)());
    dims.push((0, _Dimension.default)(index, i, query[i]));
  }

  return this.eval(_, pulse);
};

prototype.reinit = function (_, pulse) {
  var output = pulse.materialize().fork(),
      fields = _.fields,
      query = _.query,
      indices = this._indices,
      dims = this._dims,
      bits = this.value,
      curr = bits.curr(),
      prev = bits.prev(),
      all = bits.all(),
      out = output.rem = output.add,
      mod = output.mod,
      m = query.length,
      adds = {},
      add,
      index,
      key,
      mods,
      remMap,
      modMap,
      i,
      n,
      f; // set prev to current state

  prev.set(curr); // if pulse has remove tuples, process them first

  if (pulse.rem.length) {
    remMap = this.remove(_, pulse, output);
  } // if pulse has added tuples, add them to state


  if (pulse.add.length) {
    bits.add(pulse.add);
  } // if pulse has modified tuples, create an index map


  if (pulse.mod.length) {
    modMap = {};

    for (mods = pulse.mod, i = 0, n = mods.length; i < n; ++i) {
      modMap[mods[i]._index] = 1;
    }
  } // re-initialize indices as needed, update curr bitmap


  for (i = 0; i < m; ++i) {
    f = fields[i];

    if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {
      key = f.fname;

      if (!(add = adds[key])) {
        indices[key] = index = (0, _SortedIndex.default)();
        adds[key] = add = index.insert(f, pulse.source, 0);
      }

      dims[i] = (0, _Dimension.default)(index, i, query[i]).onAdd(add, curr);
    }
  } // visit each tuple
  // if filter state changed, push index to add/rem
  // else if in mod and passes a filter, push index to mod


  for (i = 0, n = bits.data().length; i < n; ++i) {
    if (remMap[i]) {
      // skip if removed tuple
      continue;
    } else if (prev[i] !== curr[i]) {
      // add if state changed
      out.push(i);
    } else if (modMap[i] && curr[i] !== all) {
      // otherwise, pass mods through
      mod.push(i);
    }
  }

  bits.mask = (1 << m) - 1;
  return output;
};

prototype.eval = function (_, pulse) {
  var output = pulse.materialize().fork(),
      m = this._dims.length,
      mask = 0;

  if (pulse.rem.length) {
    this.remove(_, pulse, output);
    mask |= (1 << m) - 1;
  }

  if (_.modified('query') && !_.modified('fields')) {
    mask |= this.update(_, pulse, output);
  }

  if (pulse.add.length) {
    this.insert(_, pulse, output);
    mask |= (1 << m) - 1;
  }

  if (pulse.mod.length) {
    this.modify(pulse, output);
    mask |= (1 << m) - 1;
  }

  this.value.mask = mask;
  return output;
};

prototype.insert = function (_, pulse, output) {
  var tuples = pulse.add,
      bits = this.value,
      dims = this._dims,
      indices = this._indices,
      fields = _.fields,
      adds = {},
      out = output.add,
      k = bits.size(),
      n = k + tuples.length,
      m = dims.length,
      j,
      key,
      add; // resize bitmaps and add tuples as needed

  bits.resize(n, m);
  bits.add(tuples);
  var curr = bits.curr(),
      prev = bits.prev(),
      all = bits.all(); // add to dimensional indices

  for (j = 0; j < m; ++j) {
    key = fields[j].fname;
    add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));
    dims[j].onAdd(add, curr);
  } // set previous filters, output if passes at least one filter


  for (; k < n; ++k) {
    prev[k] = all;
    if (curr[k] !== all) out.push(k);
  }
};

prototype.modify = function (pulse, output) {
  var out = output.mod,
      bits = this.value,
      curr = bits.curr(),
      all = bits.all(),
      tuples = pulse.mod,
      i,
      n,
      k;

  for (i = 0, n = tuples.length; i < n; ++i) {
    k = tuples[i]._index;
    if (curr[k] !== all) out.push(k);
  }
};

prototype.remove = function (_, pulse, output) {
  var indices = this._indices,
      bits = this.value,
      curr = bits.curr(),
      prev = bits.prev(),
      all = bits.all(),
      map = {},
      out = output.rem,
      tuples = pulse.rem,
      i,
      n,
      k,
      f; // process tuples, output if passes at least one filter

  for (i = 0, n = tuples.length; i < n; ++i) {
    k = tuples[i]._index;
    map[k] = 1; // build index map

    prev[k] = f = curr[k];
    curr[k] = all;
    if (f !== all) out.push(k);
  } // remove from dimensional indices


  for (k in indices) {
    indices[k].remove(n, map);
  }

  this.reindex(pulse, n, map);
  return map;
}; // reindex filters and indices after propagation completes


prototype.reindex = function (pulse, num, map) {
  var indices = this._indices,
      bits = this.value;
  pulse.runAfter(function () {
    var indexMap = bits.remove(num, map);

    for (var key in indices) indices[key].reindex(indexMap);
  });
};

prototype.update = function (_, pulse, output) {
  var dims = this._dims,
      query = _.query,
      stamp = pulse.stamp,
      m = dims.length,
      mask = 0,
      i,
      q; // survey how many queries have changed

  output.filters = 0;

  for (q = 0; q < m; ++q) {
    if (_.modified('query', q)) {
      i = q;
      ++mask;
    }
  }

  if (mask === 1) {
    // only one query changed, use more efficient update
    mask = dims[i].one;
    this.incrementOne(dims[i], query[i], output.add, output.rem);
  } else {
    // multiple queries changed, perform full record keeping
    for (q = 0, mask = 0; q < m; ++q) {
      if (!_.modified('query', q)) continue;
      mask |= dims[q].one;
      this.incrementAll(dims[q], query[q], stamp, output.add);
      output.rem = output.add; // duplicate add/rem for downstream resolve
    }
  }

  return mask;
};

prototype.incrementAll = function (dim, query, stamp, out) {
  var bits = this.value,
      seen = bits.seen(),
      curr = bits.curr(),
      prev = bits.prev(),
      index = dim.index(),
      old = dim.bisect(dim.range),
      range = dim.bisect(query),
      lo1 = range[0],
      hi1 = range[1],
      lo0 = old[0],
      hi0 = old[1],
      one = dim.one,
      i,
      j,
      k; // Fast incremental update based on previous lo index.

  if (lo1 < lo0) {
    for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
      k = index[i];

      if (seen[k] !== stamp) {
        prev[k] = curr[k];
        seen[k] = stamp;
        out.push(k);
      }

      curr[k] ^= one;
    }
  } else if (lo1 > lo0) {
    for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
      k = index[i];

      if (seen[k] !== stamp) {
        prev[k] = curr[k];
        seen[k] = stamp;
        out.push(k);
      }

      curr[k] ^= one;
    }
  } // Fast incremental update based on previous hi index.


  if (hi1 > hi0) {
    for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
      k = index[i];

      if (seen[k] !== stamp) {
        prev[k] = curr[k];
        seen[k] = stamp;
        out.push(k);
      }

      curr[k] ^= one;
    }
  } else if (hi1 < hi0) {
    for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
      k = index[i];

      if (seen[k] !== stamp) {
        prev[k] = curr[k];
        seen[k] = stamp;
        out.push(k);
      }

      curr[k] ^= one;
    }
  }

  dim.range = query.slice();
};

prototype.incrementOne = function (dim, query, add, rem) {
  var bits = this.value,
      curr = bits.curr(),
      index = dim.index(),
      old = dim.bisect(dim.range),
      range = dim.bisect(query),
      lo1 = range[0],
      hi1 = range[1],
      lo0 = old[0],
      hi0 = old[1],
      one = dim.one,
      i,
      j,
      k; // Fast incremental update based on previous lo index.

  if (lo1 < lo0) {
    for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
      k = index[i];
      curr[k] ^= one;
      add.push(k);
    }
  } else if (lo1 > lo0) {
    for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
      k = index[i];
      curr[k] ^= one;
      rem.push(k);
    }
  } // Fast incremental update based on previous hi index.


  if (hi1 > hi0) {
    for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
      k = index[i];
      curr[k] ^= one;
      add.push(k);
    }
  } else if (hi1 < hi0) {
    for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
      k = index[i];
      curr[k] ^= one;
      rem.push(k);
    }
  }

  dim.range = query.slice();
};
},{"./Bitmaps":"node_modules/vega-crossfilter/src/Bitmaps.js","./Dimension":"node_modules/vega-crossfilter/src/Dimension.js","./SortedIndex":"node_modules/vega-crossfilter/src/SortedIndex.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-crossfilter/src/ResolveFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ResolveFilter;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Selectively filters tuples by resolving against a filter bitmap.
 * Useful for processing the output of a cross-filter transform.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.ignore - A bit mask indicating which filters to ignore.
 * @param {object} params.filter - The per-tuple filter bitmaps. Typically this
 *   parameter value is a reference to a {@link CrossFilter} transform.
 */
function ResolveFilter(params) {
  _vegaDataflow.Transform.call(this, null, params);
}

ResolveFilter.Definition = {
  "type": "ResolveFilter",
  "metadata": {},
  "params": [{
    "name": "ignore",
    "type": "number",
    "required": true,
    "description": "A bit mask indicating which filters to ignore."
  }, {
    "name": "filter",
    "type": "object",
    "required": true,
    "description": "Per-tuple filter bitmaps from a CrossFilter transform."
  }]
};
var prototype = (0, _vegaUtil.inherits)(ResolveFilter, _vegaDataflow.Transform);

prototype.transform = function (_, pulse) {
  var ignore = ~(_.ignore || 0),
      // bit mask where zeros -> dims to ignore
  bitmap = _.filter,
      mask = bitmap.mask; // exit early if no relevant filter changes

  if ((mask & ignore) === 0) return pulse.StopPropagation;

  var output = pulse.fork(pulse.ALL),
      data = bitmap.data(),
      curr = bitmap.curr(),
      prev = bitmap.prev(),
      pass = function (k) {
    return !(curr[k] & ignore) ? data[k] : null;
  }; // propagate all mod tuples that pass the filter


  output.filter(output.MOD, pass); // determine add & rem tuples via filter functions
  // for efficiency, we do *not* populate new arrays,
  // instead we add filter functions applied downstream

  if (!(mask & mask - 1)) {
    // only one filter changed
    output.filter(output.ADD, pass);
    output.filter(output.REM, function (k) {
      return (curr[k] & ignore) === mask ? data[k] : null;
    });
  } else {
    // multiple filters changed
    output.filter(output.ADD, function (k) {
      var c = curr[k] & ignore,
          f = !c && c ^ prev[k] & ignore;
      return f ? data[k] : null;
    });
    output.filter(output.REM, function (k) {
      var c = curr[k] & ignore,
          f = c && !(c ^ (c ^ prev[k] & ignore));
      return f ? data[k] : null;
    });
  } // add filter to source data in case of reflow...


  return output.filter(output.SOURCE, function (t) {
    return pass(t._index);
  });
};
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-crossfilter/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "crossfilter", {
  enumerable: true,
  get: function () {
    return _CrossFilter.default;
  }
});
Object.defineProperty(exports, "resolvefilter", {
  enumerable: true,
  get: function () {
    return _ResolveFilter.default;
  }
});

var _CrossFilter = _interopRequireDefault(require("./src/CrossFilter"));

var _ResolveFilter = _interopRequireDefault(require("./src/ResolveFilter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/CrossFilter":"node_modules/vega-crossfilter/src/CrossFilter.js","./src/ResolveFilter":"node_modules/vega-crossfilter/src/ResolveFilter.js"}],"node_modules/vega/package.json":[function(require,module,exports) {
module.exports = {
  "_args": [
    [
      "vega@5.6.0",
      "/Users/franzfluckiger/Documents/Software/knot-diagram"
    ]
  ],
  "_from": "vega@5.6.0",
  "_id": "vega@5.6.0",
  "_inBundle": false,
  "_integrity": "sha512-CE0tSL94q7PORs+4vVhGpFcKDLvtx4nBSbJUWDhtYD6Wus8M3jTg2G/bE6Ode/5WodWk6hFXOy/Ay3oPaHz7Gw==",
  "_location": "/vega",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "vega@5.6.0",
    "name": "vega",
    "escapedName": "vega",
    "rawSpec": "5.6.0",
    "saveSpec": null,
    "fetchSpec": "5.6.0"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vega/-/vega-5.6.0.tgz",
  "_spec": "5.6.0",
  "_where": "/Users/franzfluckiger/Documents/Software/knot-diagram",
  "author": {
    "name": "UW Interactive Data Lab",
    "url": "http://idl.cs.washington.edu"
  },
  "bugs": {
    "url": "https://github.com/vega/vega/issues"
  },
  "dependencies": {
    "vega-crossfilter": "^4.0.1",
    "vega-dataflow": "^5.4.0",
    "vega-encode": "^4.3.3",
    "vega-event-selector": "^2.0.1",
    "vega-expression": "^2.6.1",
    "vega-force": "^4.0.2",
    "vega-functions": "^5.3.2",
    "vega-geo": "^4.0.4",
    "vega-hierarchy": "^4.0.3",
    "vega-loader": "^4.1.1",
    "vega-parser": "^5.8.3",
    "vega-projection": "^1.3.0",
    "vega-regression": "^1.0.1",
    "vega-runtime": "^5.0.2",
    "vega-scale": "^4.1.2",
    "vega-scenegraph": "^4.2.1",
    "vega-statistics": "^1.5.0",
    "vega-transforms": "^4.3.0",
    "vega-typings": "^0.9.0",
    "vega-util": "^1.11.2",
    "vega-view": "^5.3.1",
    "vega-view-transforms": "^4.3.2",
    "vega-voronoi": "^4.1.1",
    "vega-wordcloud": "^4.0.2"
  },
  "description": "The Vega visualization grammar.",
  "devDependencies": {
    "vega-schema": "*"
  },
  "gitHead": "9badf6d2d1490057f4010e3796189ca366878101",
  "homepage": "https://github.com/vega/vega#readme",
  "jsdelivr": "build/vega.min.js",
  "keywords": [
    "vega",
    "visualization",
    "interaction",
    "dataflow",
    "library",
    "data",
    "d3"
  ],
  "license": "BSD-3-Clause",
  "main": "build/vega-node.js",
  "module": "index",
  "name": "vega",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vega/vega.git"
  },
  "scripts": {
    "build": "yarn rollup && node rollup -e && node rollup -m",
    "postbuild": "terser build/vega.js -c -m -o build/vega.min.js && terser build/vega-core.js -c -m -o build/vega-core.min.js",
    "postpublish": "git push && git push --tags && ./schema-deploy.sh",
    "prebuild": "rimraf build && mkdirp build",
    "prepublishOnly": "yarn test && yarn build",
    "pretest": "yarn prebuild && yarn rollup",
    "rollup": "node rollup-node && node rollup && node schema-copy",
    "test": "TZ=America/Los_Angeles tape 'test/**/*-test.js' && eslint index.js test"
  },
  "types": "index.d.ts",
  "unpkg": "build/vega.min.js",
  "version": "5.6.0"
}
;
},{}],"node_modules/vega-view/src/cursor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

var Default = 'default';

function _default(view) {
  var cursor = view._signals.cursor; // add cursor signal to dataflow, if needed

  if (!cursor) {
    view._signals.cursor = cursor = view.add({
      user: Default,
      item: null
    });
  } // evaluate cursor on each mousemove event


  view.on(view.events('view', 'mousemove'), cursor, function (_, event) {
    var value = cursor.value,
        user = value ? (0, _vegaUtil.isString)(value) ? value : value.user : Default,
        item = event.item && event.item.cursor || null;
    return value && user === value.user && item == value.item ? value : {
      user: user,
      item: item
    };
  }); // when cursor signal updates, set visible cursor

  view.add(null, function (_) {
    var user = _.cursor,
        item = this.value;

    if (!(0, _vegaUtil.isString)(user)) {
      item = user.item;
      user = user.user;
    }

    setCursor(user && user !== Default ? user : item || user);
    return item;
  }, {
    cursor: cursor
  });
}

function setCursor(cursor) {
  // set cursor on document body
  // this ensures cursor applies even if dragging out of view
  if (typeof document !== 'undefined' && document.body) {
    document.body.style.cursor = cursor;
  }
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view/src/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataref = dataref;
exports.data = data;
exports.change = change;
exports.insert = insert;
exports.remove = remove;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

function dataref(view, name) {
  var data = view._runtime.data;

  if (!(0, _vegaUtil.hasOwnProperty)(data, name)) {
    (0, _vegaUtil.error)('Unrecognized data set: ' + name);
  }

  return data[name];
}

function data(name, values) {
  return arguments.length < 2 ? dataref(this, name).values.value : change.call(this, name, (0, _vegaDataflow.changeset)().remove(_vegaUtil.truthy).insert(values));
}

function change(name, changes) {
  if (!(0, _vegaDataflow.isChangeSet)(changes)) {
    (0, _vegaUtil.error)('Second argument to changes must be a changeset.');
  }

  var dataset = dataref(this, name);
  dataset.modified = true;
  return this.pulse(dataset.input, changes);
}

function insert(name, _) {
  return change.call(this, name, (0, _vegaDataflow.changeset)().insert(_));
}

function remove(name, _) {
  return change.call(this, name, (0, _vegaDataflow.changeset)().remove(_));
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view/src/render-size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.width = width;
exports.height = height;
exports.offset = offset;
exports.resizeRenderer = resizeRenderer;

function width(view) {
  var padding = view.padding();
  return Math.max(0, view._viewWidth + padding.left + padding.right);
}

function height(view) {
  var padding = view.padding();
  return Math.max(0, view._viewHeight + padding.top + padding.bottom);
}

function offset(view) {
  var padding = view.padding(),
      origin = view._origin;
  return [padding.left + origin[0], padding.top + origin[1]];
}

function resizeRenderer(view) {
  var origin = offset(view),
      w = width(view),
      h = height(view);

  view._renderer.background(view._background);

  view._renderer.resize(w, h, origin);

  view._handler.origin(origin);

  view._resizeListeners.forEach(function (handler) {
    try {
      handler(w, h);
    } catch (error) {
      view.error(error);
    }
  });
}
},{}],"node_modules/vega-view/src/events-extend.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _renderSize = require("./render-size");

var _vegaUtil = require("vega-util");

var _vegaScenegraph = require("vega-scenegraph");

/**
 * Extend an event with additional view-specific methods.
 * Adds a new property ('vega') to an event that provides a number
 * of methods for querying information about the current interaction.
 * The vega object provides the following methods:
 *   view - Returns the backing View instance.
 *   item - Returns the currently active scenegraph item (if any).
 *   group - Returns the currently active scenegraph group (if any).
 *     This method accepts a single string-typed argument indicating the name
 *     of the desired parent group. The scenegraph will be traversed from
 *     the item up towards the root to search for a matching group. If no
 *     argument is provided the enclosing group for the active item is
 *     returned, unless the item it itself a group, in which case it is
 *     returned directly.
 *   xy - Returns a two-element array containing the x and y coordinates for
 *     mouse or touch events. For touch events, this is based on the first
 *     elements in the changedTouches array. This method accepts a single
 *     argument: either an item instance or mark name that should serve as
 *     the reference coordinate system. If no argument is provided the
 *     top-level view coordinate system is assumed.
 *   x - Returns the current x-coordinate, accepts the same arguments as xy.
 *   y - Returns the current y-coordinate, accepts the same arguments as xy.
 * @param {Event} event - The input event to extend.
 * @param {Item} item - The currently active scenegraph item (if any).
 * @return {Event} - The extended input event.
 */
function _default(view, event, item) {
  var r = view._renderer,
      el = r && r.canvas(),
      p,
      e,
      translate;

  if (el) {
    translate = (0, _renderSize.offset)(view);
    e = event.changedTouches ? event.changedTouches[0] : event;
    p = (0, _vegaScenegraph.point)(e, el);
    p[0] -= translate[0];
    p[1] -= translate[1];
  }

  event.dataflow = view;
  event.item = item;
  event.vega = extension(view, item, p);
  return event;
}

function extension(view, item, point) {
  var itemGroup = item ? item.mark.marktype === 'group' ? item : item.mark.group : null;

  function group(name) {
    var g = itemGroup,
        i;
    if (name) for (i = item; i; i = i.mark.group) {
      if (i.mark.name === name) {
        g = i;
        break;
      }
    }
    return g && g.mark && g.mark.interactive ? g : {};
  }

  function xy(item) {
    if (!item) return point;
    if ((0, _vegaUtil.isString)(item)) item = group(item);
    var p = point.slice();

    while (item) {
      p[0] -= item.x || 0;
      p[1] -= item.y || 0;
      item = item.mark && item.mark.group;
    }

    return p;
  }

  return {
    view: (0, _vegaUtil.constant)(view),
    item: (0, _vegaUtil.constant)(item || {}),
    group: group,
    xy: xy,
    x: function (item) {
      return xy(item)[0];
    },
    y: function (item) {
      return xy(item)[1];
    }
  };
}
},{"./render-size":"node_modules/vega-view/src/render-size.js","vega-util":"node_modules/vega-util/index.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js"}],"node_modules/vega-view/src/events.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeEventConfig = initializeEventConfig;
exports.events = events;

var _eventsExtend = _interopRequireDefault(require("./events-extend"));

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const VIEW = 'view',
      TIMER = 'timer',
      WINDOW = 'window',
      NO_TRAP = {
  trap: false
};
/**
 * Initialize event handling configuration.
 * @param {object} config - The configuration settings.
 * @return {object}
 */

function initializeEventConfig(config) {
  const events = (0, _vegaUtil.extend)({
    defaults: {}
  }, config);

  const unpack = (obj, keys) => {
    keys.forEach(k => {
      if ((0, _vegaUtil.isArray)(obj[k])) obj[k] = (0, _vegaUtil.toSet)(obj[k]);
    });
  };

  unpack(events.defaults, ['prevent', 'allow']);
  unpack(events, ['view', 'window', 'selector']);
  return events;
}

function prevent(view, type) {
  var def = view._eventConfig.defaults,
      prevent = def.prevent,
      allow = def.allow;
  return prevent === false || allow === true ? false : prevent === true || allow === false ? true : prevent ? prevent[type] : allow ? !allow[type] : view.preventDefault();
}

function permit(view, key, type) {
  const rule = view._eventConfig && view._eventConfig[key];

  if (rule === false || (0, _vegaUtil.isObject)(rule) && !rule[type]) {
    view.warn(`Blocked ${key} ${type} event listener.`);
    return false;
  }

  return true;
}
/**
 * Create a new event stream from an event source.
 * @param {object} source - The event source to monitor.
 * @param {string} type - The event type.
 * @param {function(object): boolean} [filter] - Event filter function.
 * @return {EventStream}
 */


function events(source, type, filter) {
  var view = this,
      s = new _vegaDataflow.EventStream(filter),
      send = function (e, item) {
    view.runAsync(null, () => {
      if (source === VIEW && prevent(view, type)) {
        e.preventDefault();
      }

      s.receive((0, _eventsExtend.default)(view, e, item));
    });
  },
      sources;

  if (source === TIMER) {
    if (permit(view, 'timer', type)) {
      view.timer(send, type);
    }
  } else if (source === VIEW) {
    if (permit(view, 'view', type)) {
      // send traps errors, so use {trap: false} option
      view.addEventListener(type, send, NO_TRAP);
    }
  } else {
    if (source === WINDOW) {
      if (permit(view, 'window', type) && typeof window !== 'undefined') {
        sources = [window];
      }
    } else if (typeof document !== 'undefined') {
      if (permit(view, 'selector', type)) {
        sources = document.querySelectorAll(source);
      }
    }

    if (!sources) {
      view.warn('Can not resolve event source: ' + source);
    } else {
      for (var i = 0, n = sources.length; i < n; ++i) {
        sources[i].addEventListener(type, send);
      }

      view._eventListeners.push({
        type: type,
        sources: sources,
        handler: send
      });
    }
  }

  return s;
}
},{"./events-extend":"node_modules/vega-view/src/events-extend.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view/src/hover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function itemFilter(event) {
  return event.item;
}

function markTarget(event) {
  // grab upstream collector feeding the mark operator
  return event.item.mark.source;
}

function invoke(name) {
  return function (_, event) {
    return event.vega.view().changeset().encode(event.item, name);
  };
}

function _default(hoverSet, leaveSet) {
  hoverSet = [hoverSet || 'hover'];
  leaveSet = [leaveSet || 'update', hoverSet[0]]; // invoke hover set upon mouseover

  this.on(this.events('view', 'mouseover', itemFilter), markTarget, invoke(hoverSet)); // invoke leave set upon mouseout

  this.on(this.events('view', 'mouseout', itemFilter), markTarget, invoke(leaveSet));
  return this;
}
},{}],"node_modules/vega-view/src/finalize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Finalize a View instance that is being removed.
 * Cancel any running timers.
 * Remove all external event listeners.
 * Remove any currently displayed tooltip.
 */
function _default() {
  var tooltip = this._tooltip,
      timers = this._timers,
      listeners = this._eventListeners,
      n,
      m,
      e;
  n = timers.length;

  while (--n >= 0) {
    timers[n].stop();
  }

  n = listeners.length;

  while (--n >= 0) {
    e = listeners[n];
    m = e.sources.length;

    while (--m >= 0) {
      e.sources[m].removeEventListener(e.type, e.handler);
    }
  }

  if (tooltip) {
    tooltip.call(this, this._handler, null, null, null);
  }

  return this;
}
},{}],"node_modules/vega-view/src/element.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(tag, attr, text) {
  var el = document.createElement(tag);

  for (var key in attr) el.setAttribute(key, attr[key]);

  if (text != null) el.textContent = text;
  return el;
}
},{}],"node_modules/vega-view/src/bind.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _element = _interopRequireDefault(require("./element"));

var _vegaUtil = require("vega-util");

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BindClass = 'vega-bind',
    NameClass = 'vega-bind-name',
    RadioClass = 'vega-bind-radio',
    OptionClass = 'vega-option-';
/**
 * Bind a signal to an external HTML input element. The resulting two-way
 * binding will propagate input changes to signals, and propagate signal
 * changes to the input element state. If this view instance has no parent
 * element, we assume the view is headless and no bindings are created.
 * @param {Element|string} el - The parent DOM element to which the input
 *   element should be appended as a child. If string-valued, this argument
 *   will be treated as a CSS selector. If null or undefined, the parent
 *   element of this view will be used as the element.
 * @param {object} param - The binding parameters which specify the signal
 *   to bind to, the input element type, and type-specific configuration.
 * @return {View} - This view instance.
 */

function _default(view, el, binding) {
  if (!el) return;
  var param = binding.param,
      bind = binding.state;

  if (!bind) {
    bind = binding.state = {
      elements: null,
      active: false,
      set: null,
      update: function (value) {
        if (value !== view.signal(param.signal)) {
          view.runAsync(null, function () {
            bind.source = true;
            view.signal(param.signal, value);
          });
        }
      }
    };

    if (param.debounce) {
      bind.update = (0, _vegaUtil.debounce)(param.debounce, bind.update);
    }
  }

  generate(bind, el, param, view.signal(param.signal));

  if (!bind.active) {
    view.on(view._signals[param.signal], null, function () {
      bind.source ? bind.source = false : bind.set(view.signal(param.signal));
    });
    bind.active = true;
  }

  return bind;
}
/**
 * Generate an HTML input form element and bind it to a signal.
 */


function generate(bind, el, param, value) {
  var div = (0, _element.default)('div', {
    'class': BindClass
  });
  div.appendChild((0, _element.default)('span', {
    'class': NameClass
  }, param.name || param.signal));
  el.appendChild(div);
  var input = form;

  switch (param.input) {
    case 'checkbox':
      input = checkbox;
      break;

    case 'select':
      input = select;
      break;

    case 'radio':
      input = radio;
      break;

    case 'range':
      input = range;
      break;
  }

  input(bind, div, param, value);
}
/**
 * Generates an arbitrary input form element.
 * The input type is controlled via user-provided parameters.
 */


function form(bind, el, param, value) {
  var node = (0, _element.default)('input');

  for (var key in param) {
    if (key !== 'signal' && key !== 'element') {
      node.setAttribute(key === 'input' ? 'type' : key, param[key]);
    }
  }

  node.setAttribute('name', param.signal);
  node.value = value;
  el.appendChild(node);
  node.addEventListener('input', function () {
    bind.update(node.value);
  });
  bind.elements = [node];

  bind.set = function (value) {
    node.value = value;
  };
}
/**
 * Generates a checkbox input element.
 */


function checkbox(bind, el, param, value) {
  var attr = {
    type: 'checkbox',
    name: param.signal
  };
  if (value) attr.checked = true;
  var node = (0, _element.default)('input', attr);
  el.appendChild(node);
  node.addEventListener('change', function () {
    bind.update(node.checked);
  });
  bind.elements = [node];

  bind.set = function (value) {
    node.checked = !!value || null;
  };
}
/**
 * Generates a selection list input element.
 */


function select(bind, el, param, value) {
  var node = (0, _element.default)('select', {
    name: param.signal
  });
  param.options.forEach(function (option) {
    var attr = {
      value: option
    };
    if (valuesEqual(option, value)) attr.selected = true;
    node.appendChild((0, _element.default)('option', attr, option + ''));
  });
  el.appendChild(node);
  node.addEventListener('change', function () {
    bind.update(param.options[node.selectedIndex]);
  });
  bind.elements = [node];

  bind.set = function (value) {
    for (var i = 0, n = param.options.length; i < n; ++i) {
      if (valuesEqual(param.options[i], value)) {
        node.selectedIndex = i;
        return;
      }
    }
  };
}
/**
 * Generates a radio button group.
 */


function radio(bind, el, param, value) {
  var group = (0, _element.default)('span', {
    'class': RadioClass
  });
  el.appendChild(group);
  bind.elements = param.options.map(function (option) {
    var id = OptionClass + param.signal + '-' + option;
    var attr = {
      id: id,
      type: 'radio',
      name: param.signal,
      value: option
    };
    if (valuesEqual(option, value)) attr.checked = true;
    var input = (0, _element.default)('input', attr);
    input.addEventListener('change', function () {
      bind.update(option);
    });
    group.appendChild(input);
    group.appendChild((0, _element.default)('label', {
      'for': id
    }, option + ''));
    return input;
  });

  bind.set = function (value) {
    var nodes = bind.elements,
        i = 0,
        n = nodes.length;

    for (; i < n; ++i) {
      if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;
    }
  };
}
/**
 * Generates a slider input element.
 */


function range(bind, el, param, value) {
  value = value !== undefined ? value : (+param.max + +param.min) / 2;
  var max = param.max != null ? param.max : Math.max(100, +value) || 100,
      min = param.min || Math.min(0, max, +value) || 0,
      step = param.step || (0, _d3Array.tickStep)(min, max, 100);
  var node = (0, _element.default)('input', {
    type: 'range',
    name: param.signal,
    min: min,
    max: max,
    step: step
  });
  node.value = value;
  var label = (0, _element.default)('label', {}, +value);
  el.appendChild(node);
  el.appendChild(label);

  function update() {
    label.textContent = node.value;
    bind.update(+node.value);
  } // subscribe to both input and change


  node.addEventListener('input', update);
  node.addEventListener('change', update);
  bind.elements = [node];

  bind.set = function (value) {
    node.value = value;
    label.textContent = value;
  };
}

function valuesEqual(a, b) {
  return a === b || a + '' === b + '';
}
},{"./element":"node_modules/vega-view/src/element.js","vega-util":"node_modules/vega-util/index.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/vega-view/src/initialize-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _renderSize = require("./render-size");

function _default(view, r, el, constructor, scaleFactor, opt) {
  r = r || new constructor(view.loader());
  return r.initialize(el, (0, _renderSize.width)(view), (0, _renderSize.height)(view), (0, _renderSize.offset)(view), scaleFactor, opt).background(view._background);
}
},{"./render-size":"node_modules/vega-view/src/render-size.js"}],"node_modules/vega-view/src/trap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(view, fn) {
  return !fn ? null : function () {
    try {
      fn.apply(this, arguments);
    } catch (error) {
      view.error(error);
    }
  };
}
},{}],"node_modules/vega-view/src/initialize-handler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _renderSize = require("./render-size");

var _trap = _interopRequireDefault(require("./trap"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(view, prevHandler, el, constructor) {
  // instantiate scenegraph handler
  var handler = new constructor(view.loader(), (0, _trap.default)(view, view.tooltip())).scene(view.scenegraph().root).initialize(el, (0, _renderSize.offset)(view), view); // transfer event handlers

  if (prevHandler) {
    prevHandler.handlers().forEach(function (h) {
      handler.on(h.type, h.handler);
    });
  }

  return handler;
}
},{"./render-size":"node_modules/vega-view/src/render-size.js","./trap":"node_modules/vega-view/src/trap.js"}],"node_modules/vega-view/src/initialize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _bind = _interopRequireDefault(require("./bind"));

var _element = _interopRequireDefault(require("./element"));

var _initializeRenderer = _interopRequireDefault(require("./initialize-renderer"));

var _initializeHandler = _interopRequireDefault(require("./initialize-handler"));

var _vegaScenegraph = require("vega-scenegraph");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(el, elBind) {
  var view = this,
      type = view._renderType,
      config = view._eventConfig.bind,
      module = (0, _vegaScenegraph.renderModule)(type),
      Handler,
      Renderer; // containing dom element

  el = view._el = el ? lookup(view, el) : null; // select appropriate renderer & handler

  if (!module) view.error('Unrecognized renderer type: ' + type);
  Handler = module.handler || _vegaScenegraph.CanvasHandler;
  Renderer = el ? module.renderer : module.headless; // initialize renderer and input handler

  view._renderer = !Renderer ? null : (0, _initializeRenderer.default)(view, view._renderer, el, Renderer);
  view._handler = (0, _initializeHandler.default)(view, view._handler, el, Handler);
  view._redraw = true; // initialize signal bindings

  if (el && config !== 'none') {
    elBind = elBind ? view._elBind = lookup(view, elBind) : el.appendChild((0, _element.default)('div', {
      'class': 'vega-bindings'
    }));

    view._bind.forEach(function (_) {
      if (_.param.element && config !== 'container') {
        _.element = lookup(view, _.param.element);
      }
    });

    view._bind.forEach(function (_) {
      (0, _bind.default)(view, _.element || elBind, _);
    });
  }

  return view;
}

function lookup(view, el) {
  if (typeof el === 'string') {
    if (typeof document !== 'undefined') {
      el = document.querySelector(el);

      if (!el) {
        view.error('Signal bind element not found: ' + el);
        return null;
      }
    } else {
      view.error('DOM document instance not found.');
      return null;
    }
  }

  if (el) {
    try {
      el.innerHTML = '';
    } catch (e) {
      el = null;
      view.error(e);
    }
  }

  return el;
}
},{"./bind":"node_modules/vega-view/src/bind.js","./element":"node_modules/vega-view/src/element.js","./initialize-renderer":"node_modules/vega-view/src/initialize-renderer.js","./initialize-handler":"node_modules/vega-view/src/initialize-handler.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js"}],"node_modules/vega-view/src/render-headless.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _initializeRenderer = _interopRequireDefault(require("./initialize-renderer"));

var _vegaScenegraph = require("vega-scenegraph");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Render the current scene in a headless fashion.
 * This method is asynchronous, returning a Promise instance.
 * @return {Promise} - A Promise that resolves to a renderer.
 */
async function _default(view, type, scaleFactor, opt) {
  const module = (0, _vegaScenegraph.renderModule)(type),
        ctr = module && module.headless;
  if (!ctr) (0, _vegaUtil.error)('Unrecognized renderer type: ' + type);
  await view.runAsync();
  return (0, _initializeRenderer.default)(view, null, null, ctr, scaleFactor, opt).renderAsync(view._scenegraph.root);
}
},{"./initialize-renderer":"node_modules/vega-view/src/initialize-renderer.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view/src/render-to-image-url.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _renderHeadless = _interopRequireDefault(require("./render-headless"));

var _vegaScenegraph = require("vega-scenegraph");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produce an image URL for the visualization. Depending on the type
 * parameter, the generated URL contains data for either a PNG or SVG image.
 * The URL can be used (for example) to download images of the visualization.
 * This method is asynchronous, returning a Promise instance.
 * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.
 *   The 'canvas' and 'png' types are synonyms for a PNG image.
 * @return {Promise} - A promise that resolves to an image URL.
 */
async function _default(type, scaleFactor) {
  if (type !== _vegaScenegraph.RenderType.Canvas && type !== _vegaScenegraph.RenderType.SVG && type !== _vegaScenegraph.RenderType.PNG) {
    (0, _vegaUtil.error)('Unrecognized image type: ' + type);
  }

  const r = await (0, _renderHeadless.default)(this, type, scaleFactor);
  return type === _vegaScenegraph.RenderType.SVG ? toBlobURL(r.svg(), 'image/svg+xml') : r.canvas().toDataURL('image/png');
}

function toBlobURL(data, mime) {
  var blob = new Blob([data], {
    type: mime
  });
  return window.URL.createObjectURL(blob);
}
},{"./render-headless":"node_modules/vega-view/src/render-headless.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view/src/render-to-canvas.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _renderHeadless = _interopRequireDefault(require("./render-headless"));

var _vegaScenegraph = require("vega-scenegraph");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produce a Canvas instance containing a rendered visualization.
 * This method is asynchronous, returning a Promise instance.
 * @return {Promise} - A promise that resolves to a Canvas instance.
 */
async function _default(scaleFactor, opt) {
  const r = await (0, _renderHeadless.default)(this, _vegaScenegraph.RenderType.Canvas, scaleFactor, opt);
  return r.canvas();
}
},{"./render-headless":"node_modules/vega-view/src/render-headless.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js"}],"node_modules/vega-view/src/render-to-svg.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _renderHeadless = _interopRequireDefault(require("./render-headless"));

var _vegaScenegraph = require("vega-scenegraph");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produce a rendered SVG string of the visualization.
 * This method is asynchronous, returning a Promise instance.
 * @return {Promise} - A promise that resolves to an SVG string.
 */
async function _default(scaleFactor) {
  const r = await (0, _renderHeadless.default)(this, _vegaScenegraph.RenderType.SVG, scaleFactor);
  return r.svg();
}
},{"./render-headless":"node_modules/vega-view/src/render-headless.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js"}],"node_modules/vega-expression/src/ast.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ASTNode;
exports.UnaryExpression = exports.ObjectExpression = exports.MemberExpression = exports.LogicalExpression = exports.ConditionalExpression = exports.CallExpression = exports.BinaryExpression = exports.ArrayExpression = exports.Identifier = exports.Property = exports.Literal = exports.RawCode = void 0;
var RawCode = 'RawCode';
exports.RawCode = RawCode;
var Literal = 'Literal';
exports.Literal = Literal;
var Property = 'Property';
exports.Property = Property;
var Identifier = 'Identifier';
exports.Identifier = Identifier;
var ArrayExpression = 'ArrayExpression';
exports.ArrayExpression = ArrayExpression;
var BinaryExpression = 'BinaryExpression';
exports.BinaryExpression = BinaryExpression;
var CallExpression = 'CallExpression';
exports.CallExpression = CallExpression;
var ConditionalExpression = 'ConditionalExpression';
exports.ConditionalExpression = ConditionalExpression;
var LogicalExpression = 'LogicalExpression';
exports.LogicalExpression = LogicalExpression;
var MemberExpression = 'MemberExpression';
exports.MemberExpression = MemberExpression;
var ObjectExpression = 'ObjectExpression';
exports.ObjectExpression = ObjectExpression;
var UnaryExpression = 'UnaryExpression';
exports.UnaryExpression = UnaryExpression;

function ASTNode(type) {
  this.type = type;
}

ASTNode.prototype.visit = function (visitor) {
  var node = this,
      c,
      i,
      n;
  if (visitor(node)) return 1;

  for (c = children(node), i = 0, n = c.length; i < n; ++i) {
    if (c[i].visit(visitor)) return 1;
  }
};

function children(node) {
  switch (node.type) {
    case ArrayExpression:
      return node.elements;

    case BinaryExpression:
    case LogicalExpression:
      return [node.left, node.right];

    case CallExpression:
      var args = node.arguments.slice();
      args.unshift(node.callee);
      return args;

    case ConditionalExpression:
      return [node.test, node.consequent, node.alternate];

    case MemberExpression:
      return [node.object, node.property];

    case ObjectExpression:
      return node.properties;

    case Property:
      return [node.key, node.value];

    case UnaryExpression:
      return [node.argument];

    case Identifier:
    case Literal:
    case RawCode:
    default:
      return [];
  }
}
},{}],"node_modules/vega-expression/src/parser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ast = _interopRequireDefault(require("./ast"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
  The following expression parser is based on Esprima (http://esprima.org/).
  Original header comment and license for Esprima is included here:

  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
var TokenName, source, index, length, lookahead;
var TokenBooleanLiteral = 1,
    TokenEOF = 2,
    TokenIdentifier = 3,
    TokenKeyword = 4,
    TokenNullLiteral = 5,
    TokenNumericLiteral = 6,
    TokenPunctuator = 7,
    TokenStringLiteral = 8,
    TokenRegularExpression = 9;
TokenName = {};
TokenName[TokenBooleanLiteral] = 'Boolean';
TokenName[TokenEOF] = '<end>';
TokenName[TokenIdentifier] = 'Identifier';
TokenName[TokenKeyword] = 'Keyword';
TokenName[TokenNullLiteral] = 'Null';
TokenName[TokenNumericLiteral] = 'Numeric';
TokenName[TokenPunctuator] = 'Punctuator';
TokenName[TokenStringLiteral] = 'String';
TokenName[TokenRegularExpression] = 'RegularExpression';
var SyntaxArrayExpression = 'ArrayExpression',
    SyntaxBinaryExpression = 'BinaryExpression',
    SyntaxCallExpression = 'CallExpression',
    SyntaxConditionalExpression = 'ConditionalExpression',
    SyntaxIdentifier = 'Identifier',
    SyntaxLiteral = 'Literal',
    SyntaxLogicalExpression = 'LogicalExpression',
    SyntaxMemberExpression = 'MemberExpression',
    SyntaxObjectExpression = 'ObjectExpression',
    SyntaxProperty = 'Property',
    SyntaxUnaryExpression = 'UnaryExpression'; // Error messages should be identical to V8.

var MessageUnexpectedToken = 'Unexpected token %0',
    MessageUnexpectedNumber = 'Unexpected number',
    MessageUnexpectedString = 'Unexpected string',
    MessageUnexpectedIdentifier = 'Unexpected identifier',
    MessageUnexpectedReserved = 'Unexpected reserved word',
    MessageUnexpectedEOS = 'Unexpected end of input',
    MessageInvalidRegExp = 'Invalid regular expression',
    MessageUnterminatedRegExp = 'Invalid regular expression: missing /',
    MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',
    MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';
var ILLEGAL = 'ILLEGAL',
    DISABLED = 'Disabled.'; // See also tools/generate-unicode-regex.py.

var RegexNonAsciiIdentifierStart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"),
    // eslint-disable-next-line no-misleading-character-class
RegexNonAsciiIdentifierPart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"); // Ensure the condition is true, otherwise throw an error.
// This is only to have a better contract semantic, i.e. another safety net
// to catch a logic error. The condition shall be fulfilled in normal case.
// Do NOT use this to enforce a certain condition on any user input.

function assert(condition, message) {
  /* istanbul ignore next */
  if (!condition) {
    throw new Error('ASSERT: ' + message);
  }
}

function isDecimalDigit(ch) {
  return ch >= 0x30 && ch <= 0x39; // 0..9
}

function isHexDigit(ch) {
  return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
}

function isOctalDigit(ch) {
  return '01234567'.indexOf(ch) >= 0;
} // 7.2 White Space


function isWhiteSpace(ch) {
  return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0;
} // 7.3 Line Terminators


function isLineTerminator(ch) {
  return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
} // 7.6 Identifier Names and Identifiers


function isIdentifierStart(ch) {
  return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
  ch >= 0x41 && ch <= 0x5A || // A..Z
  ch >= 0x61 && ch <= 0x7A || // a..z
  ch === 0x5C || // \ (backslash)
  ch >= 0x80 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));
}

function isIdentifierPart(ch) {
  return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
  ch >= 0x41 && ch <= 0x5A || // A..Z
  ch >= 0x61 && ch <= 0x7A || // a..z
  ch >= 0x30 && ch <= 0x39 || // 0..9
  ch === 0x5C || // \ (backslash)
  ch >= 0x80 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));
} // 7.6.1.1 Keywords


var keywords = {
  'if': 1,
  'in': 1,
  'do': 1,
  'var': 1,
  'for': 1,
  'new': 1,
  'try': 1,
  'let': 1,
  'this': 1,
  'else': 1,
  'case': 1,
  'void': 1,
  'with': 1,
  'enum': 1,
  'while': 1,
  'break': 1,
  'catch': 1,
  'throw': 1,
  'const': 1,
  'yield': 1,
  'class': 1,
  'super': 1,
  'return': 1,
  'typeof': 1,
  'delete': 1,
  'switch': 1,
  'export': 1,
  'import': 1,
  'public': 1,
  'static': 1,
  'default': 1,
  'finally': 1,
  'extends': 1,
  'package': 1,
  'private': 1,
  'function': 1,
  'continue': 1,
  'debugger': 1,
  'interface': 1,
  'protected': 1,
  'instanceof': 1,
  'implements': 1
};

function skipComment() {
  var ch;

  while (index < length) {
    ch = source.charCodeAt(index);

    if (isWhiteSpace(ch) || isLineTerminator(ch)) {
      ++index;
    } else {
      break;
    }
  }
}

function scanHexEscape(prefix) {
  var i,
      len,
      ch,
      code = 0;
  len = prefix === 'u' ? 4 : 2;

  for (i = 0; i < len; ++i) {
    if (index < length && isHexDigit(source[index])) {
      ch = source[index++];
      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
    } else {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
  }

  return String.fromCharCode(code);
}

function scanUnicodeCodePointEscape() {
  var ch, code, cu1, cu2;
  ch = source[index];
  code = 0; // At least, one hex digit is required.

  if (ch === '}') {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  while (index < length) {
    ch = source[index++];

    if (!isHexDigit(ch)) {
      break;
    }

    code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
  }

  if (code > 0x10FFFF || ch !== '}') {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  } // UTF-16 Encoding


  if (code <= 0xFFFF) {
    return String.fromCharCode(code);
  }

  cu1 = (code - 0x10000 >> 10) + 0xD800;
  cu2 = (code - 0x10000 & 1023) + 0xDC00;
  return String.fromCharCode(cu1, cu2);
}

function getEscapedIdentifier() {
  var ch, id;
  ch = source.charCodeAt(index++);
  id = String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.

  if (ch === 0x5C) {
    if (source.charCodeAt(index) !== 0x75) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    ++index;
    ch = scanHexEscape('u');

    if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    id = ch;
  }

  while (index < length) {
    ch = source.charCodeAt(index);

    if (!isIdentifierPart(ch)) {
      break;
    }

    ++index;
    id += String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.

    if (ch === 0x5C) {
      id = id.substr(0, id.length - 1);

      if (source.charCodeAt(index) !== 0x75) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      ++index;
      ch = scanHexEscape('u');

      if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      id += ch;
    }
  }

  return id;
}

function getIdentifier() {
  var start, ch;
  start = index++;

  while (index < length) {
    ch = source.charCodeAt(index);

    if (ch === 0x5C) {
      // Blackslash (U+005C) marks Unicode escape sequence.
      index = start;
      return getEscapedIdentifier();
    }

    if (isIdentifierPart(ch)) {
      ++index;
    } else {
      break;
    }
  }

  return source.slice(start, index);
}

function scanIdentifier() {
  var start, id, type;
  start = index; // Backslash (U+005C) starts an escaped character.

  id = source.charCodeAt(index) === 0x5C ? getEscapedIdentifier() : getIdentifier(); // There is no keyword or literal with only one character.
  // Thus, it must be an identifier.

  if (id.length === 1) {
    type = TokenIdentifier;
  } else if (keywords.hasOwnProperty(id)) {
    // eslint-disable-line no-prototype-builtins
    type = TokenKeyword;
  } else if (id === 'null') {
    type = TokenNullLiteral;
  } else if (id === 'true' || id === 'false') {
    type = TokenBooleanLiteral;
  } else {
    type = TokenIdentifier;
  }

  return {
    type: type,
    value: id,
    start: start,
    end: index
  };
} // 7.7 Punctuators


function scanPunctuator() {
  var start = index,
      code = source.charCodeAt(index),
      code2,
      ch1 = source[index],
      ch2,
      ch3,
      ch4;

  switch (code) {
    // Check for most common single-character punctuators.
    case 0x2E: // . dot

    case 0x28: // ( open bracket

    case 0x29: // ) close bracket

    case 0x3B: // ; semicolon

    case 0x2C: // , comma

    case 0x7B: // { open curly brace

    case 0x7D: // } close curly brace

    case 0x5B: // [

    case 0x5D: // ]

    case 0x3A: // :

    case 0x3F: // ?

    case 0x7E:
      // ~
      ++index;
      return {
        type: TokenPunctuator,
        value: String.fromCharCode(code),
        start: start,
        end: index
      };

    default:
      code2 = source.charCodeAt(index + 1); // '=' (U+003D) marks an assignment or comparison operator.

      if (code2 === 0x3D) {
        switch (code) {
          case 0x2B: // +

          case 0x2D: // -

          case 0x2F: // /

          case 0x3C: // <

          case 0x3E: // >

          case 0x5E: // ^

          case 0x7C: // |

          case 0x25: // %

          case 0x26: // &

          case 0x2A:
            // *
            index += 2;
            return {
              type: TokenPunctuator,
              value: String.fromCharCode(code) + String.fromCharCode(code2),
              start: start,
              end: index
            };

          case 0x21: // !

          case 0x3D:
            // =
            index += 2; // !== and ===

            if (source.charCodeAt(index) === 0x3D) {
              ++index;
            }

            return {
              type: TokenPunctuator,
              value: source.slice(start, index),
              start: start,
              end: index
            };
        }
      }

  } // 4-character punctuator: >>>=


  ch4 = source.substr(index, 4);

  if (ch4 === '>>>=') {
    index += 4;
    return {
      type: TokenPunctuator,
      value: ch4,
      start: start,
      end: index
    };
  } // 3-character punctuators: === !== >>> <<= >>=


  ch3 = ch4.substr(0, 3);

  if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
    index += 3;
    return {
      type: TokenPunctuator,
      value: ch3,
      start: start,
      end: index
    };
  } // Other 2-character punctuators: ++ -- << >> && ||


  ch2 = ch3.substr(0, 2);

  if (ch1 === ch2[1] && '+-<>&|'.indexOf(ch1) >= 0 || ch2 === '=>') {
    index += 2;
    return {
      type: TokenPunctuator,
      value: ch2,
      start: start,
      end: index
    };
  } // 1-character punctuators: < > = ! + - * % & | ^ /


  if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
    ++index;
    return {
      type: TokenPunctuator,
      value: ch1,
      start: start,
      end: index
    };
  }

  throwError({}, MessageUnexpectedToken, ILLEGAL);
} // 7.8.3 Numeric Literals


function scanHexLiteral(start) {
  var number = '';

  while (index < length) {
    if (!isHexDigit(source[index])) {
      break;
    }

    number += source[index++];
  }

  if (number.length === 0) {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  if (isIdentifierStart(source.charCodeAt(index))) {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  return {
    type: TokenNumericLiteral,
    value: parseInt('0x' + number, 16),
    start: start,
    end: index
  };
}

function scanOctalLiteral(start) {
  var number = '0' + source[index++];

  while (index < length) {
    if (!isOctalDigit(source[index])) {
      break;
    }

    number += source[index++];
  }

  if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  return {
    type: TokenNumericLiteral,
    value: parseInt(number, 8),
    octal: true,
    start: start,
    end: index
  };
}

function scanNumericLiteral() {
  var number, start, ch;
  ch = source[index];
  assert(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
  start = index;
  number = '';

  if (ch !== '.') {
    number = source[index++];
    ch = source[index]; // Hex number starts with '0x'.
    // Octal number starts with '0'.

    if (number === '0') {
      if (ch === 'x' || ch === 'X') {
        ++index;
        return scanHexLiteral(start);
      }

      if (isOctalDigit(ch)) {
        return scanOctalLiteral(start);
      } // decimal number starts with '0' such as '09' is illegal.


      if (ch && isDecimalDigit(ch.charCodeAt(0))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
    }

    while (isDecimalDigit(source.charCodeAt(index))) {
      number += source[index++];
    }

    ch = source[index];
  }

  if (ch === '.') {
    number += source[index++];

    while (isDecimalDigit(source.charCodeAt(index))) {
      number += source[index++];
    }

    ch = source[index];
  }

  if (ch === 'e' || ch === 'E') {
    number += source[index++];
    ch = source[index];

    if (ch === '+' || ch === '-') {
      number += source[index++];
    }

    if (isDecimalDigit(source.charCodeAt(index))) {
      while (isDecimalDigit(source.charCodeAt(index))) {
        number += source[index++];
      }
    } else {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
  }

  if (isIdentifierStart(source.charCodeAt(index))) {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  return {
    type: TokenNumericLiteral,
    value: parseFloat(number),
    start: start,
    end: index
  };
} // 7.8.4 String Literals


function scanStringLiteral() {
  var str = '',
      quote,
      start,
      ch,
      code,
      octal = false;
  quote = source[index];
  assert(quote === '\'' || quote === '"', 'String literal must starts with a quote');
  start = index;
  ++index;

  while (index < length) {
    ch = source[index++];

    if (ch === quote) {
      quote = '';
      break;
    } else if (ch === '\\') {
      ch = source[index++];

      if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
        switch (ch) {
          case 'u':
          case 'x':
            if (source[index] === '{') {
              ++index;
              str += scanUnicodeCodePointEscape();
            } else {
              str += scanHexEscape(ch);
            }

            break;

          case 'n':
            str += '\n';
            break;

          case 'r':
            str += '\r';
            break;

          case 't':
            str += '\t';
            break;

          case 'b':
            str += '\b';
            break;

          case 'f':
            str += '\f';
            break;

          case 'v':
            str += '\x0B';
            break;

          default:
            if (isOctalDigit(ch)) {
              code = '01234567'.indexOf(ch); // \0 is not octal escape sequence

              if (code !== 0) {
                octal = true;
              }

              if (index < length && isOctalDigit(source[index])) {
                octal = true;
                code = code * 8 + '01234567'.indexOf(source[index++]); // 3 digits are only allowed when string starts
                // with 0, 1, 2, 3

                if ('0123'.indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) {
                  code = code * 8 + '01234567'.indexOf(source[index++]);
                }
              }

              str += String.fromCharCode(code);
            } else {
              str += ch;
            }

            break;
        }
      } else {
        if (ch === '\r' && source[index] === '\n') {
          ++index;
        }
      }
    } else if (isLineTerminator(ch.charCodeAt(0))) {
      break;
    } else {
      str += ch;
    }
  }

  if (quote !== '') {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  return {
    type: TokenStringLiteral,
    value: str,
    octal: octal,
    start: start,
    end: index
  };
}

function testRegExp(pattern, flags) {
  var tmp = pattern;

  if (flags.indexOf('u') >= 0) {
    // Replace each astral symbol and every Unicode code point
    // escape sequence with a single ASCII symbol to avoid throwing on
    // regular expressions that are only valid in combination with the
    // `/u` flag.
    // Note: replacing with the ASCII symbol `x` might cause false
    // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
    // perfectly valid pattern that is equivalent to `[a-b]`, but it
    // would be replaced by `[x-b]` which throws an error.
    tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function ($0, $1) {
      if (parseInt($1, 16) <= 0x10FFFF) {
        return 'x';
      }

      throwError({}, MessageInvalidRegExp);
    }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x');
  } // First, detect invalid regular expressions.


  try {
    new RegExp(tmp);
  } catch (e) {
    throwError({}, MessageInvalidRegExp);
  } // Return a regular expression object for this pattern-flag pair, or
  // `null` in case the current environment doesn't support the flags it
  // uses.


  try {
    return new RegExp(pattern, flags);
  } catch (exception) {
    return null;
  }
}

function scanRegExpBody() {
  var ch, str, classMarker, terminated, body;
  ch = source[index];
  assert(ch === '/', 'Regular expression literal must start with a slash');
  str = source[index++];
  classMarker = false;
  terminated = false;

  while (index < length) {
    ch = source[index++];
    str += ch;

    if (ch === '\\') {
      ch = source[index++]; // ECMA-262 7.8.5

      if (isLineTerminator(ch.charCodeAt(0))) {
        throwError({}, MessageUnterminatedRegExp);
      }

      str += ch;
    } else if (isLineTerminator(ch.charCodeAt(0))) {
      throwError({}, MessageUnterminatedRegExp);
    } else if (classMarker) {
      if (ch === ']') {
        classMarker = false;
      }
    } else {
      if (ch === '/') {
        terminated = true;
        break;
      } else if (ch === '[') {
        classMarker = true;
      }
    }
  }

  if (!terminated) {
    throwError({}, MessageUnterminatedRegExp);
  } // Exclude leading and trailing slash.


  body = str.substr(1, str.length - 2);
  return {
    value: body,
    literal: str
  };
}

function scanRegExpFlags() {
  var ch, str, flags;
  str = '';
  flags = '';

  while (index < length) {
    ch = source[index];

    if (!isIdentifierPart(ch.charCodeAt(0))) {
      break;
    }

    ++index;

    if (ch === '\\' && index < length) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    } else {
      flags += ch;
      str += ch;
    }
  }

  if (flags.search(/[^gimuy]/g) >= 0) {
    throwError({}, MessageInvalidRegExp, flags);
  }

  return {
    value: flags,
    literal: str
  };
}

function scanRegExp() {
  var start, body, flags, value;
  lookahead = null;
  skipComment();
  start = index;
  body = scanRegExpBody();
  flags = scanRegExpFlags();
  value = testRegExp(body.value, flags.value);
  return {
    literal: body.literal + flags.literal,
    value: value,
    regex: {
      pattern: body.value,
      flags: flags.value
    },
    start: start,
    end: index
  };
}

function isIdentifierName(token) {
  return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;
}

function advance() {
  var ch;
  skipComment();

  if (index >= length) {
    return {
      type: TokenEOF,
      start: index,
      end: index
    };
  }

  ch = source.charCodeAt(index);

  if (isIdentifierStart(ch)) {
    return scanIdentifier();
  } // Very common: ( and ) and ;


  if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
    return scanPunctuator();
  } // String literal starts with single quote (U+0027) or double quote (U+0022).


  if (ch === 0x27 || ch === 0x22) {
    return scanStringLiteral();
  } // Dot (.) U+002E can also start a floating-point number, hence the need
  // to check the next character.


  if (ch === 0x2E) {
    if (isDecimalDigit(source.charCodeAt(index + 1))) {
      return scanNumericLiteral();
    }

    return scanPunctuator();
  }

  if (isDecimalDigit(ch)) {
    return scanNumericLiteral();
  }

  return scanPunctuator();
}

function lex() {
  var token;
  token = lookahead;
  index = token.end;
  lookahead = advance();
  index = token.end;
  return token;
}

function peek() {
  var pos;
  pos = index;
  lookahead = advance();
  index = pos;
}

function finishArrayExpression(elements) {
  var node = new _ast.default(SyntaxArrayExpression);
  node.elements = elements;
  return node;
}

function finishBinaryExpression(operator, left, right) {
  var node = new _ast.default(operator === '||' || operator === '&&' ? SyntaxLogicalExpression : SyntaxBinaryExpression);
  node.operator = operator;
  node.left = left;
  node.right = right;
  return node;
}

function finishCallExpression(callee, args) {
  var node = new _ast.default(SyntaxCallExpression);
  node.callee = callee;
  node.arguments = args;
  return node;
}

function finishConditionalExpression(test, consequent, alternate) {
  var node = new _ast.default(SyntaxConditionalExpression);
  node.test = test;
  node.consequent = consequent;
  node.alternate = alternate;
  return node;
}

function finishIdentifier(name) {
  var node = new _ast.default(SyntaxIdentifier);
  node.name = name;
  return node;
}

function finishLiteral(token) {
  var node = new _ast.default(SyntaxLiteral);
  node.value = token.value;
  node.raw = source.slice(token.start, token.end);

  if (token.regex) {
    if (node.raw === '//') {
      node.raw = '/(?:)/';
    }

    node.regex = token.regex;
  }

  return node;
}

function finishMemberExpression(accessor, object, property) {
  var node = new _ast.default(SyntaxMemberExpression);
  node.computed = accessor === '[';
  node.object = object;
  node.property = property;
  if (!node.computed) property.member = true;
  return node;
}

function finishObjectExpression(properties) {
  var node = new _ast.default(SyntaxObjectExpression);
  node.properties = properties;
  return node;
}

function finishProperty(kind, key, value) {
  var node = new _ast.default(SyntaxProperty);
  node.key = key;
  node.value = value;
  node.kind = kind;
  return node;
}

function finishUnaryExpression(operator, argument) {
  var node = new _ast.default(SyntaxUnaryExpression);
  node.operator = operator;
  node.argument = argument;
  node.prefix = true;
  return node;
} // Throw an exception


function throwError(token, messageFormat) {
  var error,
      args = Array.prototype.slice.call(arguments, 2),
      msg = messageFormat.replace(/%(\d)/g, function (whole, index) {
    assert(index < args.length, 'Message reference must be in range');
    return args[index];
  });
  error = new Error(msg);
  error.index = index;
  error.description = msg;
  throw error;
} // Throw an exception because of the token.


function throwUnexpected(token) {
  if (token.type === TokenEOF) {
    throwError(token, MessageUnexpectedEOS);
  }

  if (token.type === TokenNumericLiteral) {
    throwError(token, MessageUnexpectedNumber);
  }

  if (token.type === TokenStringLiteral) {
    throwError(token, MessageUnexpectedString);
  }

  if (token.type === TokenIdentifier) {
    throwError(token, MessageUnexpectedIdentifier);
  }

  if (token.type === TokenKeyword) {
    throwError(token, MessageUnexpectedReserved);
  } // BooleanLiteral, NullLiteral, or Punctuator.


  throwError(token, MessageUnexpectedToken, token.value);
} // Expect the next token to match the specified punctuator.
// If not, an exception will be thrown.


function expect(value) {
  var token = lex();

  if (token.type !== TokenPunctuator || token.value !== value) {
    throwUnexpected(token);
  }
} // Return true if the next token matches the specified punctuator.


function match(value) {
  return lookahead.type === TokenPunctuator && lookahead.value === value;
} // Return true if the next token matches the specified keyword


function matchKeyword(keyword) {
  return lookahead.type === TokenKeyword && lookahead.value === keyword;
} // 11.1.4 Array Initialiser


function parseArrayInitialiser() {
  var elements = [];
  index = lookahead.start;
  expect('[');

  while (!match(']')) {
    if (match(',')) {
      lex();
      elements.push(null);
    } else {
      elements.push(parseConditionalExpression());

      if (!match(']')) {
        expect(',');
      }
    }
  }

  lex();
  return finishArrayExpression(elements);
} // 11.1.5 Object Initialiser


function parseObjectPropertyKey() {
  var token;
  index = lookahead.start;
  token = lex(); // Note: This function is called only from parseObjectProperty(), where
  // EOF and Punctuator tokens are already filtered out.

  if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
    if (token.octal) {
      throwError(token, MessageStrictOctalLiteral);
    }

    return finishLiteral(token);
  }

  return finishIdentifier(token.value);
}

function parseObjectProperty() {
  var token, key, id, value;
  index = lookahead.start;
  token = lookahead;

  if (token.type === TokenIdentifier) {
    id = parseObjectPropertyKey();
    expect(':');
    value = parseConditionalExpression();
    return finishProperty('init', id, value);
  }

  if (token.type === TokenEOF || token.type === TokenPunctuator) {
    throwUnexpected(token);
  } else {
    key = parseObjectPropertyKey();
    expect(':');
    value = parseConditionalExpression();
    return finishProperty('init', key, value);
  }
}

function parseObjectInitialiser() {
  var properties = [],
      property,
      name,
      key,
      map = {},
      toString = String;
  index = lookahead.start;
  expect('{');

  while (!match('}')) {
    property = parseObjectProperty();

    if (property.key.type === SyntaxIdentifier) {
      name = property.key.name;
    } else {
      name = toString(property.key.value);
    }

    key = '$' + name;

    if (Object.prototype.hasOwnProperty.call(map, key)) {
      throwError({}, MessageStrictDuplicateProperty);
    } else {
      map[key] = true;
    }

    properties.push(property);

    if (!match('}')) {
      expect(',');
    }
  }

  expect('}');
  return finishObjectExpression(properties);
} // 11.1.6 The Grouping Operator


function parseGroupExpression() {
  var expr;
  expect('(');
  expr = parseExpression();
  expect(')');
  return expr;
} // 11.1 Primary Expressions


var legalKeywords = {
  "if": 1,
  "this": 1
};

function parsePrimaryExpression() {
  var type, token, expr;

  if (match('(')) {
    return parseGroupExpression();
  }

  if (match('[')) {
    return parseArrayInitialiser();
  }

  if (match('{')) {
    return parseObjectInitialiser();
  }

  type = lookahead.type;
  index = lookahead.start;

  if (type === TokenIdentifier || legalKeywords[lookahead.value]) {
    expr = finishIdentifier(lex().value);
  } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {
    if (lookahead.octal) {
      throwError(lookahead, MessageStrictOctalLiteral);
    }

    expr = finishLiteral(lex());
  } else if (type === TokenKeyword) {
    throw new Error(DISABLED);
  } else if (type === TokenBooleanLiteral) {
    token = lex();
    token.value = token.value === 'true';
    expr = finishLiteral(token);
  } else if (type === TokenNullLiteral) {
    token = lex();
    token.value = null;
    expr = finishLiteral(token);
  } else if (match('/') || match('/=')) {
    expr = finishLiteral(scanRegExp());
    peek();
  } else {
    throwUnexpected(lex());
  }

  return expr;
} // 11.2 Left-Hand-Side Expressions


function parseArguments() {
  var args = [];
  expect('(');

  if (!match(')')) {
    while (index < length) {
      args.push(parseConditionalExpression());

      if (match(')')) {
        break;
      }

      expect(',');
    }
  }

  expect(')');
  return args;
}

function parseNonComputedProperty() {
  var token;
  index = lookahead.start;
  token = lex();

  if (!isIdentifierName(token)) {
    throwUnexpected(token);
  }

  return finishIdentifier(token.value);
}

function parseNonComputedMember() {
  expect('.');
  return parseNonComputedProperty();
}

function parseComputedMember() {
  var expr;
  expect('[');
  expr = parseExpression();
  expect(']');
  return expr;
}

function parseLeftHandSideExpressionAllowCall() {
  var expr, args, property;
  expr = parsePrimaryExpression();

  for (;;) {
    if (match('.')) {
      property = parseNonComputedMember();
      expr = finishMemberExpression('.', expr, property);
    } else if (match('(')) {
      args = parseArguments();
      expr = finishCallExpression(expr, args);
    } else if (match('[')) {
      property = parseComputedMember();
      expr = finishMemberExpression('[', expr, property);
    } else {
      break;
    }
  }

  return expr;
} // 11.3 Postfix Expressions


function parsePostfixExpression() {
  var expr = parseLeftHandSideExpressionAllowCall();

  if (lookahead.type === TokenPunctuator) {
    if (match('++') || match('--')) {
      throw new Error(DISABLED);
    }
  }

  return expr;
} // 11.4 Unary Operators


function parseUnaryExpression() {
  var token, expr;

  if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {
    expr = parsePostfixExpression();
  } else if (match('++') || match('--')) {
    throw new Error(DISABLED);
  } else if (match('+') || match('-') || match('~') || match('!')) {
    token = lex();
    expr = parseUnaryExpression();
    expr = finishUnaryExpression(token.value, expr);
  } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
    throw new Error(DISABLED);
  } else {
    expr = parsePostfixExpression();
  }

  return expr;
}

function binaryPrecedence(token) {
  var prec = 0;

  if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {
    return 0;
  }

  switch (token.value) {
    case '||':
      prec = 1;
      break;

    case '&&':
      prec = 2;
      break;

    case '|':
      prec = 3;
      break;

    case '^':
      prec = 4;
      break;

    case '&':
      prec = 5;
      break;

    case '==':
    case '!=':
    case '===':
    case '!==':
      prec = 6;
      break;

    case '<':
    case '>':
    case '<=':
    case '>=':
    case 'instanceof':
    case 'in':
      prec = 7;
      break;

    case '<<':
    case '>>':
    case '>>>':
      prec = 8;
      break;

    case '+':
    case '-':
      prec = 9;
      break;

    case '*':
    case '/':
    case '%':
      prec = 11;
      break;

    default:
      break;
  }

  return prec;
} // 11.5 Multiplicative Operators
// 11.6 Additive Operators
// 11.7 Bitwise Shift Operators
// 11.8 Relational Operators
// 11.9 Equality Operators
// 11.10 Binary Bitwise Operators
// 11.11 Binary Logical Operators


function parseBinaryExpression() {
  var marker, markers, expr, token, prec, stack, right, operator, left, i;
  marker = lookahead;
  left = parseUnaryExpression();
  token = lookahead;
  prec = binaryPrecedence(token);

  if (prec === 0) {
    return left;
  }

  token.prec = prec;
  lex();
  markers = [marker, lookahead];
  right = parseUnaryExpression();
  stack = [left, token, right];

  while ((prec = binaryPrecedence(lookahead)) > 0) {
    // Reduce: make a binary expression from the three topmost entries.
    while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
      right = stack.pop();
      operator = stack.pop().value;
      left = stack.pop();
      markers.pop();
      expr = finishBinaryExpression(operator, left, right);
      stack.push(expr);
    } // Shift.


    token = lex();
    token.prec = prec;
    stack.push(token);
    markers.push(lookahead);
    expr = parseUnaryExpression();
    stack.push(expr);
  } // Final reduce to clean-up the stack.


  i = stack.length - 1;
  expr = stack[i];
  markers.pop();

  while (i > 1) {
    markers.pop();
    expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
    i -= 2;
  }

  return expr;
} // 11.12 Conditional Operator


function parseConditionalExpression() {
  var expr, consequent, alternate;
  expr = parseBinaryExpression();

  if (match('?')) {
    lex();
    consequent = parseConditionalExpression();
    expect(':');
    alternate = parseConditionalExpression();
    expr = finishConditionalExpression(expr, consequent, alternate);
  }

  return expr;
} // 11.14 Comma Operator


function parseExpression() {
  var expr = parseConditionalExpression();

  if (match(',')) {
    throw new Error(DISABLED); // no sequence expressions
  }

  return expr;
}

function _default(code) {
  source = code;
  index = 0;
  length = source.length;
  lookahead = null;
  peek();
  var expr = parseExpression();

  if (lookahead.type !== TokenEOF) {
    throw new Error("Unexpect token after expression.");
  }

  return expr;
}
},{"./ast":"node_modules/vega-expression/src/ast.js"}],"node_modules/vega-expression/src/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  NaN: 'NaN',
  E: 'Math.E',
  LN2: 'Math.LN2',
  LN10: 'Math.LN10',
  LOG2E: 'Math.LOG2E',
  LOG10E: 'Math.LOG10E',
  PI: 'Math.PI',
  SQRT1_2: 'Math.SQRT1_2',
  SQRT2: 'Math.SQRT2',
  MIN_VALUE: 'Number.MIN_VALUE',
  MAX_VALUE: 'Number.MAX_VALUE'
};
exports.default = _default;
},{}],"node_modules/vega-expression/src/functions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

function _default(codegen) {
  function fncall(name, args, cast, type) {
    var obj = codegen(args[0]);

    if (cast) {
      obj = cast + '(' + obj + ')';
      if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';
    }

    return obj + '.' + name + (type < 0 ? '' : type === 0 ? '()' : '(' + args.slice(1).map(codegen).join(',') + ')');
  }

  function fn(name, cast, type) {
    return function (args) {
      return fncall(name, args, cast, type);
    };
  }

  var DATE = 'new Date',
      STRING = 'String',
      REGEXP = 'RegExp';
  return {
    // MATH functions
    isNaN: 'isNaN',
    isFinite: 'isFinite',
    abs: 'Math.abs',
    acos: 'Math.acos',
    asin: 'Math.asin',
    atan: 'Math.atan',
    atan2: 'Math.atan2',
    ceil: 'Math.ceil',
    cos: 'Math.cos',
    exp: 'Math.exp',
    floor: 'Math.floor',
    log: 'Math.log',
    max: 'Math.max',
    min: 'Math.min',
    pow: 'Math.pow',
    random: 'Math.random',
    round: 'Math.round',
    sin: 'Math.sin',
    sqrt: 'Math.sqrt',
    tan: 'Math.tan',
    clamp: function (args) {
      if (args.length < 3) (0, _vegaUtil.error)('Missing arguments to clamp function.');
      if (args.length > 3) (0, _vegaUtil.error)('Too many arguments to clamp function.');
      var a = args.map(codegen);
      return 'Math.max(' + a[1] + ', Math.min(' + a[2] + ',' + a[0] + '))';
    },
    // DATE functions
    now: 'Date.now',
    utc: 'Date.UTC',
    datetime: DATE,
    date: fn('getDate', DATE, 0),
    day: fn('getDay', DATE, 0),
    year: fn('getFullYear', DATE, 0),
    month: fn('getMonth', DATE, 0),
    hours: fn('getHours', DATE, 0),
    minutes: fn('getMinutes', DATE, 0),
    seconds: fn('getSeconds', DATE, 0),
    milliseconds: fn('getMilliseconds', DATE, 0),
    time: fn('getTime', DATE, 0),
    timezoneoffset: fn('getTimezoneOffset', DATE, 0),
    utcdate: fn('getUTCDate', DATE, 0),
    utcday: fn('getUTCDay', DATE, 0),
    utcyear: fn('getUTCFullYear', DATE, 0),
    utcmonth: fn('getUTCMonth', DATE, 0),
    utchours: fn('getUTCHours', DATE, 0),
    utcminutes: fn('getUTCMinutes', DATE, 0),
    utcseconds: fn('getUTCSeconds', DATE, 0),
    utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),
    // sequence functions
    length: fn('length', null, -1),
    join: fn('join', null),
    indexof: fn('indexOf', null),
    lastindexof: fn('lastIndexOf', null),
    slice: fn('slice', null),
    reverse: function (args) {
      return '(' + codegen(args[0]) + ').slice().reverse()';
    },
    // STRING functions
    parseFloat: 'parseFloat',
    parseInt: 'parseInt',
    upper: fn('toUpperCase', STRING, 0),
    lower: fn('toLowerCase', STRING, 0),
    substring: fn('substring', STRING),
    split: fn('split', STRING),
    replace: fn('replace', STRING),
    trim: fn('trim', STRING, 0),
    // REGEXP functions
    regexp: REGEXP,
    test: fn('test', REGEXP),
    // Control Flow functions
    if: function (args) {
      if (args.length < 3) (0, _vegaUtil.error)('Missing arguments to if function.');
      if (args.length > 3) (0, _vegaUtil.error)('Too many arguments to if function.');
      var a = args.map(codegen);
      return '(' + a[0] + '?' + a[1] + ':' + a[2] + ')';
    }
  };
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-expression/src/codegen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = _interopRequireDefault(require("./constants"));

var _functions = _interopRequireDefault(require("./functions"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stripQuotes(s) {
  var n = s && s.length - 1;
  return n && (s[0] === '"' && s[n] === '"' || s[0] === '\'' && s[n] === '\'') ? s.slice(1, -1) : s;
}

function _default(opt) {
  opt = opt || {};

  var whitelist = opt.whitelist ? (0, _vegaUtil.toSet)(opt.whitelist) : {},
      blacklist = opt.blacklist ? (0, _vegaUtil.toSet)(opt.blacklist) : {},
      constants = opt.constants || _constants.default,
      functions = (opt.functions || _functions.default)(visit),
      globalvar = opt.globalvar,
      fieldvar = opt.fieldvar,
      globals = {},
      fields = {},
      memberDepth = 0;

  var outputGlobal = (0, _vegaUtil.isFunction)(globalvar) ? globalvar : function (id) {
    return globalvar + '["' + id + '"]';
  };

  function visit(ast) {
    if ((0, _vegaUtil.isString)(ast)) return ast;
    var generator = Generators[ast.type];
    if (generator == null) (0, _vegaUtil.error)('Unsupported type: ' + ast.type);
    return generator(ast);
  }

  var Generators = {
    Literal: function (n) {
      return n.raw;
    },
    Identifier: function (n) {
      var id = n.name;

      if (memberDepth > 0) {
        return id;
      } else if ((0, _vegaUtil.hasOwnProperty)(blacklist, id)) {
        return (0, _vegaUtil.error)('Illegal identifier: ' + id);
      } else if ((0, _vegaUtil.hasOwnProperty)(constants, id)) {
        return constants[id];
      } else if ((0, _vegaUtil.hasOwnProperty)(whitelist, id)) {
        return id;
      } else {
        globals[id] = 1;
        return outputGlobal(id);
      }
    },
    MemberExpression: function (n) {
      var d = !n.computed;
      var o = visit(n.object);
      if (d) memberDepth += 1;
      var p = visit(n.property);

      if (o === fieldvar) {
        // strip quotes to sanitize field name (#1653)
        fields[stripQuotes(p)] = 1;
      }

      if (d) memberDepth -= 1;
      return o + (d ? '.' + p : '[' + p + ']');
    },
    CallExpression: function (n) {
      if (n.callee.type !== 'Identifier') {
        (0, _vegaUtil.error)('Illegal callee type: ' + n.callee.type);
      }

      var callee = n.callee.name;
      var args = n.arguments;
      var fn = (0, _vegaUtil.hasOwnProperty)(functions, callee) && functions[callee];
      if (!fn) (0, _vegaUtil.error)('Unrecognized function: ' + callee);
      return (0, _vegaUtil.isFunction)(fn) ? fn(args) : fn + '(' + args.map(visit).join(',') + ')';
    },
    ArrayExpression: function (n) {
      return '[' + n.elements.map(visit).join(',') + ']';
    },
    BinaryExpression: function (n) {
      return '(' + visit(n.left) + n.operator + visit(n.right) + ')';
    },
    UnaryExpression: function (n) {
      return '(' + n.operator + visit(n.argument) + ')';
    },
    ConditionalExpression: function (n) {
      return '(' + visit(n.test) + '?' + visit(n.consequent) + ':' + visit(n.alternate) + ')';
    },
    LogicalExpression: function (n) {
      return '(' + visit(n.left) + n.operator + visit(n.right) + ')';
    },
    ObjectExpression: function (n) {
      return '{' + n.properties.map(visit).join(',') + '}';
    },
    Property: function (n) {
      memberDepth += 1;
      var k = visit(n.key);
      memberDepth -= 1;
      return k + ':' + visit(n.value);
    }
  };

  function codegen(ast) {
    var result = {
      code: visit(ast),
      globals: Object.keys(globals),
      fields: Object.keys(fields)
    };
    globals = {};
    fields = {};
    return result;
  }

  codegen.functions = functions;
  codegen.constants = constants;
  return codegen;
}
},{"./constants":"node_modules/vega-expression/src/constants.js","./functions":"node_modules/vega-expression/src/functions.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-expression/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "RawCode", {
  enumerable: true,
  get: function () {
    return _ast.RawCode;
  }
});
Object.defineProperty(exports, "Literal", {
  enumerable: true,
  get: function () {
    return _ast.Literal;
  }
});
Object.defineProperty(exports, "Property", {
  enumerable: true,
  get: function () {
    return _ast.Property;
  }
});
Object.defineProperty(exports, "Identifier", {
  enumerable: true,
  get: function () {
    return _ast.Identifier;
  }
});
Object.defineProperty(exports, "ArrayExpression", {
  enumerable: true,
  get: function () {
    return _ast.ArrayExpression;
  }
});
Object.defineProperty(exports, "BinaryExpression", {
  enumerable: true,
  get: function () {
    return _ast.BinaryExpression;
  }
});
Object.defineProperty(exports, "CallExpression", {
  enumerable: true,
  get: function () {
    return _ast.CallExpression;
  }
});
Object.defineProperty(exports, "ConditionalExpression", {
  enumerable: true,
  get: function () {
    return _ast.ConditionalExpression;
  }
});
Object.defineProperty(exports, "LogicalExpression", {
  enumerable: true,
  get: function () {
    return _ast.LogicalExpression;
  }
});
Object.defineProperty(exports, "MemberExpression", {
  enumerable: true,
  get: function () {
    return _ast.MemberExpression;
  }
});
Object.defineProperty(exports, "ObjectExpression", {
  enumerable: true,
  get: function () {
    return _ast.ObjectExpression;
  }
});
Object.defineProperty(exports, "UnaryExpression", {
  enumerable: true,
  get: function () {
    return _ast.UnaryExpression;
  }
});
Object.defineProperty(exports, "ASTNode", {
  enumerable: true,
  get: function () {
    return _ast.default;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _parser.default;
  }
});
Object.defineProperty(exports, "codegen", {
  enumerable: true,
  get: function () {
    return _codegen.default;
  }
});
Object.defineProperty(exports, "functions", {
  enumerable: true,
  get: function () {
    return _functions.default;
  }
});
Object.defineProperty(exports, "constants", {
  enumerable: true,
  get: function () {
    return _constants.default;
  }
});

var _ast = _interopRequireWildcard(require("./src/ast"));

var _parser = _interopRequireDefault(require("./src/parser"));

var _codegen = _interopRequireDefault(require("./src/codegen"));

var _functions = _interopRequireDefault(require("./src/functions"));

var _constants = _interopRequireDefault(require("./src/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./src/ast":"node_modules/vega-expression/src/ast.js","./src/parser":"node_modules/vega-expression/src/parser.js","./src/codegen":"node_modules/vega-expression/src/codegen.js","./src/functions":"node_modules/vega-expression/src/functions.js","./src/constants":"node_modules/vega-expression/src/constants.js"}],"node_modules/vega-selections/src/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Union = exports.Intersect = void 0;
const Intersect = 'intersect';
exports.Intersect = Intersect;
const Union = 'union';
exports.Union = Union;
},{}],"node_modules/vega-selections/src/selectionTest.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectionTest = selectionTest;

var _constants = require("./constants");

var _vegaUtil = require("vega-util");

var TYPE_ENUM = 'E',
    TYPE_RANGE_INC = 'R',
    TYPE_RANGE_EXC = 'R-E',
    TYPE_RANGE_LE = 'R-LE',
    TYPE_RANGE_RE = 'R-RE',
    UNIT_INDEX = 'index:unit'; // TODO: revisit date coercion?

function testPoint(datum, entry) {
  var fields = entry.fields,
      values = entry.values,
      n = fields.length,
      i = 0,
      dval,
      f;

  for (; i < n; ++i) {
    f = fields[i];
    f.getter = _vegaUtil.field.getter || (0, _vegaUtil.field)(f.field);
    dval = f.getter(datum);
    if ((0, _vegaUtil.isDate)(dval)) dval = (0, _vegaUtil.toNumber)(dval);
    if ((0, _vegaUtil.isDate)(values[i])) values[i] = (0, _vegaUtil.toNumber)(values[i]);
    if ((0, _vegaUtil.isDate)(values[i][0])) values[i] = values[i].map(_vegaUtil.toNumber);

    if (f.type === TYPE_ENUM) {
      // Enumerated fields can either specify individual values (single/multi selections)
      // or an array of values (interval selections).
      if ((0, _vegaUtil.isArray)(values[i]) ? values[i].indexOf(dval) < 0 : dval !== values[i]) {
        return false;
      }
    } else {
      if (f.type === TYPE_RANGE_INC) {
        if (!(0, _vegaUtil.inrange)(dval, values[i])) return false;
      } else if (f.type === TYPE_RANGE_RE) {
        // Discrete selection of bins test within the range [bin_start, bin_end).
        if (!(0, _vegaUtil.inrange)(dval, values[i], true, false)) return false;
      } else if (f.type === TYPE_RANGE_EXC) {
        // 'R-E'/'R-LE' included for completeness.
        if (!(0, _vegaUtil.inrange)(dval, values[i], false, false)) return false;
      } else if (f.type === TYPE_RANGE_LE) {
        if (!(0, _vegaUtil.inrange)(dval, values[i], false, true)) return false;
      }
    }
  }

  return true;
}
/**
 * Tests if a tuple is contained within an interactive selection.
 * @param {string} name - The name of the data set representing the selection.
 *  Tuples in the dataset are of the form
 *  {unit: string, fields: array<fielddef>, values: array<*>}.
 *  Fielddef is of the form
 *  {field: string, channel: string, type: 'E' | 'R'} where
 *  'type' identifies whether tuples in the dataset enumerate
 *  values for the field, or specify a continuous range.
 * @param {object} datum - The tuple to test for inclusion.
 * @param {string} op - The set operation for combining selections.
 *   One of 'intersect' or 'union' (default).
 * @return {boolean} - True if the datum is in the selection, false otherwise.
 */


function selectionTest(name, datum, op) {
  var data = this.context.data[name],
      entries = data ? data.values.value : [],
      unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,
      intersect = op === _constants.Intersect,
      n = entries.length,
      i = 0,
      entry,
      miss,
      count,
      unit,
      b;

  for (; i < n; ++i) {
    entry = entries[i];

    if (unitIdx && intersect) {
      // multi selections union within the same unit and intersect across units.
      miss = miss || {};
      count = miss[unit = entry.unit] || 0; // if we've already matched this unit, skip.

      if (count === -1) continue;
      b = testPoint(datum, entry);
      miss[unit] = b ? -1 : ++count; // if we match and there are no other units return true
      // if we've missed against all tuples in this unit return false

      if (b && unitIdx.size === 1) return true;
      if (!b && count === unitIdx.get(unit).count) return false;
    } else {
      b = testPoint(datum, entry); // if we find a miss and we do require intersection return false
      // if we find a match and we don't require intersection return true

      if (intersect ^ b) return b;
    }
  } // if intersecting and we made it here, then we saw no misses
  // if not intersecting, then we saw no matches
  // if no active selections, return false


  return n && intersect;
}
},{"./constants":"node_modules/vega-selections/src/constants.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-selections/src/selectionResolve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectionResolve = selectionResolve;

var _constants = require("./constants");

var _vegaUtil = require("vega-util");

/**
 * Resolves selection for use as a scale domain or reads via the API.
 * @param {string} name - The name of the dataset representing the selection
 * @param {string} [op='union'] - The set operation for combining selections.
 *                 One of 'intersect' or 'union' (default).
 * @returns {object} An object of selected fields and values.
 */
function selectionResolve(name, op) {
  var data = this.context.data[name],
      entries = data ? data.values.value : [],
      resolved = {},
      types = {},
      entry,
      fields,
      values,
      unit,
      field,
      res,
      resUnit,
      type,
      union,
      n = entries.length,
      i = 0,
      j,
      m; // First union all entries within the same unit.

  for (; i < n; ++i) {
    entry = entries[i];
    unit = entry.unit;
    fields = entry.fields;
    values = entry.values;

    for (j = 0, m = fields.length; j < m; ++j) {
      field = fields[j];
      res = resolved[field.field] || (resolved[field.field] = {});
      resUnit = res[unit] || (res[unit] = []);
      types[field.field] = type = field.type.charAt(0);
      union = ops[type + '_union'];
      res[unit] = union(resUnit, (0, _vegaUtil.array)(values[j]));
    }
  } // Then resolve fields across units as per the op.


  op = op || _constants.Union;
  Object.keys(resolved).forEach(function (field) {
    resolved[field] = Object.keys(resolved[field]).map(function (unit) {
      return resolved[field][unit];
    }).reduce(function (acc, curr) {
      return acc === undefined ? curr : ops[types[field] + '_' + op](acc, curr);
    });
  });
  return resolved;
}

var ops = {
  E_union: function (base, value) {
    if (!base.length) return value;
    var i = 0,
        n = value.length;

    for (; i < n; ++i) if (base.indexOf(value[i]) < 0) base.push(value[i]);

    return base;
  },
  E_intersect: function (base, value) {
    return !base.length ? value : base.filter(function (v) {
      return value.indexOf(v) >= 0;
    });
  },
  R_union: function (base, value) {
    var lo = (0, _vegaUtil.toNumber)(value[0]),
        hi = (0, _vegaUtil.toNumber)(value[1]);

    if (lo > hi) {
      lo = value[1];
      hi = value[0];
    }

    if (!base.length) return [lo, hi];
    if (base[0] > lo) base[0] = lo;
    if (base[1] < hi) base[1] = hi;
    return base;
  },
  R_intersect: function (base, value) {
    var lo = (0, _vegaUtil.toNumber)(value[0]),
        hi = (0, _vegaUtil.toNumber)(value[1]);

    if (lo > hi) {
      lo = value[1];
      hi = value[0];
    }

    if (!base.length) return [lo, hi];

    if (hi < base[0] || base[1] < lo) {
      return [];
    } else {
      if (base[0] < lo) base[0] = lo;
      if (base[1] > hi) base[1] = hi;
    }

    return base;
  }
};
},{"./constants":"node_modules/vega-selections/src/constants.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-selections/src/selectionVisitor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectionVisitor = selectionVisitor;

var _constants = require("./constants");

var _vegaExpression = require("vega-expression");

var _vegaUtil = require("vega-util");

const DataPrefix = ':',
      IndexPrefix = '@';

function selectionVisitor(name, args, scope, params) {
  if (args[0].type !== _vegaExpression.Literal) (0, _vegaUtil.error)('First argument to selection functions must be a string literal.');
  const data = args[0].value,
        op = args.length >= 2 && (0, _vegaUtil.peek)(args).value,
        field = 'unit',
        indexName = IndexPrefix + field,
        dataName = DataPrefix + data; // eslint-disable-next-line no-prototype-builtins

  if (op === _constants.Intersect && !(0, _vegaUtil.hasOwnProperty)(params, indexName)) {
    params[indexName] = scope.getData(data).indataRef(scope, field);
  } // eslint-disable-next-line no-prototype-builtins


  if (!(0, _vegaUtil.hasOwnProperty)(params, dataName)) {
    params[dataName] = scope.getData(data).tuplesRef();
  }
}
},{"./constants":"node_modules/vega-selections/src/constants.js","vega-expression":"node_modules/vega-expression/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-selections/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "selectionTest", {
  enumerable: true,
  get: function () {
    return _selectionTest.selectionTest;
  }
});
Object.defineProperty(exports, "selectionResolve", {
  enumerable: true,
  get: function () {
    return _selectionResolve.selectionResolve;
  }
});
Object.defineProperty(exports, "selectionVisitor", {
  enumerable: true,
  get: function () {
    return _selectionVisitor.selectionVisitor;
  }
});

var _selectionTest = require("./src/selectionTest");

var _selectionResolve = require("./src/selectionResolve");

var _selectionVisitor = require("./src/selectionVisitor");
},{"./src/selectionTest":"node_modules/vega-selections/src/selectionTest.js","./src/selectionResolve":"node_modules/vega-selections/src/selectionResolve.js","./src/selectionVisitor":"node_modules/vega-selections/src/selectionVisitor.js"}],"node_modules/vega-functions/src/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.data = data;
exports.indata = indata;
exports.setdata = setdata;

var _vegaUtil = require("vega-util");

function data(name) {
  const data = this.context.data[name];
  return data ? data.values.value : [];
}

function indata(name, field, value) {
  const index = this.context.data[name]['index:' + field],
        entry = index ? index.value.get(value) : undefined;
  return entry ? entry.count : entry;
}

function setdata(name, tuples) {
  const df = this.context.dataflow,
        data = this.context.data[name],
        input = data.input;
  df.pulse(input, df.changeset().remove(_vegaUtil.truthy).insert(tuples));
  return 1;
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-functions/src/encode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(item, name, retval) {
  if (item) {
    const df = this.context.dataflow,
          target = item.mark.source;
    df.pulse(target, df.changeset().encode(item, name));
  }

  return retval !== undefined ? retval : item;
}
},{}],"node_modules/vega-functions/src/format.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.format = format;
exports.timeFormat = timeFormat;
exports.utcFormat = utcFormat;
exports.timeParse = timeParse;
exports.utcParse = utcParse;
exports.monthFormat = monthFormat;
exports.monthAbbrevFormat = monthAbbrevFormat;
exports.dayFormat = dayFormat;
exports.dayAbbrevFormat = dayAbbrevFormat;

var _d3Format = require("d3-format");

var _d3TimeFormat = require("d3-time-format");

const formatCache = {};

function formatter(type, method, specifier) {
  let k = type + ':' + specifier,
      e = formatCache[k];

  if (!e || e[0] !== method) {
    formatCache[k] = e = [method, method(specifier)];
  }

  return e[1];
}

function format(_, specifier) {
  return formatter('format', _d3Format.format, specifier)(_);
}

function timeFormat(_, specifier) {
  return formatter('timeFormat', _d3TimeFormat.timeFormat, specifier)(_);
}

function utcFormat(_, specifier) {
  return formatter('utcFormat', _d3TimeFormat.utcFormat, specifier)(_);
}

function timeParse(_, specifier) {
  return formatter('timeParse', _d3TimeFormat.timeParse, specifier)(_);
}

function utcParse(_, specifier) {
  return formatter('utcParse', _d3TimeFormat.utcParse, specifier)(_);
}

var dateObj = new Date(2000, 0, 1);

function time(month, day, specifier) {
  if (!Number.isInteger(month) || !Number.isInteger(day)) return '';
  dateObj.setMonth(month);
  dateObj.setDate(day);
  return timeFormat(dateObj, specifier);
}

function monthFormat(month) {
  return time(month, 1, '%B');
}

function monthAbbrevFormat(month) {
  return time(month, 1, '%b');
}

function dayFormat(day) {
  return time(0, 2 + day, '%A');
}

function dayAbbrevFormat(day) {
  return time(0, 2 + day, '%a');
}
},{"d3-format":"node_modules/d3-format/src/index.js","d3-time-format":"node_modules/d3-time-format/src/index.js"}],"node_modules/vega-functions/src/scale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getScale = getScale;
exports.range = range;
exports.domain = domain;
exports.bandwidth = bandwidth;
exports.bandspace = bandspace;
exports.copy = copy;
exports.scale = scale;
exports.invert = invert;

var _vegaScale = require("vega-scale");

var _vegaUtil = require("vega-util");

function getScale(name, ctx) {
  let s;
  return (0, _vegaUtil.isFunction)(name) ? name : (0, _vegaUtil.isString)(name) ? (s = ctx.scales[name]) && s.value : undefined;
}

function range(name, group) {
  const s = getScale(name, (group || this).context);
  return s && s.range ? s.range() : [];
}

function domain(name, group) {
  const s = getScale(name, (group || this).context);
  return s ? s.domain() : [];
}

function bandwidth(name, group) {
  const s = getScale(name, (group || this).context);
  return s && s.bandwidth ? s.bandwidth() : 0;
}

function bandspace(count, paddingInner, paddingOuter) {
  return (0, _vegaScale.bandSpace)(count || 0, paddingInner || 0, paddingOuter || 0);
}

function copy(name, group) {
  const s = getScale(name, (group || this).context);
  return s ? s.copy() : undefined;
}

function scale(name, value, group) {
  const s = getScale(name, (group || this).context);
  return s && value !== undefined ? s(value) : undefined;
}

function invert(name, range, group) {
  const s = getScale(name, (group || this).context);
  return !s ? undefined : (0, _vegaUtil.isArray)(range) ? (s.invertRange || s.invert)(range) : (s.invert || s.invertExtent)(range);
}
},{"vega-scale":"node_modules/vega-scale/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-functions/src/geo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.geoCentroid = exports.geoBounds = exports.geoArea = void 0;

var _scale = require("./scale");

var _d3Geo = require("d3-geo");

function geoMethod(methodName, globalMethod) {
  return function (projection, geojson, group) {
    if (projection) {
      // projection defined, use it
      const p = (0, _scale.getScale)(projection, (group || this).context);
      return p && p.path[methodName](geojson);
    } else {
      // projection undefined, use global method
      return globalMethod(geojson);
    }
  };
}

const geoArea = geoMethod('area', _d3Geo.geoArea);
exports.geoArea = geoArea;
const geoBounds = geoMethod('bounds', _d3Geo.geoBounds);
exports.geoBounds = geoBounds;
const geoCentroid = geoMethod('centroid', _d3Geo.geoCentroid);
exports.geoCentroid = geoCentroid;
},{"./scale":"node_modules/vega-functions/src/scale.js","d3-geo":"node_modules/d3-geo/src/index.js"}],"node_modules/vega-functions/src/inscope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(item) {
  let group = this.context.group,
      value = false;
  if (group) while (item) {
    if (item === group) {
      value = true;
      break;
    }

    item = item.mark.group;
  }
  return value;
}
},{}],"node_modules/vega-functions/src/intersect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaScenegraph = require("vega-scenegraph");

var _vegaUtil = require("vega-util");

function _default(b, opt, group) {
  if (!b) return [];
  const [u, v] = b,
        box = new _vegaScenegraph.Bounds().set(u[0], u[1], v[0], v[1]),
        scene = group || this.context.dataflow.scenegraph().root;
  return (0, _vegaScenegraph.intersect)(scene, box, filter(opt));
}

function filter(opt) {
  let p = null;

  if (opt) {
    const types = (0, _vegaUtil.array)(opt.marktype),
          names = (0, _vegaUtil.array)(opt.markname);

    p = _ => (!types.length || types.some(t => _.marktype === t)) && (!names.length || names.some(s => _.name === s));
  }

  return p;
}
},{"vega-scenegraph":"node_modules/vega-scenegraph/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-functions/src/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.warn = warn;
exports.info = info;
exports.debug = debug;

function log(df, method, args) {
  try {
    df[method].apply(df, ['EXPRESSION'].concat([].slice.call(args)));
  } catch (err) {
    df.warn(err);
  }

  return args[args.length - 1];
}

function warn() {
  return log(this.context.dataflow, 'warn', arguments);
}

function info() {
  return log(this.context.dataflow, 'info', arguments);
}

function debug() {
  return log(this.context.dataflow, 'debug', arguments);
}
},{}],"node_modules/vega-functions/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

function _default() {
  var args = [].slice.call(arguments);
  args.unshift({});
  return _vegaUtil.extend.apply(null, args);
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-functions/src/modify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

function equal(a, b) {
  return a === b || a !== a && b !== b ? true : (0, _vegaUtil.isArray)(a) ? (0, _vegaUtil.isArray)(b) && a.length === b.length ? equalArray(a, b) : false : (0, _vegaUtil.isObject)(a) && (0, _vegaUtil.isObject)(b) ? equalObject(a, b) : false;
}

function equalArray(a, b) {
  for (let i = 0, n = a.length; i < n; ++i) {
    if (!equal(a[i], b[i])) return false;
  }

  return true;
}

function equalObject(a, b) {
  for (let key in a) {
    if (!equal(a[key], b[key])) return false;
  }

  return true;
}

function removePredicate(props) {
  return _ => equalObject(props, _);
}

function _default(name, insert, remove, toggle, modify, values) {
  let df = this.context.dataflow,
      data = this.context.data[name],
      input = data.input,
      changes = data.changes,
      stamp = df.stamp(),
      predicate,
      key;

  if (df._trigger === false || !(input.value.length || insert || toggle)) {
    // nothing to do!
    return 0;
  }

  if (!changes || changes.stamp < stamp) {
    data.changes = changes = df.changeset();
    changes.stamp = stamp;
    df.runAfter(function () {
      data.modified = true;
      df.pulse(input, changes).run();
    }, true, 1);
  }

  if (remove) {
    predicate = remove === true ? _vegaUtil.truthy : (0, _vegaUtil.isArray)(remove) || (0, _vegaDataflow.isTuple)(remove) ? remove : removePredicate(remove);
    changes.remove(predicate);
  }

  if (insert) {
    changes.insert(insert);
  }

  if (toggle) {
    predicate = removePredicate(toggle);

    if (input.value.some(predicate)) {
      changes.remove(predicate);
    } else {
      changes.insert(toggle);
    }
  }

  if (modify) {
    for (key in values) {
      changes.modify(modify, key, values[key]);
    }
  }

  return 1;
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-functions/src/pinch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pinchDistance = pinchDistance;
exports.pinchAngle = pinchAngle;

function pinchDistance(event) {
  const t = event.touches,
        dx = t[0].clientX - t[1].clientX,
        dy = t[0].clientY - t[1].clientY;
  return Math.sqrt(dx * dx + dy * dy);
}

function pinchAngle(event) {
  const t = event.touches;
  return Math.atan2(t[0].clientY - t[1].clientY, t[0].clientX - t[1].clientX);
}
},{}],"node_modules/vega-functions/src/scale-gradient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _scale = require("./scale");

var _vegaScale = require("vega-scale");

var _vegaScenegraph = require("vega-scenegraph");

var _vegaUtil = require("vega-util");

function _default(scale, p0, p1, count, group) {
  scale = (0, _scale.getScale)(scale, (group || this).context);
  const gradient = (0, _vegaScenegraph.Gradient)(p0, p1);
  let stops = scale.domain(),
      min = stops[0],
      max = (0, _vegaUtil.peek)(stops),
      fraction = _vegaUtil.identity;

  if (!(max - min)) {
    // expand scale if domain has zero span, fix #1479
    scale = (scale.interpolator ? (0, _vegaScale.scale)('sequential')().interpolator(scale.interpolator()) : (0, _vegaScale.scale)('linear')().interpolate(scale.interpolate()).range(scale.range())).domain([min = 0, max = 1]);
  } else {
    fraction = (0, _vegaScale.scaleFraction)(scale, min, max);
  }

  if (scale.ticks) {
    stops = scale.ticks(+count || 15);
    if (min !== stops[0]) stops.unshift(min);
    if (max !== (0, _vegaUtil.peek)(stops)) stops.push(max);
  }

  stops.forEach(_ => gradient.stop(fraction(_), scale(_)));
  return gradient;
}
},{"./scale":"node_modules/vega-functions/src/scale.js","vega-scale":"node_modules/vega-scale/index.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-functions/src/shape.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.geoShape = geoShape;
exports.pathShape = pathShape;

var _scale = require("./scale");

var _vegaScenegraph = require("vega-scenegraph");

function geoShape(projection, geojson, group) {
  const p = (0, _scale.getScale)(projection, (group || this).context);
  return function (context) {
    return p ? p.path.context(context)(geojson) : '';
  };
}

function pathShape(path) {
  let p = null;
  return function (context) {
    return context ? (0, _vegaScenegraph.pathRender)(context, p = p || (0, _vegaScenegraph.pathParse)(path)) : path;
  };
}
},{"./scale":"node_modules/vega-functions/src/scale.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js"}],"node_modules/vega-functions/src/tree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.treePath = treePath;
exports.treeAncestors = treeAncestors;

var _data = require("./data");

const EMPTY = {};

function datum(d) {
  return d.data;
}

function treeNodes(name, context) {
  const tree = _data.data.call(context, name);

  return tree.root && tree.root.lookup || EMPTY;
}

function treePath(name, source, target) {
  const nodes = treeNodes(name, this),
        s = nodes[source],
        t = nodes[target];
  return s && t ? s.path(t).map(datum) : undefined;
}

function treeAncestors(name, node) {
  const n = treeNodes(name, this)[node];
  return n ? n.ancestors().map(datum) : undefined;
}
},{"./data":"node_modules/vega-functions/src/data.js"}],"node_modules/vega-functions/src/window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.screen = screen;
exports.windowSize = windowSize;
exports.containerSize = containerSize;

const _window = typeof window !== 'undefined' && window || null;

function screen() {
  return _window ? _window.screen : {};
}

function windowSize() {
  return _window ? [_window.innerWidth, _window.innerHeight] : [undefined, undefined];
}

function containerSize() {
  const view = this.context.dataflow,
        el = view.container && view.container();
  return el ? [el.clientWidth, el.clientHeight] : [undefined, undefined];
}
},{}],"node_modules/vega-functions/src/prefix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SignalPrefix = exports.ScalePrefix = exports.IndexPrefix = exports.DataPrefix = void 0;
const DataPrefix = ':';
exports.DataPrefix = DataPrefix;
const IndexPrefix = '@';
exports.IndexPrefix = IndexPrefix;
const ScalePrefix = '%';
exports.ScalePrefix = ScalePrefix;
const SignalPrefix = '$';
exports.SignalPrefix = SignalPrefix;
},{}],"node_modules/vega-functions/src/visitors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataVisitor = dataVisitor;
exports.indataVisitor = indataVisitor;
exports.scaleVisitor = scaleVisitor;

var _prefix = require("./prefix");

var _vegaExpression = require("vega-expression");

var _vegaUtil = require("vega-util");

function dataVisitor(name, args, scope, params) {
  if (args[0].type !== _vegaExpression.Literal) {
    (0, _vegaUtil.error)('First argument to data functions must be a string literal.');
  }

  const data = args[0].value,
        dataName = _prefix.DataPrefix + data;

  if (!(0, _vegaUtil.hasOwnProperty)(dataName, params)) {
    try {
      params[dataName] = scope.getData(data).tuplesRef();
    } catch (err) {// if data set does not exist, there's nothing to track
    }
  }
}

function indataVisitor(name, args, scope, params) {
  if (args[0].type !== _vegaExpression.Literal) (0, _vegaUtil.error)('First argument to indata must be a string literal.');
  if (args[1].type !== _vegaExpression.Literal) (0, _vegaUtil.error)('Second argument to indata must be a string literal.');
  const data = args[0].value,
        field = args[1].value,
        indexName = _prefix.IndexPrefix + field;

  if (!(0, _vegaUtil.hasOwnProperty)(indexName, params)) {
    params[indexName] = scope.getData(data).indataRef(scope, field);
  }
}

function scaleVisitor(name, args, scope, params) {
  if (args[0].type === _vegaExpression.Literal) {
    // add scale dependency
    addScaleDependency(scope, params, args[0].value);
  } else if (args[0].type === _vegaExpression.Identifier) {
    // indirect scale lookup; add all scales as parameters
    for (name in scope.scales) {
      addScaleDependency(scope, params, name);
    }
  }
}

function addScaleDependency(scope, params, name) {
  const scaleName = _prefix.ScalePrefix + name;

  if (!(0, _vegaUtil.hasOwnProperty)(params, scaleName)) {
    try {
      params[scaleName] = scope.scaleRef(name);
    } catch (err) {// TODO: error handling? warning?
    }
  }
}
},{"./prefix":"node_modules/vega-functions/src/prefix.js","vega-expression":"node_modules/vega-expression/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-functions/src/codegen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expressionFunction = expressionFunction;
exports.codeGenerator = exports.codegenParams = exports.functionContext = void 0;

var _vegaExpression = require("vega-expression");

var _vegaDataflow = require("vega-dataflow");

var _vegaSelections = require("vega-selections");

var _vegaStatistics = require("vega-statistics");

var _vegaUtil = require("vega-util");

var _d3Array = require("d3-array");

var _d3Color = require("d3-color");

var _data = require("./data");

var _encode = _interopRequireDefault(require("./encode"));

var _format = require("./format");

var _geo = require("./geo");

var _inscope = _interopRequireDefault(require("./inscope"));

var _intersect = _interopRequireDefault(require("./intersect"));

var _log = require("./log");

var _merge = _interopRequireDefault(require("./merge"));

var _modify = _interopRequireDefault(require("./modify"));

var _pinch = require("./pinch");

var _scale = require("./scale");

var _scaleGradient = _interopRequireDefault(require("./scale-gradient"));

var _shape = require("./shape");

var _tree = require("./tree");

var _window = require("./window");

var _visitors = require("./visitors");

var _prefix = require("./prefix");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Expression function context object
const functionContext = {
  random: function () {
    return (0, _vegaStatistics.random)();
  },
  // override default
  isArray: _vegaUtil.isArray,
  isBoolean: _vegaUtil.isBoolean,
  isDate: _vegaUtil.isDate,
  isDefined: function (_) {
    return _ !== undefined;
  },
  isNumber: _vegaUtil.isNumber,
  isObject: _vegaUtil.isObject,
  isRegExp: _vegaUtil.isRegExp,
  isString: _vegaUtil.isString,
  isTuple: _vegaDataflow.isTuple,
  isValid: function (_) {
    return _ != null && _ === _;
  },
  toBoolean: _vegaUtil.toBoolean,
  toDate: _vegaUtil.toDate,
  toNumber: _vegaUtil.toNumber,
  toString: _vegaUtil.toString,
  flush: _vegaUtil.flush,
  lerp: _vegaUtil.lerp,
  merge: _merge.default,
  pad: _vegaUtil.pad,
  peek: _vegaUtil.peek,
  span: _vegaUtil.span,
  inrange: _vegaUtil.inrange,
  truncate: _vegaUtil.truncate,
  rgb: _d3Color.rgb,
  lab: _d3Color.lab,
  hcl: _d3Color.hcl,
  hsl: _d3Color.hsl,
  sequence: _d3Array.range,
  format: _format.format,
  utcFormat: _format.utcFormat,
  utcParse: _format.utcParse,
  timeFormat: _format.timeFormat,
  timeParse: _format.timeParse,
  monthFormat: _format.monthFormat,
  monthAbbrevFormat: _format.monthAbbrevFormat,
  dayFormat: _format.dayFormat,
  dayAbbrevFormat: _format.dayAbbrevFormat,
  quarter: _vegaUtil.quarter,
  utcquarter: _vegaUtil.utcquarter,
  warn: _log.warn,
  info: _log.info,
  debug: _log.debug,
  extent: _vegaUtil.extent,
  inScope: _inscope.default,
  intersect: _intersect.default,
  clampRange: _vegaUtil.clampRange,
  pinchDistance: _pinch.pinchDistance,
  pinchAngle: _pinch.pinchAngle,
  screen: _window.screen,
  containerSize: _window.containerSize,
  windowSize: _window.windowSize,
  bandspace: _scale.bandspace,
  setdata: _data.setdata,
  pathShape: _shape.pathShape,
  panLinear: _vegaUtil.panLinear,
  panLog: _vegaUtil.panLog,
  panPow: _vegaUtil.panPow,
  panSymlog: _vegaUtil.panSymlog,
  zoomLinear: _vegaUtil.zoomLinear,
  zoomLog: _vegaUtil.zoomLog,
  zoomPow: _vegaUtil.zoomPow,
  zoomSymlog: _vegaUtil.zoomSymlog,
  encode: _encode.default,
  modify: _modify.default
};
exports.functionContext = functionContext;
const eventFunctions = ['view', 'item', 'group', 'xy', 'x', 'y'],
      // event functions
eventPrefix = 'event.vega.',
      // event function prefix
thisPrefix = 'this.',
      // function context prefix
astVisitors = {}; // AST visitors for dependency analysis
// Build expression function registry

function buildFunctions(codegen) {
  const fn = (0, _vegaExpression.functions)(codegen);
  eventFunctions.forEach(name => fn[name] = eventPrefix + name);

  for (let name in functionContext) {
    fn[name] = thisPrefix + name;
  }

  return fn;
} // Register an expression function


function expressionFunction(name, fn, visitor) {
  if (arguments.length === 1) {
    return functionContext[name];
  } // register with the functionContext


  functionContext[name] = fn; // if there is an astVisitor register that, too

  if (visitor) astVisitors[name] = visitor; // if the code generator has already been initialized,
  // we need to also register the function with it

  if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;
  return this;
} // register expression functions with ast visitors


expressionFunction('bandwidth', _scale.bandwidth, _visitors.scaleVisitor);
expressionFunction('copy', _scale.copy, _visitors.scaleVisitor);
expressionFunction('domain', _scale.domain, _visitors.scaleVisitor);
expressionFunction('range', _scale.range, _visitors.scaleVisitor);
expressionFunction('invert', _scale.invert, _visitors.scaleVisitor);
expressionFunction('scale', _scale.scale, _visitors.scaleVisitor);
expressionFunction('gradient', _scaleGradient.default, _visitors.scaleVisitor);
expressionFunction('geoArea', _geo.geoArea, _visitors.scaleVisitor);
expressionFunction('geoBounds', _geo.geoBounds, _visitors.scaleVisitor);
expressionFunction('geoCentroid', _geo.geoCentroid, _visitors.scaleVisitor);
expressionFunction('geoShape', _shape.geoShape, _visitors.scaleVisitor);
expressionFunction('indata', _data.indata, _visitors.indataVisitor);
expressionFunction('data', _data.data, _visitors.dataVisitor);
expressionFunction('treePath', _tree.treePath, _visitors.dataVisitor);
expressionFunction('treeAncestors', _tree.treeAncestors, _visitors.dataVisitor); // register Vega-Lite selection functions

expressionFunction('vlSelectionTest', _vegaSelections.selectionTest, _vegaSelections.selectionVisitor);
expressionFunction('vlSelectionResolve', _vegaSelections.selectionResolve, _vegaSelections.selectionVisitor); // Export code generator and parameters

const codegenParams = {
  blacklist: ['_'],
  whitelist: ['datum', 'event', 'item'],
  fieldvar: 'datum',
  globalvar: function (id) {
    return '_[' + (0, _vegaUtil.stringValue)(_prefix.SignalPrefix + id) + ']';
  },
  functions: buildFunctions,
  constants: _vegaExpression.constants,
  visitors: astVisitors
};
exports.codegenParams = codegenParams;
var codeGenerator = (0, _vegaExpression.codegen)(codegenParams);
exports.codeGenerator = codeGenerator;
},{"vega-expression":"node_modules/vega-expression/index.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-selections":"node_modules/vega-selections/index.js","vega-statistics":"node_modules/vega-statistics/index.js","vega-util":"node_modules/vega-util/index.js","d3-array":"node_modules/d3-array/src/index.js","d3-color":"node_modules/d3-color/src/index.js","./data":"node_modules/vega-functions/src/data.js","./encode":"node_modules/vega-functions/src/encode.js","./format":"node_modules/vega-functions/src/format.js","./geo":"node_modules/vega-functions/src/geo.js","./inscope":"node_modules/vega-functions/src/inscope.js","./intersect":"node_modules/vega-functions/src/intersect.js","./log":"node_modules/vega-functions/src/log.js","./merge":"node_modules/vega-functions/src/merge.js","./modify":"node_modules/vega-functions/src/modify.js","./pinch":"node_modules/vega-functions/src/pinch.js","./scale":"node_modules/vega-functions/src/scale.js","./scale-gradient":"node_modules/vega-functions/src/scale-gradient.js","./shape":"node_modules/vega-functions/src/shape.js","./tree":"node_modules/vega-functions/src/tree.js","./window":"node_modules/vega-functions/src/window.js","./visitors":"node_modules/vega-functions/src/visitors.js","./prefix":"node_modules/vega-functions/src/prefix.js"}],"node_modules/vega-functions/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "codegenParams", {
  enumerable: true,
  get: function () {
    return _codegen.codegenParams;
  }
});
Object.defineProperty(exports, "codeGenerator", {
  enumerable: true,
  get: function () {
    return _codegen.codeGenerator;
  }
});
Object.defineProperty(exports, "expressionFunction", {
  enumerable: true,
  get: function () {
    return _codegen.expressionFunction;
  }
});
Object.defineProperty(exports, "functionContext", {
  enumerable: true,
  get: function () {
    return _codegen.functionContext;
  }
});
Object.defineProperty(exports, "data", {
  enumerable: true,
  get: function () {
    return _data.data;
  }
});
Object.defineProperty(exports, "indata", {
  enumerable: true,
  get: function () {
    return _data.indata;
  }
});
Object.defineProperty(exports, "setdata", {
  enumerable: true,
  get: function () {
    return _data.setdata;
  }
});
Object.defineProperty(exports, "encode", {
  enumerable: true,
  get: function () {
    return _encode.default;
  }
});
Object.defineProperty(exports, "format", {
  enumerable: true,
  get: function () {
    return _format.format;
  }
});
Object.defineProperty(exports, "utcFormat", {
  enumerable: true,
  get: function () {
    return _format.utcFormat;
  }
});
Object.defineProperty(exports, "timeFormat", {
  enumerable: true,
  get: function () {
    return _format.timeFormat;
  }
});
Object.defineProperty(exports, "utcParse", {
  enumerable: true,
  get: function () {
    return _format.utcParse;
  }
});
Object.defineProperty(exports, "timeParse", {
  enumerable: true,
  get: function () {
    return _format.timeParse;
  }
});
Object.defineProperty(exports, "monthFormat", {
  enumerable: true,
  get: function () {
    return _format.monthFormat;
  }
});
Object.defineProperty(exports, "monthAbbrevFormat", {
  enumerable: true,
  get: function () {
    return _format.monthAbbrevFormat;
  }
});
Object.defineProperty(exports, "dayFormat", {
  enumerable: true,
  get: function () {
    return _format.dayFormat;
  }
});
Object.defineProperty(exports, "dayAbbrevFormat", {
  enumerable: true,
  get: function () {
    return _format.dayAbbrevFormat;
  }
});
Object.defineProperty(exports, "geoArea", {
  enumerable: true,
  get: function () {
    return _geo.geoArea;
  }
});
Object.defineProperty(exports, "geoBounds", {
  enumerable: true,
  get: function () {
    return _geo.geoBounds;
  }
});
Object.defineProperty(exports, "geoCentroid", {
  enumerable: true,
  get: function () {
    return _geo.geoCentroid;
  }
});
Object.defineProperty(exports, "inScope", {
  enumerable: true,
  get: function () {
    return _inscope.default;
  }
});
Object.defineProperty(exports, "warn", {
  enumerable: true,
  get: function () {
    return _log.warn;
  }
});
Object.defineProperty(exports, "info", {
  enumerable: true,
  get: function () {
    return _log.info;
  }
});
Object.defineProperty(exports, "debug", {
  enumerable: true,
  get: function () {
    return _log.debug;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "modify", {
  enumerable: true,
  get: function () {
    return _modify.default;
  }
});
Object.defineProperty(exports, "pinchDistance", {
  enumerable: true,
  get: function () {
    return _pinch.pinchDistance;
  }
});
Object.defineProperty(exports, "pinchAngle", {
  enumerable: true,
  get: function () {
    return _pinch.pinchAngle;
  }
});
Object.defineProperty(exports, "DataPrefix", {
  enumerable: true,
  get: function () {
    return _prefix.DataPrefix;
  }
});
Object.defineProperty(exports, "IndexPrefix", {
  enumerable: true,
  get: function () {
    return _prefix.IndexPrefix;
  }
});
Object.defineProperty(exports, "ScalePrefix", {
  enumerable: true,
  get: function () {
    return _prefix.ScalePrefix;
  }
});
Object.defineProperty(exports, "SignalPrefix", {
  enumerable: true,
  get: function () {
    return _prefix.SignalPrefix;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _scale.range;
  }
});
Object.defineProperty(exports, "domain", {
  enumerable: true,
  get: function () {
    return _scale.domain;
  }
});
Object.defineProperty(exports, "bandwidth", {
  enumerable: true,
  get: function () {
    return _scale.bandwidth;
  }
});
Object.defineProperty(exports, "bandspace", {
  enumerable: true,
  get: function () {
    return _scale.bandspace;
  }
});
Object.defineProperty(exports, "copy", {
  enumerable: true,
  get: function () {
    return _scale.copy;
  }
});
Object.defineProperty(exports, "scale", {
  enumerable: true,
  get: function () {
    return _scale.scale;
  }
});
Object.defineProperty(exports, "invert", {
  enumerable: true,
  get: function () {
    return _scale.invert;
  }
});
Object.defineProperty(exports, "scaleGradient", {
  enumerable: true,
  get: function () {
    return _scaleGradient.default;
  }
});
Object.defineProperty(exports, "geoShape", {
  enumerable: true,
  get: function () {
    return _shape.geoShape;
  }
});
Object.defineProperty(exports, "pathShape", {
  enumerable: true,
  get: function () {
    return _shape.pathShape;
  }
});
Object.defineProperty(exports, "treePath", {
  enumerable: true,
  get: function () {
    return _tree.treePath;
  }
});
Object.defineProperty(exports, "treeAncestors", {
  enumerable: true,
  get: function () {
    return _tree.treeAncestors;
  }
});
Object.defineProperty(exports, "containerSize", {
  enumerable: true,
  get: function () {
    return _window.containerSize;
  }
});
Object.defineProperty(exports, "screen", {
  enumerable: true,
  get: function () {
    return _window.screen;
  }
});
Object.defineProperty(exports, "windowSize", {
  enumerable: true,
  get: function () {
    return _window.windowSize;
  }
});
Object.defineProperty(exports, "dataVisitor", {
  enumerable: true,
  get: function () {
    return _visitors.dataVisitor;
  }
});
Object.defineProperty(exports, "indataVisitor", {
  enumerable: true,
  get: function () {
    return _visitors.indataVisitor;
  }
});
Object.defineProperty(exports, "scaleVisitor", {
  enumerable: true,
  get: function () {
    return _visitors.scaleVisitor;
  }
});
Object.defineProperty(exports, "formatLocale", {
  enumerable: true,
  get: function () {
    return _d3Format.formatDefaultLocale;
  }
});
Object.defineProperty(exports, "timeFormatLocale", {
  enumerable: true,
  get: function () {
    return _d3TimeFormat.timeFormatDefaultLocale;
  }
});

var _codegen = require("./src/codegen");

var _data = require("./src/data");

var _encode = _interopRequireDefault(require("./src/encode"));

var _format = require("./src/format");

var _geo = require("./src/geo");

var _inscope = _interopRequireDefault(require("./src/inscope"));

var _log = require("./src/log");

var _merge = _interopRequireDefault(require("./src/merge"));

var _modify = _interopRequireDefault(require("./src/modify"));

var _pinch = require("./src/pinch");

var _prefix = require("./src/prefix.js");

var _scale = require("./src/scale");

var _scaleGradient = _interopRequireDefault(require("./src/scale-gradient"));

var _shape = require("./src/shape");

var _tree = require("./src/tree");

var _window = require("./src/window");

var _visitors = require("./src/visitors");

var _d3Format = require("d3-format");

var _d3TimeFormat = require("d3-time-format");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/codegen":"node_modules/vega-functions/src/codegen.js","./src/data":"node_modules/vega-functions/src/data.js","./src/encode":"node_modules/vega-functions/src/encode.js","./src/format":"node_modules/vega-functions/src/format.js","./src/geo":"node_modules/vega-functions/src/geo.js","./src/inscope":"node_modules/vega-functions/src/inscope.js","./src/log":"node_modules/vega-functions/src/log.js","./src/merge":"node_modules/vega-functions/src/merge.js","./src/modify":"node_modules/vega-functions/src/modify.js","./src/pinch":"node_modules/vega-functions/src/pinch.js","./src/prefix.js":"node_modules/vega-functions/src/prefix.js","./src/scale":"node_modules/vega-functions/src/scale.js","./src/scale-gradient":"node_modules/vega-functions/src/scale-gradient.js","./src/shape":"node_modules/vega-functions/src/shape.js","./src/tree":"node_modules/vega-functions/src/tree.js","./src/window":"node_modules/vega-functions/src/window.js","./src/visitors":"node_modules/vega-functions/src/visitors.js","d3-format":"node_modules/d3-format/src/index.js","d3-time-format":"node_modules/d3-time-format/src/index.js"}],"node_modules/vega-runtime/src/expression.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = expression;
exports.operatorExpression = operatorExpression;
exports.parameterExpression = parameterExpression;
exports.eventExpression = eventExpression;
exports.handlerExpression = handlerExpression;
exports.encodeExpression = encodeExpression;

/**
 * Parse an expression given the argument signature and body code.
 */
function expression(args, code, ctx) {
  // wrap code in return statement if expression does not terminate
  if (code[code.length - 1] !== ';') {
    code = 'return(' + code + ');';
  }

  var fn = Function.apply(null, args.concat(code));
  return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;
}
/**
 * Parse an expression used to update an operator value.
 */


function operatorExpression(code, ctx) {
  return expression(['_'], code, ctx);
}
/**
 * Parse an expression provided as an operator parameter value.
 */


function parameterExpression(code, ctx) {
  return expression(['datum', '_'], code, ctx);
}
/**
 * Parse an expression applied to an event stream.
 */


function eventExpression(code, ctx) {
  return expression(['event'], code, ctx);
}
/**
 * Parse an expression used to handle an event-driven operator update.
 */


function handlerExpression(code, ctx) {
  return expression(['_', 'event'], code, ctx);
}
/**
 * Parse an expression that performs visual encoding.
 */


function encodeExpression(code, ctx) {
  return expression(['item', '_'], code, ctx);
}
},{}],"node_modules/vega-runtime/src/parameters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseParameters;

var _dataflow = _interopRequireDefault(require("./dataflow"));

var _expression = require("./expression");

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Parse a set of operator parameters.
 */
function parseParameters(spec, ctx, params) {
  params = params || {};
  var key, value;

  for (key in spec) {
    value = spec[key];
    params[key] = (0, _vegaUtil.isArray)(value) ? value.map(function (v) {
      return parseParameter(v, ctx, params);
    }) : parseParameter(value, ctx, params);
  }

  return params;
}
/**
 * Parse a single parameter.
 */


function parseParameter(spec, ctx, params) {
  if (!spec || !(0, _vegaUtil.isObject)(spec)) return spec;

  for (var i = 0, n = PARSERS.length, p; i < n; ++i) {
    p = PARSERS[i];

    if ((0, _vegaUtil.hasOwnProperty)(spec, p.key)) {
      return p.parse(spec, ctx, params);
    }
  }

  return spec;
}
/** Reference parsers. */


var PARSERS = [{
  key: '$ref',
  parse: getOperator
}, {
  key: '$key',
  parse: getKey
}, {
  key: '$expr',
  parse: getExpression
}, {
  key: '$field',
  parse: getField
}, {
  key: '$encode',
  parse: getEncode
}, {
  key: '$compare',
  parse: getCompare
}, {
  key: '$context',
  parse: getContext
}, {
  key: '$subflow',
  parse: getSubflow
}, {
  key: '$tupleid',
  parse: getTupleId
}];
/**
 * Resolve an operator reference.
 */

function getOperator(_, ctx) {
  return ctx.get(_.$ref) || (0, _vegaUtil.error)('Operator not defined: ' + _.$ref);
}
/**
 * Resolve an expression reference.
 */


function getExpression(_, ctx, params) {
  if (_.$params) {
    // parse expression parameters
    parseParameters(_.$params, ctx, params);
  }

  var k = 'e:' + _.$expr + '_' + _.$name;
  return ctx.fn[k] || (ctx.fn[k] = (0, _vegaUtil.accessor)((0, _expression.parameterExpression)(_.$expr, ctx), _.$fields, _.$name));
}
/**
 * Resolve a key accessor reference.
 */


function getKey(_, ctx) {
  var k = 'k:' + _.$key + '_' + !!_.$flat;
  return ctx.fn[k] || (ctx.fn[k] = (0, _vegaUtil.key)(_.$key, _.$flat));
}
/**
 * Resolve a field accessor reference.
 */


function getField(_, ctx) {
  if (!_.$field) return null;
  var k = 'f:' + _.$field + '_' + _.$name;
  return ctx.fn[k] || (ctx.fn[k] = (0, _vegaUtil.field)(_.$field, _.$name));
}
/**
 * Resolve a comparator function reference.
 */


function getCompare(_, ctx) {
  var k = 'c:' + _.$compare + '_' + _.$order,
      c = (0, _vegaUtil.array)(_.$compare).map(function (_) {
    return _ && _.$tupleid ? _vegaDataflow.tupleid : _;
  });
  return ctx.fn[k] || (ctx.fn[k] = (0, _vegaUtil.compare)(c, _.$order));
}
/**
 * Resolve an encode operator reference.
 */


function getEncode(_, ctx) {
  var spec = _.$encode,
      encode = {},
      name,
      enc;

  for (name in spec) {
    enc = spec[name];
    encode[name] = (0, _vegaUtil.accessor)((0, _expression.encodeExpression)(enc.$expr, ctx), enc.$fields);
    encode[name].output = enc.$output;
  }

  return encode;
}
/**
 * Resolve a context reference.
 */


function getContext(_, ctx) {
  return ctx;
}
/**
 * Resolve a recursive subflow specification.
 */


function getSubflow(_, ctx) {
  var spec = _.$subflow;
  return function (dataflow, key, parent) {
    var subctx = (0, _dataflow.default)(spec, ctx.fork()),
        op = subctx.get(spec.operators[0].id),
        p = subctx.signals.parent;
    if (p) p.set(parent);
    return op;
  };
}
/**
 * Resolve a tuple id reference.
 */


function getTupleId() {
  return _vegaDataflow.tupleid;
}
},{"./dataflow":"node_modules/vega-runtime/src/dataflow.js","./expression":"node_modules/vega-runtime/src/expression.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-runtime/src/util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canonicalType = canonicalType;
exports.isOperator = isOperator;
exports.isCollect = isCollect;

function canonicalType(type) {
  return (type + '').toLowerCase();
}

function isOperator(type) {
  return canonicalType(type) === 'operator';
}

function isCollect(type) {
  return canonicalType(type) === 'collect';
}
},{}],"node_modules/vega-runtime/src/operator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.parseOperatorParameters = parseOperatorParameters;

var _expression = require("./expression");

var _parameters = _interopRequireDefault(require("./parameters"));

var _util = require("./util");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Parse a dataflow operator.
 */
function _default(spec, ctx) {
  if ((0, _util.isOperator)(spec.type) || !spec.type) {
    ctx.operator(spec, spec.update ? (0, _expression.operatorExpression)(spec.update, ctx) : null);
  } else {
    ctx.transform(spec, spec.type);
  }
}
/**
 * Parse and assign operator parameters.
 */


function parseOperatorParameters(spec, ctx) {
  if (spec.params) {
    var op = ctx.get(spec.id);
    if (!op) (0, _vegaUtil.error)('Invalid operator id: ' + spec.id);
    ctx.dataflow.connect(op, op.parameters((0, _parameters.default)(spec.params, ctx), spec.react, spec.initonly));
  }
}
},{"./expression":"node_modules/vega-runtime/src/expression.js","./parameters":"node_modules/vega-runtime/src/parameters.js","./util":"node_modules/vega-runtime/src/util.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-runtime/src/stream.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _expression = require("./expression");

var _vegaUtil = require("vega-util");

/**
 * Parse an event stream specification.
 */
function _default(spec, ctx) {
  var filter = spec.filter != null ? (0, _expression.eventExpression)(spec.filter, ctx) : undefined,
      stream = spec.stream != null ? ctx.get(spec.stream) : undefined,
      args;

  if (spec.source) {
    stream = ctx.events(spec.source, spec.type, filter);
  } else if (spec.merge) {
    args = spec.merge.map(ctx.get.bind(ctx));
    stream = args[0].merge.apply(args[0], args.slice(1));
  }

  if (spec.between) {
    args = spec.between.map(ctx.get.bind(ctx));
    stream = stream.between(args[0], args[1]);
  }

  if (spec.filter) {
    stream = stream.filter(filter);
  }

  if (spec.throttle != null) {
    stream = stream.throttle(+spec.throttle);
  }

  if (spec.debounce != null) {
    stream = stream.debounce(+spec.debounce);
  }

  if (stream == null) {
    (0, _vegaUtil.error)('Invalid stream definition: ' + JSON.stringify(spec));
  }

  if (spec.consume) stream.consume(true);
  ctx.stream(spec, stream);
}
},{"./expression":"node_modules/vega-runtime/src/expression.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-runtime/src/update.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _expression = require("./expression");

var _parameters = _interopRequireDefault(require("./parameters"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Parse an event-driven operator update.
 */
function _default(spec, ctx) {
  var srcid = (0, _vegaUtil.isObject)(srcid = spec.source) ? srcid.$ref : srcid,
      source = ctx.get(srcid),
      target = null,
      update = spec.update,
      params = undefined;
  if (!source) (0, _vegaUtil.error)('Source not defined: ' + spec.source);

  if (spec.target && spec.target.$expr) {
    target = (0, _expression.eventExpression)(spec.target.$expr, ctx);
  } else {
    target = ctx.get(spec.target);
  }

  if (update && update.$expr) {
    if (update.$params) {
      params = (0, _parameters.default)(update.$params, ctx);
    }

    update = (0, _expression.handlerExpression)(update.$expr, ctx);
  }

  ctx.update(spec, source, target, update, params);
}
},{"./expression":"node_modules/vega-runtime/src/expression.js","./parameters":"node_modules/vega-runtime/src/parameters.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-runtime/src/dataflow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _operator = _interopRequireWildcard(require("./operator"));

var _stream = _interopRequireDefault(require("./stream"));

var _update = _interopRequireDefault(require("./update"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * Parse a serialized dataflow specification.
 */
function _default(spec, ctx) {
  var operators = spec.operators || []; // parse background

  if (spec.background) {
    ctx.background = spec.background;
  } // parse event configuration


  if (spec.eventConfig) {
    ctx.eventConfig = spec.eventConfig;
  } // parse operators


  operators.forEach(function (entry) {
    (0, _operator.default)(entry, ctx);
  }); // parse operator parameters

  operators.forEach(function (entry) {
    (0, _operator.parseOperatorParameters)(entry, ctx);
  }); // parse streams

  (spec.streams || []).forEach(function (entry) {
    (0, _stream.default)(entry, ctx);
  }); // parse updates

  (spec.updates || []).forEach(function (entry) {
    (0, _update.default)(entry, ctx);
  });
  return ctx.resolve();
}
},{"./operator":"node_modules/vega-runtime/src/operator.js","./stream":"node_modules/vega-runtime/src/stream.js","./update":"node_modules/vega-runtime/src/update.js"}],"node_modules/vega-runtime/src/state.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getState = getState;
exports.setState = setState;

var _vegaUtil = require("vega-util");

var SKIP = {
  skip: true
};

function getState(options) {
  var ctx = this,
      state = {};

  if (options.signals) {
    var signals = state.signals = {};
    Object.keys(ctx.signals).forEach(function (key) {
      var op = ctx.signals[key];

      if (options.signals(key, op)) {
        signals[key] = op.value;
      }
    });
  }

  if (options.data) {
    var data = state.data = {};
    Object.keys(ctx.data).forEach(function (key) {
      var dataset = ctx.data[key];

      if (options.data(key, dataset)) {
        data[key] = dataset.input.value;
      }
    });
  }

  if (ctx.subcontext && options.recurse !== false) {
    state.subcontext = ctx.subcontext.map(function (ctx) {
      return ctx.getState(options);
    });
  }

  return state;
}

function setState(state) {
  var ctx = this,
      df = ctx.dataflow,
      data = state.data,
      signals = state.signals;
  Object.keys(signals || {}).forEach(function (key) {
    df.update(ctx.signals[key], signals[key], SKIP);
  });
  Object.keys(data || {}).forEach(function (key) {
    df.pulse(ctx.data[key].input, df.changeset().remove(_vegaUtil.truthy).insert(data[key]));
  });
  (state.subcontext || []).forEach(function (substate, i) {
    var subctx = ctx.subcontext[i];
    if (subctx) subctx.setState(substate);
  });
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-runtime/src/context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _state = require("./state");

var _util = require("./util");

/**
 * Context objects store the current parse state.
 * Enables lookup of parsed operators, event streams, accessors, etc.
 * Provides a 'fork' method for creating child contexts for subflows.
 */
function _default(df, transforms, functions) {
  return new Context(df, transforms, functions);
}

function Context(df, transforms, functions) {
  this.dataflow = df;
  this.transforms = transforms;
  this.events = df.events.bind(df);
  this.signals = {};
  this.scales = {};
  this.nodes = {};
  this.data = {};
  this.fn = {};

  if (functions) {
    this.functions = Object.create(functions);
    this.functions.context = this;
  }
}

function ContextFork(ctx) {
  this.dataflow = ctx.dataflow;
  this.transforms = ctx.transforms;
  this.functions = ctx.functions;
  this.events = ctx.events;
  this.signals = Object.create(ctx.signals);
  this.scales = Object.create(ctx.scales);
  this.nodes = Object.create(ctx.nodes);
  this.data = Object.create(ctx.data);
  this.fn = Object.create(ctx.fn);

  if (ctx.functions) {
    this.functions = Object.create(ctx.functions);
    this.functions.context = this;
  }
}

Context.prototype = ContextFork.prototype = {
  fork: function () {
    var ctx = new ContextFork(this);
    (this.subcontext || (this.subcontext = [])).push(ctx);
    return ctx;
  },
  get: function (id) {
    return this.nodes[id];
  },
  set: function (id, node) {
    return this.nodes[id] = node;
  },
  add: function (spec, op) {
    var ctx = this,
        df = ctx.dataflow,
        data;
    ctx.set(spec.id, op);

    if ((0, _util.isCollect)(spec.type) && (data = spec.value)) {
      if (data.$ingest) {
        df.ingest(op, data.$ingest, data.$format);
      } else if (data.$request) {
        df.preload(op, data.$request, data.$format);
      } else {
        df.pulse(op, df.changeset().insert(data));
      }
    }

    if (spec.root) {
      ctx.root = op;
    }

    if (spec.parent) {
      var p = ctx.get(spec.parent.$ref);

      if (p) {
        df.connect(p, [op]);
        op.targets().add(p);
      } else {
        (ctx.unresolved = ctx.unresolved || []).push(function () {
          p = ctx.get(spec.parent.$ref);
          df.connect(p, [op]);
          op.targets().add(p);
        });
      }
    }

    if (spec.signal) {
      ctx.signals[spec.signal] = op;
    }

    if (spec.scale) {
      ctx.scales[spec.scale] = op;
    }

    if (spec.data) {
      for (var name in spec.data) {
        data = ctx.data[name] || (ctx.data[name] = {});
        spec.data[name].forEach(function (role) {
          data[role] = op;
        });
      }
    }
  },
  resolve: function () {
    (this.unresolved || []).forEach(function (fn) {
      fn();
    });
    delete this.unresolved;
    return this;
  },
  operator: function (spec, update) {
    this.add(spec, this.dataflow.add(spec.value, update));
  },
  transform: function (spec, type) {
    this.add(spec, this.dataflow.add(this.transforms[(0, _util.canonicalType)(type)]));
  },
  stream: function (spec, stream) {
    this.set(spec.id, stream);
  },
  update: function (spec, stream, target, update, params) {
    this.dataflow.on(stream, target, update, params, spec.options);
  },
  getState: _state.getState,
  setState: _state.setState
};
},{"./state":"node_modules/vega-runtime/src/state.js","./util":"node_modules/vega-runtime/src/util.js"}],"node_modules/vega-runtime/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _dataflow.default;
  }
});
Object.defineProperty(exports, "context", {
  enumerable: true,
  get: function () {
    return _context.default;
  }
});
Object.defineProperty(exports, "expression", {
  enumerable: true,
  get: function () {
    return _expression.default;
  }
});

var _dataflow = _interopRequireDefault(require("./src/dataflow"));

var _context = _interopRequireDefault(require("./src/context"));

var _expression = _interopRequireDefault(require("./src/expression"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/dataflow":"node_modules/vega-runtime/src/dataflow.js","./src/context":"node_modules/vega-runtime/src/context.js","./src/expression":"node_modules/vega-runtime/src/expression.js"}],"node_modules/vega-view/src/runtime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaDataflow = require("vega-dataflow");

var _vegaFunctions = require("vega-functions");

var _vegaRuntime = require("vega-runtime");

function _default(view, spec, functions) {
  var fn = functions || _vegaFunctions.functionContext;
  return (0, _vegaRuntime.parse)(spec, (0, _vegaRuntime.context)(view, _vegaDataflow.transforms, fn));
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-functions":"node_modules/vega-functions/index.js","vega-runtime":"node_modules/vega-runtime/index.js"}],"node_modules/vega-view/src/scale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scale = scale;

var _vegaUtil = require("vega-util");

function scale(name) {
  var scales = this._runtime.scales;

  if (!(0, _vegaUtil.hasOwnProperty)(scales, name)) {
    (0, _vegaUtil.error)('Unrecognized scale or projection: ' + name);
  }

  return scales[name].value;
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view/src/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.viewWidth = viewWidth;
exports.viewHeight = viewHeight;
exports.initializeResize = initializeResize;
exports.resizeView = resizeView;
var Width = 'width',
    Height = 'height',
    Padding = 'padding',
    Skip = {
  skip: true
};

function viewWidth(view, width) {
  var a = view.autosize(),
      p = view.padding();
  return width - (a && a.contains === Padding ? p.left + p.right : 0);
}

function viewHeight(view, height) {
  var a = view.autosize(),
      p = view.padding();
  return height - (a && a.contains === Padding ? p.top + p.bottom : 0);
}

function initializeResize(view) {
  var s = view._signals,
      w = s[Width],
      h = s[Height],
      p = s[Padding];

  function resetSize() {
    view._autosize = view._resize = 1;
  } // respond to width signal


  view._resizeWidth = view.add(null, function (_) {
    view._width = _.size;
    view._viewWidth = viewWidth(view, _.size);
    resetSize();
  }, {
    size: w
  }); // respond to height signal

  view._resizeHeight = view.add(null, function (_) {
    view._height = _.size;
    view._viewHeight = viewHeight(view, _.size);
    resetSize();
  }, {
    size: h
  }); // respond to padding signal

  var resizePadding = view.add(null, resetSize, {
    pad: p
  }); // set rank to run immediately after source signal

  view._resizeWidth.rank = w.rank + 1;
  view._resizeHeight.rank = h.rank + 1;
  resizePadding.rank = p.rank + 1;
}

function resizeView(viewWidth, viewHeight, width, height, origin, auto) {
  this.runAfter(function (view) {
    var rerun = 0; // reset autosize flag

    view._autosize = 0; // width value changed: update signal, skip resize op

    if (view.width() !== width) {
      rerun = 1;
      view.signal(Width, width, Skip); // set width, skip update calc

      view._resizeWidth.skip(true); // skip width resize handler

    } // height value changed: update signal, skip resize op


    if (view.height() !== height) {
      rerun = 1;
      view.signal(Height, height, Skip); // set height, skip update calc

      view._resizeHeight.skip(true); // skip height resize handler

    } // view width changed: update view property, set resize flag


    if (view._viewWidth !== viewWidth) {
      view._resize = 1;
      view._viewWidth = viewWidth;
    } // view height changed: update view property, set resize flag


    if (view._viewHeight !== viewHeight) {
      view._resize = 1;
      view._viewHeight = viewHeight;
    } // origin changed: update view property, set resize flag


    if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {
      view._resize = 1;
      view._origin = origin;
    } // run dataflow on width/height signal change


    if (rerun) view.run('enter');
    if (auto) view.runAfter(v => v.resize());
  }, false, 1);
}
},{}],"node_modules/vega-view/src/state.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getState = getState;
exports.setState = setState;

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

/**
 * Get the current view state, consisting of signal values and/or data sets.
 * @param {object} [options] - Options flags indicating which state to export.
 *   If unspecified, all signals and data sets will be exported.
 * @param {function(string, Operator):boolean} [options.signals] - Optional
 *   predicate function for testing if a signal should be included in the
 *   exported state. If unspecified, all signals will be included, except for
 *   those named 'parent' or those which refer to a Transform value.
 * @param {function(string, object):boolean} [options.data] - Optional
 *   predicate function for testing if a data set's input should be included
 *   in the exported state. If unspecified, all data sets that have been
 *   explicitly modified will be included.
 * @param {boolean} [options.recurse=true] - Flag indicating if the exported
 *   state should recursively include state from group mark sub-contexts.
 * @return {object} - An object containing the exported state values.
 */
function getState(options) {
  return this._runtime.getState(options || {
    data: dataTest,
    signals: signalTest,
    recurse: true
  });
}

function dataTest(name, data) {
  return data.modified && (0, _vegaUtil.isArray)(data.input.value) && name.indexOf('_:vega:_');
}

function signalTest(name, op) {
  return !(name === 'parent' || op instanceof _vegaDataflow.transforms.proxy);
}
/**
 * Sets the current view state and updates the view by invoking run.
 * @param {object} state - A state object containing signal and/or
 *   data set values, following the format used by the getState method.
 * @return {View} - This view instance.
 */


function setState(state) {
  this.runAsync(null, v => {
    v._trigger = false;

    v._runtime.setState(state);
  }, v => {
    v._trigger = true;
  });
  return this;
}
},{"vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view/src/timer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Timer = require("d3-timer");

function _default(callback, delay) {
  function tick(elapsed) {
    callback({
      timestamp: Date.now(),
      elapsed: elapsed
    });
  }

  this._timers.push((0, _d3Timer.interval)(tick, delay));
}
},{"d3-timer":"node_modules/d3-timer/src/index.js"}],"node_modules/vega-view/src/tooltip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

function _default(handler, event, item, value) {
  var el = handler.element();
  if (el) el.setAttribute('title', formatTooltip(value));
}

function formatTooltip(value) {
  return value == null ? '' : (0, _vegaUtil.isArray)(value) ? formatArray(value) : (0, _vegaUtil.isObject)(value) && !(0, _vegaUtil.isDate)(value) ? formatObject(value) : value + '';
}

function formatObject(obj) {
  return Object.keys(obj).map(function (key) {
    var v = obj[key];
    return key + ': ' + ((0, _vegaUtil.isArray)(v) ? formatArray(v) : formatValue(v));
  }).join('\n');
}

function formatArray(value) {
  return '[' + value.map(formatValue).join(', ') + ']';
}

function formatValue(value) {
  return (0, _vegaUtil.isArray)(value) ? '[\u2026]' : (0, _vegaUtil.isObject)(value) && !(0, _vegaUtil.isDate)(value) ? '{\u2026}' : value;
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-view/src/View.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = View;

var _cursor = _interopRequireDefault(require("./cursor"));

var _data = require("./data");

var _events = require("./events");

var _hover = _interopRequireDefault(require("./hover"));

var _finalize = _interopRequireDefault(require("./finalize"));

var _initialize = _interopRequireDefault(require("./initialize"));

var _renderToImageUrl = _interopRequireDefault(require("./render-to-image-url"));

var _renderToCanvas = _interopRequireDefault(require("./render-to-canvas"));

var _renderToSvg = _interopRequireDefault(require("./render-to-svg"));

var _renderSize = require("./render-size");

var _runtime = _interopRequireDefault(require("./runtime"));

var _scale = require("./scale");

var _size = require("./size");

var _state = require("./state");

var _timer = _interopRequireDefault(require("./timer"));

var _tooltip = _interopRequireDefault(require("./tooltip"));

var _trap = _interopRequireDefault(require("./trap"));

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

var _vegaScenegraph = require("vega-scenegraph");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create a new View instance from a Vega dataflow runtime specification.
 * The generated View will not immediately be ready for display. Callers
 * should also invoke the initialize method (e.g., to set the parent
 * DOM element in browser-based deployment) and then invoke the run
 * method to evaluate the dataflow graph. Rendering will automatically
 * be peformed upon dataflow runs.
 * @constructor
 * @param {object} spec - The Vega dataflow runtime specification.
 */
function View(spec, options) {
  var view = this;
  options = options || {};

  _vegaDataflow.Dataflow.call(view);

  if (options.loader) view.loader(options.loader);
  if (options.logger) view.logger(options.logger);
  if (options.logLevel != null) view.logLevel(options.logLevel);
  view._el = null;
  view._elBind = null;
  view._renderType = options.renderer || _vegaScenegraph.RenderType.Canvas;
  view._scenegraph = new _vegaScenegraph.Scenegraph();
  var root = view._scenegraph.root; // initialize renderer, handler and event management

  view._renderer = null;
  view._tooltip = options.tooltip || _tooltip.default, view._redraw = true;
  view._handler = new _vegaScenegraph.CanvasHandler().scene(root);
  view._preventDefault = false;
  view._timers = [];
  view._eventListeners = [];
  view._resizeListeners = []; // initialize event configuration

  view._eventConfig = (0, _events.initializeEventConfig)(spec.eventConfig); // initialize dataflow graph

  var ctx = (0, _runtime.default)(view, spec, options.functions);
  view._runtime = ctx;
  view._signals = ctx.signals;
  view._bind = (spec.bindings || []).map(function (_) {
    return {
      state: null,
      param: (0, _vegaUtil.extend)({}, _)
    };
  }); // initialize scenegraph

  if (ctx.root) ctx.root.set(root);
  root.source = ctx.data.root.input;
  view.pulse(ctx.data.root.input, view.changeset().insert(root.items)); // initialize background color

  view._background = options.background || ctx.background || null; // initialize view size

  view._width = view.width();
  view._height = view.height();
  view._viewWidth = (0, _size.viewWidth)(view, view._width);
  view._viewHeight = (0, _size.viewHeight)(view, view._height);
  view._origin = [0, 0];
  view._resize = 0;
  view._autosize = 1;
  (0, _size.initializeResize)(view); // initialize cursor

  (0, _cursor.default)(view); // initialize hover proessing, if requested

  if (options.hover) view.hover(); // initialize DOM container(s) and renderer

  if (options.container) view.initialize(options.container, options.bind);
}

var prototype = (0, _vegaUtil.inherits)(View, _vegaDataflow.Dataflow); // -- DATAFLOW / RENDERING ----

prototype.evaluate = async function (encode, prerun, postrun) {
  // evaluate dataflow and prerun
  await _vegaDataflow.Dataflow.prototype.evaluate.call(this, encode, prerun); // render as needed

  if (this._redraw || this._resize) {
    try {
      if (this._renderer) {
        if (this._resize) {
          this._resize = 0;
          (0, _renderSize.resizeRenderer)(this);
        }

        await this._renderer.renderAsync(this._scenegraph.root);
      }

      this._redraw = false;
    } catch (e) {
      this.error(e);
    }
  } // evaluate postrun


  if (postrun) (0, _vegaDataflow.asyncCallback)(this, postrun);
  return this;
};

prototype.dirty = function (item) {
  this._redraw = true;
  this._renderer && this._renderer.dirty(item);
}; // -- GET / SET ----


prototype.container = function () {
  return this._el;
};

prototype.scenegraph = function () {
  return this._scenegraph;
};

prototype.origin = function () {
  return this._origin.slice();
};

function lookupSignal(view, name) {
  return (0, _vegaUtil.hasOwnProperty)(view._signals, name) ? view._signals[name] : (0, _vegaUtil.error)('Unrecognized signal name: ' + (0, _vegaUtil.stringValue)(name));
}

prototype.signal = function (name, value, options) {
  var op = lookupSignal(this, name);
  return arguments.length === 1 ? op.value : this.update(op, value, options);
};

prototype.background = function (_) {
  if (arguments.length) {
    this._background = _;
    this._resize = 1;
    return this;
  } else {
    return this._background;
  }
};

prototype.width = function (_) {
  return arguments.length ? this.signal('width', _) : this.signal('width');
};

prototype.height = function (_) {
  return arguments.length ? this.signal('height', _) : this.signal('height');
};

prototype.padding = function (_) {
  return arguments.length ? this.signal('padding', _) : this.signal('padding');
};

prototype.autosize = function (_) {
  return arguments.length ? this.signal('autosize', _) : this.signal('autosize');
};

prototype.renderer = function (type) {
  if (!arguments.length) return this._renderType;
  if (!(0, _vegaScenegraph.renderModule)(type)) (0, _vegaUtil.error)('Unrecognized renderer type: ' + type);

  if (type !== this._renderType) {
    this._renderType = type;

    this._resetRenderer();
  }

  return this;
};

prototype.tooltip = function (handler) {
  if (!arguments.length) return this._tooltip;

  if (handler !== this._tooltip) {
    this._tooltip = handler;

    this._resetRenderer();
  }

  return this;
};

prototype.loader = function (loader) {
  if (!arguments.length) return this._loader;

  if (loader !== this._loader) {
    _vegaDataflow.Dataflow.prototype.loader.call(this, loader);

    this._resetRenderer();
  }

  return this;
};

prototype.resize = function () {
  // set flag to perform autosize
  this._autosize = 1; // touch autosize signal to ensure top-level ViewLayout runs

  return this.touch(lookupSignal(this, 'autosize'));
};

prototype._resetRenderer = function () {
  if (this._renderer) {
    this._renderer = null;
    this.initialize(this._el, this._elBind);
  }
}; // -- SIZING ----


prototype._resizeView = _size.resizeView; // -- EVENT HANDLING ----

prototype.addEventListener = function (type, handler, options) {
  var callback = handler;

  if (!(options && options.trap === false)) {
    // wrap callback in error handler
    callback = (0, _trap.default)(this, handler);
    callback.raw = handler;
  }

  this._handler.on(type, callback);

  return this;
};

prototype.removeEventListener = function (type, handler) {
  var handlers = this._handler.handlers(type),
      i = handlers.length,
      h,
      t; // search registered handlers, remove if match found


  while (--i >= 0) {
    t = handlers[i].type;
    h = handlers[i].handler;

    if (type === t && (handler === h || handler === h.raw)) {
      this._handler.off(t, h);

      break;
    }
  }

  return this;
};

prototype.addResizeListener = function (handler) {
  var l = this._resizeListeners;

  if (l.indexOf(handler) < 0) {
    // add handler if it isn't already registered
    // note: error trapping handled elsewhere, so
    // no need to wrap handlers here
    l.push(handler);
  }

  return this;
};

prototype.removeResizeListener = function (handler) {
  var l = this._resizeListeners,
      i = l.indexOf(handler);

  if (i >= 0) {
    l.splice(i, 1);
  }

  return this;
};

function findOperatorHandler(op, handler) {
  var t = op._targets || [],
      h = t.filter(function (op) {
    var u = op._update;
    return u && u.handler === handler;
  });
  return h.length ? h[0] : null;
}

function addOperatorListener(view, name, op, handler) {
  var h = findOperatorHandler(op, handler);

  if (!h) {
    h = (0, _trap.default)(this, function () {
      handler(name, op.value);
    });
    h.handler = handler;
    view.on(op, null, h);
  }

  return view;
}

function removeOperatorListener(view, op, handler) {
  var h = findOperatorHandler(op, handler);
  if (h) op._targets.remove(h);
  return view;
}

prototype.addSignalListener = function (name, handler) {
  return addOperatorListener(this, name, lookupSignal(this, name), handler);
};

prototype.removeSignalListener = function (name, handler) {
  return removeOperatorListener(this, lookupSignal(this, name), handler);
};

prototype.addDataListener = function (name, handler) {
  return addOperatorListener(this, name, (0, _data.dataref)(this, name).values, handler);
};

prototype.removeDataListener = function (name, handler) {
  return removeOperatorListener(this, (0, _data.dataref)(this, name).values, handler);
};

prototype.preventDefault = function (_) {
  if (arguments.length) {
    this._preventDefault = _;
    return this;
  } else {
    return this._preventDefault;
  }
};

prototype.timer = _timer.default;
prototype.events = _events.events;
prototype.finalize = _finalize.default;
prototype.hover = _hover.default; // -- DATA ----

prototype.data = _data.data;
prototype.change = _data.change;
prototype.insert = _data.insert;
prototype.remove = _data.remove; // -- SCALES --

prototype.scale = _scale.scale; // -- INITIALIZATION ----

prototype.initialize = _initialize.default; // -- HEADLESS RENDERING ----

prototype.toImageURL = _renderToImageUrl.default;
prototype.toCanvas = _renderToCanvas.default;
prototype.toSVG = _renderToSvg.default; // -- SAVE / RESTORE STATE ----

prototype.getState = _state.getState;
prototype.setState = _state.setState;
},{"./cursor":"node_modules/vega-view/src/cursor.js","./data":"node_modules/vega-view/src/data.js","./events":"node_modules/vega-view/src/events.js","./hover":"node_modules/vega-view/src/hover.js","./finalize":"node_modules/vega-view/src/finalize.js","./initialize":"node_modules/vega-view/src/initialize.js","./render-to-image-url":"node_modules/vega-view/src/render-to-image-url.js","./render-to-canvas":"node_modules/vega-view/src/render-to-canvas.js","./render-to-svg":"node_modules/vega-view/src/render-to-svg.js","./render-size":"node_modules/vega-view/src/render-size.js","./runtime":"node_modules/vega-view/src/runtime.js","./scale":"node_modules/vega-view/src/scale.js","./size":"node_modules/vega-view/src/size.js","./state":"node_modules/vega-view/src/state.js","./timer":"node_modules/vega-view/src/timer.js","./tooltip":"node_modules/vega-view/src/tooltip.js","./trap":"node_modules/vega-view/src/trap.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js"}],"node_modules/vega-view/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "View", {
  enumerable: true,
  get: function () {
    return _View.default;
  }
});

var _View = _interopRequireDefault(require("./src/View"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/View":"node_modules/vega-view/src/View.js"}],"node_modules/vega-parser/src/parsers/autosize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

function _default(spec, config) {
  spec = spec || config.autosize;
  return (0, _vegaUtil.isObject)(spec) ? spec : {
    type: spec || 'pad'
  };
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/padding.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

function _default(spec, config) {
  spec = spec || config.padding;
  return (0, _vegaUtil.isObject)(spec) ? {
    top: number(spec.top),
    bottom: number(spec.bottom),
    left: number(spec.left),
    right: number(spec.right)
  } : paddingObject(number(spec));
}

function number(_) {
  return +_ || 0;
}

function paddingObject(_) {
  return {
    top: _,
    bottom: _,
    left: _,
    right: _
  };
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/signal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

var OUTER = 'outer',
    OUTER_INVALID = ['value', 'update', 'init', 'react', 'bind'];

function outerError(prefix, name) {
  (0, _vegaUtil.error)(prefix + ' for "outer" push: ' + (0, _vegaUtil.stringValue)(name));
}

function _default(signal, scope) {
  var name = signal.name;

  if (signal.push === OUTER) {
    // signal must already be defined, raise error if not
    if (!scope.signals[name]) outerError('No prior signal definition', name); // signal push must not use properties reserved for standard definition

    OUTER_INVALID.forEach(function (prop) {
      if (signal[prop] !== undefined) outerError('Invalid property ', prop);
    });
  } else {
    // define a new signal in the current scope
    var op = scope.addSignal(name, signal.value);
    if (signal.react === false) op.react = false;
    if (signal.bind) scope.addBinding(name, signal.bind);
  }
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/expression.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaExpression = require("vega-expression");

var _vegaFunctions = require("vega-functions");

var _vegaUtil = require("vega-util");

function _default(expr, scope, preamble) {
  var params = {},
      ast,
      gen; // parse the expression to an abstract syntax tree (ast)

  try {
    expr = (0, _vegaUtil.isString)(expr) ? expr : (0, _vegaUtil.stringValue)(expr) + '';
    ast = (0, _vegaExpression.parse)(expr);
  } catch (err) {
    (0, _vegaUtil.error)('Expression parse error: ' + expr);
  } // analyze ast function calls for dependencies


  ast.visit(function visitor(node) {
    if (node.type !== _vegaExpression.CallExpression) return;
    var name = node.callee.name,
        visit = _vegaFunctions.codegenParams.visitors[name];
    if (visit) visit(name, node.arguments, scope, params);
  }); // perform code generation

  gen = (0, _vegaFunctions.codeGenerator)(ast); // collect signal dependencies

  gen.globals.forEach(function (name) {
    var signalName = _vegaFunctions.SignalPrefix + name;

    if (!(0, _vegaUtil.hasOwnProperty)(params, signalName) && scope.getSignal(name)) {
      params[signalName] = scope.signalRef(name);
    }
  }); // return generated expression code and dependencies

  return {
    $expr: preamble ? preamble + 'return(' + gen.code + ');' : gen.code,
    $fields: gen.fields,
    $params: params
  };
}
},{"vega-expression":"node_modules/vega-expression/index.js","vega-functions":"node_modules/vega-functions/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Entry = Entry;
exports.entry = entry;
exports.operator = operator;
exports.ref = ref;
exports.fieldRef = fieldRef;
exports.compareRef = compareRef;
exports.keyRef = keyRef;
exports.sortKey = sortKey;
exports.aggrField = aggrField;
exports.isSignal = isSignal;
exports.isExpr = isExpr;
exports.hasSignal = hasSignal;
exports.value = value;
exports.deref = deref;
exports.View = exports.Scope = exports.Descending = exports.Ascending = exports.keyFieldRef = exports.tupleidRef = void 0;

var _vegaUtil = require("vega-util");

function Entry(type, value, params, parent) {
  this.id = -1;
  this.type = type;
  this.value = value;
  this.params = params;
  if (parent) this.parent = parent;
}

function entry(type, value, params, parent) {
  return new Entry(type, value, params, parent);
}

function operator(value, params) {
  return entry('operator', value, params);
} // -----


function ref(op) {
  var ref = {
    $ref: op.id
  }; // if operator not yet registered, cache ref to resolve later

  if (op.id < 0) (op.refs = op.refs || []).push(ref);
  return ref;
}

var tupleidRef = {
  $tupleid: 1,
  toString: function () {
    return ':_tupleid_:';
  }
};
exports.tupleidRef = tupleidRef;

function fieldRef(field, name) {
  return name ? {
    $field: field,
    $name: name
  } : {
    $field: field
  };
}

var keyFieldRef = fieldRef('key');
exports.keyFieldRef = keyFieldRef;

function compareRef(fields, orders) {
  return {
    $compare: fields,
    $order: orders
  };
}

function keyRef(fields, flat) {
  var ref = {
    $key: fields
  };
  if (flat) ref.$flat = true;
  return ref;
} // -----


var Ascending = 'ascending';
exports.Ascending = Ascending;
var Descending = 'descending';
exports.Descending = Descending;

function sortKey(sort) {
  return !(0, _vegaUtil.isObject)(sort) ? '' : (sort.order === Descending ? '-' : '+') + aggrField(sort.op, sort.field);
}

function aggrField(op, field) {
  return (op && op.signal ? '$' + op.signal : op || '') + (op && field ? '_' : '') + (field && field.signal ? '$' + field.signal : field || '');
} // -----


var Scope = 'scope';
exports.Scope = Scope;
var View = 'view';
exports.View = View;

function isSignal(_) {
  return _ && _.signal;
}

function isExpr(_) {
  return _ && _.expr;
}

function hasSignal(_) {
  if (isSignal(_)) return true;
  if ((0, _vegaUtil.isObject)(_)) for (var key in _) {
    if (hasSignal(_[key])) return true;
  }
  return false;
}

function value(specValue, defaultValue) {
  return specValue != null ? specValue : defaultValue;
}

function deref(v) {
  return v && v.signal || v;
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/stream.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseStream;

var _expression = _interopRequireDefault(require("./expression"));

var _util = require("../util");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Timer = 'timer';

function parseStream(stream, scope) {
  var method = stream.merge ? mergeStream : stream.stream ? nestedStream : stream.type ? eventStream : (0, _vegaUtil.error)('Invalid stream specification: ' + (0, _vegaUtil.stringValue)(stream));
  return method(stream, scope);
}

function eventSource(source) {
  return source === _util.Scope ? _util.View : source || _util.View;
}

function mergeStream(stream, scope) {
  var list = stream.merge.map(s => parseStream(s, scope)),
      entry = streamParameters({
    merge: list
  }, stream, scope);
  return scope.addStream(entry).id;
}

function nestedStream(stream, scope) {
  var id = parseStream(stream.stream, scope),
      entry = streamParameters({
    stream: id
  }, stream, scope);
  return scope.addStream(entry).id;
}

function eventStream(stream, scope) {
  var id, entry;

  if (stream.type === Timer) {
    id = scope.event(Timer, stream.throttle);
    stream = {
      between: stream.between,
      filter: stream.filter
    };
  } else {
    id = scope.event(eventSource(stream.source), stream.type);
  }

  entry = streamParameters({
    stream: id
  }, stream, scope);
  return Object.keys(entry).length === 1 ? id : scope.addStream(entry).id;
}

function streamParameters(entry, stream, scope) {
  var param = stream.between;

  if (param) {
    if (param.length !== 2) {
      (0, _vegaUtil.error)('Stream "between" parameter must have 2 entries: ' + (0, _vegaUtil.stringValue)(stream));
    }

    entry.between = [parseStream(param[0], scope), parseStream(param[1], scope)];
  }

  param = stream.filter ? [].concat(stream.filter) : [];

  if (stream.marktype || stream.markname || stream.markrole) {
    // add filter for mark type, name and/or role
    param.push(filterMark(stream.marktype, stream.markname, stream.markrole));
  }

  if (stream.source === _util.Scope) {
    // add filter to limit events from sub-scope only
    param.push('inScope(event.item)');
  }

  if (param.length) {
    entry.filter = (0, _expression.default)('(' + param.join(')&&(') + ')').$expr;
  }

  if ((param = stream.throttle) != null) {
    entry.throttle = +param;
  }

  if ((param = stream.debounce) != null) {
    entry.debounce = +param;
  }

  if (stream.consume) {
    entry.consume = true;
  }

  return entry;
}

function filterMark(type, name, role) {
  var item = 'event.item';
  return item + (type && type !== '*' ? '&&' + item + '.mark.marktype===\'' + type + '\'' : '') + (role ? '&&' + item + '.mark.role===\'' + role + '\'' : '') + (name ? '&&' + item + '.mark.name===\'' + name + '\'' : '');
}
},{"./expression":"node_modules/vega-parser/src/parsers/expression.js","../util":"node_modules/vega-parser/src/util.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-event-selector/src/event-selector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Parse an event selector string.
 * Returns an array of event stream definitions.
 */
function _default(selector, source, marks) {
  DEFAULT_SOURCE = source || VIEW;
  MARKS = marks || DEFAULT_MARKS;
  return parseMerge(selector.trim()).map(parseSelector);
}

var VIEW = 'view',
    LBRACK = '[',
    RBRACK = ']',
    LBRACE = '{',
    RBRACE = '}',
    COLON = ':',
    COMMA = ',',
    NAME = '@',
    GT = '>',
    ILLEGAL = /[[\]{}]/,
    DEFAULT_SOURCE,
    MARKS,
    DEFAULT_MARKS = {
  '*': 1,
  arc: 1,
  area: 1,
  group: 1,
  image: 1,
  line: 1,
  path: 1,
  rect: 1,
  rule: 1,
  shape: 1,
  symbol: 1,
  text: 1,
  trail: 1
};

function isMarkType(type) {
  return MARKS[type];
}

function find(s, i, endChar, pushChar, popChar) {
  var count = 0,
      n = s.length,
      c;

  for (; i < n; ++i) {
    c = s[i];
    if (!count && c === endChar) return i;else if (popChar && popChar.indexOf(c) >= 0) --count;else if (pushChar && pushChar.indexOf(c) >= 0) ++count;
  }

  return i;
}

function parseMerge(s) {
  var output = [],
      start = 0,
      n = s.length,
      i = 0;

  while (i < n) {
    i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);
    output.push(s.substring(start, i).trim());
    start = ++i;
  }

  if (output.length === 0) {
    throw 'Empty event selector: ' + s;
  }

  return output;
}

function parseSelector(s) {
  return s[0] === '[' ? parseBetween(s) : parseStream(s);
}

function parseBetween(s) {
  var n = s.length,
      i = 1,
      b,
      stream;
  i = find(s, i, RBRACK, LBRACK, RBRACK);

  if (i === n) {
    throw 'Empty between selector: ' + s;
  }

  b = parseMerge(s.substring(1, i));

  if (b.length !== 2) {
    throw 'Between selector must have two elements: ' + s;
  }

  s = s.slice(i + 1).trim();

  if (s[0] !== GT) {
    throw 'Expected \'>\' after between selector: ' + s;
  }

  b = b.map(parseSelector);
  stream = parseSelector(s.slice(1).trim());

  if (stream.between) {
    return {
      between: b,
      stream: stream
    };
  } else {
    stream.between = b;
  }

  return stream;
}

function parseStream(s) {
  var stream = {
    source: DEFAULT_SOURCE
  },
      source = [],
      throttle = [0, 0],
      markname = 0,
      start = 0,
      n = s.length,
      i = 0,
      j,
      filter; // extract throttle from end

  if (s[n - 1] === RBRACE) {
    i = s.lastIndexOf(LBRACE);

    if (i >= 0) {
      try {
        throttle = parseThrottle(s.substring(i + 1, n - 1));
      } catch (e) {
        throw 'Invalid throttle specification: ' + s;
      }

      s = s.slice(0, i).trim();
      n = s.length;
    } else throw 'Unmatched right brace: ' + s;

    i = 0;
  }

  if (!n) throw s; // set name flag based on first char

  if (s[0] === NAME) markname = ++i; // extract first part of multi-part stream selector

  j = find(s, i, COLON);

  if (j < n) {
    source.push(s.substring(start, j).trim());
    start = i = ++j;
  } // extract remaining part of stream selector


  i = find(s, i, LBRACK);

  if (i === n) {
    source.push(s.substring(start, n).trim());
  } else {
    source.push(s.substring(start, i).trim());
    filter = [];
    start = ++i;
    if (start === n) throw 'Unmatched left bracket: ' + s;
  } // extract filters


  while (i < n) {
    i = find(s, i, RBRACK);
    if (i === n) throw 'Unmatched left bracket: ' + s;
    filter.push(s.substring(start, i).trim());
    if (i < n - 1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;
    start = ++i;
  } // marshall event stream specification


  if (!(n = source.length) || ILLEGAL.test(source[n - 1])) {
    throw 'Invalid event selector: ' + s;
  }

  if (n > 1) {
    stream.type = source[1];

    if (markname) {
      stream.markname = source[0].slice(1);
    } else if (isMarkType(source[0])) {
      stream.marktype = source[0];
    } else {
      stream.source = source[0];
    }
  } else {
    stream.type = source[0];
  }

  if (stream.type.slice(-1) === '!') {
    stream.consume = true;
    stream.type = stream.type.slice(0, -1);
  }

  if (filter != null) stream.filter = filter;
  if (throttle[0]) stream.throttle = throttle[0];
  if (throttle[1]) stream.debounce = throttle[1];
  return stream;
}

function parseThrottle(s) {
  var a = s.split(COMMA);
  if (!s.length || a.length > 2) throw s;
  return a.map(function (_) {
    var x = +_;
    if (x !== x) throw s;
    return x;
  });
}
},{}],"node_modules/vega-event-selector/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "selector", {
  enumerable: true,
  get: function () {
    return _eventSelector.default;
  }
});

var _eventSelector = _interopRequireDefault(require("./src/event-selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/event-selector":"node_modules/vega-event-selector/src/event-selector.js"}],"node_modules/vega-parser/src/parsers/update.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _expression = _interopRequireDefault(require("./expression"));

var _stream = _interopRequireDefault(require("./stream"));

var _util = require("../util");

var _vegaEventSelector = require("vega-event-selector");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var preamble = 'var datum=event.item&&event.item.datum;';

function _default(spec, scope, target) {
  var events = spec.events,
      update = spec.update,
      encode = spec.encode,
      sources = [],
      entry = {
    target: target
  };

  if (!events) {
    (0, _vegaUtil.error)('Signal update missing events specification.');
  } // interpret as an event selector string


  if ((0, _vegaUtil.isString)(events)) {
    events = (0, _vegaEventSelector.selector)(events, scope.isSubscope() ? _util.Scope : _util.View);
  } // separate event streams from signal updates


  events = (0, _vegaUtil.array)(events).filter(s => s.signal || s.scale ? (sources.push(s), 0) : 1); // merge internal operator listeners

  if (sources.length > 1) {
    sources = [mergeSources(sources)];
  } // merge event streams, include as source


  if (events.length) {
    sources.push(events.length > 1 ? {
      merge: events
    } : events[0]);
  }

  if (encode != null) {
    if (update) (0, _vegaUtil.error)('Signal encode and update are mutually exclusive.');
    update = 'encode(item(),' + (0, _vegaUtil.stringValue)(encode) + ')';
  } // resolve update value


  entry.update = (0, _vegaUtil.isString)(update) ? (0, _expression.default)(update, scope, preamble) : update.expr != null ? (0, _expression.default)(update.expr, scope, preamble) : update.value != null ? update.value : update.signal != null ? {
    $expr: '_.value',
    $params: {
      value: scope.signalRef(update.signal)
    }
  } : (0, _vegaUtil.error)('Invalid signal update specification.');

  if (spec.force) {
    entry.options = {
      force: true
    };
  }

  sources.forEach(function (source) {
    scope.addUpdate((0, _vegaUtil.extend)(streamSource(source, scope), entry));
  });
}

function streamSource(stream, scope) {
  return {
    source: stream.signal ? scope.signalRef(stream.signal) : stream.scale ? scope.scaleRef(stream.scale) : (0, _stream.default)(stream, scope)
  };
}

function mergeSources(sources) {
  return {
    signal: '[' + sources.map(s => s.scale ? 'scale("' + s.scale + '")' : s.signal) + ']'
  };
}
},{"./expression":"node_modules/vega-parser/src/parsers/expression.js","./stream":"node_modules/vega-parser/src/parsers/stream.js","../util":"node_modules/vega-parser/src/util.js","vega-event-selector":"node_modules/vega-event-selector/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/signal-updates.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _expression = _interopRequireDefault(require("./expression"));

var _update = _interopRequireDefault(require("./update"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(signal, scope) {
  var op = scope.getSignal(signal.name),
      expr = signal.update;

  if (signal.init) {
    if (expr) {
      (0, _vegaUtil.error)('Signals can not include both init and update expressions.');
    } else {
      expr = signal.init;
      op.initonly = true;
    }
  }

  if (expr) {
    expr = (0, _expression.default)(expr, scope);
    op.update = expr.$expr;
    op.params = expr.$params;
  }

  if (signal.on) {
    signal.on.forEach(function (_) {
      (0, _update.default)(_, scope, op.id);
    });
  }
}
},{"./expression":"node_modules/vega-parser/src/parsers/expression.js","./update":"node_modules/vega-parser/src/parsers/update.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/transforms.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Values = exports.ViewLayout = exports.SortItems = exports.Sieve = exports.Scale = exports.Render = exports.Relay = exports.Proxy = exports.Projection = exports.PreFacet = exports.Params = exports.Overlap = exports.MultiValues = exports.MultiExtent = exports.Mark = exports.Load = exports.LegendEntries = exports.Key = exports.Field = exports.Facet = exports.Extent = exports.Expression = exports.Encode = exports.DataJoin = exports.Compare = exports.Collect = exports.Bound = exports.AxisTicks = exports.Aggregate = void 0;

var _util = require("./util");

function transform(name) {
  return function (params, value, parent) {
    return (0, _util.entry)(name, value, params || undefined, parent);
  };
}

var Aggregate = transform('aggregate');
exports.Aggregate = Aggregate;
var AxisTicks = transform('axisticks');
exports.AxisTicks = AxisTicks;
var Bound = transform('bound');
exports.Bound = Bound;
var Collect = transform('collect');
exports.Collect = Collect;
var Compare = transform('compare');
exports.Compare = Compare;
var DataJoin = transform('datajoin');
exports.DataJoin = DataJoin;
var Encode = transform('encode');
exports.Encode = Encode;
var Expression = transform('expression');
exports.Expression = Expression;
var Extent = transform('extent');
exports.Extent = Extent;
var Facet = transform('facet');
exports.Facet = Facet;
var Field = transform('field');
exports.Field = Field;
var Key = transform('key');
exports.Key = Key;
var LegendEntries = transform('legendentries');
exports.LegendEntries = LegendEntries;
var Load = transform('load');
exports.Load = Load;
var Mark = transform('mark');
exports.Mark = Mark;
var MultiExtent = transform('multiextent');
exports.MultiExtent = MultiExtent;
var MultiValues = transform('multivalues');
exports.MultiValues = MultiValues;
var Overlap = transform('overlap');
exports.Overlap = Overlap;
var Params = transform('params');
exports.Params = Params;
var PreFacet = transform('prefacet');
exports.PreFacet = PreFacet;
var Projection = transform('projection');
exports.Projection = Projection;
var Proxy = transform('proxy');
exports.Proxy = Proxy;
var Relay = transform('relay');
exports.Relay = Relay;
var Render = transform('render');
exports.Render = Render;
var Scale = transform('scale');
exports.Scale = Scale;
var Sieve = transform('sieve');
exports.Sieve = Sieve;
var SortItems = transform('sortitems');
exports.SortItems = SortItems;
var ViewLayout = transform('viewlayout');
exports.ViewLayout = ViewLayout;
var Values = transform('values');
exports.Values = Values;
},{"./util":"node_modules/vega-parser/src/util.js"}],"node_modules/vega-parser/src/parsers/scale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initScale = initScale;
exports.parseScale = parseScale;

var _util = require("../util");

var _transforms = require("../transforms");

var _vegaScale = require("vega-scale");

var _vegaUtil = require("vega-util");

var FIELD_REF_ID = 0;
var MULTIDOMAIN_SORT_OPS = {
  min: 'min',
  max: 'max',
  count: 'sum'
};

function initScale(spec, scope) {
  var type = spec.type || 'linear';

  if (!(0, _vegaScale.isValidScaleType)(type)) {
    (0, _vegaUtil.error)('Unrecognized scale type: ' + (0, _vegaUtil.stringValue)(type));
  }

  scope.addScale(spec.name, {
    type: type,
    domain: undefined
  });
}

function parseScale(spec, scope) {
  var params = scope.getScale(spec.name).params,
      key;
  params.domain = parseScaleDomain(spec.domain, spec, scope);

  if (spec.range != null) {
    params.range = parseScaleRange(spec, scope, params);
  }

  if (spec.interpolate != null) {
    parseScaleInterpolate(spec.interpolate, params);
  }

  if (spec.nice != null) {
    params.nice = parseScaleNice(spec.nice);
  }

  if (spec.bins != null) {
    params.bins = parseScaleBins(spec.bins, scope);
  }

  for (key in spec) {
    if ((0, _vegaUtil.hasOwnProperty)(params, key) || key === 'name') continue;
    params[key] = parseLiteral(spec[key], scope);
  }
}

function parseLiteral(v, scope) {
  return !(0, _vegaUtil.isObject)(v) ? v : v.signal ? scope.signalRef(v.signal) : (0, _vegaUtil.error)('Unsupported object: ' + (0, _vegaUtil.stringValue)(v));
}

function parseArray(v, scope) {
  return v.signal ? scope.signalRef(v.signal) : v.map(v => parseLiteral(v, scope));
}

function dataLookupError(name) {
  (0, _vegaUtil.error)('Can not find data set: ' + (0, _vegaUtil.stringValue)(name));
} // -- SCALE DOMAIN ----


function parseScaleDomain(domain, spec, scope) {
  if (!domain) {
    if (spec.domainMin != null || spec.domainMax != null) {
      (0, _vegaUtil.error)('No scale domain defined for domainMin/domainMax to override.');
    }

    return; // default domain
  }

  return domain.signal ? scope.signalRef(domain.signal) : ((0, _vegaUtil.isArray)(domain) ? explicitDomain : domain.fields ? multipleDomain : singularDomain)(domain, spec, scope);
}

function explicitDomain(domain, spec, scope) {
  return domain.map(function (v) {
    return parseLiteral(v, scope);
  });
}

function singularDomain(domain, spec, scope) {
  var data = scope.getData(domain.data);
  if (!data) dataLookupError(domain.data);
  return (0, _vegaScale.isDiscrete)(spec.type) ? data.valuesRef(scope, domain.field, parseSort(domain.sort, false)) : (0, _vegaScale.isQuantile)(spec.type) ? data.domainRef(scope, domain.field) : data.extentRef(scope, domain.field);
}

function multipleDomain(domain, spec, scope) {
  var data = domain.data,
      fields = domain.fields.reduce(function (dom, d) {
    d = (0, _vegaUtil.isString)(d) ? {
      data: data,
      field: d
    } : (0, _vegaUtil.isArray)(d) || d.signal ? fieldRef(d, scope) : d;
    dom.push(d);
    return dom;
  }, []);
  return ((0, _vegaScale.isDiscrete)(spec.type) ? ordinalMultipleDomain : (0, _vegaScale.isQuantile)(spec.type) ? quantileMultipleDomain : numericMultipleDomain)(domain, scope, fields);
}

function fieldRef(data, scope) {
  var name = '_:vega:_' + FIELD_REF_ID++,
      coll = (0, _transforms.Collect)({});

  if ((0, _vegaUtil.isArray)(data)) {
    coll.value = {
      $ingest: data
    };
  } else if (data.signal) {
    var code = 'setdata(' + (0, _vegaUtil.stringValue)(name) + ',' + data.signal + ')';
    coll.params.input = scope.signalRef(code);
  }

  scope.addDataPipeline(name, [coll, (0, _transforms.Sieve)({})]);
  return {
    data: name,
    field: 'data'
  };
}

function ordinalMultipleDomain(domain, scope, fields) {
  var sort = parseSort(domain.sort, true),
      counts,
      p,
      a,
      c,
      v; // get value counts for each domain field

  counts = fields.map(function (f) {
    var data = scope.getData(f.data);
    if (!data) dataLookupError(f.data);
    return data.countsRef(scope, f.field, sort);
  }); // aggregate the results from each domain field

  p = {
    groupby: _util.keyFieldRef,
    pulse: counts
  };

  if (sort) {
    a = sort.op || 'count';
    v = sort.field ? (0, _util.aggrField)(a, sort.field) : 'count';
    p.ops = [MULTIDOMAIN_SORT_OPS[a]];
    p.fields = [scope.fieldRef(v)];
    p.as = [v];
  }

  a = scope.add((0, _transforms.Aggregate)(p)); // collect aggregate output

  c = scope.add((0, _transforms.Collect)({
    pulse: (0, _util.ref)(a)
  })); // extract values for combined domain

  v = scope.add((0, _transforms.Values)({
    field: _util.keyFieldRef,
    sort: scope.sortRef(sort),
    pulse: (0, _util.ref)(c)
  }));
  return (0, _util.ref)(v);
}

function parseSort(sort, multidomain) {
  if (sort) {
    if (!sort.field && !sort.op) {
      if ((0, _vegaUtil.isObject)(sort)) sort.field = 'key';else sort = {
        field: 'key'
      };
    } else if (!sort.field && sort.op !== 'count') {
      (0, _vegaUtil.error)('No field provided for sort aggregate op: ' + sort.op);
    } else if (multidomain && sort.field) {
      if (sort.op && !MULTIDOMAIN_SORT_OPS[sort.op]) {
        (0, _vegaUtil.error)('Multiple domain scales can not be sorted using ' + sort.op);
      }
    }
  }

  return sort;
}

function quantileMultipleDomain(domain, scope, fields) {
  // get value arrays for each domain field
  var values = fields.map(function (f) {
    var data = scope.getData(f.data);
    if (!data) dataLookupError(f.data);
    return data.domainRef(scope, f.field);
  }); // combine value arrays

  return (0, _util.ref)(scope.add((0, _transforms.MultiValues)({
    values: values
  })));
}

function numericMultipleDomain(domain, scope, fields) {
  // get extents for each domain field
  var extents = fields.map(function (f) {
    var data = scope.getData(f.data);
    if (!data) dataLookupError(f.data);
    return data.extentRef(scope, f.field);
  }); // combine extents

  return (0, _util.ref)(scope.add((0, _transforms.MultiExtent)({
    extents: extents
  })));
} // -- SCALE BINS -----


function parseScaleBins(v, scope) {
  return v.signal || (0, _vegaUtil.isArray)(v) ? parseArray(v, scope) : scope.objectProperty(v);
} // -- SCALE NICE -----


function parseScaleNice(nice) {
  return (0, _vegaUtil.isObject)(nice) ? {
    interval: parseLiteral(nice.interval),
    step: parseLiteral(nice.step)
  } : parseLiteral(nice);
} // -- SCALE INTERPOLATION -----


function parseScaleInterpolate(interpolate, params) {
  params.interpolate = parseLiteral(interpolate.type || interpolate);

  if (interpolate.gamma != null) {
    params.interpolateGamma = parseLiteral(interpolate.gamma);
  }
} // -- SCALE RANGE -----


function parseScaleRange(spec, scope, params) {
  var range = spec.range,
      config = scope.config.range;

  if (range.signal) {
    return scope.signalRef(range.signal);
  } else if ((0, _vegaUtil.isString)(range)) {
    if (config && (0, _vegaUtil.hasOwnProperty)(config, range)) {
      spec = (0, _vegaUtil.extend)({}, spec, {
        range: config[range]
      });
      return parseScaleRange(spec, scope, params);
    } else if (range === 'width') {
      range = [0, {
        signal: 'width'
      }];
    } else if (range === 'height') {
      range = (0, _vegaScale.isDiscrete)(spec.type) ? [0, {
        signal: 'height'
      }] : [{
        signal: 'height'
      }, 0];
    } else {
      (0, _vegaUtil.error)('Unrecognized scale range value: ' + (0, _vegaUtil.stringValue)(range));
    }
  } else if (range.scheme) {
    params.scheme = (0, _vegaUtil.isArray)(range.scheme) ? parseArray(range.scheme, scope) : parseLiteral(range.scheme, scope);
    if (range.extent) params.schemeExtent = parseArray(range.extent, scope);
    if (range.count) params.schemeCount = parseLiteral(range.count, scope);
    return;
  } else if (range.step) {
    params.rangeStep = parseLiteral(range.step, scope);
    return;
  } else if ((0, _vegaScale.isDiscrete)(spec.type) && !(0, _vegaUtil.isArray)(range)) {
    return parseScaleDomain(range, spec, scope);
  } else if (!(0, _vegaUtil.isArray)(range)) {
    (0, _vegaUtil.error)('Unsupported range type: ' + (0, _vegaUtil.stringValue)(range));
  }

  return range.map(v => ((0, _vegaUtil.isArray)(v) ? parseArray : parseLiteral)(v, scope));
}
},{"../util":"node_modules/vega-parser/src/util.js","../transforms":"node_modules/vega-parser/src/transforms.js","vega-scale":"node_modules/vega-scale/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/projection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

function _default(proj, scope) {
  var params = {};

  for (var name in proj) {
    if (name === 'name') continue;
    params[name] = parseParameter(proj[name], name, scope);
  }

  scope.addProjection(proj.name, params);
}

function parseParameter(_, name, scope) {
  return (0, _vegaUtil.isArray)(_) ? _.map(function (_) {
    return parseParameter(_, name, scope);
  }) : !(0, _vegaUtil.isObject)(_) ? _ : _.signal ? scope.signalRef(_.signal) : name === 'fit' ? _ : (0, _vegaUtil.error)('Unsupported parameter object: ' + (0, _vegaUtil.stringValue)(_));
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/guides/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.one = exports.zero = exports.Skip = exports.LegendScales = exports.Discrete = exports.Gradient = exports.Symbols = exports.GroupTitleStyle = exports.GuideTitleStyle = exports.GuideLabelStyle = exports.Value = exports.Size = exports.Perc2 = exports.Perc = exports.Offset = exports.Label = exports.Index = exports.End = exports.Middle = exports.Start = exports.Vertical = exports.Center = exports.Bottom = exports.Right = exports.Left = exports.Top = void 0;
const Top = 'top';
exports.Top = Top;
const Left = 'left';
exports.Left = Left;
const Right = 'right';
exports.Right = Right;
const Bottom = 'bottom';
exports.Bottom = Bottom;
const Center = 'center';
exports.Center = Center;
const Vertical = 'vertical';
exports.Vertical = Vertical;
const Start = 'start';
exports.Start = Start;
const Middle = 'middle';
exports.Middle = Middle;
const End = 'end';
exports.End = End;
const Index = 'index';
exports.Index = Index;
const Label = 'label';
exports.Label = Label;
const Offset = 'offset';
exports.Offset = Offset;
const Perc = 'perc';
exports.Perc = Perc;
const Perc2 = 'perc2';
exports.Perc2 = Perc2;
const Size = 'size';
exports.Size = Size;
const Value = 'value';
exports.Value = Value;
const GuideLabelStyle = 'guide-label';
exports.GuideLabelStyle = GuideLabelStyle;
const GuideTitleStyle = 'guide-title';
exports.GuideTitleStyle = GuideTitleStyle;
const GroupTitleStyle = 'group-title';
exports.GroupTitleStyle = GroupTitleStyle;
const Symbols = 'symbol';
exports.Symbols = Symbols;
const Gradient = 'gradient';
exports.Gradient = Gradient;
const Discrete = 'discrete'; // Encoding channels supported by legends
// In priority order of 'canonical' scale

exports.Discrete = Discrete;
const LegendScales = ['size', 'shape', 'fill', 'stroke', 'strokeWidth', 'strokeDash', 'opacity'];
exports.LegendScales = LegendScales;
const Skip = {
  name: 1,
  interactive: 1
};
exports.Skip = Skip;
const zero = {
  value: 0
};
exports.zero = zero;
const one = {
  value: 1
};
exports.one = one;
},{}],"node_modules/vega-parser/src/parsers/encode/adjust-spatial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

var Skip = (0, _vegaUtil.toSet)(['rule']),
    Swap = (0, _vegaUtil.toSet)(['group', 'image', 'rect']);

function _default(encode, marktype) {
  var code = '';
  if (Skip[marktype]) return code;

  if (encode.x2) {
    if (encode.x) {
      if (Swap[marktype]) {
        code += 'if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;';
      }

      code += 'o.width=o.x2-o.x;';
    } else {
      code += 'o.x=o.x2-(o.width||0);';
    }
  }

  if (encode.xc) {
    code += 'o.x=o.xc-(o.width||0)/2;';
  }

  if (encode.y2) {
    if (encode.y) {
      if (Swap[marktype]) {
        code += 'if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;';
      }

      code += 'o.height=o.y2-o.y;';
    } else {
      code += 'o.y=o.y2-(o.height||0);';
    }
  }

  if (encode.yc) {
    code += 'o.y=o.yc-(o.height||0)/2;';
  }

  return code;
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/encode/color.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _entry = _interopRequireDefault(require("./entry"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(enc, scope, params, fields) {
  function color(type, x, y, z) {
    var a = (0, _entry.default)(null, x, scope, params, fields),
        b = (0, _entry.default)(null, y, scope, params, fields),
        c = (0, _entry.default)(null, z, scope, params, fields);
    return 'this.' + type + '(' + [a, b, c].join(',') + ').toString()';
  }

  return enc.c ? color('hcl', enc.h, enc.c, enc.l) : enc.h || enc.s ? color('hsl', enc.h, enc.s, enc.l) : enc.l || enc.a ? color('lab', enc.l, enc.a, enc.b) : enc.r || enc.g || enc.b ? color('rgb', enc.r, enc.g, enc.b) : null;
}
},{"./entry":"node_modules/vega-parser/src/parsers/encode/entry.js"}],"node_modules/vega-parser/src/parsers/encode/expression.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _expression = _interopRequireDefault(require("../expression"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(code, scope, params, fields) {
  var expr = (0, _expression.default)(code, scope);
  expr.$fields.forEach(function (name) {
    fields[name] = 1;
  });
  (0, _vegaUtil.extend)(params, expr.$params);
  return expr.$expr;
}
},{"../expression":"node_modules/vega-parser/src/parsers/expression.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/encode/field.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _expression = _interopRequireDefault(require("./expression"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(ref, scope, params, fields) {
  return resolve((0, _vegaUtil.isObject)(ref) ? ref : {
    datum: ref
  }, scope, params, fields);
}

function resolve(ref, scope, params, fields) {
  var object, level, field;

  if (ref.signal) {
    object = 'datum';
    field = (0, _expression.default)(ref.signal, scope, params, fields);
  } else if (ref.group || ref.parent) {
    level = Math.max(1, ref.level || 1);
    object = 'item';

    while (level-- > 0) {
      object += '.mark.group';
    }

    if (ref.parent) {
      field = ref.parent;
      object += '.datum';
    } else {
      field = ref.group;
    }
  } else if (ref.datum) {
    object = 'datum';
    field = ref.datum;
  } else {
    (0, _vegaUtil.error)('Invalid field reference: ' + (0, _vegaUtil.stringValue)(ref));
  }

  if (!ref.signal) {
    if ((0, _vegaUtil.isString)(field)) {
      fields[field] = 1; // TODO review field tracking?

      field = (0, _vegaUtil.splitAccessPath)(field).map(_vegaUtil.stringValue).join('][');
    } else {
      field = resolve(field, scope, params, fields);
    }
  }

  return object + '[' + field + ']';
}
},{"./expression":"node_modules/vega-parser/src/parsers/encode/expression.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/encode/scale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.getScale = getScale;

var _expression = _interopRequireDefault(require("./expression"));

var _field = _interopRequireDefault(require("./field"));

var _vegaFunctions = require("vega-functions");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(enc, value, scope, params, fields) {
  var scale = getScale(enc.scale, scope, params, fields),
      interp,
      func,
      flag;

  if (enc.range != null) {
    // pull value from scale range
    interp = +enc.range;
    func = scale + '.range()';
    value = interp === 0 ? func + '[0]' : '($=' + func + ',' + (interp === 1 ? '$[$.length-1]' : '$[0]+' + interp + '*($[$.length-1]-$[0])') + ')';
  } else {
    // run value through scale and/or pull scale bandwidth
    if (value !== undefined) value = scale + '(' + value + ')';

    if (enc.band && (flag = hasBandwidth(enc.scale, scope))) {
      func = scale + '.bandwidth';
      interp = +enc.band;
      interp = func + '()' + (interp === 1 ? '' : '*' + interp); // if we don't know the scale type, check for bandwidth

      if (flag < 0) interp = '(' + func + '?' + interp + ':0)';
      value = (value ? value + '+' : '') + interp;

      if (enc.extra) {
        // include logic to handle extraneous elements
        value = '(datum.extra?' + scale + '(datum.extra.value):' + value + ')';
      }
    }

    if (value == null) value = '0';
  }

  return value;
}

function hasBandwidth(name, scope) {
  if (!(0, _vegaUtil.isString)(name)) return -1;
  var type = scope.scaleType(name);
  return type === 'band' || type === 'point' ? 1 : 0;
}

function getScale(name, scope, params, fields) {
  var scaleName;

  if ((0, _vegaUtil.isString)(name)) {
    // direct scale lookup; add scale as parameter
    scaleName = _vegaFunctions.ScalePrefix + name;

    if (!(0, _vegaUtil.hasOwnProperty)(params, scaleName)) {
      params[scaleName] = scope.scaleRef(name);
    }

    scaleName = (0, _vegaUtil.stringValue)(scaleName);
  } else {
    // indirect scale lookup; add all scales as parameters
    for (scaleName in scope.scales) {
      params[_vegaFunctions.ScalePrefix + scaleName] = scope.scaleRef(scaleName);
    }

    scaleName = (0, _vegaUtil.stringValue)(_vegaFunctions.ScalePrefix) + '+' + (name.signal ? '(' + (0, _expression.default)(name.signal, scope, params, fields) + ')' : (0, _field.default)(name, scope, params, fields));
  }

  return '_[' + scaleName + ']';
}
},{"./expression":"node_modules/vega-parser/src/parsers/encode/expression.js","./field":"node_modules/vega-parser/src/parsers/encode/field.js","vega-functions":"node_modules/vega-functions/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/encode/gradient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _scale = require("./scale");

var _vegaUtil = require("vega-util");

function _default(enc, scope, params, fields) {
  return 'this.gradient(' + (0, _scale.getScale)(enc.gradient, scope, params, fields) + ',' + (0, _vegaUtil.stringValue)(enc.start) + ',' + (0, _vegaUtil.stringValue)(enc.stop) + ',' + (0, _vegaUtil.stringValue)(enc.count) + ')';
}
},{"./scale":"node_modules/vega-parser/src/parsers/encode/scale.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/encode/property.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _entry = _interopRequireDefault(require("./entry"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(property, scope, params, fields) {
  return (0, _vegaUtil.isObject)(property) ? '(' + (0, _entry.default)(null, property, scope, params, fields) + ')' : property;
}
},{"./entry":"node_modules/vega-parser/src/parsers/encode/entry.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/encode/entry.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _color = _interopRequireDefault(require("./color"));

var _field = _interopRequireDefault(require("./field"));

var _scale = _interopRequireDefault(require("./scale"));

var _gradient = _interopRequireDefault(require("./gradient"));

var _property = _interopRequireDefault(require("./property"));

var _expression = _interopRequireDefault(require("./expression"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(channel, enc, scope, params, fields) {
  if (enc.gradient != null) {
    return (0, _gradient.default)(enc, scope, params, fields);
  }

  var value = enc.signal ? (0, _expression.default)(enc.signal, scope, params, fields) : enc.color ? (0, _color.default)(enc.color, scope, params, fields) : enc.field != null ? (0, _field.default)(enc.field, scope, params, fields) : enc.value !== undefined ? (0, _vegaUtil.stringValue)(enc.value) : undefined;

  if (enc.scale != null) {
    value = (0, _scale.default)(enc, value, scope, params, fields);
  }

  if (value === undefined) {
    value = null;
  }

  if (enc.exponent != null) {
    value = 'Math.pow(' + value + ',' + (0, _property.default)(enc.exponent, scope, params, fields) + ')';
  }

  if (enc.mult != null) {
    value += '*' + (0, _property.default)(enc.mult, scope, params, fields);
  }

  if (enc.offset != null) {
    value += '+' + (0, _property.default)(enc.offset, scope, params, fields);
  }

  if (enc.round) {
    value = 'Math.round(' + value + ')';
  }

  return value;
}
},{"./color":"node_modules/vega-parser/src/parsers/encode/color.js","./field":"node_modules/vega-parser/src/parsers/encode/field.js","./scale":"node_modules/vega-parser/src/parsers/encode/scale.js","./gradient":"node_modules/vega-parser/src/parsers/encode/gradient.js","./property":"node_modules/vega-parser/src/parsers/encode/property.js","./expression":"node_modules/vega-parser/src/parsers/encode/expression.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/encode/set.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

function _default(obj, key, value) {
  const o = obj + '[' + (0, _vegaUtil.stringValue)(key) + ']';
  return `$=${value};if(${o}!==$)${o}=$,m=1;`;
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/encode/rule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _entry = _interopRequireDefault(require("./entry"));

var _set = _interopRequireDefault(require("./set"));

var _expression = _interopRequireDefault(require("./expression"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(channel, rules, scope, params, fields) {
  var code = '';
  rules.forEach(function (rule) {
    var value = (0, _entry.default)(channel, rule, scope, params, fields);
    code += rule.test ? (0, _expression.default)(rule.test, scope, params, fields) + '?' + value + ':' : value;
  }); // if no else clause, terminate with null (vega/vega#1366)

  if ((0, _vegaUtil.peek)(code) === ':') {
    code += 'null';
  }

  return (0, _set.default)('o', channel, code);
}
},{"./entry":"node_modules/vega-parser/src/parsers/encode/entry.js","./set":"node_modules/vega-parser/src/parsers/encode/set.js","./expression":"node_modules/vega-parser/src/parsers/encode/expression.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/encode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseEncode;

var _adjustSpatial = _interopRequireDefault(require("./encode/adjust-spatial"));

var _entry = _interopRequireDefault(require("./encode/entry"));

var _rule = _interopRequireDefault(require("./encode/rule"));

var _set = _interopRequireDefault(require("./encode/set"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseEncode(encode, marktype, params, scope) {
  var fields = {},
      code = 'var o=item,datum=o.datum,m=0,$;',
      channel,
      enc,
      value;

  for (channel in encode) {
    enc = encode[channel];

    if ((0, _vegaUtil.isArray)(enc)) {
      // rule
      code += (0, _rule.default)(channel, enc, scope, params, fields);
    } else {
      value = (0, _entry.default)(channel, enc, scope, params, fields);
      code += (0, _set.default)('o', channel, value);
    }
  }

  code += (0, _adjustSpatial.default)(encode, marktype);
  code += 'return m;';
  return {
    $expr: code,
    $fields: Object.keys(fields),
    $output: Object.keys(encode)
  };
}
},{"./encode/adjust-spatial":"node_modules/vega-parser/src/parsers/encode/adjust-spatial.js","./encode/entry":"node_modules/vega-parser/src/parsers/encode/entry.js","./encode/rule":"node_modules/vega-parser/src/parsers/encode/rule.js","./encode/set":"node_modules/vega-parser/src/parsers/encode/set.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/marks/roles.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TitleRole = exports.LegendTitleRole = exports.LegendSymbolRole = exports.LegendLabelRole = exports.LegendGradientRole = exports.LegendEntryRole = exports.LegendBandRole = exports.LegendRole = exports.AxisTitleRole = exports.AxisTickRole = exports.AxisLabelRole = exports.AxisGridRole = exports.AxisDomainRole = exports.AxisRole = exports.ScopeRole = exports.FrameRole = exports.MarkRole = void 0;
var MarkRole = 'mark';
exports.MarkRole = MarkRole;
var FrameRole = 'frame';
exports.FrameRole = FrameRole;
var ScopeRole = 'scope';
exports.ScopeRole = ScopeRole;
var AxisRole = 'axis';
exports.AxisRole = AxisRole;
var AxisDomainRole = 'axis-domain';
exports.AxisDomainRole = AxisDomainRole;
var AxisGridRole = 'axis-grid';
exports.AxisGridRole = AxisGridRole;
var AxisLabelRole = 'axis-label';
exports.AxisLabelRole = AxisLabelRole;
var AxisTickRole = 'axis-tick';
exports.AxisTickRole = AxisTickRole;
var AxisTitleRole = 'axis-title';
exports.AxisTitleRole = AxisTitleRole;
var LegendRole = 'legend';
exports.LegendRole = LegendRole;
var LegendBandRole = 'legend-band';
exports.LegendBandRole = LegendBandRole;
var LegendEntryRole = 'legend-entry';
exports.LegendEntryRole = LegendEntryRole;
var LegendGradientRole = 'legend-gradient';
exports.LegendGradientRole = LegendGradientRole;
var LegendLabelRole = 'legend-label';
exports.LegendLabelRole = LegendLabelRole;
var LegendSymbolRole = 'legend-symbol';
exports.LegendSymbolRole = LegendSymbolRole;
var LegendTitleRole = 'legend-title';
exports.LegendTitleRole = LegendTitleRole;
var TitleRole = 'title';
exports.TitleRole = TitleRole;
},{}],"node_modules/vega-parser/src/parsers/encode/encode-util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encoder = encoder;
exports.addEncode = addEncode;
exports.addEncoders = addEncoders;
exports.extendEncode = extendEncode;
exports.encoders = encoders;
exports.has = has;

var _encode = _interopRequireDefault(require("../encode"));

var _roles = require("../marks/roles");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function encoder(_) {
  return (0, _vegaUtil.isObject)(_) ? (0, _vegaUtil.extend)({}, _) : {
    value: _
  };
}

function addEncode(object, name, value, set) {
  if (value != null) {
    if ((0, _vegaUtil.isObject)(value) && !(0, _vegaUtil.isArray)(value)) {
      object.update[name] = value;
    } else {
      object[set || 'enter'][name] = {
        value: value
      };
    }

    return 1;
  } else {
    return 0;
  }
}

function addEncoders(object, enter, update) {
  for (let name in enter) {
    addEncode(object, name, enter[name]);
  }

  for (let name in update) {
    addEncode(object, name, update[name], 'update');
  }
}

function extendEncode(encode, extra, skip) {
  for (var name in extra) {
    if (skip && (0, _vegaUtil.hasOwnProperty)(skip, name)) continue;
    encode[name] = (0, _vegaUtil.extend)(encode[name] || {}, extra[name]);
  }

  return encode;
}

function encoders(encode, type, role, style, scope, params) {
  var enc, key;
  params = params || {};
  params.encoders = {
    $encode: enc = {}
  };
  encode = applyDefaults(encode, type, role, style, scope.config);

  for (key in encode) {
    enc[key] = (0, _encode.default)(encode[key], type, params, scope);
  }

  return params;
}

function applyDefaults(encode, type, role, style, config) {
  var defaults = {},
      enter = {},
      update,
      key,
      skip,
      props; // ignore legend and axis

  if (role == 'legend' || String(role).indexOf('axis') === 0) {
    role = null;
  } // resolve mark config


  props = role === _roles.FrameRole ? config.group : role === _roles.MarkRole ? (0, _vegaUtil.extend)({}, config.mark, config[type]) : null;

  for (key in props) {
    // do not apply defaults if relevant fields are defined
    skip = has(key, encode) || (key === 'fill' || key === 'stroke') && (has('fill', encode) || has('stroke', encode));
    if (!skip) applyDefault(defaults, key, props[key]);
  } // resolve styles, apply with increasing precedence


  (0, _vegaUtil.array)(style).forEach(function (name) {
    var props = config.style && config.style[name];

    for (var key in props) {
      if (!has(key, encode)) {
        applyDefault(defaults, key, props[key]);
      }
    }
  });
  encode = (0, _vegaUtil.extend)({}, encode); // defensive copy

  for (key in defaults) {
    props = defaults[key];

    if (props.signal) {
      (update = update || {})[key] = props;
    } else {
      enter[key] = props;
    }
  }

  encode.enter = (0, _vegaUtil.extend)(enter, encode.enter);
  if (update) encode.update = (0, _vegaUtil.extend)(update, encode.update);
  return encode;
}

function applyDefault(defaults, key, value) {
  defaults[key] = value && value.signal ? {
    signal: value.signal
  } : {
    value: value
  };
}

function has(key, encode) {
  return encode && (encode.enter && encode.enter[key] || encode.update && encode.update[key]);
}
},{"../encode":"node_modules/vega-parser/src/parsers/encode.js","../marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/guides/guide-mark.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./constants");

var _encodeUtil = require("../encode/encode-util");

function _default(type, role, style, key, dataRef, encode, extras) {
  return {
    type: type,
    name: extras ? extras.name : undefined,
    role: role,
    style: extras && extras.style || style,
    key: key,
    from: dataRef,
    interactive: !!(extras && extras.interactive),
    encode: (0, _encodeUtil.extendEncode)(encode, extras, _constants.Skip)
  };
}
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","../encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js"}],"node_modules/vega-parser/src/parsers/guides/guide-util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lookup = lookup;
exports.getEncoding = getEncoding;
exports.getStyle = getStyle;
exports.anchorExpr = anchorExpr;
exports.alignExpr = void 0;

var _constants = require("./constants");

var _util = require("../../util");

var _vegaUtil = require("vega-util");

function lookup(spec, config) {
  const _ = name => (0, _util.value)(spec[name], config[name]);

  _.isVertical = s => _constants.Vertical === (0, _util.value)(spec.direction, config.direction || (s ? config.symbolDirection : config.gradientDirection));

  _.gradientLength = () => (0, _util.value)(spec.gradientLength, config.gradientLength || config.gradientWidth);

  _.gradientThickness = () => (0, _util.value)(spec.gradientThickness, config.gradientThickness || config.gradientHeight);

  _.entryColumns = () => (0, _util.value)(spec.columns, (0, _util.value)(config.columns, +_.isVertical(true)));

  return _;
}

function getEncoding(name, encode) {
  var v = encode && (encode.update && encode.update[name] || encode.enter && encode.enter[name]);
  return v && v.signal ? v : v ? v.value : null;
}

function getStyle(name, scope, style) {
  var s = scope.config.style[style];
  return s && s[name];
}

function anchorExpr(s, e, m) {
  return `item.anchor === "${_constants.Start}" ? ${s} : item.anchor === "${_constants.End}" ? ${e} : ${m}`;
}

const alignExpr = anchorExpr((0, _vegaUtil.stringValue)(_constants.Left), (0, _vegaUtil.stringValue)(_constants.Right), (0, _vegaUtil.stringValue)(_constants.Center));
exports.alignExpr = alignExpr;
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","../../util":"node_modules/vega-parser/src/util.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/marks/marktypes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextMark = exports.SymbolMark = exports.RuleMark = exports.RectMark = exports.GroupMark = void 0;
var GroupMark = 'group';
exports.GroupMark = GroupMark;
var RectMark = 'rect';
exports.RectMark = RectMark;
var RuleMark = 'rule';
exports.RuleMark = RuleMark;
var SymbolMark = 'symbol';
exports.SymbolMark = SymbolMark;
var TextMark = 'text';
exports.TextMark = TextMark;
},{}],"node_modules/vega-parser/src/parsers/guides/legend-gradient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./constants");

var _guideMark = _interopRequireDefault(require("./guide-mark"));

var _guideUtil = require("./guide-util");

var _marktypes = require("../marks/marktypes");

var _roles = require("../marks/roles");

var _encodeUtil = require("../encode/encode-util");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, scale, config, userEncode) {
  var _ = (0, _guideUtil.lookup)(spec, config),
      vertical = _.isVertical(),
      thickness = _.gradientThickness(),
      length = _.gradientLength(),
      encode,
      enter,
      start,
      stop,
      width,
      height;

  if (vertical) {
    start = [0, 1];
    stop = [0, 0];
    width = thickness;
    height = length;
  } else {
    start = [0, 0];
    stop = [1, 0];
    width = length;
    height = thickness;
  }

  encode = {
    enter: enter = {
      opacity: _constants.zero,
      x: _constants.zero,
      y: _constants.zero,
      width: (0, _encodeUtil.encoder)(width),
      height: (0, _encodeUtil.encoder)(height)
    },
    update: (0, _vegaUtil.extend)({}, enter, {
      opacity: _constants.one,
      fill: {
        gradient: scale,
        start: start,
        stop: stop
      }
    }),
    exit: {
      opacity: _constants.zero
    }
  };
  (0, _encodeUtil.addEncoders)(encode, {
    stroke: _('gradientStrokeColor'),
    strokeWidth: _('gradientStrokeWidth')
  }, {
    // update
    opacity: _('gradientOpacity')
  });
  return (0, _guideMark.default)(_marktypes.RectMark, _roles.LegendGradientRole, null, undefined, undefined, encode, userEncode);
}
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","./guide-mark":"node_modules/vega-parser/src/parsers/guides/guide-mark.js","./guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","../marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","../marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","../encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/guides/legend-gradient-discrete.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./constants");

var _guideMark = _interopRequireDefault(require("./guide-mark"));

var _guideUtil = require("./guide-util");

var _marktypes = require("../marks/marktypes");

var _roles = require("../marks/roles");

var _encodeUtil = require("../encode/encode-util");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, scale, config, userEncode, dataRef) {
  var _ = (0, _guideUtil.lookup)(spec, config),
      vertical = _.isVertical(),
      thickness = _.gradientThickness(),
      length = _.gradientLength(),
      encode,
      enter,
      u,
      v,
      uu,
      vv,
      adjust = '';

  vertical ? (u = 'y', uu = 'y2', v = 'x', vv = 'width', adjust = '1-') : (u = 'x', uu = 'x2', v = 'y', vv = 'height');
  enter = {
    opacity: _constants.zero,
    fill: {
      scale: scale,
      field: _constants.Value
    }
  };
  enter[u] = {
    signal: adjust + 'datum.' + _constants.Perc,
    mult: length
  };
  enter[v] = _constants.zero;
  enter[uu] = {
    signal: adjust + 'datum.' + _constants.Perc2,
    mult: length
  };
  enter[vv] = (0, _encodeUtil.encoder)(thickness);
  encode = {
    enter: enter,
    update: (0, _vegaUtil.extend)({}, enter, {
      opacity: _constants.one
    }),
    exit: {
      opacity: _constants.zero
    }
  };
  (0, _encodeUtil.addEncoders)(encode, {
    stroke: _('gradientStrokeColor'),
    strokeWidth: _('gradientStrokeWidth')
  }, {
    // update
    opacity: _('gradientOpacity')
  });
  return (0, _guideMark.default)(_marktypes.RectMark, _roles.LegendBandRole, null, _constants.Value, dataRef, encode, userEncode);
}
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","./guide-mark":"node_modules/vega-parser/src/parsers/guides/guide-mark.js","./guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","../marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","../marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","../encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/guides/legend-gradient-labels.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./constants");

var _guideMark = _interopRequireDefault(require("./guide-mark"));

var _guideUtil = require("./guide-util");

var _marktypes = require("../marks/marktypes");

var _roles = require("../marks/roles");

var _encodeUtil = require("../encode/encode-util");

var _util = require("../../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const alignExpr = `datum.${_constants.Perc}<=0?"${_constants.Left}":datum.${_constants.Perc}>=1?"${_constants.Right}":"${_constants.Center}"`,
      baselineExpr = `datum.${_constants.Perc}<=0?"${_constants.Bottom}":datum.${_constants.Perc}>=1?"${_constants.Top}":"${_constants.Middle}"`;

function _default(spec, config, userEncode, dataRef) {
  var _ = (0, _guideUtil.lookup)(spec, config),
      vertical = _.isVertical(),
      thickness = (0, _encodeUtil.encoder)(_.gradientThickness()),
      length = _.gradientLength(),
      overlap = _('labelOverlap'),
      separation = _('labelSeparation'),
      encode,
      enter,
      update,
      u,
      v,
      adjust = '';

  encode = {
    enter: enter = {
      opacity: _constants.zero
    },
    update: update = {
      opacity: _constants.one,
      text: {
        field: _constants.Label
      }
    },
    exit: {
      opacity: _constants.zero
    }
  };
  (0, _encodeUtil.addEncoders)(encode, {
    fill: _('labelColor'),
    fillOpacity: _('labelOpacity'),
    font: _('labelFont'),
    fontSize: _('labelFontSize'),
    fontStyle: _('labelFontStyle'),
    fontWeight: _('labelFontWeight'),
    limit: (0, _util.value)(spec.labelLimit, config.gradientLabelLimit)
  });

  if (vertical) {
    enter.align = {
      value: 'left'
    };
    enter.baseline = update.baseline = {
      signal: baselineExpr
    };
    u = 'y';
    v = 'x';
    adjust = '1-';
  } else {
    enter.align = update.align = {
      signal: alignExpr
    };
    enter.baseline = {
      value: 'top'
    };
    u = 'x';
    v = 'y';
  }

  enter[u] = update[u] = {
    signal: adjust + 'datum.' + _constants.Perc,
    mult: length
  };
  enter[v] = update[v] = thickness;
  thickness.offset = (0, _util.value)(spec.labelOffset, config.gradientLabelOffset) || 0;
  spec = (0, _guideMark.default)(_marktypes.TextMark, _roles.LegendLabelRole, _constants.GuideLabelStyle, _constants.Value, dataRef, encode, userEncode);

  if (overlap) {
    spec.overlap = {
      separation: separation,
      method: overlap,
      order: 'datum.' + _constants.Index
    };
  }

  return spec;
}
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","./guide-mark":"node_modules/vega-parser/src/parsers/guides/guide-mark.js","./guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","../marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","../marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","../encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js","../../util":"node_modules/vega-parser/src/util.js"}],"node_modules/vega-parser/src/parsers/guides/guide-group.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _marktypes = require("../marks/marktypes");

function _default(role, style, name, dataRef, interactive, encode, marks, layout) {
  return {
    type: _marktypes.GroupMark,
    name: name,
    role: role,
    style: style,
    from: dataRef,
    interactive: interactive || false,
    encode: encode,
    marks: marks,
    layout: layout
  };
}
},{"../marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js"}],"node_modules/vega-parser/src/parsers/guides/legend-symbol-groups.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.legendSymbolLayout = legendSymbolLayout;

var _constants = require("./constants");

var _guideGroup = _interopRequireDefault(require("./guide-group"));

var _guideMark = _interopRequireDefault(require("./guide-mark"));

var _guideUtil = require("./guide-util");

var _marktypes = require("../marks/marktypes");

var _roles = require("../marks/roles");

var _encodeUtil = require("../encode/encode-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// userEncode is top-level, includes entries, symbols, labels
function _default(spec, config, userEncode, dataRef, columns) {
  var _ = (0, _guideUtil.lookup)(spec, config),
      entries = userEncode.entries,
      interactive = !!(entries && entries.interactive),
      name = entries ? entries.name : undefined,
      height = _('clipHeight'),
      symbolOffset = _('symbolOffset'),
      valueRef = {
    data: 'value'
  },
      encode = {},
      xSignal = `${columns} ? datum.${_constants.Offset} : datum.${_constants.Size}`,
      yEncode = height ? (0, _encodeUtil.encoder)(height) : {
    field: _constants.Size
  },
      index = `datum.${_constants.Index}`,
      ncols = `max(1, ${columns})`,
      enter,
      update,
      labelOffset,
      symbols,
      labels,
      nrows,
      sort;

  yEncode.mult = 0.5; // -- LEGEND SYMBOLS --

  encode = {
    enter: enter = {
      opacity: _constants.zero,
      x: {
        signal: xSignal,
        mult: 0.5,
        offset: symbolOffset
      },
      y: yEncode
    },
    update: update = {
      opacity: _constants.one,
      x: enter.x,
      y: enter.y
    },
    exit: {
      opacity: _constants.zero
    }
  };

  if (!spec.fill) {
    (0, _encodeUtil.addEncoders)(encode, {
      fill: config.symbolBaseFillColor,
      stroke: config.symbolBaseStrokeColor
    });
  }

  (0, _encodeUtil.addEncoders)(encode, {
    fill: _('symbolFillColor'),
    shape: _('symbolType'),
    size: _('symbolSize'),
    stroke: _('symbolStrokeColor'),
    strokeDash: _('symbolDash'),
    strokeDashOffset: _('symbolDashOffset'),
    strokeWidth: _('symbolStrokeWidth')
  }, {
    // update
    opacity: _('symbolOpacity')
  });

  _constants.LegendScales.forEach(function (scale) {
    if (spec[scale]) {
      update[scale] = enter[scale] = {
        scale: spec[scale],
        field: _constants.Value
      };
    }
  });

  symbols = (0, _guideMark.default)(_marktypes.SymbolMark, _roles.LegendSymbolRole, null, _constants.Value, valueRef, encode, userEncode.symbols);
  if (height) symbols.clip = true; // -- LEGEND LABELS --

  labelOffset = (0, _encodeUtil.encoder)(symbolOffset);
  labelOffset.offset = _('labelOffset');
  encode = {
    enter: enter = {
      opacity: _constants.zero,
      x: {
        signal: xSignal,
        offset: labelOffset
      },
      y: yEncode
    },
    update: update = {
      opacity: _constants.one,
      text: {
        field: _constants.Label
      },
      x: enter.x,
      y: enter.y
    },
    exit: {
      opacity: _constants.zero
    }
  };
  (0, _encodeUtil.addEncoders)(encode, {
    align: _('labelAlign'),
    baseline: _('labelBaseline'),
    fill: _('labelColor'),
    fillOpacity: _('labelOpacity'),
    font: _('labelFont'),
    fontSize: _('labelFontSize'),
    fontStyle: _('labelFontStyle'),
    fontWeight: _('labelFontWeight'),
    limit: _('labelLimit')
  });
  labels = (0, _guideMark.default)(_marktypes.TextMark, _roles.LegendLabelRole, _constants.GuideLabelStyle, _constants.Value, valueRef, encode, userEncode.labels); // -- LEGEND ENTRY GROUPS --

  encode = {
    enter: {
      noBound: {
        value: !height
      },
      // ignore width/height in bounds calc
      width: _constants.zero,
      height: height ? (0, _encodeUtil.encoder)(height) : _constants.zero,
      opacity: _constants.zero
    },
    exit: {
      opacity: _constants.zero
    },
    update: update = {
      opacity: _constants.one,
      row: {
        signal: null
      },
      column: {
        signal: null
      }
    }
  }; // annotate and sort groups to ensure correct ordering

  if (_.isVertical(true)) {
    nrows = `ceil(item.mark.items.length / ${ncols})`;
    update.row.signal = `${index}%${nrows}`;
    update.column.signal = `floor(${index} / ${nrows})`;
    sort = {
      field: ['row', index]
    };
  } else {
    update.row.signal = `floor(${index} / ${ncols})`;
    update.column.signal = `${index} % ${ncols}`;
    sort = {
      field: index
    };
  } // handle zero column case (implies infinite columns)


  update.column.signal = `${columns}?${update.column.signal}:${index}`; // facet legend entries into sub-groups

  dataRef = {
    facet: {
      data: dataRef,
      name: 'value',
      groupby: _constants.Index
    }
  };
  spec = (0, _guideGroup.default)(_roles.ScopeRole, null, name, dataRef, interactive, (0, _encodeUtil.extendEncode)(encode, entries, _constants.Skip), [symbols, labels]);
  spec.sort = sort;
  return spec;
}

function legendSymbolLayout(spec, config) {
  const _ = (0, _guideUtil.lookup)(spec, config); // layout parameters for legend entries


  return {
    align: _('gridAlign'),
    columns: _.entryColumns(),
    center: {
      row: true,
      column: false
    },
    padding: {
      row: _('rowPadding'),
      column: _('columnPadding')
    }
  };
}
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","./guide-group":"node_modules/vega-parser/src/parsers/guides/guide-group.js","./guide-mark":"node_modules/vega-parser/src/parsers/guides/guide-mark.js","./guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","../marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","../marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","../encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js"}],"node_modules/vega-parser/src/parsers/guides/legend-title.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./constants");

var _guideMark = _interopRequireDefault(require("./guide-mark"));

var _guideUtil = require("./guide-util");

var _marktypes = require("../marks/marktypes");

var _roles = require("../marks/roles");

var _encodeUtil = require("../encode/encode-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// expression logic for align, anchor, angle, and baseline calculation
const isL = 'item.orient === "left"',
      isR = 'item.orient === "right"',
      isLR = `(${isL} || ${isR})`,
      isVG = `datum.vgrad && ${isLR}`,
      baseline = (0, _guideUtil.anchorExpr)('"top"', '"bottom"', '"middle"'),
      alignFlip = (0, _guideUtil.anchorExpr)('"right"', '"left"', '"center"'),
      exprAlign = `datum.vgrad && ${isR} ? (${alignFlip}) : (${isLR} && !(datum.vgrad && ${isL})) ? "left" : ${_guideUtil.alignExpr}`,
      exprAnchor = `item._anchor || (${isLR} ? "middle" : "start")`,
      exprAngle = `${isVG} ? (${isL} ? -90 : 90) : 0`,
      exprBaseline = `${isLR} ? (datum.vgrad ? (${isR} ? "bottom" : "top") : ${baseline}) : "top"`;

function _default(spec, config, userEncode, dataRef) {
  var _ = (0, _guideUtil.lookup)(spec, config),
      encode;

  encode = {
    enter: {
      opacity: _constants.zero
    },
    update: {
      opacity: _constants.one,
      x: {
        field: {
          group: 'padding'
        }
      },
      y: {
        field: {
          group: 'padding'
        }
      }
    },
    exit: {
      opacity: _constants.zero
    }
  };
  (0, _encodeUtil.addEncoders)(encode, {
    orient: _('titleOrient'),
    _anchor: _('titleAnchor'),
    anchor: {
      signal: exprAnchor
    },
    angle: {
      signal: exprAngle
    },
    align: {
      signal: exprAlign
    },
    baseline: {
      signal: exprBaseline
    },
    text: spec.title,
    fill: _('titleColor'),
    fillOpacity: _('titleOpacity'),
    font: _('titleFont'),
    fontSize: _('titleFontSize'),
    fontStyle: _('titleFontStyle'),
    fontWeight: _('titleFontWeight'),
    limit: _('titleLimit')
  }, {
    // require update
    align: _('titleAlign'),
    baseline: _('titleBaseline')
  });
  return (0, _guideMark.default)(_marktypes.TextMark, _roles.LegendTitleRole, _constants.GuideTitleStyle, null, dataRef, encode, userEncode);
}
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","./guide-mark":"node_modules/vega-parser/src/parsers/guides/guide-mark.js","./guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","../marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","../marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","../encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js"}],"node_modules/vega-parser/src/parsers/marks/clip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

function _default(clip, scope) {
  var expr;

  if ((0, _vegaUtil.isObject)(clip)) {
    if (clip.signal) {
      expr = clip.signal;
    } else if (clip.path) {
      expr = 'pathShape(' + param(clip.path) + ')';
    } else if (clip.sphere) {
      expr = 'geoShape(' + param(clip.sphere) + ', {type: "Sphere"})';
    }
  }

  return expr ? scope.signalRef(expr) : !!clip;
}

function param(value) {
  return (0, _vegaUtil.isObject)(value) && value.signal ? value.signal : (0, _vegaUtil.stringValue)(value);
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/marks/role.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _marktypes = require("./marktypes");

var _roles = require("./roles");

function _default(spec) {
  var role = spec.role || '';
  return !role.indexOf('axis') || !role.indexOf('legend') ? role : spec.type === _marktypes.GroupMark ? _roles.ScopeRole : role || _roles.MarkRole;
}
},{"./marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","./roles":"node_modules/vega-parser/src/parsers/marks/roles.js"}],"node_modules/vega-parser/src/parsers/marks/definition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _role = _interopRequireDefault(require("./role"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec) {
  return {
    marktype: spec.type,
    name: spec.name || undefined,
    role: spec.role || (0, _role.default)(spec),
    zindex: +spec.zindex || undefined
  };
}
},{"./role":"node_modules/vega-parser/src/parsers/marks/role.js"}],"node_modules/vega-parser/src/parsers/marks/interactive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(spec, scope) {
  return spec && spec.signal ? scope.signalRef(spec.signal) : spec === false ? false : true;
}
},{}],"node_modules/vega-parser/src/parsers/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.outerExpr = outerExpr;
exports.outerField = outerField;
exports.isData = isData;
exports.isExpr = isExpr;
exports.isField = isField;
exports.isCompare = isCompare;

var _expression = _interopRequireDefault(require("./expression"));

var _util = require("../util");

var _transforms = require("../transforms");

var _vegaDataflow = require("vega-dataflow");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Parse a data transform specification.
 */
function _default(spec, scope) {
  var def = (0, _vegaDataflow.definition)(spec.type);
  if (!def) (0, _vegaUtil.error)('Unrecognized transform type: ' + (0, _vegaUtil.stringValue)(spec.type));
  var t = (0, _util.entry)(def.type.toLowerCase(), null, parseParameters(def, spec, scope));
  if (spec.signal) scope.addSignal(spec.signal, scope.proxy(t));
  t.metadata = def.metadata || {};
  return t;
}
/**
 * Parse all parameters of a data transform.
 */


function parseParameters(def, spec, scope) {
  var params = {},
      pdef,
      i,
      n;

  for (i = 0, n = def.params.length; i < n; ++i) {
    pdef = def.params[i];
    params[pdef.name] = parseParameter(pdef, spec, scope);
  }

  return params;
}
/**
 * Parse a data transform parameter.
 */


function parseParameter(def, spec, scope) {
  var type = def.type,
      value = spec[def.name];

  if (type === 'index') {
    return parseIndexParameter(def, spec, scope);
  } else if (value === undefined) {
    if (def.required) {
      (0, _vegaUtil.error)('Missing required ' + (0, _vegaUtil.stringValue)(spec.type) + ' parameter: ' + (0, _vegaUtil.stringValue)(def.name));
    }

    return;
  } else if (type === 'param') {
    return parseSubParameters(def, spec, scope);
  } else if (type === 'projection') {
    return scope.projectionRef(spec[def.name]);
  }

  return def.array && !(0, _util.isSignal)(value) ? value.map(function (v) {
    return parameterValue(def, v, scope);
  }) : parameterValue(def, value, scope);
}
/**
 * Parse a single parameter value.
 */


function parameterValue(def, value, scope) {
  var type = def.type;

  if ((0, _util.isSignal)(value)) {
    return isExpr(type) ? (0, _vegaUtil.error)('Expression references can not be signals.') : isField(type) ? scope.fieldRef(value) : isCompare(type) ? scope.compareRef(value) : scope.signalRef(value.signal);
  } else {
    var expr = def.expr || isField(type);
    return expr && outerExpr(value) ? scope.exprRef(value.expr, value.as) : expr && outerField(value) ? (0, _util.fieldRef)(value.field, value.as) : isExpr(type) ? (0, _expression.default)(value, scope) : isData(type) ? (0, _util.ref)(scope.getData(value).values) : isField(type) ? (0, _util.fieldRef)(value) : isCompare(type) ? scope.compareRef(value) : value;
  }
}
/**
 * Parse parameter for accessing an index of another data set.
 */


function parseIndexParameter(def, spec, scope) {
  if (!(0, _vegaUtil.isString)(spec.from)) {
    (0, _vegaUtil.error)('Lookup "from" parameter must be a string literal.');
  }

  return scope.getData(spec.from).lookupRef(scope, spec.key);
}
/**
 * Parse a parameter that contains one or more sub-parameter objects.
 */


function parseSubParameters(def, spec, scope) {
  var value = spec[def.name];

  if (def.array) {
    if (!(0, _vegaUtil.isArray)(value)) {
      // signals not allowed!
      (0, _vegaUtil.error)('Expected an array of sub-parameters. Instead: ' + (0, _vegaUtil.stringValue)(value));
    }

    return value.map(function (v) {
      return parseSubParameter(def, v, scope);
    });
  } else {
    return parseSubParameter(def, value, scope);
  }
}
/**
 * Parse a sub-parameter object.
 */


function parseSubParameter(def, value, scope) {
  var params, pdef, k, i, n; // loop over defs to find matching key

  for (i = 0, n = def.params.length; i < n; ++i) {
    pdef = def.params[i];

    for (k in pdef.key) {
      if (pdef.key[k] !== value[k]) {
        pdef = null;
        break;
      }
    }

    if (pdef) break;
  } // raise error if matching key not found


  if (!pdef) (0, _vegaUtil.error)('Unsupported parameter: ' + (0, _vegaUtil.stringValue)(value)); // parse params, create Params transform, return ref

  params = (0, _vegaUtil.extend)(parseParameters(pdef, value, scope), pdef.key);
  return (0, _util.ref)(scope.add((0, _transforms.Params)(params)));
} // -- Utilities -----


function outerExpr(_) {
  return _ && _.expr;
}

function outerField(_) {
  return _ && _.field;
}

function isData(_) {
  return _ === 'data';
}

function isExpr(_) {
  return _ === 'expr';
}

function isField(_) {
  return _ === 'field';
}

function isCompare(_) {
  return _ === 'compare';
}
},{"./expression":"node_modules/vega-parser/src/parsers/expression.js","../util":"node_modules/vega-parser/src/util.js","../transforms":"node_modules/vega-parser/src/transforms.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/marks/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.getDataRef = getDataRef;

var _transform = _interopRequireDefault(require("../transform"));

var _util = require("../../util");

var _transforms = require("../../transforms");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(from, group, scope) {
  var facet, key, op, dataRef, parent; // if no source data, generate singleton datum

  if (!from) {
    dataRef = (0, _util.ref)(scope.add((0, _transforms.Collect)(null, [{}])));
  } // if faceted, process facet specification
  else if (facet = from.facet) {
      if (!group) (0, _vegaUtil.error)('Only group marks can be faceted.'); // use pre-faceted source data, if available

      if (facet.field != null) {
        dataRef = parent = getDataRef(facet, scope);
      } else {
        // generate facet aggregates if no direct data specification
        if (!from.data) {
          op = (0, _transform.default)((0, _vegaUtil.extend)({
            type: 'aggregate',
            groupby: (0, _vegaUtil.array)(facet.groupby)
          }, facet.aggregate), scope);
          op.params.key = scope.keyRef(facet.groupby);
          op.params.pulse = getDataRef(facet, scope);
          dataRef = parent = (0, _util.ref)(scope.add(op));
        } else {
          parent = (0, _util.ref)(scope.getData(from.data).aggregate);
        }

        key = scope.keyRef(facet.groupby, true);
      }
    } // if not yet defined, get source data reference


  if (!dataRef) {
    dataRef = getDataRef(from, scope);
  }

  return {
    key: key,
    pulse: dataRef,
    parent: parent
  };
}

function getDataRef(from, scope) {
  return from.$ref ? from : from.data && from.data.$ref ? from.data : (0, _util.ref)(scope.getData(from.data).output);
}
},{"../transform":"node_modules/vega-parser/src/parsers/transform.js","../../util":"node_modules/vega-parser/src/util.js","../../transforms":"node_modules/vega-parser/src/transforms.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/DataScope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DataScope;

var _util = require("./util");

var _transforms = require("./transforms");

var _vegaUtil = require("vega-util");

function DataScope(scope, input, output, values, aggr) {
  this.scope = scope; // parent scope object

  this.input = input; // first operator in pipeline (tuple input)

  this.output = output; // last operator in pipeline (tuple output)

  this.values = values; // operator for accessing tuples (but not tuple flow)
  // last aggregate in transform pipeline

  this.aggregate = aggr; // lookup table of field indices

  this.index = {};
}

DataScope.fromEntries = function (scope, entries) {
  var n = entries.length,
      i = 1,
      input = entries[0],
      values = entries[n - 1],
      output = entries[n - 2],
      aggr = null;

  if (input && input.type === 'load') {
    input = entries[1];
  } // add operator entries to this scope, wire up pulse chain


  scope.add(entries[0]);

  for (; i < n; ++i) {
    entries[i].params.pulse = (0, _util.ref)(entries[i - 1]);
    scope.add(entries[i]);
    if (entries[i].type === 'aggregate') aggr = entries[i];
  }

  return new DataScope(scope, input, output, values, aggr);
};

var prototype = DataScope.prototype;

prototype.countsRef = function (scope, field, sort) {
  var ds = this,
      cache = ds.counts || (ds.counts = {}),
      k = fieldKey(field),
      v,
      a,
      p;

  if (k != null) {
    scope = ds.scope;
    v = cache[k];
  }

  if (!v) {
    p = {
      groupby: scope.fieldRef(field, 'key'),
      pulse: (0, _util.ref)(ds.output)
    };
    if (sort && sort.field) addSortField(scope, p, sort);
    a = scope.add((0, _transforms.Aggregate)(p));
    v = scope.add((0, _transforms.Collect)({
      pulse: (0, _util.ref)(a)
    }));
    v = {
      agg: a,
      ref: (0, _util.ref)(v)
    };
    if (k != null) cache[k] = v;
  } else if (sort && sort.field) {
    addSortField(scope, v.agg.params, sort);
  }

  return v.ref;
};

function fieldKey(field) {
  return (0, _vegaUtil.isString)(field) ? field : null;
}

function addSortField(scope, p, sort) {
  var as = (0, _util.aggrField)(sort.op, sort.field),
      s;

  if (p.ops) {
    for (var i = 0, n = p.as.length; i < n; ++i) {
      if (p.as[i] === as) return;
    }
  } else {
    p.ops = ['count'];
    p.fields = [null];
    p.as = ['count'];
  }

  if (sort.op) {
    p.ops.push((s = sort.op.signal) ? scope.signalRef(s) : sort.op);
    p.fields.push(scope.fieldRef(sort.field));
    p.as.push(as);
  }
}

function cache(scope, ds, name, optype, field, counts, index) {
  var cache = ds[name] || (ds[name] = {}),
      sort = (0, _util.sortKey)(counts),
      k = fieldKey(field),
      v,
      op;

  if (k != null) {
    scope = ds.scope;
    k = k + (sort ? '|' + sort : '');
    v = cache[k];
  }

  if (!v) {
    var params = counts ? {
      field: _util.keyFieldRef,
      pulse: ds.countsRef(scope, field, counts)
    } : {
      field: scope.fieldRef(field),
      pulse: (0, _util.ref)(ds.output)
    };
    if (sort) params.sort = scope.sortRef(counts);
    op = scope.add((0, _util.entry)(optype, undefined, params));
    if (index) ds.index[field] = op;
    v = (0, _util.ref)(op);
    if (k != null) cache[k] = v;
  }

  return v;
}

prototype.tuplesRef = function () {
  return (0, _util.ref)(this.values);
};

prototype.extentRef = function (scope, field) {
  return cache(scope, this, 'extent', 'extent', field, false);
};

prototype.domainRef = function (scope, field) {
  return cache(scope, this, 'domain', 'values', field, false);
};

prototype.valuesRef = function (scope, field, sort) {
  return cache(scope, this, 'vals', 'values', field, sort || true);
};

prototype.lookupRef = function (scope, field) {
  return cache(scope, this, 'lookup', 'tupleindex', field, false);
};

prototype.indataRef = function (scope, field) {
  return cache(scope, this, 'indata', 'tupleindex', field, true, true);
};
},{"./util":"node_modules/vega-parser/src/util.js","./transforms":"node_modules/vega-parser/src/transforms.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/marks/facet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _data = require("./data");

var _spec = _interopRequireDefault(require("../spec"));

var _DataScope = _interopRequireDefault(require("../../DataScope"));

var _util = require("../../util");

var _transforms = require("../../transforms");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, scope, group) {
  var facet = spec.from.facet,
      name = facet.name,
      data = (0, _data.getDataRef)(facet, scope),
      subscope,
      source,
      values,
      op;

  if (!facet.name) {
    (0, _vegaUtil.error)('Facet must have a name: ' + (0, _vegaUtil.stringValue)(facet));
  }

  if (!facet.data) {
    (0, _vegaUtil.error)('Facet must reference a data set: ' + (0, _vegaUtil.stringValue)(facet));
  }

  if (facet.field) {
    op = scope.add((0, _transforms.PreFacet)({
      field: scope.fieldRef(facet.field),
      pulse: data
    }));
  } else if (facet.groupby) {
    op = scope.add((0, _transforms.Facet)({
      key: scope.keyRef(facet.groupby),
      group: (0, _util.ref)(scope.proxy(group.parent)),
      pulse: data
    }));
  } else {
    (0, _vegaUtil.error)('Facet must specify groupby or field: ' + (0, _vegaUtil.stringValue)(facet));
  } // initialize facet subscope


  subscope = scope.fork();
  source = subscope.add((0, _transforms.Collect)());
  values = subscope.add((0, _transforms.Sieve)({
    pulse: (0, _util.ref)(source)
  }));
  subscope.addData(name, new _DataScope.default(subscope, source, source, values));
  subscope.addSignal('parent', null); // parse faceted subflow

  op.params.subflow = {
    $subflow: (0, _spec.default)(spec, subscope).toRuntime()
  };
}
},{"./data":"node_modules/vega-parser/src/parsers/marks/data.js","../spec":"node_modules/vega-parser/src/parsers/spec.js","../../DataScope":"node_modules/vega-parser/src/DataScope.js","../../util":"node_modules/vega-parser/src/util.js","../../transforms":"node_modules/vega-parser/src/transforms.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/marks/subflow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _spec = _interopRequireDefault(require("../spec"));

var _transforms = require("../../transforms");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, scope, input) {
  var op = scope.add((0, _transforms.PreFacet)({
    pulse: input.pulse
  })),
      subscope = scope.fork();
  subscope.add((0, _transforms.Sieve)());
  subscope.addSignal('parent', null); // parse group mark subflow

  op.params.subflow = {
    $subflow: (0, _spec.default)(spec, subscope).toRuntime()
  };
}
},{"../spec":"node_modules/vega-parser/src/parsers/spec.js","../../transforms":"node_modules/vega-parser/src/transforms.js"}],"node_modules/vega-parser/src/parsers/trigger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _expression = _interopRequireDefault(require("./expression"));

var _util = require("../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, scope, name) {
  var remove = spec.remove,
      insert = spec.insert,
      toggle = spec.toggle,
      modify = spec.modify,
      values = spec.values,
      op = scope.add((0, _util.operator)()),
      update,
      expr;
  update = 'if(' + spec.trigger + ',modify("' + name + '",' + [insert, remove, toggle, modify, values].map(function (_) {
    return _ == null ? 'null' : _;
  }).join(',') + '),0)';
  expr = (0, _expression.default)(update, scope);
  op.update = expr.$expr;
  op.params = expr.$params;
}
},{"./expression":"node_modules/vega-parser/src/parsers/expression.js","../util":"node_modules/vega-parser/src/util.js"}],"node_modules/vega-parser/src/parsers/mark.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _clip = _interopRequireDefault(require("./marks/clip"));

var _definition = _interopRequireDefault(require("./marks/definition"));

var _interactive = _interopRequireDefault(require("./marks/interactive"));

var _data = _interopRequireDefault(require("./marks/data"));

var _facet = _interopRequireDefault(require("./marks/facet"));

var _subflow = _interopRequireDefault(require("./marks/subflow"));

var _role = _interopRequireDefault(require("./marks/role"));

var _marktypes = require("./marks/marktypes");

var _roles = require("./marks/roles");

var _encodeUtil = require("./encode/encode-util");

var _transform = _interopRequireDefault(require("./transform"));

var _trigger = _interopRequireDefault(require("./trigger"));

var _spec = _interopRequireDefault(require("./spec"));

var _DataScope = _interopRequireDefault(require("../DataScope"));

var _util = require("../util");

var _vegaUtil = require("vega-util");

var _transforms = require("../transforms");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, scope) {
  var role = (0, _role.default)(spec),
      group = spec.type === _marktypes.GroupMark,
      facet = spec.from && spec.from.facet,
      layout = spec.layout || role === _roles.ScopeRole || role === _roles.FrameRole,
      nested = role === _roles.MarkRole || layout || facet,
      overlap = spec.overlap,
      ops,
      op,
      input,
      store,
      enc,
      bound,
      render,
      sieve,
      name,
      joinRef,
      markRef,
      encodeRef,
      layoutRef,
      boundRef; // resolve input data

  input = (0, _data.default)(spec.from, group, scope); // data join to map tuples to visual items

  op = scope.add((0, _transforms.DataJoin)({
    key: input.key || (spec.key ? (0, _util.fieldRef)(spec.key) : undefined),
    pulse: input.pulse,
    clean: !group
  }));
  joinRef = (0, _util.ref)(op); // collect visual items

  op = store = scope.add((0, _transforms.Collect)({
    pulse: joinRef
  })); // connect visual items to scenegraph

  op = scope.add((0, _transforms.Mark)({
    markdef: (0, _definition.default)(spec),
    interactive: (0, _interactive.default)(spec.interactive, scope),
    clip: (0, _clip.default)(spec.clip, scope),
    context: {
      $context: true
    },
    groups: scope.lookup(),
    parent: scope.signals.parent ? scope.signalRef('parent') : null,
    index: scope.markpath(),
    pulse: (0, _util.ref)(op)
  }));
  markRef = (0, _util.ref)(op); // add visual encoders

  op = enc = scope.add((0, _transforms.Encode)((0, _encodeUtil.encoders)(spec.encode, spec.type, role, spec.style, scope, {
    mod: false,
    pulse: markRef
  }))); // monitor parent marks to propagate changes

  op.params.parent = scope.encode(); // add post-encoding transforms, if defined

  if (spec.transform) {
    spec.transform.forEach(function (_) {
      const tx = (0, _transform.default)(_, scope),
            md = tx.metadata;

      if (md.generates || md.changes) {
        (0, _vegaUtil.error)('Mark transforms should not generate new data.');
      }

      if (!md.nomod) enc.params.mod = true; // update encode mod handling

      tx.params.pulse = (0, _util.ref)(op);
      scope.add(op = tx);
    });
  } // if item sort specified, perform post-encoding


  if (spec.sort) {
    op = scope.add((0, _transforms.SortItems)({
      sort: scope.compareRef(spec.sort),
      pulse: (0, _util.ref)(op)
    }));
  }

  encodeRef = (0, _util.ref)(op); // add view layout operator if needed

  if (facet || layout) {
    layout = scope.add((0, _transforms.ViewLayout)({
      layout: scope.objectProperty(spec.layout),
      legends: scope.legends,
      mark: markRef,
      pulse: encodeRef
    }));
    layoutRef = (0, _util.ref)(layout);
  } // compute bounding boxes


  bound = scope.add((0, _transforms.Bound)({
    mark: markRef,
    pulse: layoutRef || encodeRef
  }));
  boundRef = (0, _util.ref)(bound); // if group mark, recurse to parse nested content

  if (group) {
    // juggle layout & bounds to ensure they run *after* any faceting transforms
    if (nested) {
      ops = scope.operators;
      ops.pop();
      if (layout) ops.pop();
    }

    scope.pushState(encodeRef, layoutRef || boundRef, joinRef);
    facet ? (0, _facet.default)(spec, scope, input) // explicit facet
    : nested ? (0, _subflow.default)(spec, scope, input) // standard mark group
    : (0, _spec.default)(spec, scope); // guide group, we can avoid nested scopes

    scope.popState();

    if (nested) {
      if (layout) ops.push(layout);
      ops.push(bound);
    }
  } // if requested, add overlap removal transform


  if (overlap) {
    boundRef = parseOverlap(overlap, boundRef, scope);
  } // render / sieve items


  render = scope.add((0, _transforms.Render)({
    pulse: boundRef
  }));
  sieve = scope.add((0, _transforms.Sieve)({
    pulse: (0, _util.ref)(render)
  }, undefined, scope.parent())); // if mark is named, make accessible as reactive geometry
  // add trigger updates if defined

  if (spec.name != null) {
    name = spec.name;
    scope.addData(name, new _DataScope.default(scope, store, render, sieve));
    if (spec.on) spec.on.forEach(function (on) {
      if (on.insert || on.remove || on.toggle) {
        (0, _vegaUtil.error)('Marks only support modify triggers.');
      }

      (0, _trigger.default)(on, scope, name);
    });
  }
}

function parseOverlap(overlap, source, scope) {
  var method = overlap.method,
      bound = overlap.bound,
      sep = overlap.separation,
      tol;
  var params = {
    separation: (0, _util.isSignal)(sep) ? scope.signalRef(sep.signal) : sep,
    method: (0, _util.isSignal)(method) ? scope.signalRef(method.signal) : method,
    pulse: source
  };

  if (overlap.order) {
    params.sort = scope.compareRef({
      field: overlap.order
    });
  }

  if (bound) {
    tol = bound.tolerance;
    params.boundTolerance = (0, _util.isSignal)(tol) ? scope.signalRef(tol.signal) : +tol;
    params.boundScale = scope.scaleRef(bound.scale);
    params.boundOrient = bound.orient;
  }

  return (0, _util.ref)(scope.add((0, _transforms.Overlap)(params)));
}
},{"./marks/clip":"node_modules/vega-parser/src/parsers/marks/clip.js","./marks/definition":"node_modules/vega-parser/src/parsers/marks/definition.js","./marks/interactive":"node_modules/vega-parser/src/parsers/marks/interactive.js","./marks/data":"node_modules/vega-parser/src/parsers/marks/data.js","./marks/facet":"node_modules/vega-parser/src/parsers/marks/facet.js","./marks/subflow":"node_modules/vega-parser/src/parsers/marks/subflow.js","./marks/role":"node_modules/vega-parser/src/parsers/marks/role.js","./marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","./marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","./encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js","./transform":"node_modules/vega-parser/src/parsers/transform.js","./trigger":"node_modules/vega-parser/src/parsers/trigger.js","./spec":"node_modules/vega-parser/src/parsers/spec.js","../DataScope":"node_modules/vega-parser/src/DataScope.js","../util":"node_modules/vega-parser/src/util.js","vega-util":"node_modules/vega-util/index.js","../transforms":"node_modules/vega-parser/src/transforms.js"}],"node_modules/vega-parser/src/parsers/legend.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./guides/constants");

var _legendGradient = _interopRequireDefault(require("./guides/legend-gradient"));

var _legendGradientDiscrete = _interopRequireDefault(require("./guides/legend-gradient-discrete"));

var _legendGradientLabels = _interopRequireDefault(require("./guides/legend-gradient-labels"));

var _legendSymbolGroups = _interopRequireWildcard(require("./guides/legend-symbol-groups"));

var _legendTitle = _interopRequireDefault(require("./guides/legend-title"));

var _guideGroup = _interopRequireDefault(require("./guides/guide-group"));

var _guideUtil = require("./guides/guide-util");

var _expression = _interopRequireDefault(require("./expression"));

var _mark = _interopRequireDefault(require("./mark"));

var _roles = require("./marks/roles");

var _encodeUtil = require("./encode/encode-util");

var _util = require("../util");

var _transforms = require("../transforms");

var _vegaScale = require("vega-scale");

var _vegaUtil = require("vega-util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, scope) {
  var config = scope.config.legend,
      encode = spec.encode || {},
      legendEncode = encode.legend || {},
      name = legendEncode.name || undefined,
      interactive = legendEncode.interactive,
      style = legendEncode.style,
      _ = (0, _guideUtil.lookup)(spec, config),
      entryEncode,
      entryLayout,
      params,
      children,
      type,
      datum,
      dataRef,
      entryRef,
      group; // resolve 'canonical' scale name


  var scale = _constants.LegendScales.reduce(function (a, b) {
    return a || spec[b];
  }, 0);

  if (!scale) (0, _vegaUtil.error)('Missing valid scale for legend.'); // resolve legend type (symbol, gradient, or discrete gradient)

  type = legendType(spec, scope.scaleType(scale)); // single-element data source for legend group

  datum = {
    title: spec.title != null,
    type: type,
    vgrad: type !== 'symbol' && _.isVertical()
  };
  dataRef = (0, _util.ref)(scope.add((0, _transforms.Collect)(null, [datum]))); // encoding properties for legend group

  legendEncode = (0, _encodeUtil.extendEncode)(buildLegendEncode(_, config), legendEncode, _constants.Skip); // encoding properties for legend entry sub-group

  entryEncode = {
    enter: {
      x: {
        value: 0
      },
      y: {
        value: 0
      }
    }
  }; // data source for legend values

  entryRef = (0, _util.ref)(scope.add((0, _transforms.LegendEntries)(params = {
    type: type,
    scale: scope.scaleRef(scale),
    count: scope.objectProperty(spec.tickCount),
    values: scope.objectProperty(spec.values),
    minstep: scope.property(spec.tickMinStep),
    formatType: scope.property(spec.formatType),
    formatSpecifier: scope.property(spec.format)
  }))); // continuous gradient legend

  if (type === _constants.Gradient) {
    children = [(0, _legendGradient.default)(spec, scale, config, encode.gradient), (0, _legendGradientLabels.default)(spec, config, encode.labels, entryRef)]; // adjust default tick count based on the gradient length

    params.count = params.count || scope.signalRef(`max(2,2*floor((${(0, _util.deref)(_.gradientLength())})/100))`);
  } // discrete gradient legend
  else if (type === _constants.Discrete) {
      children = [(0, _legendGradientDiscrete.default)(spec, scale, config, encode.gradient, entryRef), (0, _legendGradientLabels.default)(spec, config, encode.labels, entryRef)];
    } // symbol legend
    else {
        // determine legend symbol group layout
        entryLayout = (0, _legendSymbolGroups.legendSymbolLayout)(spec, config);
        children = [(0, _legendSymbolGroups.default)(spec, config, encode, entryRef, (0, _util.deref)(entryLayout.columns))]; // pass symbol size information to legend entry generator

        params.size = sizeExpression(spec, scope, children[0].marks);
      } // generate legend marks


  children = [(0, _guideGroup.default)(_roles.LegendEntryRole, null, null, dataRef, interactive, entryEncode, children, entryLayout)]; // include legend title if defined

  if (datum.title) {
    children.push((0, _legendTitle.default)(spec, config, encode.title, dataRef));
  } // build legend specification


  group = (0, _guideGroup.default)(_roles.LegendRole, style, name, dataRef, interactive, legendEncode, children);
  if (spec.zindex) group.zindex = spec.zindex; // parse legend specification

  return (0, _mark.default)(group, scope);
}

function legendType(spec, scaleType) {
  var type = spec.type || _constants.Symbols;

  if (!spec.type && scaleCount(spec) === 1 && (spec.fill || spec.stroke)) {
    type = (0, _vegaScale.isContinuous)(scaleType) ? _constants.Gradient : (0, _vegaScale.isDiscretizing)(scaleType) ? _constants.Discrete : _constants.Symbols;
  }

  return type !== _constants.Gradient ? type : (0, _vegaScale.isDiscretizing)(scaleType) ? _constants.Discrete : _constants.Gradient;
}

function scaleCount(spec) {
  return _constants.LegendScales.reduce(function (count, type) {
    return count + (spec[type] ? 1 : 0);
  }, 0);
}

function buildLegendEncode(_, config) {
  var encode = {
    enter: {},
    update: {}
  };
  (0, _encodeUtil.addEncoders)(encode, {
    orient: _('orient'),
    offset: _('offset'),
    padding: _('padding'),
    titlePadding: _('titlePadding'),
    cornerRadius: _('cornerRadius'),
    fill: _('fillColor'),
    stroke: _('strokeColor'),
    strokeWidth: config.strokeWidth,
    strokeDash: config.strokeDash,
    x: _('legendX'),
    y: _('legendY')
  });
  return encode;
}

function sizeExpression(spec, scope, marks) {
  var size = (0, _util.deref)(getChannel('size', spec, marks)),
      strokeWidth = (0, _util.deref)(getChannel('strokeWidth', spec, marks)),
      fontSize = (0, _util.deref)(getFontSize(marks[1].encode, scope, _constants.GuideLabelStyle));
  return (0, _expression.default)(`max(ceil(sqrt(${size})+${strokeWidth}),${fontSize})`, scope);
}

function getChannel(name, spec, marks) {
  return spec[name] ? `scale("${spec[name]}",datum)` : (0, _guideUtil.getEncoding)(name, marks[0].encode);
}

function getFontSize(encode, scope, style) {
  return (0, _guideUtil.getEncoding)('fontSize', encode) || (0, _guideUtil.getStyle)('fontSize', scope, style);
}
},{"./guides/constants":"node_modules/vega-parser/src/parsers/guides/constants.js","./guides/legend-gradient":"node_modules/vega-parser/src/parsers/guides/legend-gradient.js","./guides/legend-gradient-discrete":"node_modules/vega-parser/src/parsers/guides/legend-gradient-discrete.js","./guides/legend-gradient-labels":"node_modules/vega-parser/src/parsers/guides/legend-gradient-labels.js","./guides/legend-symbol-groups":"node_modules/vega-parser/src/parsers/guides/legend-symbol-groups.js","./guides/legend-title":"node_modules/vega-parser/src/parsers/guides/legend-title.js","./guides/guide-group":"node_modules/vega-parser/src/parsers/guides/guide-group.js","./guides/guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","./expression":"node_modules/vega-parser/src/parsers/expression.js","./mark":"node_modules/vega-parser/src/parsers/mark.js","./marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","./encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js","../util":"node_modules/vega-parser/src/util.js","../transforms":"node_modules/vega-parser/src/transforms.js","vega-scale":"node_modules/vega-scale/index.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/title.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./guides/constants");

var _guideMark = _interopRequireDefault(require("./guides/guide-mark"));

var _guideUtil = require("./guides/guide-util");

var _mark = _interopRequireDefault(require("./mark"));

var _marktypes = require("./marks/marktypes");

var _roles = require("./marks/roles");

var _encodeUtil = require("./encode/encode-util");

var _util = require("../util");

var _transforms = require("../transforms");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const angleExpr = `item.orient==="${_constants.Left}"?-90:item.orient==="${_constants.Right}"?90:0`,
      baselineExpr = `item.orient==="${_constants.Bottom}"?"${_constants.Top}":"${_constants.Bottom}"`;

function _default(spec, scope) {
  spec = (0, _vegaUtil.isString)(spec) ? {
    text: spec
  } : spec;
  var config = scope.config.title,
      encode = (0, _vegaUtil.extend)({}, spec.encode),
      dataRef,
      title; // single-element data source for group title

  dataRef = (0, _util.ref)(scope.add((0, _transforms.Collect)(null, [{}]))); // build title specification

  encode.name = spec.name;
  encode.interactive = spec.interactive;
  title = buildTitle(spec, config, encode, dataRef);
  if (spec.zindex) title.zindex = spec.zindex; // parse title specification

  return (0, _mark.default)(title, scope);
}

function buildTitle(spec, config, userEncode, dataRef) {
  var _ = (0, _guideUtil.lookup)(spec, config),
      zero = {
    value: 0
  },
      title = spec.text,
      encode;

  encode = {
    enter: {
      opacity: zero
    },
    update: {
      opacity: {
        value: 1
      }
    },
    exit: {
      opacity: zero
    }
  };
  (0, _encodeUtil.addEncoders)(encode, {
    text: title,
    orient: _('orient'),
    anchor: _('anchor'),
    align: {
      signal: _guideUtil.alignExpr
    },
    angle: {
      signal: angleExpr
    },
    baseline: {
      signal: baselineExpr
    },
    dx: _('dx'),
    dy: _('dy'),
    fill: _('color'),
    font: _('font'),
    fontSize: _('fontSize'),
    fontStyle: _('fontStyle'),
    fontWeight: _('fontWeight'),
    frame: _('frame'),
    limit: _('limit'),
    offset: _('offset') || 0
  }, {
    // update
    align: _('align'),
    angle: _('angle'),
    baseline: _('baseline')
  });
  return (0, _guideMark.default)(_marktypes.TextMark, _roles.TitleRole, spec.style || _constants.GroupTitleStyle, null, dataRef, encode, userEncode);
}
},{"./guides/constants":"node_modules/vega-parser/src/parsers/guides/constants.js","./guides/guide-mark":"node_modules/vega-parser/src/parsers/guides/guide-mark.js","./guides/guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","./mark":"node_modules/vega-parser/src/parsers/mark.js","./marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","./marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","./encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js","../util":"node_modules/vega-parser/src/util.js","../transforms":"node_modules/vega-parser/src/transforms.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseData;

var _transform = _interopRequireDefault(require("./transform"));

var _trigger = _interopRequireDefault(require("./trigger"));

var _util = require("../util");

var _transforms = require("../transforms");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseData(data, scope) {
  var transforms = [];

  if (data.transform) {
    data.transform.forEach(function (tx) {
      transforms.push((0, _transform.default)(tx, scope));
    });
  }

  if (data.on) {
    data.on.forEach(function (on) {
      (0, _trigger.default)(on, scope, data.name);
    });
  }

  scope.addDataPipeline(data.name, analyze(data, scope, transforms));
}
/**
 * Analyze a data pipeline, add needed operators.
 */


function analyze(data, scope, ops) {
  var output = [],
      source = null,
      modify = false,
      generate = false,
      upstream,
      i,
      n,
      t,
      m;

  if (data.values) {
    // hard-wired input data set
    if ((0, _util.hasSignal)(data.values) || (0, _util.hasSignal)(data.format)) {
      // if either values or format has signal, use dynamic loader
      output.push(load(scope, data));
      output.push(source = collect());
    } else {
      // otherwise, ingest upon dataflow init
      output.push(source = collect({
        $ingest: data.values,
        $format: data.format
      }));
    }
  } else if (data.url) {
    // load data from external source
    if ((0, _util.hasSignal)(data.url) || (0, _util.hasSignal)(data.format)) {
      // if either url or format has signal, use dynamic loader
      output.push(load(scope, data));
      output.push(source = collect());
    } else {
      // otherwise, request load upon dataflow init
      output.push(source = collect({
        $request: data.url,
        $format: data.format
      }));
    }
  } else if (data.source) {
    // derives from one or more other data sets
    source = upstream = (0, _vegaUtil.array)(data.source).map(function (d) {
      return (0, _util.ref)(scope.getData(d).output);
    });
    output.push(null); // populate later
  } // scan data transforms, add collectors as needed


  for (i = 0, n = ops.length; i < n; ++i) {
    t = ops[i];
    m = t.metadata;

    if (!source && !m.source) {
      output.push(source = collect());
    }

    output.push(t);
    if (m.generates) generate = true;
    if (m.modifies && !generate) modify = true;
    if (m.source) source = t;else if (m.changes) source = null;
  }

  if (upstream) {
    n = upstream.length - 1;
    output[0] = (0, _transforms.Relay)({
      derive: modify,
      pulse: n ? upstream : upstream[0]
    });

    if (modify || n) {
      // collect derived and multi-pulse tuples
      output.splice(1, 0, collect());
    }
  }

  if (!source) output.push(collect());
  output.push((0, _transforms.Sieve)({}));
  return output;
}

function collect(values) {
  var s = (0, _transforms.Collect)({}, values);
  s.metadata = {
    source: true
  };
  return s;
}

function load(scope, data) {
  return (0, _transforms.Load)({
    url: data.url ? scope.property(data.url) : undefined,
    values: data.values ? scope.property(data.values) : undefined,
    format: scope.objectProperty(data.format)
  });
}
},{"./transform":"node_modules/vega-parser/src/parsers/transform.js","./trigger":"node_modules/vega-parser/src/parsers/trigger.js","../util":"node_modules/vega-parser/src/util.js","../transforms":"node_modules/vega-parser/src/transforms.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/guides/axis-config.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./constants");

var _vegaUtil = require("vega-util");

function _default(spec, scope) {
  var config = scope.config,
      orient = spec.orient,
      xy = orient === _constants.Top || orient === _constants.Bottom ? config.axisX : config.axisY,
      or = config['axis' + orient[0].toUpperCase() + orient.slice(1)],
      band = scope.scaleType(spec.scale) === 'band' && config.axisBand;
  return xy || or || band ? (0, _vegaUtil.extend)({}, config.axis, xy, or, band) : config.axis;
}
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/guides/axis-domain.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./constants");

var _guideMark = _interopRequireDefault(require("./guide-mark"));

var _guideUtil = require("./guide-util");

var _marktypes = require("../marks/marktypes");

var _roles = require("../marks/roles");

var _encodeUtil = require("../encode/encode-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, config, userEncode, dataRef) {
  var _ = (0, _guideUtil.lookup)(spec, config),
      orient = spec.orient,
      encode,
      enter,
      update,
      u,
      u2,
      v;

  encode = {
    enter: enter = {
      opacity: _constants.zero
    },
    update: update = {
      opacity: _constants.one
    },
    exit: {
      opacity: _constants.zero
    }
  };
  (0, _encodeUtil.addEncoders)(encode, {
    stroke: _('domainColor'),
    strokeDash: _('domainDash'),
    strokeDashOffset: _('domainDashOffset'),
    strokeWidth: _('domainWidth'),
    strokeOpacity: _('domainOpacity')
  });

  if (orient === _constants.Top || orient === _constants.Bottom) {
    u = 'x';
    v = 'y';
  } else {
    u = 'y';
    v = 'x';
  }

  u2 = u + '2';
  enter[v] = _constants.zero;
  update[u] = enter[u] = position(spec, 0);
  update[u2] = enter[u2] = position(spec, 1);
  return (0, _guideMark.default)(_marktypes.RuleMark, _roles.AxisDomainRole, null, null, dataRef, encode, userEncode);
}

function position(spec, pos) {
  return {
    scale: spec.scale,
    range: pos
  };
}
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","./guide-mark":"node_modules/vega-parser/src/parsers/guides/guide-mark.js","./guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","../marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","../marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","../encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js"}],"node_modules/vega-parser/src/parsers/guides/axis-grid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./constants");

var _guideMark = _interopRequireDefault(require("./guide-mark"));

var _guideUtil = require("./guide-util");

var _marktypes = require("../marks/marktypes");

var _roles = require("../marks/roles");

var _encodeUtil = require("../encode/encode-util");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, config, userEncode, dataRef) {
  var _ = (0, _guideUtil.lookup)(spec, config),
      orient = spec.orient,
      vscale = spec.gridScale,
      sign = orient === _constants.Left || orient === _constants.Top ? 1 : -1,
      offset = offsetValue(spec.offset, sign),
      encode,
      enter,
      exit,
      update,
      tickPos,
      u,
      v,
      v2,
      s;

  encode = {
    enter: enter = {
      opacity: _constants.zero
    },
    update: update = {
      opacity: _constants.one
    },
    exit: exit = {
      opacity: _constants.zero
    }
  };
  (0, _encodeUtil.addEncoders)(encode, {
    stroke: _('gridColor'),
    strokeDash: _('gridDash'),
    strokeDashOffset: _('gridDashOffset'),
    strokeOpacity: _('gridOpacity'),
    strokeWidth: _('gridWidth')
  });
  tickPos = {
    scale: spec.scale,
    field: _constants.Value,
    band: _('bandPosition'),
    round: _('tickRound'),
    extra: _('tickExtra'),
    offset: _('tickOffset')
  };

  if (orient === _constants.Top || orient === _constants.Bottom) {
    u = 'x';
    v = 'y';
    s = 'height';
  } else {
    u = 'y';
    v = 'x';
    s = 'width';
  }

  v2 = v + '2';
  update[u] = enter[u] = exit[u] = tickPos;

  if (vscale) {
    update[v] = enter[v] = {
      scale: vscale,
      range: 0,
      mult: sign,
      offset: offset
    };
    update[v2] = enter[v2] = {
      scale: vscale,
      range: 1,
      mult: sign,
      offset: offset
    };
  } else {
    update[v] = enter[v] = {
      value: 0,
      offset: offset
    };
    update[v2] = enter[v2] = {
      signal: s,
      mult: sign,
      offset: offset
    };
  }

  return (0, _guideMark.default)(_marktypes.RuleMark, _roles.AxisGridRole, null, _constants.Value, dataRef, encode, userEncode);
}

function offsetValue(offset, sign) {
  if (sign === 1) {// do nothing!
  } else if (!(0, _vegaUtil.isObject)(offset)) {
    offset = sign * (offset || 0);
  } else {
    var entry = offset = (0, _vegaUtil.extend)({}, offset);

    while (entry.mult != null) {
      if (!(0, _vegaUtil.isObject)(entry.mult)) {
        entry.mult *= sign;
        return offset;
      } else {
        entry = entry.mult = (0, _vegaUtil.extend)({}, entry.mult);
      }
    }

    entry.mult = sign;
  }

  return offset;
}
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","./guide-mark":"node_modules/vega-parser/src/parsers/guides/guide-mark.js","./guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","../marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","../marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","../encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/guides/axis-ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./constants");

var _guideMark = _interopRequireDefault(require("./guide-mark"));

var _guideUtil = require("./guide-util");

var _marktypes = require("../marks/marktypes");

var _roles = require("../marks/roles");

var _encodeUtil = require("../encode/encode-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, config, userEncode, dataRef, size) {
  var _ = (0, _guideUtil.lookup)(spec, config),
      orient = spec.orient,
      sign = orient === _constants.Left || orient === _constants.Top ? -1 : 1,
      encode,
      enter,
      exit,
      update,
      tickSize,
      tickPos;

  encode = {
    enter: enter = {
      opacity: _constants.zero
    },
    update: update = {
      opacity: _constants.one
    },
    exit: exit = {
      opacity: _constants.zero
    }
  };
  (0, _encodeUtil.addEncoders)(encode, {
    stroke: _('tickColor'),
    strokeDash: _('tickDash'),
    strokeDashOffset: _('tickDashOffset'),
    strokeOpacity: _('tickOpacity'),
    strokeWidth: _('tickWidth')
  });
  tickSize = (0, _encodeUtil.encoder)(size);
  tickSize.mult = sign;
  tickPos = {
    scale: spec.scale,
    field: _constants.Value,
    band: _('bandPosition'),
    round: _('tickRound'),
    extra: _('tickExtra'),
    offset: _('tickOffset')
  };

  if (orient === _constants.Top || orient === _constants.Bottom) {
    update.y = enter.y = _constants.zero;
    update.y2 = enter.y2 = tickSize;
    update.x = enter.x = exit.x = tickPos;
  } else {
    update.x = enter.x = _constants.zero;
    update.x2 = enter.x2 = tickSize;
    update.y = enter.y = exit.y = tickPos;
  }

  return (0, _guideMark.default)(_marktypes.RuleMark, _roles.AxisTickRole, null, _constants.Value, dataRef, encode, userEncode);
}
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","./guide-mark":"node_modules/vega-parser/src/parsers/guides/guide-mark.js","./guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","../marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","../marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","../encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js"}],"node_modules/vega-parser/src/parsers/guides/axis-labels.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./constants");

var _guideMark = _interopRequireDefault(require("./guide-mark"));

var _guideUtil = require("./guide-util");

var _marktypes = require("../marks/marktypes");

var _roles = require("../marks/roles");

var _encodeUtil = require("../encode/encode-util");

var _util = require("../../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function flushExpr(scale, threshold, a, b, c) {
  return {
    signal: 'flush(range("' + scale + '"), ' + 'scale("' + scale + '", datum.value), ' + threshold + ',' + a + ',' + b + ',' + c + ')'
  };
}

function _default(spec, config, userEncode, dataRef, size) {
  var _ = (0, _guideUtil.lookup)(spec, config),
      orient = spec.orient,
      sign = orient === _constants.Left || orient === _constants.Top ? -1 : 1,
      isXAxis = orient === _constants.Top || orient === _constants.Bottom,
      scale = spec.scale,
      flush = (0, _util.deref)(_('labelFlush')),
      flushOffset = (0, _util.deref)(_('labelFlushOffset')),
      flushOn = flush === 0 || !!flush,
      labelAlign = _('labelAlign'),
      labelBaseline = _('labelBaseline'),
      encode,
      enter,
      tickSize,
      tickPos,
      align,
      baseline,
      offset,
      bound,
      overlap,
      separation;

  tickSize = (0, _encodeUtil.encoder)(size);
  tickSize.mult = sign;
  tickSize.offset = (0, _encodeUtil.encoder)(_('labelPadding') || 0);
  tickSize.offset.mult = sign;
  tickPos = {
    scale: scale,
    field: _constants.Value,
    band: 0.5,
    offset: _('tickOffset')
  };

  if (isXAxis) {
    align = labelAlign || (flushOn ? flushExpr(scale, flush, '"left"', '"right"', '"center"') : 'center');
    baseline = labelBaseline || (orient === _constants.Top ? 'bottom' : 'top');
    offset = !labelAlign;
  } else {
    align = labelAlign || (orient === _constants.Right ? 'left' : 'right');
    baseline = labelBaseline || (flushOn ? flushExpr(scale, flush, '"top"', '"bottom"', '"middle"') : 'middle');
    offset = !labelBaseline;
  }

  offset = offset && flushOn && flushOffset ? flushExpr(scale, flush, '-(' + flushOffset + ')', flushOffset, 0) : null;
  encode = {
    enter: enter = {
      opacity: _constants.zero,
      x: isXAxis ? tickPos : tickSize,
      y: isXAxis ? tickSize : tickPos
    },
    update: {
      opacity: _constants.one,
      text: {
        field: _constants.Label
      },
      x: enter.x,
      y: enter.y
    },
    exit: {
      opacity: _constants.zero,
      x: enter.x,
      y: enter.y
    }
  };
  (0, _encodeUtil.addEncoders)(encode, {
    [isXAxis ? 'dx' : 'dy']: offset,
    align: align,
    baseline: baseline,
    angle: _('labelAngle'),
    fill: _('labelColor'),
    fillOpacity: _('labelOpacity'),
    font: _('labelFont'),
    fontSize: _('labelFontSize'),
    fontWeight: _('labelFontWeight'),
    fontStyle: _('labelFontStyle'),
    limit: _('labelLimit')
  });
  bound = _('labelBound');
  overlap = _('labelOverlap');
  separation = _('labelSeparation');
  spec = (0, _guideMark.default)(_marktypes.TextMark, _roles.AxisLabelRole, _constants.GuideLabelStyle, _constants.Value, dataRef, encode, userEncode); // if overlap method or bound defined, request label overlap removal

  if (overlap || bound) {
    spec.overlap = {
      separation: separation,
      method: overlap,
      order: 'datum.index',
      bound: bound ? {
        scale: scale,
        orient: orient,
        tolerance: bound
      } : null
    };
  }

  return spec;
}
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","./guide-mark":"node_modules/vega-parser/src/parsers/guides/guide-mark.js","./guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","../marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","../marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","../encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js","../../util":"node_modules/vega-parser/src/util.js"}],"node_modules/vega-parser/src/parsers/guides/axis-title.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("./constants");

var _guideMark = _interopRequireDefault(require("./guide-mark"));

var _guideUtil = require("./guide-util");

var _encodeUtil = require("../encode/encode-util");

var _marktypes = require("../marks/marktypes");

var _roles = require("../marks/roles");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, config, userEncode, dataRef) {
  var _ = (0, _guideUtil.lookup)(spec, config),
      orient = spec.orient,
      sign = orient === _constants.Left || orient === _constants.Top ? -1 : 1,
      horizontal = orient === _constants.Top || orient === _constants.Bottom,
      encode,
      enter,
      update,
      titlePos;

  encode = {
    enter: enter = {
      opacity: _constants.zero,
      anchor: (0, _encodeUtil.encoder)(_('titleAnchor')),
      align: {
        signal: _guideUtil.alignExpr
      }
    },
    update: update = (0, _vegaUtil.extend)({}, enter, {
      opacity: _constants.one,
      text: (0, _encodeUtil.encoder)(spec.title)
    }),
    exit: {
      opacity: _constants.zero
    }
  };
  titlePos = {
    signal: `lerp(range("${spec.scale}"), ${(0, _guideUtil.anchorExpr)(0, 1, 0.5)})`
  };

  if (horizontal) {
    update.x = titlePos;
    enter.angle = {
      value: 0
    };
    enter.baseline = {
      value: orient === _constants.Top ? 'bottom' : 'top'
    };
  } else {
    update.y = titlePos;
    enter.angle = {
      value: sign * 90
    };
    enter.baseline = {
      value: 'bottom'
    };
  }

  (0, _encodeUtil.addEncoders)(encode, {
    angle: _('titleAngle'),
    baseline: _('titleBaseline'),
    fill: _('titleColor'),
    fillOpacity: _('titleOpacity'),
    font: _('titleFont'),
    fontSize: _('titleFontSize'),
    fontStyle: _('titleFontStyle'),
    fontWeight: _('titleFontWeight'),
    limit: _('titleLimit')
  }, {
    // require update
    align: _('titleAlign')
  });
  !(0, _encodeUtil.addEncode)(encode, 'x', _('titleX'), 'update') && !horizontal && !(0, _encodeUtil.has)('x', userEncode) && (encode.enter.auto = {
    value: true
  });
  !(0, _encodeUtil.addEncode)(encode, 'y', _('titleY'), 'update') && horizontal && !(0, _encodeUtil.has)('y', userEncode) && (encode.enter.auto = {
    value: true
  });
  return (0, _guideMark.default)(_marktypes.TextMark, _roles.AxisTitleRole, _constants.GuideTitleStyle, null, dataRef, encode, userEncode);
}
},{"./constants":"node_modules/vega-parser/src/parsers/guides/constants.js","./guide-mark":"node_modules/vega-parser/src/parsers/guides/guide-mark.js","./guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","../encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js","../marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","../marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/axis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _axisConfig = _interopRequireDefault(require("./guides/axis-config"));

var _axisDomain = _interopRequireDefault(require("./guides/axis-domain"));

var _axisGrid = _interopRequireDefault(require("./guides/axis-grid"));

var _axisTicks = _interopRequireDefault(require("./guides/axis-ticks"));

var _axisLabels = _interopRequireDefault(require("./guides/axis-labels"));

var _axisTitle = _interopRequireDefault(require("./guides/axis-title"));

var _guideGroup = _interopRequireDefault(require("./guides/guide-group"));

var _guideUtil = require("./guides/guide-util");

var _roles = require("./marks/roles");

var _mark = _interopRequireDefault(require("./mark"));

var _encodeUtil = require("./encode/encode-util");

var _constants = require("./guides/constants");

var _util = require("../util");

var _transforms = require("../transforms");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, scope) {
  var config = (0, _axisConfig.default)(spec, scope),
      encode = spec.encode || {},
      axisEncode = encode.axis || {},
      name = axisEncode.name || undefined,
      interactive = axisEncode.interactive,
      style = axisEncode.style,
      _ = (0, _guideUtil.lookup)(spec, config),
      datum,
      dataRef,
      ticksRef,
      size,
      group,
      children; // single-element data source for axis group


  datum = {
    orient: spec.orient,
    ticks: !!_('ticks'),
    labels: !!_('labels'),
    grid: !!_('grid'),
    domain: !!_('domain'),
    title: spec.title != null
  };
  dataRef = (0, _util.ref)(scope.add((0, _transforms.Collect)({}, [datum]))); // encoding properties for axis group item

  axisEncode = (0, _encodeUtil.extendEncode)({
    update: {
      offset: (0, _encodeUtil.encoder)(_('offset') || 0),
      position: (0, _encodeUtil.encoder)((0, _util.value)(spec.position, 0)),
      titlePadding: (0, _encodeUtil.encoder)(_('titlePadding')),
      minExtent: (0, _encodeUtil.encoder)(_('minExtent')),
      maxExtent: (0, _encodeUtil.encoder)(_('maxExtent')),
      range: {
        signal: `abs(span(range("${spec.scale}")))`
      }
    }
  }, encode.axis, _constants.Skip); // data source for axis ticks

  ticksRef = (0, _util.ref)(scope.add((0, _transforms.AxisTicks)({
    scale: scope.scaleRef(spec.scale),
    extra: scope.property(_('tickExtra')),
    count: scope.objectProperty(spec.tickCount),
    values: scope.objectProperty(spec.values),
    minstep: scope.property(spec.tickMinStep),
    formatType: scope.property(spec.formatType),
    formatSpecifier: scope.property(spec.format)
  }))); // generate axis marks

  children = []; // include axis gridlines if requested

  if (datum.grid) {
    children.push((0, _axisGrid.default)(spec, config, encode.grid, ticksRef));
  } // include axis ticks if requested


  if (datum.ticks) {
    size = _('tickSize');
    children.push((0, _axisTicks.default)(spec, config, encode.ticks, ticksRef, size));
  } // include axis labels if requested


  if (datum.labels) {
    size = datum.ticks ? size : 0;
    children.push((0, _axisLabels.default)(spec, config, encode.labels, ticksRef, size));
  } // include axis domain path if requested


  if (datum.domain) {
    children.push((0, _axisDomain.default)(spec, config, encode.domain, dataRef));
  } // include axis title if defined


  if (datum.title) {
    children.push((0, _axisTitle.default)(spec, config, encode.title, dataRef));
  } // build axis specification


  group = (0, _guideGroup.default)(_roles.AxisRole, style, name, dataRef, interactive, axisEncode, children);
  if (spec.zindex) group.zindex = spec.zindex; // parse axis specification

  return (0, _mark.default)(group, scope);
}
},{"./guides/axis-config":"node_modules/vega-parser/src/parsers/guides/axis-config.js","./guides/axis-domain":"node_modules/vega-parser/src/parsers/guides/axis-domain.js","./guides/axis-grid":"node_modules/vega-parser/src/parsers/guides/axis-grid.js","./guides/axis-ticks":"node_modules/vega-parser/src/parsers/guides/axis-ticks.js","./guides/axis-labels":"node_modules/vega-parser/src/parsers/guides/axis-labels.js","./guides/axis-title":"node_modules/vega-parser/src/parsers/guides/axis-title.js","./guides/guide-group":"node_modules/vega-parser/src/parsers/guides/guide-group.js","./guides/guide-util":"node_modules/vega-parser/src/parsers/guides/guide-util.js","./marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","./mark":"node_modules/vega-parser/src/parsers/mark.js","./encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js","./guides/constants":"node_modules/vega-parser/src/parsers/guides/constants.js","../util":"node_modules/vega-parser/src/util.js","../transforms":"node_modules/vega-parser/src/transforms.js"}],"node_modules/vega-parser/src/parsers/spec.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _signalUpdates = _interopRequireDefault(require("./signal-updates"));

var _scale = require("./scale");

var _projection = _interopRequireDefault(require("./projection"));

var _legend = _interopRequireDefault(require("./legend"));

var _signal = _interopRequireDefault(require("./signal"));

var _title = _interopRequireDefault(require("./title"));

var _data = _interopRequireDefault(require("./data"));

var _mark = _interopRequireDefault(require("./mark"));

var _axis = _interopRequireDefault(require("./axis"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, scope, preprocessed) {
  var signals = (0, _vegaUtil.array)(spec.signals),
      scales = (0, _vegaUtil.array)(spec.scales); // parse signal definitions, if not already preprocessed

  if (!preprocessed) signals.forEach(_ => (0, _signal.default)(_, scope)); // parse cartographic projection definitions

  (0, _vegaUtil.array)(spec.projections).forEach(_ => (0, _projection.default)(_, scope)); // initialize scale references

  scales.forEach(_ => (0, _scale.initScale)(_, scope)); // parse data sources

  (0, _vegaUtil.array)(spec.data).forEach(_ => (0, _data.default)(_, scope)); // parse scale definitions

  scales.forEach(_ => (0, _scale.parseScale)(_, scope)); // parse signal updates

  (preprocessed || signals).forEach(_ => (0, _signalUpdates.default)(_, scope)); // parse axis definitions

  (0, _vegaUtil.array)(spec.axes).forEach(_ => (0, _axis.default)(_, scope)); // parse mark definitions

  (0, _vegaUtil.array)(spec.marks).forEach(_ => (0, _mark.default)(_, scope)); // parse legend definitions

  (0, _vegaUtil.array)(spec.legends).forEach(_ => (0, _legend.default)(_, scope)); // parse title, if defined

  if (spec.title) (0, _title.default)(spec.title, scope); // parse collected lambda (anonymous) expressions

  scope.parseLambdas();
  return scope;
}
},{"./signal-updates":"node_modules/vega-parser/src/parsers/signal-updates.js","./scale":"node_modules/vega-parser/src/parsers/scale.js","./projection":"node_modules/vega-parser/src/parsers/projection.js","./legend":"node_modules/vega-parser/src/parsers/legend.js","./signal":"node_modules/vega-parser/src/parsers/signal.js","./title":"node_modules/vega-parser/src/parsers/title.js","./data":"node_modules/vega-parser/src/parsers/data.js","./mark":"node_modules/vega-parser/src/parsers/mark.js","./axis":"node_modules/vega-parser/src/parsers/axis.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parsers/view.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseView;

var _autosize = _interopRequireDefault(require("./autosize"));

var _padding = _interopRequireDefault(require("./padding"));

var _signal = _interopRequireDefault(require("./signal"));

var _spec = _interopRequireDefault(require("./spec"));

var _encodeUtil = require("./encode/encode-util");

var _marktypes = require("./marks/marktypes");

var _roles = require("./marks/roles");

var _util = require("../util");

var _DataScope = _interopRequireDefault(require("../DataScope"));

var _transforms = require("../transforms");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defined = (0, _vegaUtil.toSet)(['width', 'height', 'padding', 'autosize']);

function parseView(spec, scope) {
  var config = scope.config,
      op,
      input,
      encode,
      parent,
      root,
      signals;
  scope.background = spec.background || config.background;
  scope.eventConfig = config.events;
  root = (0, _util.ref)(scope.root = scope.add((0, _util.operator)()));
  scope.addSignal('width', spec.width || 0);
  scope.addSignal('height', spec.height || 0);
  scope.addSignal('padding', (0, _padding.default)(spec.padding, config));
  scope.addSignal('autosize', (0, _autosize.default)(spec.autosize, config));
  scope.legends = scope.objectProperty(config.legend && config.legend.layout); // parse signal definitions, including config entries

  signals = addSignals(scope, spec.signals, config.signals); // Store root group item

  input = scope.add((0, _transforms.Collect)()); // Encode root group item

  encode = (0, _encodeUtil.extendEncode)({
    enter: {
      x: {
        value: 0
      },
      y: {
        value: 0
      }
    },
    update: {
      width: {
        signal: 'width'
      },
      height: {
        signal: 'height'
      }
    }
  }, spec.encode);
  encode = scope.add((0, _transforms.Encode)((0, _encodeUtil.encoders)(encode, _marktypes.GroupMark, _roles.FrameRole, spec.style, scope, {
    pulse: (0, _util.ref)(input)
  }))); // Perform view layout

  parent = scope.add((0, _transforms.ViewLayout)({
    layout: scope.objectProperty(spec.layout),
    legends: scope.legends,
    autosize: scope.signalRef('autosize'),
    mark: root,
    pulse: (0, _util.ref)(encode)
  }));
  scope.operators.pop(); // Parse remainder of specification

  scope.pushState((0, _util.ref)(encode), (0, _util.ref)(parent), null);
  (0, _spec.default)(spec, scope, signals);
  scope.operators.push(parent); // Bound / render / sieve root item

  op = scope.add((0, _transforms.Bound)({
    mark: root,
    pulse: (0, _util.ref)(parent)
  }));
  op = scope.add((0, _transforms.Render)({
    pulse: (0, _util.ref)(op)
  }));
  op = scope.add((0, _transforms.Sieve)({
    pulse: (0, _util.ref)(op)
  })); // Track metadata for root item

  scope.addData('root', new _DataScope.default(scope, input, input, op));
  return scope;
}

function addSignals(scope, signals, config) {
  // signals defined in the spec take priority
  (0, _vegaUtil.array)(signals).forEach(_ => {
    if (!defined[_.name]) (0, _signal.default)(_, scope);
  });
  if (!config) return signals;
  const out = (0, _vegaUtil.array)(signals).slice(); // add config signals if not already defined

  (0, _vegaUtil.array)(config).forEach(_ => {
    if (!scope.hasOwnSignal(_.name)) {
      (0, _signal.default)(_, scope);
      out.push(_);
    }
  });
  return out;
}
},{"./autosize":"node_modules/vega-parser/src/parsers/autosize.js","./padding":"node_modules/vega-parser/src/parsers/padding.js","./signal":"node_modules/vega-parser/src/parsers/signal.js","./spec":"node_modules/vega-parser/src/parsers/spec.js","./encode/encode-util":"node_modules/vega-parser/src/parsers/encode/encode-util.js","./marks/marktypes":"node_modules/vega-parser/src/parsers/marks/marktypes.js","./marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","../util":"node_modules/vega-parser/src/util.js","../DataScope":"node_modules/vega-parser/src/DataScope.js","../transforms":"node_modules/vega-parser/src/transforms.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/Scope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Scope;

var _DataScope = _interopRequireDefault(require("./DataScope"));

var _util = require("./util");

var _expression = _interopRequireDefault(require("./parsers/expression"));

var _transforms = require("./transforms");

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Scope(config) {
  this.config = config;
  this.bindings = [];
  this.field = {};
  this.signals = {};
  this.lambdas = {};
  this.scales = {};
  this.events = {};
  this.data = {};
  this.streams = [];
  this.updates = [];
  this.operators = [];
  this.background = null;
  this.eventConfig = null;
  this._id = 0;
  this._subid = 0;
  this._nextsub = [0];
  this._parent = [];
  this._encode = [];
  this._lookup = [];
  this._markpath = [];
}

function Subscope(scope) {
  this.config = scope.config;
  this.legends = scope.legends;
  this.field = Object.create(scope.field);
  this.signals = Object.create(scope.signals);
  this.lambdas = Object.create(scope.lambdas);
  this.scales = Object.create(scope.scales);
  this.events = Object.create(scope.events);
  this.data = Object.create(scope.data);
  this.streams = [];
  this.updates = [];
  this.operators = [];
  this._id = 0;
  this._subid = ++scope._nextsub[0];
  this._nextsub = scope._nextsub;
  this._parent = scope._parent.slice();
  this._encode = scope._encode.slice();
  this._lookup = scope._lookup.slice();
  this._markpath = scope._markpath;
}

var prototype = Scope.prototype = Subscope.prototype; // ----

prototype.fork = function () {
  return new Subscope(this);
};

prototype.isSubscope = function () {
  return this._subid > 0;
};

prototype.toRuntime = function () {
  this.finish();
  return {
    background: this.background,
    operators: this.operators,
    streams: this.streams,
    updates: this.updates,
    bindings: this.bindings,
    eventConfig: this.eventConfig
  };
};

prototype.id = function () {
  return (this._subid ? this._subid + ':' : 0) + this._id++;
};

prototype.add = function (op) {
  this.operators.push(op);
  op.id = this.id(); // if pre-registration references exist, resolve them now

  if (op.refs) {
    op.refs.forEach(function (ref) {
      ref.$ref = op.id;
    });
    op.refs = null;
  }

  return op;
};

prototype.proxy = function (op) {
  var vref = op instanceof _util.Entry ? (0, _util.ref)(op) : op;
  return this.add((0, _transforms.Proxy)({
    value: vref
  }));
};

prototype.addStream = function (stream) {
  this.streams.push(stream);
  stream.id = this.id();
  return stream;
};

prototype.addUpdate = function (update) {
  this.updates.push(update);
  return update;
}; // Apply metadata


prototype.finish = function () {
  var name, ds; // annotate root

  if (this.root) this.root.root = true; // annotate signals

  for (name in this.signals) {
    this.signals[name].signal = name;
  } // annotate scales


  for (name in this.scales) {
    this.scales[name].scale = name;
  } // annotate data sets


  function annotate(op, name, type) {
    var data, list;

    if (op) {
      data = op.data || (op.data = {});
      list = data[name] || (data[name] = []);
      list.push(type);
    }
  }

  for (name in this.data) {
    ds = this.data[name];
    annotate(ds.input, name, 'input');
    annotate(ds.output, name, 'output');
    annotate(ds.values, name, 'values');

    for (var field in ds.index) {
      annotate(ds.index[field], name, 'index:' + field);
    }
  }

  return this;
}; // ----


prototype.pushState = function (encode, parent, lookup) {
  this._encode.push((0, _util.ref)(this.add((0, _transforms.Sieve)({
    pulse: encode
  }))));

  this._parent.push(parent);

  this._lookup.push(lookup ? (0, _util.ref)(this.proxy(lookup)) : null);

  this._markpath.push(-1);
};

prototype.popState = function () {
  this._encode.pop();

  this._parent.pop();

  this._lookup.pop();

  this._markpath.pop();
};

prototype.parent = function () {
  return (0, _vegaUtil.peek)(this._parent);
};

prototype.encode = function () {
  return (0, _vegaUtil.peek)(this._encode);
};

prototype.lookup = function () {
  return (0, _vegaUtil.peek)(this._lookup);
};

prototype.markpath = function () {
  var p = this._markpath;
  return ++p[p.length - 1];
}; // ----


prototype.fieldRef = function (field, name) {
  if ((0, _vegaUtil.isString)(field)) return (0, _util.fieldRef)(field, name);

  if (!field.signal) {
    (0, _vegaUtil.error)('Unsupported field reference: ' + (0, _vegaUtil.stringValue)(field));
  }

  var s = field.signal,
      f = this.field[s],
      params;

  if (!f) {
    params = {
      name: this.signalRef(s)
    };
    if (name) params.as = name;
    this.field[s] = f = (0, _util.ref)(this.add((0, _transforms.Field)(params)));
  }

  return f;
};

prototype.compareRef = function (cmp) {
  function check(_) {
    if ((0, _util.isSignal)(_)) {
      signal = true;
      return scope.signalRef(_.signal);
    } else if ((0, _util.isExpr)(_)) {
      signal = true;
      return scope.exprRef(_.expr);
    } else {
      return _;
    }
  }

  var scope = this,
      signal = false,
      fields = (0, _vegaUtil.array)(cmp.field).map(check),
      orders = (0, _vegaUtil.array)(cmp.order).map(check);
  return signal ? (0, _util.ref)(this.add((0, _transforms.Compare)({
    fields: fields,
    orders: orders
  }))) : (0, _util.compareRef)(fields, orders);
};

prototype.keyRef = function (fields, flat) {
  function check(_) {
    if ((0, _util.isSignal)(_)) {
      signal = true;
      return (0, _util.ref)(sig[_.signal]);
    } else {
      return _;
    }
  }

  var sig = this.signals,
      signal = false;
  fields = (0, _vegaUtil.array)(fields).map(check);
  return signal ? (0, _util.ref)(this.add((0, _transforms.Key)({
    fields: fields,
    flat: flat
  }))) : (0, _util.keyRef)(fields, flat);
};

prototype.sortRef = function (sort) {
  if (!sort) return sort; // including id ensures stable sorting

  var a = (0, _util.aggrField)(sort.op, sort.field),
      o = sort.order || _util.Ascending;
  return o.signal ? (0, _util.ref)(this.add((0, _transforms.Compare)({
    fields: a,
    orders: this.signalRef(o.signal)
  }))) : (0, _util.compareRef)(a, o);
}; // ----


prototype.event = function (source, type) {
  var key = source + ':' + type;

  if (!this.events[key]) {
    var id = this.id();
    this.streams.push({
      id: id,
      source: source,
      type: type
    });
    this.events[key] = id;
  }

  return this.events[key];
}; // ----


prototype.hasOwnSignal = function (name) {
  return (0, _vegaUtil.hasOwnProperty)(this.signals, name);
};

prototype.addSignal = function (name, value) {
  if (this.hasOwnSignal(name)) {
    (0, _vegaUtil.error)('Duplicate signal name: ' + (0, _vegaUtil.stringValue)(name));
  }

  var op = value instanceof _util.Entry ? value : this.add((0, _util.operator)(value));
  return this.signals[name] = op;
};

prototype.getSignal = function (name) {
  if (!this.signals[name]) {
    (0, _vegaUtil.error)('Unrecognized signal name: ' + (0, _vegaUtil.stringValue)(name));
  }

  return this.signals[name];
};

prototype.signalRef = function (s) {
  if (this.signals[s]) {
    return (0, _util.ref)(this.signals[s]);
  } else if (!(0, _vegaUtil.hasOwnProperty)(this.lambdas, s)) {
    this.lambdas[s] = this.add((0, _util.operator)(null));
  }

  return (0, _util.ref)(this.lambdas[s]);
};

prototype.parseLambdas = function () {
  var code = Object.keys(this.lambdas);

  for (var i = 0, n = code.length; i < n; ++i) {
    var s = code[i],
        e = (0, _expression.default)(s, this),
        op = this.lambdas[s];
    op.params = e.$params;
    op.update = e.$expr;
  }
};

prototype.property = function (spec) {
  return spec && spec.signal ? this.signalRef(spec.signal) : spec;
};

prototype.objectProperty = function (spec) {
  return !spec || !(0, _vegaUtil.isObject)(spec) ? spec : this.signalRef(spec.signal || propertyLambda(spec));
};

function propertyLambda(spec) {
  return ((0, _vegaUtil.isArray)(spec) ? arrayLambda : objectLambda)(spec);
}

function arrayLambda(array) {
  var code = '[',
      i = 0,
      n = array.length,
      value;

  for (; i < n; ++i) {
    value = array[i];
    code += (i > 0 ? ',' : '') + ((0, _vegaUtil.isObject)(value) ? value.signal || propertyLambda(value) : (0, _vegaUtil.stringValue)(value));
  }

  return code + ']';
}

function objectLambda(obj) {
  var code = '{',
      i = 0,
      key,
      value;

  for (key in obj) {
    value = obj[key];
    code += (++i > 1 ? ',' : '') + (0, _vegaUtil.stringValue)(key) + ':' + ((0, _vegaUtil.isObject)(value) ? value.signal || propertyLambda(value) : (0, _vegaUtil.stringValue)(value));
  }

  return code + '}';
}

prototype.exprRef = function (code, name) {
  var params = {
    expr: (0, _expression.default)(code, this)
  };
  if (name) params.expr.$name = name;
  return (0, _util.ref)(this.add((0, _transforms.Expression)(params)));
};

prototype.addBinding = function (name, bind) {
  if (!this.bindings) {
    (0, _vegaUtil.error)('Nested signals do not support binding: ' + (0, _vegaUtil.stringValue)(name));
  }

  this.bindings.push((0, _vegaUtil.extend)({
    signal: name
  }, bind));
}; // ----


prototype.addScaleProj = function (name, transform) {
  if ((0, _vegaUtil.hasOwnProperty)(this.scales, name)) {
    (0, _vegaUtil.error)('Duplicate scale or projection name: ' + (0, _vegaUtil.stringValue)(name));
  }

  this.scales[name] = this.add(transform);
};

prototype.addScale = function (name, params) {
  this.addScaleProj(name, (0, _transforms.Scale)(params));
};

prototype.addProjection = function (name, params) {
  this.addScaleProj(name, (0, _transforms.Projection)(params));
};

prototype.getScale = function (name) {
  if (!this.scales[name]) {
    (0, _vegaUtil.error)('Unrecognized scale name: ' + (0, _vegaUtil.stringValue)(name));
  }

  return this.scales[name];
};

prototype.projectionRef = prototype.scaleRef = function (name) {
  return (0, _util.ref)(this.getScale(name));
};

prototype.projectionType = prototype.scaleType = function (name) {
  return this.getScale(name).params.type;
}; // ----


prototype.addData = function (name, dataScope) {
  if ((0, _vegaUtil.hasOwnProperty)(this.data, name)) {
    (0, _vegaUtil.error)('Duplicate data set name: ' + (0, _vegaUtil.stringValue)(name));
  }

  return this.data[name] = dataScope;
};

prototype.getData = function (name) {
  if (!this.data[name]) {
    (0, _vegaUtil.error)('Undefined data set name: ' + (0, _vegaUtil.stringValue)(name));
  }

  return this.data[name];
};

prototype.addDataPipeline = function (name, entries) {
  if ((0, _vegaUtil.hasOwnProperty)(this.data, name)) {
    (0, _vegaUtil.error)('Duplicate data set name: ' + (0, _vegaUtil.stringValue)(name));
  }

  return this.addData(name, _DataScope.default.fromEntries(this, entries));
};
},{"./DataScope":"node_modules/vega-parser/src/DataScope.js","./util":"node_modules/vega-parser/src/util.js","./parsers/expression":"node_modules/vega-parser/src/parsers/expression.js","./transforms":"node_modules/vega-parser/src/transforms.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/config.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _vegaUtil = require("vega-util");

function _default(configs) {
  return (configs || []).reduce((out, config) => {
    for (var key in config) {
      if (key === 'signals') {
        out.signals = mergeNamed(out.signals, config.signals);
      } else {
        var r = key === 'legend' ? {
          'layout': 1
        } : key === 'style' ? true : null;
        copy(out, key, config[key], r);
      }
    }

    return out;
  }, defaults());
}

function copy(output, key, value, recurse) {
  var k, o;

  if ((0, _vegaUtil.isObject)(value) && !(0, _vegaUtil.isArray)(value)) {
    o = (0, _vegaUtil.isObject)(output[key]) ? output[key] : output[key] = {};

    for (k in value) {
      if (recurse && (recurse === true || recurse[k])) {
        copy(o, k, value[k]);
      } else {
        o[k] = value[k];
      }
    }
  } else {
    output[key] = value;
  }
}

function mergeNamed(a, b) {
  if (a == null) return b;
  const map = {},
        out = [];

  function add(_) {
    if (!map[_.name]) {
      map[_.name] = 1;
      out.push(_);
    }
  }

  b.forEach(add);
  a.forEach(add);
  return out;
}

var defaultFont = 'sans-serif',
    defaultSymbolSize = 30,
    defaultStrokeWidth = 2,
    defaultColor = '#4c78a8',
    black = '#000',
    gray = '#888',
    lightGray = '#ddd';
/**
 * Standard configuration defaults for Vega specification parsing.
 * Users can provide their own (sub-)set of these default values
 * by passing in a config object to the top-level parse method.
 */

function defaults() {
  return {
    // default padding around visualization
    padding: 0,
    // default for automatic sizing; options: 'none', 'pad', 'fit'
    // or provide an object (e.g., {'type': 'pad', 'resize': true})
    autosize: 'pad',
    // default view background color
    // covers the entire view component
    background: null,
    // default event handling configuration
    // preventDefault for view-sourced event types except 'wheel'
    events: {
      defaults: {
        allow: ['wheel']
      }
    },
    // defaults for top-level group marks
    // accepts mark properties (fill, stroke, etc)
    // covers the data rectangle within group width/height
    group: null,
    // defaults for basic mark types
    // each subset accepts mark properties (fill, stroke, etc)
    mark: null,
    arc: {
      fill: defaultColor
    },
    area: {
      fill: defaultColor
    },
    image: null,
    line: {
      stroke: defaultColor,
      strokeWidth: defaultStrokeWidth
    },
    path: {
      stroke: defaultColor
    },
    rect: {
      fill: defaultColor
    },
    rule: {
      stroke: black
    },
    shape: {
      stroke: defaultColor
    },
    symbol: {
      fill: defaultColor,
      size: 64
    },
    text: {
      fill: black,
      font: defaultFont,
      fontSize: 11
    },
    // style definitions
    style: {
      // axis & legend labels
      'guide-label': {
        fill: black,
        font: defaultFont,
        fontSize: 10
      },
      // axis & legend titles
      'guide-title': {
        fill: black,
        font: defaultFont,
        fontSize: 11,
        fontWeight: 'bold'
      },
      // headers, including chart title
      'group-title': {
        fill: black,
        font: defaultFont,
        fontSize: 13,
        fontWeight: 'bold'
      },
      // defaults for styled point marks in Vega-Lite
      point: {
        size: defaultSymbolSize,
        strokeWidth: defaultStrokeWidth,
        shape: 'circle'
      },
      circle: {
        size: defaultSymbolSize,
        strokeWidth: defaultStrokeWidth
      },
      square: {
        size: defaultSymbolSize,
        strokeWidth: defaultStrokeWidth,
        shape: 'square'
      },
      // defaults for styled group marks in Vega-Lite
      cell: {
        fill: 'transparent',
        stroke: lightGray
      }
    },
    // defaults for title
    title: {
      orient: 'top',
      anchor: 'middle',
      offset: 4
    },
    // defaults for axes
    axis: {
      minExtent: 0,
      maxExtent: 200,
      bandPosition: 0.5,
      domain: true,
      domainWidth: 1,
      domainColor: gray,
      grid: false,
      gridWidth: 1,
      gridColor: lightGray,
      labels: true,
      labelAngle: 0,
      labelLimit: 180,
      labelPadding: 2,
      ticks: true,
      tickColor: gray,
      tickOffset: 0,
      tickRound: true,
      tickSize: 5,
      tickWidth: 1,
      titlePadding: 4
    },
    // correction for centering bias
    axisBand: {
      tickOffset: -1
    },
    // defaults for legends
    legend: {
      orient: 'right',
      padding: 0,
      gridAlign: 'each',
      columnPadding: 10,
      rowPadding: 2,
      symbolDirection: 'vertical',
      gradientDirection: 'vertical',
      gradientLength: 200,
      gradientThickness: 16,
      gradientStrokeColor: lightGray,
      gradientStrokeWidth: 0,
      gradientLabelOffset: 2,
      labelAlign: 'left',
      labelBaseline: 'middle',
      labelLimit: 160,
      labelOffset: 4,
      labelOverlap: true,
      symbolType: 'circle',
      symbolSize: 100,
      symbolOffset: 0,
      symbolStrokeWidth: 1.5,
      symbolBaseFillColor: 'transparent',
      symbolBaseStrokeColor: gray,
      titleLimit: 180,
      titleOrient: 'top',
      titlePadding: 5,
      layout: {
        offset: 18,
        direction: 'horizontal',
        left: {
          direction: 'vertical'
        },
        right: {
          direction: 'vertical'
        }
      }
    },
    // defaults for scale ranges
    range: {
      category: {
        scheme: 'tableau10'
      },
      ordinal: {
        scheme: 'blues'
      },
      heatmap: {
        scheme: 'yellowgreenblue'
      },
      ramp: {
        scheme: 'blues'
      },
      diverging: {
        scheme: 'blueorange',
        extent: [1, 0]
      },
      symbol: ['circle', 'square', 'triangle-up', 'cross', 'diamond', 'triangle-right', 'triangle-down', 'triangle-left']
    }
  };
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/src/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _view = _interopRequireDefault(require("./parsers/view"));

var _Scope = _interopRequireDefault(require("./Scope"));

var _config = _interopRequireDefault(require("./config"));

var _vegaUtil = require("vega-util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(spec, config) {
  if (!(0, _vegaUtil.isObject)(spec)) (0, _vegaUtil.error)('Input Vega specification must be an object.');
  return (0, _view.default)(spec, new _Scope.default((0, _config.default)([config, spec.config]))).toRuntime();
}
},{"./parsers/view":"node_modules/vega-parser/src/parsers/view.js","./Scope":"node_modules/vega-parser/src/Scope.js","./config":"node_modules/vega-parser/src/config.js","vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-parser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _parse.default;
  }
});
Object.defineProperty(exports, "config", {
  enumerable: true,
  get: function () {
    return _config.default;
  }
});
Object.defineProperty(exports, "signal", {
  enumerable: true,
  get: function () {
    return _signal.default;
  }
});
Object.defineProperty(exports, "signalUpdates", {
  enumerable: true,
  get: function () {
    return _signalUpdates.default;
  }
});
Object.defineProperty(exports, "stream", {
  enumerable: true,
  get: function () {
    return _stream.default;
  }
});
Object.defineProperty(exports, "MarkRole", {
  enumerable: true,
  get: function () {
    return _roles.MarkRole;
  }
});
Object.defineProperty(exports, "FrameRole", {
  enumerable: true,
  get: function () {
    return _roles.FrameRole;
  }
});
Object.defineProperty(exports, "ScopeRole", {
  enumerable: true,
  get: function () {
    return _roles.ScopeRole;
  }
});
Object.defineProperty(exports, "AxisRole", {
  enumerable: true,
  get: function () {
    return _roles.AxisRole;
  }
});
Object.defineProperty(exports, "AxisDomainRole", {
  enumerable: true,
  get: function () {
    return _roles.AxisDomainRole;
  }
});
Object.defineProperty(exports, "AxisGridRole", {
  enumerable: true,
  get: function () {
    return _roles.AxisGridRole;
  }
});
Object.defineProperty(exports, "AxisLabelRole", {
  enumerable: true,
  get: function () {
    return _roles.AxisLabelRole;
  }
});
Object.defineProperty(exports, "AxisTickRole", {
  enumerable: true,
  get: function () {
    return _roles.AxisTickRole;
  }
});
Object.defineProperty(exports, "AxisTitleRole", {
  enumerable: true,
  get: function () {
    return _roles.AxisTitleRole;
  }
});
Object.defineProperty(exports, "LegendRole", {
  enumerable: true,
  get: function () {
    return _roles.LegendRole;
  }
});
Object.defineProperty(exports, "LegendEntryRole", {
  enumerable: true,
  get: function () {
    return _roles.LegendEntryRole;
  }
});
Object.defineProperty(exports, "LegendLabelRole", {
  enumerable: true,
  get: function () {
    return _roles.LegendLabelRole;
  }
});
Object.defineProperty(exports, "LegendSymbolRole", {
  enumerable: true,
  get: function () {
    return _roles.LegendSymbolRole;
  }
});
Object.defineProperty(exports, "LegendTitleRole", {
  enumerable: true,
  get: function () {
    return _roles.LegendTitleRole;
  }
});
Object.defineProperty(exports, "Scope", {
  enumerable: true,
  get: function () {
    return _Scope.default;
  }
});
Object.defineProperty(exports, "DataScope", {
  enumerable: true,
  get: function () {
    return _DataScope.default;
  }
});

var _parse = _interopRequireDefault(require("./src/parse"));

var _config = _interopRequireDefault(require("./src/config"));

var _signal = _interopRequireDefault(require("./src/parsers/signal"));

var _signalUpdates = _interopRequireDefault(require("./src/parsers/signal-updates"));

var _stream = _interopRequireDefault(require("./src/parsers/stream"));

var _roles = require("./src/parsers/marks/roles");

var _Scope = _interopRequireDefault(require("./src/Scope"));

var _DataScope = _interopRequireDefault(require("./src/DataScope"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/parse":"node_modules/vega-parser/src/parse.js","./src/config":"node_modules/vega-parser/src/config.js","./src/parsers/signal":"node_modules/vega-parser/src/parsers/signal.js","./src/parsers/signal-updates":"node_modules/vega-parser/src/parsers/signal-updates.js","./src/parsers/stream":"node_modules/vega-parser/src/parsers/stream.js","./src/parsers/marks/roles":"node_modules/vega-parser/src/parsers/marks/roles.js","./src/Scope":"node_modules/vega-parser/src/Scope.js","./src/DataScope":"node_modules/vega-parser/src/DataScope.js"}],"node_modules/vega/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  Dataflow: true,
  EventStream: true,
  Parameters: true,
  Pulse: true,
  MultiPulse: true,
  Operator: true,
  Transform: true,
  changeset: true,
  ingest: true,
  isTuple: true,
  definition: true,
  transform: true,
  transforms: true,
  tupleid: true,
  version: true,
  scale: true,
  scheme: true,
  interpolate: true,
  interpolateColors: true,
  interpolateRange: true,
  timeInterval: true,
  quantizeInterpolator: true,
  projection: true,
  View: true,
  expressionFunction: true,
  formatLocale: true,
  timeFormatLocale: true,
  parse: true,
  runtime: true,
  runtimeContext: true
};
Object.defineProperty(exports, "Dataflow", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.Dataflow;
  }
});
Object.defineProperty(exports, "EventStream", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.EventStream;
  }
});
Object.defineProperty(exports, "Parameters", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.Parameters;
  }
});
Object.defineProperty(exports, "Pulse", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.Pulse;
  }
});
Object.defineProperty(exports, "MultiPulse", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.MultiPulse;
  }
});
Object.defineProperty(exports, "Operator", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.Operator;
  }
});
Object.defineProperty(exports, "Transform", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.Transform;
  }
});
Object.defineProperty(exports, "changeset", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.changeset;
  }
});
Object.defineProperty(exports, "ingest", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.ingest;
  }
});
Object.defineProperty(exports, "isTuple", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.isTuple;
  }
});
Object.defineProperty(exports, "definition", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.definition;
  }
});
Object.defineProperty(exports, "transform", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.transform;
  }
});
Object.defineProperty(exports, "transforms", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.transforms;
  }
});
Object.defineProperty(exports, "tupleid", {
  enumerable: true,
  get: function () {
    return _vegaDataflow.tupleid;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _package.version;
  }
});
Object.defineProperty(exports, "scale", {
  enumerable: true,
  get: function () {
    return _vegaScale.scale;
  }
});
Object.defineProperty(exports, "scheme", {
  enumerable: true,
  get: function () {
    return _vegaScale.scheme;
  }
});
Object.defineProperty(exports, "interpolate", {
  enumerable: true,
  get: function () {
    return _vegaScale.interpolate;
  }
});
Object.defineProperty(exports, "interpolateColors", {
  enumerable: true,
  get: function () {
    return _vegaScale.interpolateColors;
  }
});
Object.defineProperty(exports, "interpolateRange", {
  enumerable: true,
  get: function () {
    return _vegaScale.interpolateRange;
  }
});
Object.defineProperty(exports, "timeInterval", {
  enumerable: true,
  get: function () {
    return _vegaScale.timeInterval;
  }
});
Object.defineProperty(exports, "quantizeInterpolator", {
  enumerable: true,
  get: function () {
    return _vegaScale.quantizeInterpolator;
  }
});
Object.defineProperty(exports, "projection", {
  enumerable: true,
  get: function () {
    return _vegaProjection.projection;
  }
});
Object.defineProperty(exports, "View", {
  enumerable: true,
  get: function () {
    return _vegaView.View;
  }
});
Object.defineProperty(exports, "expressionFunction", {
  enumerable: true,
  get: function () {
    return _vegaFunctions.expressionFunction;
  }
});
Object.defineProperty(exports, "formatLocale", {
  enumerable: true,
  get: function () {
    return _vegaFunctions.formatLocale;
  }
});
Object.defineProperty(exports, "timeFormatLocale", {
  enumerable: true,
  get: function () {
    return _vegaFunctions.timeFormatLocale;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _vegaParser.parse;
  }
});
Object.defineProperty(exports, "runtime", {
  enumerable: true,
  get: function () {
    return _vegaRuntime.parse;
  }
});
Object.defineProperty(exports, "runtimeContext", {
  enumerable: true,
  get: function () {
    return _vegaRuntime.context;
  }
});

var _vegaUtil = require("vega-util");

Object.keys(_vegaUtil).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _vegaUtil[key];
    }
  });
});

var _vegaDataflow = require("vega-dataflow");

var tx = _interopRequireWildcard(require("vega-transforms"));

var vtx = _interopRequireWildcard(require("vega-view-transforms"));

var encode = _interopRequireWildcard(require("vega-encode"));

var geo = _interopRequireWildcard(require("vega-geo"));

var force = _interopRequireWildcard(require("vega-force"));

var tree = _interopRequireWildcard(require("vega-hierarchy"));

var reg = _interopRequireWildcard(require("vega-regression"));

var voronoi = _interopRequireWildcard(require("vega-voronoi"));

var wordcloud = _interopRequireWildcard(require("vega-wordcloud"));

var xf = _interopRequireWildcard(require("vega-crossfilter"));

var _package = require("./package.json");

var _vegaStatistics = require("vega-statistics");

Object.keys(_vegaStatistics).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _vegaStatistics[key];
    }
  });
});

var _vegaLoader = require("vega-loader");

Object.keys(_vegaLoader).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _vegaLoader[key];
    }
  });
});

var _vegaScenegraph = require("vega-scenegraph");

Object.keys(_vegaScenegraph).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _vegaScenegraph[key];
    }
  });
});

var _vegaScale = require("vega-scale");

var _vegaProjection = require("vega-projection");

var _vegaView = require("vega-view");

var _vegaFunctions = require("vega-functions");

var _vegaParser = require("vega-parser");

var _vegaRuntime = require("vega-runtime");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// -- Transforms -----
(0, _vegaUtil.extend)(_vegaDataflow.transforms, tx, vtx, encode, geo, force, tree, reg, voronoi, wordcloud, xf); // -- Exports -----
},{"vega-util":"node_modules/vega-util/index.js","vega-dataflow":"node_modules/vega-dataflow/index.js","vega-transforms":"node_modules/vega-transforms/index.js","vega-view-transforms":"node_modules/vega-view-transforms/index.js","vega-encode":"node_modules/vega-encode/index.js","vega-geo":"node_modules/vega-geo/index.js","vega-force":"node_modules/vega-force/index.js","vega-hierarchy":"node_modules/vega-hierarchy/index.js","vega-regression":"node_modules/vega-regression/index.js","vega-voronoi":"node_modules/vega-voronoi/index.js","vega-wordcloud":"node_modules/vega-wordcloud/index.js","vega-crossfilter":"node_modules/vega-crossfilter/index.js","./package.json":"node_modules/vega/package.json","vega-statistics":"node_modules/vega-statistics/index.js","vega-loader":"node_modules/vega-loader/index.browser.js","vega-scenegraph":"node_modules/vega-scenegraph/index.js","vega-scale":"node_modules/vega-scale/index.js","vega-projection":"node_modules/vega-projection/index.js","vega-view":"node_modules/vega-view/index.js","vega-functions":"node_modules/vega-functions/index.js","vega-parser":"node_modules/vega-parser/index.js","vega-runtime":"node_modules/vega-runtime/index.js"}],"node_modules/vega-lite/build/package.json":[function(require,module,exports) {
module.exports = {
    "name": "vega-lite",
    "author": "Dominik Moritz, Kanit \"Ham\" Wongsuphasawat, Arvind Satyanarayan, Jeffrey Heer",
    "version": "3.4.0",
    "collaborators": [
        "Kanit Wongsuphasawat <kanitw@gmail.com> (http://kanitw.yellowpigz.com)",
        "Dominik Moritz <domoritz@cs.washington.edu> (https://www.domoritz.de)",
        "Arvind Satyanarayan (https://arvindsatya.com/)",
        "Jeffrey Heer (https://jheer.org)"
    ],
    "homepage": "https://vega.github.io/vega-lite/",
    "description": "Vega-Lite is a concise high-level language for interactive visualization.",
    "main": "build/vega-lite.js",
    "unpkg": "build/vega-lite.min.js",
    "jsdelivr": "build/vega-lite.min.js",
    "module": "build/src/index",
    "types": "build/src/index.d.ts",
    "bin": {
        "vl2png": "./bin/vl2png",
        "vl2svg": "./bin/vl2svg",
        "vl2vg": "./bin/vl2vg"
    },
    "directories": {
        "test": "test"
    },
    "scripts": {
        "build": "npm run build:only",
        "build:only": "npm run tsc:src && rollup -c",
        "postbuild": "terser build/vega-lite.js -cm --source-map content=build/vega-lite.js.map,filename=build/vega-lite.min.js.map -o build/vega-lite.min.js && npm run schema",
        "build:examples": "npm run build:only",
        "postbuild:examples": "npm run data && TZ=America/Los_Angeles scripts/build-examples.sh",
        "build:examples-full": "npm run build:only",
        "postbuild:examples-full": "TZ=America/Los_Angeles scripts/build-examples.sh 1",
        "build:example": "TZ=America/Los_Angeles scripts/build-example.sh",
        "build:toc": "npm run data && bundle exec jekyll build -q && scripts/generate-toc",
        "build:site": "npm run tsc:site && rollup -c site/rollup.config.js",
        "build:versions": "scripts/update-version.sh",
        "clean": "rm -rf build && rm -f examples/compiled/*.png && find site/examples ! -name 'index.md' -type f -delete",
        "data": "rsync -r node_modules/vega-datasets/data/* data",
        "deploy": "scripts/deploy.sh",
        "deploy:gh": "scripts/deploy-gh.sh",
        "deploy:schema": "scripts/deploy-schema.sh",
        "schema": "mkdir -p build && ts-json-schema-generator -c -f tsconfig.json -t TopLevelSpec > build/vega-lite-schema.json && npm run renameschema && cp build/vega-lite-schema.json _data/",
        "renameschema": "scripts/rename-schema.sh",
        "presite": "npm run data && npm run build:site && npm run build:toc && npm run build:versions && scripts/create-example-pages",
        "site": "bundle exec jekyll serve --incremental",
        "tsc:src": "tsc -b src/tsconfig.src.json",
        "tsc:site": "tsc -b site/tsconfig.site.json",
        "prettierbase": "prettier '{src,test,test-runtime,site,typings}/**/*.{md,css}'",
        "eslintbase": "eslint '{src,test,test-runtime,site,typings}/**/*.{ts,js}'",
        "format": "npm run eslintbase -- --fix && npm run prettierbase -- --write",
        "lint": "npm run eslintbase && npm run prettierbase -- --check",
        "test": "jest test/ && npm run lint && npm run schema && jest examples/ && npm run test:runtime",
        "test:inspect": "node --inspect-brk ./node_modules/.bin/jest --runInBand test",
        "test:runtime": "TZ=America/Los_Angeles jest test-runtime/",
        "test:runtime:generate": "rm -Rf test-runtime/resources && VL_GENERATE_TESTS=true npm run test:runtime",
        "watch:build": "npm run build:only && concurrently --kill-others -n Typescript,Rollup 'npm run tsc:src -- -w' 'rollup -c -w'",
        "watch:site": "concurrently --kill-others -n Typescript,Rollup 'npm run tsc:site -- -w' 'rollup -c site/rollup.config.js -w'",
        "watch:test": "jest --watch"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/vega/vega-lite.git"
    },
    "license": "BSD-3-Clause",
    "bugs": {
        "url": "https://github.com/vega/vega-lite/issues"
    },
    "devDependencies": {
        "@types/chai": "^4.1.7",
        "@types/d3": "^5.7.2",
        "@types/highlight.js": "^9.12.3",
        "@types/jest": "^24.0.15",
        "@types/jest-environment-puppeteer": "^4.0.0",
        "@types/mkdirp": "^0.5.2",
        "@types/node": "^12.6.8",
        "@types/puppeteer": "^1.12.4",
        "@typescript-eslint/eslint-plugin": "^1.13.0",
        "@typescript-eslint/parser": "^1.13.0",
        "ajv": "^6.10.2",
        "chai": "^4.2.0",
        "cheerio": "^1.0.0-rc.2",
        "codecov": "^3.5.0",
        "concurrently": "^4.1.1",
        "d3": "^5.9.7",
        "eslint": "^5.16.0",
        "eslint-config-prettier": "^6.0.0",
        "eslint-plugin-prettier": "^3.1.0",
        "highlight.js": "^9.15.8",
        "http-server": "^0.11.1",
        "jest": "^24.8.0",
        "jest-puppeteer": "^4.3.0",
        "mkdirp": "^0.5.1",
        "prettier": "^1.18.2",
        "puppeteer": "^1.19.0",
        "rollup": "^1.17.0",
        "rollup-plugin-commonjs": "^10.0.1",
        "rollup-plugin-json": "^4.0.0",
        "rollup-plugin-node-resolve": "^5.2.0",
        "rollup-plugin-sourcemaps": "^0.4.2",
        "rollup-plugin-terser": "^5.1.1",
        "svg2png-many": "^0.0.7",
        "terser": "^4.1.2",
        "ts-jest": "^24.0.2",
        "ts-json-schema-generator": "^0.52.14",
        "typescript": "~3.4.5",
        "vega-cli": "^5.4.0",
        "vega-datasets": "^1.25.0",
        "vega-embed": "^4.2.1",
        "vega-tooltip": "^0.18.1",
        "yaml-front-matter": "^4.0.0"
    },
    "dependencies": {
        "@types/clone": "~0.1.30",
        "@types/fast-json-stable-stringify": "^2.0.0",
        "clone": "~2.1.2",
        "fast-deep-equal": "~2.0.1",
        "fast-json-stable-stringify": "~2.0.0",
        "json-stringify-pretty-compact": "~2.0.0",
        "tslib": "~1.10.0",
        "vega-event-selector": "~2.0.0",
        "vega-expression": "~2.6.0",
        "vega-typings": "0.7.2",
        "vega-util": "~1.10.0",
        "yargs": "~13.3.0"
    },
    "peerDependencies": {
        "vega": "^5.4.0"
    },
    "jest": {
        "preset": "jest-puppeteer",
        "transform": {
            "^.+\\.tsx?$": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",
        "moduleFileExtensions": [
            "ts",
            "tsx",
            "js",
            "jsx",
            "json",
            "node"
        ],
        "testPathIgnorePatterns": [
            "<rootDir>/node_modules",
            "<rootDir>/build",
            "<rootDir>/_site",
            "<rootDir>/src"
        ],
        "coverageDirectory": "./coverage/",
        "collectCoverage": false
    }
}
;
},{}],"node_modules/vega-lite/node_modules/vega-util/src/accessor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.accessorName = accessorName;
exports.accessorFields = accessorFields;

function _default(fn, fields, name) {
  fn.fields = fields || [];
  fn.fname = name;
  return fn;
}

function accessorName(fn) {
  return fn == null ? null : fn.fname;
}

function accessorFields(fn) {
  return fn == null ? null : fn.fields;
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(message) {
  throw Error(message);
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/splitAccessPath.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _error = _interopRequireDefault(require("./error"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(p) {
  var path = [],
      q = null,
      b = 0,
      n = p.length,
      s = '',
      i,
      j,
      c;
  p = p + '';

  function push() {
    path.push(s + p.substring(i, j));
    s = '';
    i = j + 1;
  }

  for (i = j = 0; j < n; ++j) {
    c = p[j];

    if (c === '\\') {
      s += p.substring(i, j);
      i = ++j;
    } else if (c === q) {
      push();
      q = null;
      b = -1;
    } else if (q) {
      continue;
    } else if (i === b && c === '"') {
      i = j + 1;
      q = c;
    } else if (i === b && c === "'") {
      i = j + 1;
      q = c;
    } else if (c === '.' && !b) {
      if (j > i) {
        push();
      } else {
        i = j + 1;
      }
    } else if (c === '[') {
      if (j > i) push();
      b = i = j + 1;
    } else if (c === ']') {
      if (!b) (0, _error.default)('Access path missing open bracket: ' + p);
      if (b > 0) push();
      b = 0;
      i = j + 1;
    }
  }

  if (b) (0, _error.default)('Access path missing closing bracket: ' + p);
  if (q) (0, _error.default)('Access path missing closing quote: ' + p);

  if (j > i) {
    j++;
    push();
  }

  return path;
}
},{"./error":"node_modules/vega-lite/node_modules/vega-util/src/error.js"}],"node_modules/vega-lite/node_modules/vega-util/src/isArray.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = Array.isArray;
exports.default = _default;
},{}],"node_modules/vega-lite/node_modules/vega-util/src/isObject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return _ === Object(_);
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/isString.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return typeof _ === 'string';
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/stringValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = $;

var _isArray = _interopRequireDefault(require("./isArray"));

var _isObject = _interopRequireDefault(require("./isObject"));

var _isString = _interopRequireDefault(require("./isString"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function $(x) {
  return (0, _isArray.default)(x) ? '[' + x.map($) + ']' : (0, _isObject.default)(x) || (0, _isString.default)(x) ? // Output valid JSON and JS source strings.
  // See http://timelessrepo.com/json-isnt-a-javascript-subset
  JSON.stringify(x).replace('\u2028', '\\u2028').replace('\u2029', '\\u2029') : x;
}
},{"./isArray":"node_modules/vega-lite/node_modules/vega-util/src/isArray.js","./isObject":"node_modules/vega-lite/node_modules/vega-util/src/isObject.js","./isString":"node_modules/vega-lite/node_modules/vega-util/src/isString.js"}],"node_modules/vega-lite/node_modules/vega-util/src/field.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _accessor = _interopRequireDefault(require("./accessor"));

var _splitAccessPath = _interopRequireDefault(require("./splitAccessPath"));

var _stringValue = _interopRequireDefault(require("./stringValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(field, name) {
  var path = (0, _splitAccessPath.default)(field),
      code = 'return _[' + path.map(_stringValue.default).join('][') + '];';
  return (0, _accessor.default)(Function('_', code), [field = path.length === 1 ? path[0] : field], name || field);
}
},{"./accessor":"node_modules/vega-lite/node_modules/vega-util/src/accessor.js","./splitAccessPath":"node_modules/vega-lite/node_modules/vega-util/src/splitAccessPath.js","./stringValue":"node_modules/vega-lite/node_modules/vega-util/src/stringValue.js"}],"node_modules/vega-lite/node_modules/vega-util/src/accessors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.falsy = exports.truthy = exports.one = exports.zero = exports.identity = exports.id = void 0;

var _accessor = _interopRequireDefault(require("./accessor"));

var _field = _interopRequireDefault(require("./field"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var empty = [];
var id = (0, _field.default)('id');
exports.id = id;
var identity = (0, _accessor.default)(function (_) {
  return _;
}, empty, 'identity');
exports.identity = identity;
var zero = (0, _accessor.default)(function () {
  return 0;
}, empty, 'zero');
exports.zero = zero;
var one = (0, _accessor.default)(function () {
  return 1;
}, empty, 'one');
exports.one = one;
var truthy = (0, _accessor.default)(function () {
  return true;
}, empty, 'true');
exports.truthy = truthy;
var falsy = (0, _accessor.default)(function () {
  return false;
}, empty, 'false');
exports.falsy = falsy;
},{"./accessor":"node_modules/vega-lite/node_modules/vega-util/src/accessor.js","./field":"node_modules/vega-lite/node_modules/vega-util/src/field.js"}],"node_modules/vega-lite/node_modules/vega-util/src/logger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.Debug = exports.Info = exports.Warn = exports.Error = exports.None = void 0;

function log(method, level, input) {
  var msg = [level].concat([].slice.call(input));
  console[method](...msg); // eslint-disable-line no-console
}

var None = 0;
exports.None = None;
var Error = 1;
exports.Error = Error;
var Warn = 2;
exports.Warn = Warn;
var Info = 3;
exports.Info = Info;
var Debug = 4;
exports.Debug = Debug;

function _default(_, method) {
  var level = _ || None;
  return {
    level: function (_) {
      if (arguments.length) {
        level = +_;
        return this;
      } else {
        return level;
      }
    },
    error: function () {
      if (level >= Error) log(method || 'error', 'ERROR', arguments);
      return this;
    },
    warn: function () {
      if (level >= Warn) log(method || 'warn', 'WARN', arguments);
      return this;
    },
    info: function () {
      if (level >= Info) log(method || 'log', 'INFO', arguments);
      return this;
    },
    debug: function () {
      if (level >= Debug) log(method || 'log', 'DEBUG', arguments);
      return this;
    }
  };
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/peek.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array) {
  return array[array.length - 1];
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/toNumber.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return _ == null || _ === '' ? null : +_;
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.panLinear = panLinear;
exports.panLog = panLog;
exports.panPow = panPow;
exports.panSymlog = panSymlog;
exports.zoomLinear = zoomLinear;
exports.zoomLog = zoomLog;
exports.zoomPow = zoomPow;
exports.zoomSymlog = zoomSymlog;

var _accessors = require("./accessors");

var _peek = _interopRequireDefault(require("./peek"));

var _toNumber = _interopRequireDefault(require("./toNumber"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function exp(sign) {
  return function (x) {
    return sign * Math.exp(x);
  };
}

function log(sign) {
  return function (x) {
    return Math.log(sign * x);
  };
}

function symlog(c) {
  return function (x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function symexp(c) {
  return function (x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function pow(exponent) {
  return function (x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function pan(domain, delta, lift, ground) {
  var d0 = lift(domain[0]),
      d1 = lift((0, _peek.default)(domain)),
      dd = (d1 - d0) * delta;
  return [ground(d0 - dd), ground(d1 - dd)];
}

function panLinear(domain, delta) {
  return pan(domain, delta, _toNumber.default, _accessors.identity);
}

function panLog(domain, delta) {
  var sign = Math.sign(domain[0]);
  return pan(domain, delta, log(sign), exp(sign));
}

function panPow(domain, delta, exponent) {
  return pan(domain, delta, pow(exponent), pow(1 / exponent));
}

function panSymlog(domain, delta, constant) {
  return pan(domain, delta, symlog(constant), symexp(constant));
}

function zoom(domain, anchor, scale, lift, ground) {
  var d0 = lift(domain[0]),
      d1 = lift((0, _peek.default)(domain)),
      da = anchor != null ? lift(anchor) : (d0 + d1) / 2;
  return [ground(da + (d0 - da) * scale), ground(da + (d1 - da) * scale)];
}

function zoomLinear(domain, anchor, scale) {
  return zoom(domain, anchor, scale, _toNumber.default, _accessors.identity);
}

function zoomLog(domain, anchor, scale) {
  var sign = Math.sign(domain[0]);
  return zoom(domain, anchor, scale, log(sign), exp(sign));
}

function zoomPow(domain, anchor, scale, exponent) {
  return zoom(domain, anchor, scale, pow(exponent), pow(1 / exponent));
}

function zoomSymlog(domain, anchor, scale, constant) {
  return zoom(domain, anchor, scale, symlog(constant), symexp(constant));
}
},{"./accessors":"node_modules/vega-lite/node_modules/vega-util/src/accessors.js","./peek":"node_modules/vega-lite/node_modules/vega-util/src/peek.js","./toNumber":"node_modules/vega-lite/node_modules/vega-util/src/toNumber.js"}],"node_modules/vega-lite/node_modules/vega-util/src/quarter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quarter = quarter;
exports.utcquarter = utcquarter;

function quarter(date) {
  return 1 + ~~(new Date(date).getMonth() / 3);
}

function utcquarter(date) {
  return 1 + ~~(new Date(date).getUTCMonth() / 3);
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _isArray = _interopRequireDefault(require("./isArray"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(_) {
  return _ != null ? (0, _isArray.default)(_) ? _ : [_] : [];
}
},{"./isArray":"node_modules/vega-lite/node_modules/vega-util/src/isArray.js"}],"node_modules/vega-lite/node_modules/vega-util/src/clampRange.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Span-preserving range clamp. If the span of the input range is less
 * than (max - min) and an endpoint exceeds either the min or max value,
 * the range is translated such that the span is preserved and one
 * endpoint touches the boundary of the min/max range.
 * If the span exceeds (max - min), the range [min, max] is returned.
 */
function _default(range, min, max) {
  var lo = range[0],
      hi = range[1],
      span;

  if (hi < lo) {
    span = hi;
    hi = lo;
    lo = span;
  }

  span = hi - lo;
  return span >= max - min ? [min, max] : [lo = Math.min(Math.max(lo, min), max - span), lo + span];
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/isFunction.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return typeof _ === 'function';
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/compare.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _accessor = _interopRequireWildcard(require("./accessor"));

var _array = _interopRequireDefault(require("./array"));

var _isFunction = _interopRequireDefault(require("./isFunction"));

var _splitAccessPath = _interopRequireDefault(require("./splitAccessPath"));

var _stringValue = _interopRequireDefault(require("./stringValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _default(fields, orders) {
  var idx = [],
      cmp = (fields = (0, _array.default)(fields)).map(function (f, i) {
    if (f == null) {
      return null;
    } else {
      idx.push(i);
      return (0, _isFunction.default)(f) ? f : (0, _splitAccessPath.default)(f).map(_stringValue.default).join('][');
    }
  }),
      n = idx.length - 1,
      ord = (0, _array.default)(orders),
      code = 'var u,v;return ',
      i,
      j,
      f,
      u,
      v,
      d,
      t,
      lt,
      gt;
  if (n < 0) return null;

  for (j = 0; j <= n; ++j) {
    i = idx[j];
    f = cmp[i];

    if ((0, _isFunction.default)(f)) {
      d = 'f' + i;
      u = '(u=this.' + d + '(a))';
      v = '(v=this.' + d + '(b))';
      (t = t || {})[d] = f;
    } else {
      u = '(u=a[' + f + '])';
      v = '(v=b[' + f + '])';
    }

    d = '((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))';

    if (ord[i] !== 'descending') {
      gt = 1;
      lt = -1;
    } else {
      gt = -1;
      lt = 1;
    }

    code += '(' + u + '<' + v + '||u==null)&&v!=null?' + lt + ':(u>v||v==null)&&u!=null?' + gt + ':' + d + '!==u&&v===v?' + lt + ':v!==v&&u===u?' + gt + (i < n ? ':' : ':0');
  }

  f = Function('a', 'b', code + ';');
  if (t) f = f.bind(t);
  fields = fields.reduce(function (map, field) {
    if ((0, _isFunction.default)(field)) {
      ((0, _accessor.accessorFields)(field) || []).forEach(function (_) {
        map[_] = 1;
      });
    } else if (field != null) {
      map[field + ''] = 1;
    }

    return map;
  }, {});
  return (0, _accessor.default)(f, Object.keys(fields));
}
},{"./accessor":"node_modules/vega-lite/node_modules/vega-util/src/accessor.js","./array":"node_modules/vega-lite/node_modules/vega-util/src/array.js","./isFunction":"node_modules/vega-lite/node_modules/vega-util/src/isFunction.js","./splitAccessPath":"node_modules/vega-lite/node_modules/vega-util/src/splitAccessPath.js","./stringValue":"node_modules/vega-lite/node_modules/vega-util/src/stringValue.js"}],"node_modules/vega-lite/node_modules/vega-util/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _isFunction = _interopRequireDefault(require("./isFunction"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(_) {
  return (0, _isFunction.default)(_) ? _ : function () {
    return _;
  };
}
},{"./isFunction":"node_modules/vega-lite/node_modules/vega-util/src/isFunction.js"}],"node_modules/vega-lite/node_modules/vega-util/src/debounce.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(delay, handler) {
  var tid, evt;

  function callback() {
    handler(evt);
    tid = evt = null;
  }

  return function (e) {
    evt = e;
    if (tid) clearTimeout(tid);
    tid = setTimeout(callback, delay);
  };
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/extend.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  for (var x, k, i = 1, len = arguments.length; i < len; ++i) {
    x = arguments[i];

    for (k in x) {
      _[k] = x[k];
    }
  }

  return _;
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Return an array with minimum and maximum values, in the
 * form [min, max]. Ignores null, undefined, and NaN values.
 */
function _default(array, f) {
  var i = 0,
      n,
      v,
      min,
      max;

  if (array && (n = array.length)) {
    if (f == null) {
      // find first valid value
      for (v = array[i]; v == null || v !== v; v = array[++i]);

      min = max = v; // visit all other values

      for (; i < n; ++i) {
        v = array[i]; // skip null/undefined; NaN will fail all comparisons

        if (v != null) {
          if (v < min) min = v;
          if (v > max) max = v;
        }
      }
    } else {
      // find first valid value
      for (v = f(array[i]); v == null || v !== v; v = f(array[++i]));

      min = max = v; // visit all other values

      for (; i < n; ++i) {
        v = f(array[i]); // skip null/undefined; NaN will fail all comparisons

        if (v != null) {
          if (v < min) min = v;
          if (v > max) max = v;
        }
      }
    }
  }

  return [min, max];
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/extentIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, f) {
  var i = -1,
      n = array.length,
      a,
      b,
      c,
      u,
      v;

  if (f == null) {
    while (++i < n) {
      b = array[i];

      if (b != null && b >= b) {
        a = c = b;
        break;
      }
    }

    u = v = i;

    while (++i < n) {
      b = array[i];

      if (b != null) {
        if (a > b) {
          a = b;
          u = i;
        }

        if (c < b) {
          c = b;
          v = i;
        }
      }
    }
  } else {
    while (++i < n) {
      b = f(array[i], i, array);

      if (b != null && b >= b) {
        a = c = b;
        break;
      }
    }

    u = v = i;

    while (++i < n) {
      b = f(array[i], i, array);

      if (b != null) {
        if (a > b) {
          a = b;
          u = i;
        }

        if (c < b) {
          c = b;
          v = i;
        }
      }
    }
  }

  return [u, v];
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/fastmap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var NULL = {};

function _default(input) {
  var obj = {},
      map,
      test;

  function has(key) {
    return obj.hasOwnProperty(key) && obj[key] !== NULL;
  }

  map = {
    size: 0,
    empty: 0,
    object: obj,
    has: has,
    get: function (key) {
      return has(key) ? obj[key] : undefined;
    },
    set: function (key, value) {
      if (!has(key)) {
        ++map.size;
        if (obj[key] === NULL) --map.empty;
      }

      obj[key] = value;
      return this;
    },
    delete: function (key) {
      if (has(key)) {
        --map.size;
        ++map.empty;
        obj[key] = NULL;
      }

      return this;
    },
    clear: function () {
      map.size = map.empty = 0;
      map.object = obj = {};
    },
    test: function (_) {
      if (arguments.length) {
        test = _;
        return map;
      } else {
        return test;
      }
    },
    clean: function () {
      var next = {},
          size = 0,
          key,
          value;

      for (key in obj) {
        value = obj[key];

        if (value !== NULL && (!test || !test(value))) {
          next[key] = value;
          ++size;
        }
      }

      map.size = size;
      map.empty = 0;
      map.object = obj = next;
    }
  };
  if (input) Object.keys(input).forEach(function (key) {
    map.set(key, input[key]);
  });
  return map;
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/flush.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _peek = _interopRequireDefault(require("./peek"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(range, value, threshold, left, right, center) {
  if (!threshold && threshold !== 0) return center;
  var a = range[0],
      b = (0, _peek.default)(range),
      t = +threshold,
      l,
      r; // swap endpoints if range is reversed

  if (b < a) {
    l = a;
    a = b;
    b = l;
  } // compare value to endpoints


  l = Math.abs(value - a);
  r = Math.abs(b - value); // adjust if value is within threshold distance of endpoint

  return l < r && l <= t ? left : r <= t ? right : center;
}
},{"./peek":"node_modules/vega-lite/node_modules/vega-util/src/peek.js"}],"node_modules/vega-lite/node_modules/vega-util/src/inherits.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(child, parent) {
  var proto = child.prototype = Object.create(parent.prototype);
  proto.constructor = child;
  return proto;
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/inrange.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Predicate that returns true if the value lies within the span
 * of the given range. The left and right flags control the use
 * of inclusive (true) or exclusive (false) comparisons.
 */
function _default(value, range, left, right) {
  var r0 = range[0],
      r1 = range[range.length - 1],
      t;

  if (r0 > r1) {
    t = r0;
    r0 = r1;
    r1 = t;
  }

  left = left === undefined || left;
  right = right === undefined || right;
  return (left ? r0 <= value : r0 < value) && (right ? value <= r1 : value < r1);
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/isBoolean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return typeof _ === 'boolean';
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/isDate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return Object.prototype.toString.call(_) === '[object Date]';
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/isNumber.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return typeof _ === 'number';
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/isRegExp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return Object.prototype.toString.call(_) === '[object RegExp]';
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/key.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _accessor = _interopRequireDefault(require("./accessor"));

var _array = _interopRequireDefault(require("./array"));

var _splitAccessPath = _interopRequireDefault(require("./splitAccessPath"));

var _stringValue = _interopRequireDefault(require("./stringValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(fields, flat) {
  if (fields) {
    fields = flat ? (0, _array.default)(fields).map(function (f) {
      return f.replace(/\\(.)/g, '$1');
    }) : (0, _array.default)(fields);
  }

  var fn = !(fields && fields.length) ? function () {
    return '';
  } : Function('_', 'return \'\'+' + fields.map(function (f) {
    return '_[' + (flat ? (0, _stringValue.default)(f) : (0, _splitAccessPath.default)(f).map(_stringValue.default).join('][')) + ']';
  }).join('+\'|\'+') + ';');
  return (0, _accessor.default)(fn, fields, 'key');
}
},{"./accessor":"node_modules/vega-lite/node_modules/vega-util/src/accessor.js","./array":"node_modules/vega-lite/node_modules/vega-util/src/array.js","./splitAccessPath":"node_modules/vega-lite/node_modules/vega-util/src/splitAccessPath.js","./stringValue":"node_modules/vega-lite/node_modules/vega-util/src/stringValue.js"}],"node_modules/vega-lite/node_modules/vega-util/src/lerp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _peek = _interopRequireDefault(require("./peek"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, frac) {
  const lo = array[0],
        hi = (0, _peek.default)(array),
        f = +frac;
  return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);
}
},{"./peek":"node_modules/vega-lite/node_modules/vega-util/src/peek.js"}],"node_modules/vega-lite/node_modules/vega-util/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(compare, array0, array1, output) {
  var n0 = array0.length,
      n1 = array1.length;
  if (!n1) return array0;
  if (!n0) return array1;
  var merged = output || new array0.constructor(n0 + n1),
      i0 = 0,
      i1 = 0,
      i = 0;

  for (; i0 < n0 && i1 < n1; ++i) {
    merged[i] = compare(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];
  }

  for (; i0 < n0; ++i0, ++i) {
    merged[i] = array0[i0];
  }

  for (; i1 < n1; ++i1, ++i) {
    merged[i] = array1[i1];
  }

  return merged;
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/repeat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(str, reps) {
  var s = '';

  while (--reps >= 0) s += str;

  return s;
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/pad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _repeat = _interopRequireDefault(require("./repeat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(str, length, padchar, align) {
  var c = padchar || ' ',
      s = str + '',
      n = length - s.length;
  return n <= 0 ? s : align === 'left' ? (0, _repeat.default)(c, n) + s : align === 'center' ? (0, _repeat.default)(c, ~~(n / 2)) + s + (0, _repeat.default)(c, Math.ceil(n / 2)) : s + (0, _repeat.default)(c, n);
}
},{"./repeat":"node_modules/vega-lite/node_modules/vega-util/src/repeat.js"}],"node_modules/vega-lite/node_modules/vega-util/src/span.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _peek = _interopRequireDefault(require("./peek"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Return the numerical span of an array: the difference between
 * the last and first values.
 */
function _default(array) {
  return (0, _peek.default)(array) - array[0] || 0;
}
},{"./peek":"node_modules/vega-lite/node_modules/vega-util/src/peek.js"}],"node_modules/vega-lite/node_modules/vega-util/src/toBoolean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return _ == null || _ === '' ? null : !_ || _ === 'false' || _ === '0' ? false : !!_;
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/toDate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _isDate = _interopRequireDefault(require("./isDate"));

var _isNumber = _interopRequireDefault(require("./isNumber"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultParser(_) {
  return (0, _isNumber.default)(_) ? _ : (0, _isDate.default)(_) ? _ : Date.parse(_);
}

function _default(_, parser) {
  parser = parser || defaultParser;
  return _ == null || _ === '' ? null : parser(_);
}
},{"./isDate":"node_modules/vega-lite/node_modules/vega-util/src/isDate.js","./isNumber":"node_modules/vega-lite/node_modules/vega-util/src/isNumber.js"}],"node_modules/vega-lite/node_modules/vega-util/src/toString.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return _ == null || _ === '' ? null : _ + '';
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/toSet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  for (var s = {}, i = 0, n = _.length; i < n; ++i) s[_[i]] = true;

  return s;
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/truncate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(str, length, align, ellipsis) {
  var e = ellipsis != null ? ellipsis : '\u2026',
      s = str + '',
      n = s.length,
      l = Math.max(0, length - e.length);
  return n <= length ? s : align === 'left' ? e + s.slice(n - l) : align === 'center' ? s.slice(0, Math.ceil(l / 2)) + e + s.slice(n - ~~(l / 2)) : s.slice(0, l) + e;
}
},{}],"node_modules/vega-lite/node_modules/vega-util/src/visitArray.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, filter, visitor) {
  if (array) {
    var i = 0,
        n = array.length,
        t;

    if (filter) {
      for (; i < n; ++i) {
        if (t = filter(array[i])) visitor(t, i, array);
      }
    } else {
      array.forEach(visitor);
    }
  }
}
},{}],"node_modules/vega-lite/node_modules/vega-util/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "accessor", {
  enumerable: true,
  get: function () {
    return _accessor.default;
  }
});
Object.defineProperty(exports, "accessorName", {
  enumerable: true,
  get: function () {
    return _accessor.accessorName;
  }
});
Object.defineProperty(exports, "accessorFields", {
  enumerable: true,
  get: function () {
    return _accessor.accessorFields;
  }
});
Object.defineProperty(exports, "id", {
  enumerable: true,
  get: function () {
    return _accessors.id;
  }
});
Object.defineProperty(exports, "identity", {
  enumerable: true,
  get: function () {
    return _accessors.identity;
  }
});
Object.defineProperty(exports, "zero", {
  enumerable: true,
  get: function () {
    return _accessors.zero;
  }
});
Object.defineProperty(exports, "one", {
  enumerable: true,
  get: function () {
    return _accessors.one;
  }
});
Object.defineProperty(exports, "truthy", {
  enumerable: true,
  get: function () {
    return _accessors.truthy;
  }
});
Object.defineProperty(exports, "falsy", {
  enumerable: true,
  get: function () {
    return _accessors.falsy;
  }
});
Object.defineProperty(exports, "logger", {
  enumerable: true,
  get: function () {
    return _logger.default;
  }
});
Object.defineProperty(exports, "None", {
  enumerable: true,
  get: function () {
    return _logger.None;
  }
});
Object.defineProperty(exports, "Error", {
  enumerable: true,
  get: function () {
    return _logger.Error;
  }
});
Object.defineProperty(exports, "Warn", {
  enumerable: true,
  get: function () {
    return _logger.Warn;
  }
});
Object.defineProperty(exports, "Info", {
  enumerable: true,
  get: function () {
    return _logger.Info;
  }
});
Object.defineProperty(exports, "Debug", {
  enumerable: true,
  get: function () {
    return _logger.Debug;
  }
});
Object.defineProperty(exports, "panLinear", {
  enumerable: true,
  get: function () {
    return _transform.panLinear;
  }
});
Object.defineProperty(exports, "panLog", {
  enumerable: true,
  get: function () {
    return _transform.panLog;
  }
});
Object.defineProperty(exports, "panPow", {
  enumerable: true,
  get: function () {
    return _transform.panPow;
  }
});
Object.defineProperty(exports, "panSymlog", {
  enumerable: true,
  get: function () {
    return _transform.panSymlog;
  }
});
Object.defineProperty(exports, "zoomLinear", {
  enumerable: true,
  get: function () {
    return _transform.zoomLinear;
  }
});
Object.defineProperty(exports, "zoomLog", {
  enumerable: true,
  get: function () {
    return _transform.zoomLog;
  }
});
Object.defineProperty(exports, "zoomPow", {
  enumerable: true,
  get: function () {
    return _transform.zoomPow;
  }
});
Object.defineProperty(exports, "zoomSymlog", {
  enumerable: true,
  get: function () {
    return _transform.zoomSymlog;
  }
});
Object.defineProperty(exports, "quarter", {
  enumerable: true,
  get: function () {
    return _quarter.quarter;
  }
});
Object.defineProperty(exports, "utcquarter", {
  enumerable: true,
  get: function () {
    return _quarter.utcquarter;
  }
});
Object.defineProperty(exports, "array", {
  enumerable: true,
  get: function () {
    return _array.default;
  }
});
Object.defineProperty(exports, "clampRange", {
  enumerable: true,
  get: function () {
    return _clampRange.default;
  }
});
Object.defineProperty(exports, "compare", {
  enumerable: true,
  get: function () {
    return _compare.default;
  }
});
Object.defineProperty(exports, "constant", {
  enumerable: true,
  get: function () {
    return _constant.default;
  }
});
Object.defineProperty(exports, "debounce", {
  enumerable: true,
  get: function () {
    return _debounce.default;
  }
});
Object.defineProperty(exports, "error", {
  enumerable: true,
  get: function () {
    return _error.default;
  }
});
Object.defineProperty(exports, "extend", {
  enumerable: true,
  get: function () {
    return _extend.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "extentIndex", {
  enumerable: true,
  get: function () {
    return _extentIndex.default;
  }
});
Object.defineProperty(exports, "fastmap", {
  enumerable: true,
  get: function () {
    return _fastmap.default;
  }
});
Object.defineProperty(exports, "field", {
  enumerable: true,
  get: function () {
    return _field.default;
  }
});
Object.defineProperty(exports, "flush", {
  enumerable: true,
  get: function () {
    return _flush.default;
  }
});
Object.defineProperty(exports, "inherits", {
  enumerable: true,
  get: function () {
    return _inherits.default;
  }
});
Object.defineProperty(exports, "inrange", {
  enumerable: true,
  get: function () {
    return _inrange.default;
  }
});
Object.defineProperty(exports, "isArray", {
  enumerable: true,
  get: function () {
    return _isArray.default;
  }
});
Object.defineProperty(exports, "isBoolean", {
  enumerable: true,
  get: function () {
    return _isBoolean.default;
  }
});
Object.defineProperty(exports, "isDate", {
  enumerable: true,
  get: function () {
    return _isDate.default;
  }
});
Object.defineProperty(exports, "isFunction", {
  enumerable: true,
  get: function () {
    return _isFunction.default;
  }
});
Object.defineProperty(exports, "isNumber", {
  enumerable: true,
  get: function () {
    return _isNumber.default;
  }
});
Object.defineProperty(exports, "isObject", {
  enumerable: true,
  get: function () {
    return _isObject.default;
  }
});
Object.defineProperty(exports, "isRegExp", {
  enumerable: true,
  get: function () {
    return _isRegExp.default;
  }
});
Object.defineProperty(exports, "isString", {
  enumerable: true,
  get: function () {
    return _isString.default;
  }
});
Object.defineProperty(exports, "key", {
  enumerable: true,
  get: function () {
    return _key.default;
  }
});
Object.defineProperty(exports, "lerp", {
  enumerable: true,
  get: function () {
    return _lerp.default;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "pad", {
  enumerable: true,
  get: function () {
    return _pad.default;
  }
});
Object.defineProperty(exports, "peek", {
  enumerable: true,
  get: function () {
    return _peek.default;
  }
});
Object.defineProperty(exports, "repeat", {
  enumerable: true,
  get: function () {
    return _repeat.default;
  }
});
Object.defineProperty(exports, "span", {
  enumerable: true,
  get: function () {
    return _span.default;
  }
});
Object.defineProperty(exports, "splitAccessPath", {
  enumerable: true,
  get: function () {
    return _splitAccessPath.default;
  }
});
Object.defineProperty(exports, "stringValue", {
  enumerable: true,
  get: function () {
    return _stringValue.default;
  }
});
Object.defineProperty(exports, "toBoolean", {
  enumerable: true,
  get: function () {
    return _toBoolean.default;
  }
});
Object.defineProperty(exports, "toDate", {
  enumerable: true,
  get: function () {
    return _toDate.default;
  }
});
Object.defineProperty(exports, "toNumber", {
  enumerable: true,
  get: function () {
    return _toNumber.default;
  }
});
Object.defineProperty(exports, "toString", {
  enumerable: true,
  get: function () {
    return _toString.default;
  }
});
Object.defineProperty(exports, "toSet", {
  enumerable: true,
  get: function () {
    return _toSet.default;
  }
});
Object.defineProperty(exports, "truncate", {
  enumerable: true,
  get: function () {
    return _truncate.default;
  }
});
Object.defineProperty(exports, "visitArray", {
  enumerable: true,
  get: function () {
    return _visitArray.default;
  }
});

var _accessor = _interopRequireWildcard(require("./src/accessor"));

var _accessors = require("./src/accessors");

var _logger = _interopRequireWildcard(require("./src/logger"));

var _transform = require("./src/transform");

var _quarter = require("./src/quarter");

var _array = _interopRequireDefault(require("./src/array"));

var _clampRange = _interopRequireDefault(require("./src/clampRange"));

var _compare = _interopRequireDefault(require("./src/compare"));

var _constant = _interopRequireDefault(require("./src/constant"));

var _debounce = _interopRequireDefault(require("./src/debounce"));

var _error = _interopRequireDefault(require("./src/error"));

var _extend = _interopRequireDefault(require("./src/extend"));

var _extent = _interopRequireDefault(require("./src/extent"));

var _extentIndex = _interopRequireDefault(require("./src/extentIndex"));

var _fastmap = _interopRequireDefault(require("./src/fastmap"));

var _field = _interopRequireDefault(require("./src/field"));

var _flush = _interopRequireDefault(require("./src/flush"));

var _inherits = _interopRequireDefault(require("./src/inherits"));

var _inrange = _interopRequireDefault(require("./src/inrange"));

var _isArray = _interopRequireDefault(require("./src/isArray"));

var _isBoolean = _interopRequireDefault(require("./src/isBoolean"));

var _isDate = _interopRequireDefault(require("./src/isDate"));

var _isFunction = _interopRequireDefault(require("./src/isFunction"));

var _isNumber = _interopRequireDefault(require("./src/isNumber"));

var _isObject = _interopRequireDefault(require("./src/isObject"));

var _isRegExp = _interopRequireDefault(require("./src/isRegExp"));

var _isString = _interopRequireDefault(require("./src/isString"));

var _key = _interopRequireDefault(require("./src/key"));

var _lerp = _interopRequireDefault(require("./src/lerp"));

var _merge = _interopRequireDefault(require("./src/merge"));

var _pad = _interopRequireDefault(require("./src/pad"));

var _peek = _interopRequireDefault(require("./src/peek"));

var _repeat = _interopRequireDefault(require("./src/repeat"));

var _span = _interopRequireDefault(require("./src/span"));

var _splitAccessPath = _interopRequireDefault(require("./src/splitAccessPath"));

var _stringValue = _interopRequireDefault(require("./src/stringValue"));

var _toBoolean = _interopRequireDefault(require("./src/toBoolean"));

var _toDate = _interopRequireDefault(require("./src/toDate"));

var _toNumber = _interopRequireDefault(require("./src/toNumber"));

var _toString = _interopRequireDefault(require("./src/toString"));

var _toSet = _interopRequireDefault(require("./src/toSet"));

var _truncate = _interopRequireDefault(require("./src/truncate"));

var _visitArray = _interopRequireDefault(require("./src/visitArray"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./src/accessor":"node_modules/vega-lite/node_modules/vega-util/src/accessor.js","./src/accessors":"node_modules/vega-lite/node_modules/vega-util/src/accessors.js","./src/logger":"node_modules/vega-lite/node_modules/vega-util/src/logger.js","./src/transform":"node_modules/vega-lite/node_modules/vega-util/src/transform.js","./src/quarter":"node_modules/vega-lite/node_modules/vega-util/src/quarter.js","./src/array":"node_modules/vega-lite/node_modules/vega-util/src/array.js","./src/clampRange":"node_modules/vega-lite/node_modules/vega-util/src/clampRange.js","./src/compare":"node_modules/vega-lite/node_modules/vega-util/src/compare.js","./src/constant":"node_modules/vega-lite/node_modules/vega-util/src/constant.js","./src/debounce":"node_modules/vega-lite/node_modules/vega-util/src/debounce.js","./src/error":"node_modules/vega-lite/node_modules/vega-util/src/error.js","./src/extend":"node_modules/vega-lite/node_modules/vega-util/src/extend.js","./src/extent":"node_modules/vega-lite/node_modules/vega-util/src/extent.js","./src/extentIndex":"node_modules/vega-lite/node_modules/vega-util/src/extentIndex.js","./src/fastmap":"node_modules/vega-lite/node_modules/vega-util/src/fastmap.js","./src/field":"node_modules/vega-lite/node_modules/vega-util/src/field.js","./src/flush":"node_modules/vega-lite/node_modules/vega-util/src/flush.js","./src/inherits":"node_modules/vega-lite/node_modules/vega-util/src/inherits.js","./src/inrange":"node_modules/vega-lite/node_modules/vega-util/src/inrange.js","./src/isArray":"node_modules/vega-lite/node_modules/vega-util/src/isArray.js","./src/isBoolean":"node_modules/vega-lite/node_modules/vega-util/src/isBoolean.js","./src/isDate":"node_modules/vega-lite/node_modules/vega-util/src/isDate.js","./src/isFunction":"node_modules/vega-lite/node_modules/vega-util/src/isFunction.js","./src/isNumber":"node_modules/vega-lite/node_modules/vega-util/src/isNumber.js","./src/isObject":"node_modules/vega-lite/node_modules/vega-util/src/isObject.js","./src/isRegExp":"node_modules/vega-lite/node_modules/vega-util/src/isRegExp.js","./src/isString":"node_modules/vega-lite/node_modules/vega-util/src/isString.js","./src/key":"node_modules/vega-lite/node_modules/vega-util/src/key.js","./src/lerp":"node_modules/vega-lite/node_modules/vega-util/src/lerp.js","./src/merge":"node_modules/vega-lite/node_modules/vega-util/src/merge.js","./src/pad":"node_modules/vega-lite/node_modules/vega-util/src/pad.js","./src/peek":"node_modules/vega-lite/node_modules/vega-util/src/peek.js","./src/repeat":"node_modules/vega-lite/node_modules/vega-util/src/repeat.js","./src/span":"node_modules/vega-lite/node_modules/vega-util/src/span.js","./src/splitAccessPath":"node_modules/vega-lite/node_modules/vega-util/src/splitAccessPath.js","./src/stringValue":"node_modules/vega-lite/node_modules/vega-util/src/stringValue.js","./src/toBoolean":"node_modules/vega-lite/node_modules/vega-util/src/toBoolean.js","./src/toDate":"node_modules/vega-lite/node_modules/vega-util/src/toDate.js","./src/toNumber":"node_modules/vega-lite/node_modules/vega-util/src/toNumber.js","./src/toString":"node_modules/vega-lite/node_modules/vega-util/src/toString.js","./src/toSet":"node_modules/vega-lite/node_modules/vega-util/src/toSet.js","./src/truncate":"node_modules/vega-lite/node_modules/vega-util/src/truncate.js","./src/visitArray":"node_modules/vega-lite/node_modules/vega-util/src/visitArray.js"}],"node_modules/clone/clone.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var clone = function () {
  'use strict';

  function _instanceof(obj, type) {
    return type != null && obj instanceof type;
  }

  var nativeMap;

  try {
    nativeMap = Map;
  } catch (_) {
    // maybe a reference error because no `Map`. Give it a dummy value that no
    // value will ever be an instanceof.
    nativeMap = function () {};
  }

  var nativeSet;

  try {
    nativeSet = Set;
  } catch (_) {
    nativeSet = function () {};
  }

  var nativePromise;

  try {
    nativePromise = Promise;
  } catch (_) {
    nativePromise = function () {};
  }
  /**
   * Clones (copies) an Object using deep copying.
   *
   * This function supports circular references by default, but if you are certain
   * there are no circular references in your object, you can save some CPU time
   * by calling clone(obj, false).
   *
   * Caution: if `circular` is false and `parent` contains circular references,
   * your program may enter an infinite loop and crash.
   *
   * @param `parent` - the object to be cloned
   * @param `circular` - set to true if the object to be cloned may contain
   *    circular references. (optional - true by default)
   * @param `depth` - set to a number if the object is only to be cloned to
   *    a particular depth. (optional - defaults to Infinity)
   * @param `prototype` - sets the prototype to be used when cloning an object.
   *    (optional - defaults to parent prototype).
   * @param `includeNonEnumerable` - set to true if the non-enumerable properties
   *    should be cloned as well. Non-enumerable properties on the prototype
   *    chain will be ignored. (optional - false by default)
  */


  function clone(parent, circular, depth, prototype, includeNonEnumerable) {
    if (typeof circular === 'object') {
      depth = circular.depth;
      prototype = circular.prototype;
      includeNonEnumerable = circular.includeNonEnumerable;
      circular = circular.circular;
    } // maintain two arrays for circular references, where corresponding parents
    // and children have the same index


    var allParents = [];
    var allChildren = [];
    var useBuffer = typeof Buffer != 'undefined';
    if (typeof circular == 'undefined') circular = true;
    if (typeof depth == 'undefined') depth = Infinity; // recurse this function so we don't reset allParents and allChildren

    function _clone(parent, depth) {
      // cloning null always returns null
      if (parent === null) return null;
      if (depth === 0) return parent;
      var child;
      var proto;

      if (typeof parent != 'object') {
        return parent;
      }

      if (_instanceof(parent, nativeMap)) {
        child = new nativeMap();
      } else if (_instanceof(parent, nativeSet)) {
        child = new nativeSet();
      } else if (_instanceof(parent, nativePromise)) {
        child = new nativePromise(function (resolve, reject) {
          parent.then(function (value) {
            resolve(_clone(value, depth - 1));
          }, function (err) {
            reject(_clone(err, depth - 1));
          });
        });
      } else if (clone.__isArray(parent)) {
        child = [];
      } else if (clone.__isRegExp(parent)) {
        child = new RegExp(parent.source, __getRegExpFlags(parent));
        if (parent.lastIndex) child.lastIndex = parent.lastIndex;
      } else if (clone.__isDate(parent)) {
        child = new Date(parent.getTime());
      } else if (useBuffer && Buffer.isBuffer(parent)) {
        if (Buffer.allocUnsafe) {
          // Node.js >= 4.5.0
          child = Buffer.allocUnsafe(parent.length);
        } else {
          // Older Node.js versions
          child = new Buffer(parent.length);
        }

        parent.copy(child);
        return child;
      } else if (_instanceof(parent, Error)) {
        child = Object.create(parent);
      } else {
        if (typeof prototype == 'undefined') {
          proto = Object.getPrototypeOf(parent);
          child = Object.create(proto);
        } else {
          child = Object.create(prototype);
          proto = prototype;
        }
      }

      if (circular) {
        var index = allParents.indexOf(parent);

        if (index != -1) {
          return allChildren[index];
        }

        allParents.push(parent);
        allChildren.push(child);
      }

      if (_instanceof(parent, nativeMap)) {
        parent.forEach(function (value, key) {
          var keyChild = _clone(key, depth - 1);

          var valueChild = _clone(value, depth - 1);

          child.set(keyChild, valueChild);
        });
      }

      if (_instanceof(parent, nativeSet)) {
        parent.forEach(function (value) {
          var entryChild = _clone(value, depth - 1);

          child.add(entryChild);
        });
      }

      for (var i in parent) {
        var attrs;

        if (proto) {
          attrs = Object.getOwnPropertyDescriptor(proto, i);
        }

        if (attrs && attrs.set == null) {
          continue;
        }

        child[i] = _clone(parent[i], depth - 1);
      }

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(parent);

        for (var i = 0; i < symbols.length; i++) {
          // Don't need to worry about cloning a symbol because it is a primitive,
          // like a number or string.
          var symbol = symbols[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);

          if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
            continue;
          }

          child[symbol] = _clone(parent[symbol], depth - 1);

          if (!descriptor.enumerable) {
            Object.defineProperty(child, symbol, {
              enumerable: false
            });
          }
        }
      }

      if (includeNonEnumerable) {
        var allPropertyNames = Object.getOwnPropertyNames(parent);

        for (var i = 0; i < allPropertyNames.length; i++) {
          var propertyName = allPropertyNames[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);

          if (descriptor && descriptor.enumerable) {
            continue;
          }

          child[propertyName] = _clone(parent[propertyName], depth - 1);
          Object.defineProperty(child, propertyName, {
            enumerable: false
          });
        }
      }

      return child;
    }

    return _clone(parent, depth);
  }
  /**
   * Simple flat clone using prototype, accepts only objects, usefull for property
   * override on FLAT configuration object (no nested props).
   *
   * USE WITH CAUTION! This may not behave as you wish if you do not know how this
   * works.
   */


  clone.clonePrototype = function clonePrototype(parent) {
    if (parent === null) return null;

    var c = function () {};

    c.prototype = parent;
    return new c();
  }; // private utility functions


  function __objToStr(o) {
    return Object.prototype.toString.call(o);
  }

  clone.__objToStr = __objToStr;

  function __isDate(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Date]';
  }

  clone.__isDate = __isDate;

  function __isArray(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Array]';
  }

  clone.__isArray = __isArray;

  function __isRegExp(o) {
    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
  }

  clone.__isRegExp = __isRegExp;

  function __getRegExpFlags(re) {
    var flags = '';
    if (re.global) flags += 'g';
    if (re.ignoreCase) flags += 'i';
    if (re.multiline) flags += 'm';
    return flags;
  }

  clone.__getRegExpFlags = __getRegExpFlags;
  return clone;
}();

if (typeof module === 'object' && module.exports) {
  module.exports = clone;
}
},{"buffer":"../../../../../usr/local/lib/node_modules/parcel/node_modules/buffer/index.js"}],"node_modules/fast-deep-equal/index.js":[function(require,module,exports) {
'use strict';

var isArray = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;

module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    var arrA = isArray(a)
      , arrB = isArray(b)
      , i
      , length
      , key;

    if (arrA && arrB) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }

    if (arrA != arrB) return false;

    var dateA = a instanceof Date
      , dateB = b instanceof Date;
    if (dateA != dateB) return false;
    if (dateA && dateB) return a.getTime() == b.getTime();

    var regexpA = a instanceof RegExp
      , regexpB = b instanceof RegExp;
    if (regexpA != regexpB) return false;
    if (regexpA && regexpB) return a.toString() == b.toString();

    var keys = keyList(a);
    length = keys.length;

    if (length !== keyList(b).length)
      return false;

    for (i = length; i-- !== 0;)
      if (!hasProp.call(b, keys[i])) return false;

    for (i = length; i-- !== 0;) {
      key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  return a!==a && b!==b;
};

},{}],"node_modules/fast-json-stable-stringify/index.js":[function(require,module,exports) {
'use strict';

module.exports = function (data, opts) {
    if (!opts) opts = {};
    if (typeof opts === 'function') opts = { cmp: opts };
    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;

    var cmp = opts.cmp && (function (f) {
        return function (node) {
            return function (a, b) {
                var aobj = { key: a, value: node[a] };
                var bobj = { key: b, value: node[b] };
                return f(aobj, bobj);
            };
        };
    })(opts.cmp);

    var seen = [];
    return (function stringify (node) {
        if (node && node.toJSON && typeof node.toJSON === 'function') {
            node = node.toJSON();
        }

        if (node === undefined) return;
        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
        if (typeof node !== 'object') return JSON.stringify(node);

        var i, out;
        if (Array.isArray(node)) {
            out = '[';
            for (i = 0; i < node.length; i++) {
                if (i) out += ',';
                out += stringify(node[i]) || 'null';
            }
            return out + ']';
        }

        if (node === null) return 'null';

        if (seen.indexOf(node) !== -1) {
            if (cycles) return JSON.stringify('__cycle__');
            throw new TypeError('Converting circular structure to JSON');
        }

        var seenIndex = seen.push(node) - 1;
        var keys = Object.keys(node).sort(cmp && cmp(node));
        out = '';
        for (i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = stringify(node[key]);

            if (!value) continue;
            if (out) out += ',';
            out += JSON.stringify(key) + ':' + value;
        }
        seen.splice(seenIndex, 1);
        return '{' + out + '}';
    })(data);
};

},{}],"node_modules/vega-lite/build/src/logical.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLogicalOr = isLogicalOr;
exports.isLogicalAnd = isLogicalAnd;
exports.isLogicalNot = isLogicalNot;
exports.forEachLeaf = forEachLeaf;
exports.normalizeLogicalOperand = normalizeLogicalOperand;

function isLogicalOr(op) {
  return !!op.or;
}

function isLogicalAnd(op) {
  return !!op.and;
}

function isLogicalNot(op) {
  return !!op.not;
}

function forEachLeaf(op, fn) {
  if (isLogicalNot(op)) {
    forEachLeaf(op.not, fn);
  } else if (isLogicalAnd(op)) {
    for (const subop of op.and) {
      forEachLeaf(subop, fn);
    }
  } else if (isLogicalOr(op)) {
    for (const subop of op.or) {
      forEachLeaf(subop, fn);
    }
  } else {
    fn(op);
  }
}

function normalizeLogicalOperand(op, normalizer) {
  if (isLogicalNot(op)) {
    return {
      not: normalizeLogicalOperand(op.not, normalizer)
    };
  } else if (isLogicalAnd(op)) {
    return {
      and: op.and.map(o => normalizeLogicalOperand(o, normalizer))
    };
  } else if (isLogicalOr(op)) {
    return {
      or: op.or.map(o => normalizeLogicalOperand(o, normalizer))
    };
  } else {
    return normalizer(op);
  }
}
},{}],"node_modules/vega-lite/build/src/util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pick = pick;
exports.omit = omit;
exports.hash = hash;
exports.isNullOrFalse = isNullOrFalse;
exports.contains = contains;
exports.without = without;
exports.union = union;
exports.some = some;
exports.every = every;
exports.flatten = flatten;
exports.fill = fill;
exports.mergeDeep = mergeDeep;
exports.unique = unique;
exports.isEqual = isEqual;
exports.setEqual = setEqual;
exports.hasIntersection = hasIntersection;
exports.prefixGenerator = prefixGenerator;
exports.fieldIntersection = fieldIntersection;
exports.isNumeric = isNumeric;
exports.differArray = differArray;
exports.vals = vals;
exports.entries = entries;
exports.isBoolean = isBoolean;
exports.varName = varName;
exports.logicalExpr = logicalExpr;
exports.deleteNestedProperty = deleteNestedProperty;
exports.titlecase = titlecase;
exports.accessPathWithDatum = accessPathWithDatum;
exports.flatAccessWithDatum = flatAccessWithDatum;
exports.replacePathInField = replacePathInField;
exports.removePathFromField = removePathFromField;
exports.accessPathDepth = accessPathDepth;
exports.getFirstDefined = getFirstDefined;
exports.uniqueId = uniqueId;
exports.resetIdCounter = resetIdCounter;
exports.internalField = internalField;
exports.isInternalField = isInternalField;
exports.normalizeAngle = normalizeAngle;
exports.keys = exports.stringify = exports.duplicate = exports.deepEqual = void 0;

var _clone = _interopRequireDefault(require("clone"));

var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));

var _fastJsonStableStringify = _interopRequireDefault(require("fast-json-stable-stringify"));

var _vegaUtil = require("vega-util");

var _logical = require("./logical");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const deepEqual = _fastDeepEqual.default;
exports.deepEqual = deepEqual;
const duplicate = _clone.default;
/**
 * Creates an object composed of the picked object properties.
 *
 * var object = {'a': 1, 'b': '2', 'c': 3};
 * pick(object, ['a', 'c']);
 * // → {'a': 1, 'c': 3}
 *
 */

exports.duplicate = duplicate;

function pick(obj, props) {
  const copy = {};

  for (const prop of props) {
    if (obj.hasOwnProperty(prop)) {
      copy[prop] = obj[prop];
    }
  }

  return copy;
}
/**
 * The opposite of _.pick; this method creates an object composed of the own
 * and inherited enumerable string keyed properties of object that are not omitted.
 */


function omit(obj, props) {
  const copy = Object.assign({}, obj);

  for (const prop of props) {
    delete copy[prop];
  }

  return copy;
}
/**
 * Monkey patch Set so that `stringify` produces a string representation of sets.
 */


Set.prototype['toJSON'] = function () {
  return `Set(${[...this].map(x => (0, _fastJsonStableStringify.default)(x)).join(',')})`;
};
/**
 * Converts any object to a string representation that can be consumed by humans.
 */


const stringify = _fastJsonStableStringify.default;
/**
 * Converts any object to a string of limited size, or a number.
 */

exports.stringify = stringify;

function hash(a) {
  if ((0, _vegaUtil.isNumber)(a)) {
    return a;
  }

  const str = (0, _vegaUtil.isString)(a) ? a : (0, _fastJsonStableStringify.default)(a); // short strings can be used as hash directly, longer strings are hashed to reduce memory usage

  if (str.length < 250) {
    return str;
  } // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/


  let h = 0;

  for (let i = 0; i < str.length; i++) {
    const char = str.charCodeAt(i);
    h = (h << 5) - h + char;
    h = h & h; // Convert to 32bit integer
  }

  return h;
}

function isNullOrFalse(x) {
  return x === false || x === null;
}

function contains(array, item) {
  return array.indexOf(item) > -1;
}
/** Returns the array without the elements in item */


function without(array, excludedItems) {
  return array.filter(item => !contains(excludedItems, item));
}

function union(array, other) {
  return array.concat(without(other, array));
}
/**
 * Returns true if any item returns true.
 */


function some(arr, f) {
  let i = 0;

  for (const [k, a] of arr.entries()) {
    if (f(a, k, i++)) {
      return true;
    }
  }

  return false;
}
/**
 * Returns true if all items return true.
 */


function every(arr, f) {
  let i = 0;

  for (const [k, a] of arr.entries()) {
    if (!f(a, k, i++)) {
      return false;
    }
  }

  return true;
}

function flatten(arrays) {
  return [].concat(...arrays);
}

function fill(val, len) {
  const arr = new Array(len);

  for (let i = 0; i < len; ++i) {
    arr[i] = val;
  }

  return arr;
}
/**
 * recursively merges src into dest
 */


function mergeDeep(dest, ...src) {
  for (const s of src) {
    dest = deepMerge_(dest, s);
  }

  return dest;
} // recursively merges src into dest


function deepMerge_(dest, src) {
  if (typeof src !== 'object' || src === null) {
    return dest;
  }

  for (const p in src) {
    if (!src.hasOwnProperty(p)) {
      continue;
    }

    if (src[p] === undefined) {
      continue;
    }

    if (typeof src[p] !== 'object' || (0, _vegaUtil.isArray)(src[p]) || src[p] === null) {
      dest[p] = src[p];
    } else if (typeof dest[p] !== 'object' || dest[p] === null) {
      dest[p] = mergeDeep((0, _vegaUtil.isArray)(src[p].constructor) ? [] : {}, src[p]);
    } else {
      mergeDeep(dest[p], src[p]);
    }
  }

  return dest;
}

function unique(values, f) {
  const results = [];
  const u = {};
  let v;

  for (const val of values) {
    v = f(val);

    if (v in u) {
      continue;
    }

    u[v] = 1;
    results.push(val);
  }

  return results;
}
/**
 * Returns true if the two dictionaries disagree. Applies only to defined values.
 */


function isEqual(dict, other) {
  const dictKeys = keys(dict);
  const otherKeys = keys(other);

  if (dictKeys.length !== otherKeys.length) {
    return false;
  }

  for (const key of dictKeys) {
    if (dict[key] !== other[key]) {
      return false;
    }
  }

  return true;
}

function setEqual(a, b) {
  if (a.size !== b.size) {
    return false;
  }

  for (const e of a) {
    if (!b.has(e)) {
      return false;
    }
  }

  return true;
}

function hasIntersection(a, b) {
  for (const key of a) {
    if (b.has(key)) {
      return true;
    }
  }

  return false;
}

function prefixGenerator(a) {
  const prefixes = new Set();

  for (const x of a) {
    const splitField = (0, _vegaUtil.splitAccessPath)(x); // Wrap every element other than the first in `[]`

    const wrappedWithAccessors = splitField.map((y, i) => i === 0 ? y : `[${y}]`);
    const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));
    computedPrefixes.forEach(y => prefixes.add(y));
  }

  return prefixes;
}

function fieldIntersection(a, b) {
  return hasIntersection(prefixGenerator(a), prefixGenerator(b));
}

function isNumeric(num) {
  return !isNaN(num);
}

function differArray(array, other) {
  if (array.length !== other.length) {
    return true;
  }

  array.sort();
  other.sort();

  for (let i = 0; i < array.length; i++) {
    if (other[i] !== array[i]) {
      return true;
    }
  }

  return false;
} // This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208


const keys = Object.keys;
exports.keys = keys;

function vals(x) {
  const _vals = [];

  for (const k in x) {
    if (x.hasOwnProperty(k)) {
      _vals.push(x[k]);
    }
  }

  return _vals;
}

function entries(x) {
  const _entries = [];

  for (const k in x) {
    if (x.hasOwnProperty(k)) {
      _entries.push({
        key: k,
        value: x[k]
      });
    }
  }

  return _entries;
}

function isBoolean(b) {
  return b === true || b === false;
}
/**
 * Convert a string into a valid variable name
 */


function varName(s) {
  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _
  const alphanumericS = s.replace(/\W/g, '_'); // Add _ if the string has leading numbers.

  return (s.match(/^\d+/) ? '_' : '') + alphanumericS;
}

function logicalExpr(op, cb) {
  if ((0, _logical.isLogicalNot)(op)) {
    return '!(' + logicalExpr(op.not, cb) + ')';
  } else if ((0, _logical.isLogicalAnd)(op)) {
    return '(' + op.and.map(and => logicalExpr(and, cb)).join(') && (') + ')';
  } else if ((0, _logical.isLogicalOr)(op)) {
    return '(' + op.or.map(or => logicalExpr(or, cb)).join(') || (') + ')';
  } else {
    return cb(op);
  }
}
/**
 * Delete nested property of an object, and delete the ancestors of the property if they become empty.
 */


function deleteNestedProperty(obj, orderedProps) {
  if (orderedProps.length === 0) {
    return true;
  }

  const prop = orderedProps.shift();

  if (deleteNestedProperty(obj[prop], orderedProps)) {
    delete obj[prop];
  }

  return keys(obj).length === 0;
}

function titlecase(s) {
  return s.charAt(0).toUpperCase() + s.substr(1);
}
/**
 * Converts a path to an access path with datum.
 * @param path The field name.
 * @param datum The string to use for `datum`.
 */


function accessPathWithDatum(path, datum = 'datum') {
  const pieces = (0, _vegaUtil.splitAccessPath)(path);
  const prefixes = [];

  for (let i = 1; i <= pieces.length; i++) {
    const prefix = `[${pieces.slice(0, i).map(_vegaUtil.stringValue).join('][')}]`;
    prefixes.push(`${datum}${prefix}`);
  }

  return prefixes.join(' && ');
}
/**
 * Return access with datum to the flattened field.
 *
 * @param path The field name.
 * @param datum The string to use for `datum`.
 */


function flatAccessWithDatum(path, datum = 'datum') {
  return `${datum}[${(0, _vegaUtil.stringValue)((0, _vegaUtil.splitAccessPath)(path).join('.'))}]`;
}
/**
 * Replaces path accesses with access to non-nested field.
 * For example, `foo["bar"].baz` becomes `foo\\.bar\\.baz`.
 */


function replacePathInField(path) {
  return `${(0, _vegaUtil.splitAccessPath)(path).map(p => p.replace('.', '\\.')).join('\\.')}`;
}
/**
 * Remove path accesses with access from field.
 * For example, `foo["bar"].baz` becomes `foo.bar.baz`.
 */


function removePathFromField(path) {
  return `${(0, _vegaUtil.splitAccessPath)(path).join('.')}`;
}
/**
 * Count the depth of the path. Returns 1 for fields that are not nested.
 */


function accessPathDepth(path) {
  if (!path) {
    return 0;
  }

  return (0, _vegaUtil.splitAccessPath)(path).length;
}
/**
 * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.
 */


function getFirstDefined(...args) {
  for (const arg of args) {
    if (arg !== undefined) {
      return arg;
    }
  }

  return undefined;
} // variable used to generate id


let idCounter = 42;
/**
 * Returns a new random id every time it gets called.
 *
 * Has side effect!
 */

function uniqueId(prefix) {
  const id = ++idCounter;
  return prefix ? String(prefix) + id : id;
}
/**
 * Resets the id counter used in uniqueId. This can be useful for testing.
 */


function resetIdCounter() {
  idCounter = 42;
}

function internalField(name) {
  return isInternalField(name) ? name : `__${name}`;
}

function isInternalField(name) {
  return name.indexOf('__') === 0;
}
/**
 * Normalize angle to be within [0,360).
 */


function normalizeAngle(angle) {
  return (angle % 360 + 360) % 360;
}
},{"clone":"node_modules/clone/clone.js","fast-deep-equal":"node_modules/fast-deep-equal/index.js","fast-json-stable-stringify":"node_modules/fast-json-stable-stringify/index.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./logical":"node_modules/vega-lite/build/src/logical.js"}],"node_modules/vega-lite/build/src/mark.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isMark = isMark;
exports.isPathMark = isPathMark;
exports.isMarkDef = isMarkDef;
exports.isPrimitiveMark = isPrimitiveMark;
exports.getMarkType = getMarkType;
exports.defaultTickConfig = exports.defaultRectConfig = exports.defaultBarConfig = exports.defaultMarkConfig = exports.VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = exports.VL_ONLY_MARK_CONFIG_PROPERTIES = exports.FILL_STROKE_CONFIG = exports.FILL_CONFIG = exports.STROKE_CONFIG = exports.PRIMITIVE_MARKS = exports.GEOSHAPE = exports.SQUARE = exports.CIRCLE = exports.TRAIL = exports.TICK = exports.TEXT = exports.RULE = exports.RECT = exports.POINT = exports.LINE = exports.BAR = exports.AREA = void 0;

var _vegaUtil = require("vega-util");

var _util = require("./util");

const AREA = 'area';
exports.AREA = AREA;
const BAR = 'bar';
exports.BAR = BAR;
const LINE = 'line';
exports.LINE = LINE;
const POINT = 'point';
exports.POINT = POINT;
const RECT = 'rect';
exports.RECT = RECT;
const RULE = 'rule';
exports.RULE = RULE;
const TEXT = 'text';
exports.TEXT = TEXT;
const TICK = 'tick';
exports.TICK = TICK;
const TRAIL = 'trail';
exports.TRAIL = TRAIL;
const CIRCLE = 'circle';
exports.CIRCLE = CIRCLE;
const SQUARE = 'square';
exports.SQUARE = SQUARE;
const GEOSHAPE = 'geoshape'; // Using mapped type to declare index, ensuring we always have all marks when we add more.

exports.GEOSHAPE = GEOSHAPE;
const MARK_INDEX = {
  area: 1,
  bar: 1,
  line: 1,
  point: 1,
  text: 1,
  tick: 1,
  trail: 1,
  rect: 1,
  geoshape: 1,
  rule: 1,
  circle: 1,
  square: 1
};

function isMark(m) {
  return !!MARK_INDEX[m];
}

function isPathMark(m) {
  return (0, _util.contains)(['line', 'area', 'trail'], m);
}

const PRIMITIVE_MARKS = (0, _util.keys)(MARK_INDEX);
exports.PRIMITIVE_MARKS = PRIMITIVE_MARKS;

function isMarkDef(mark) {
  return mark['type'];
}

const PRIMITIVE_MARK_INDEX = (0, _vegaUtil.toSet)(PRIMITIVE_MARKS);

function isPrimitiveMark(mark) {
  const markType = isMarkDef(mark) ? mark.type : mark;
  return markType in PRIMITIVE_MARK_INDEX;
}

const STROKE_CONFIG = ['stroke', 'strokeWidth', 'strokeDash', 'strokeDashOffset', 'strokeOpacity', 'strokeJoin', 'strokeMiterLimit'];
exports.STROKE_CONFIG = STROKE_CONFIG;
const FILL_CONFIG = ['fill', 'fillOpacity'];
exports.FILL_CONFIG = FILL_CONFIG;
const FILL_STROKE_CONFIG = [].concat(STROKE_CONFIG, FILL_CONFIG);
exports.FILL_STROKE_CONFIG = FILL_STROKE_CONFIG;
const VL_ONLY_MARK_CONFIG_PROPERTIES = ['filled', 'color', 'tooltip'];
exports.VL_ONLY_MARK_CONFIG_PROPERTIES = VL_ONLY_MARK_CONFIG_PROPERTIES;
const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {
  area: ['line', 'point'],
  bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],
  rect: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],
  line: ['point'],
  text: ['shortTimeLabels'],
  tick: ['bandSize', 'thickness']
};
exports.VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX;
const defaultMarkConfig = {
  color: '#4c78a8',
  tooltip: {
    content: 'encoding'
  }
};
exports.defaultMarkConfig = defaultMarkConfig;
const DEFAULT_RECT_BAND_SIZE = 5;
const defaultBarConfig = {
  binSpacing: 1,
  continuousBandSize: DEFAULT_RECT_BAND_SIZE
};
exports.defaultBarConfig = defaultBarConfig;
const defaultRectConfig = {
  binSpacing: 0,
  continuousBandSize: DEFAULT_RECT_BAND_SIZE
};
exports.defaultRectConfig = defaultRectConfig;
const defaultTickConfig = {
  thickness: 1
};
exports.defaultTickConfig = defaultTickConfig;

function getMarkType(m) {
  return isMarkDef(m) ? m.type : m;
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/spec/unit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isUnitSpec = isUnitSpec;

function isUnitSpec(spec) {
  return !!spec['mark'];
}
},{}],"node_modules/vega-lite/build/src/compositemark/base.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompositeMarkNormalizer = void 0;

var _mark = require("../mark");

var _unit = require("../spec/unit");

class CompositeMarkNormalizer {
  constructor(name, run) {
    this.name = name;
    this.run = run;
  }

  hasMatchingType(spec) {
    if ((0, _unit.isUnitSpec)(spec)) {
      return (0, _mark.getMarkType)(spec.mark) === this.name;
    }

    return false;
  }

}

exports.CompositeMarkNormalizer = CompositeMarkNormalizer;
},{"../mark":"node_modules/vega-lite/build/src/mark.js","../spec/unit":"node_modules/vega-lite/build/src/spec/unit.js"}],"node_modules/vega-lite/build/src/aggregate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isArgminDef = isArgminDef;
exports.isArgmaxDef = isArgmaxDef;
exports.isAggregateOp = isAggregateOp;
exports.isCountingAggregateOp = isCountingAggregateOp;
exports.isMinMaxOp = isMinMaxOp;
exports.SHARED_DOMAIN_OP_INDEX = exports.SHARED_DOMAIN_OPS = exports.SUM_OPS = exports.COUNTING_OPS = exports.AGGREGATE_OPS = void 0;

var _vegaUtil = require("vega-util");

var _util = require("./util");

const AGGREGATE_OP_INDEX = {
  argmax: 1,
  argmin: 1,
  average: 1,
  count: 1,
  distinct: 1,
  max: 1,
  mean: 1,
  median: 1,
  min: 1,
  missing: 1,
  q1: 1,
  q3: 1,
  ci0: 1,
  ci1: 1,
  stderr: 1,
  stdev: 1,
  stdevp: 1,
  sum: 1,
  valid: 1,
  values: 1,
  variance: 1,
  variancep: 1
};

function isArgminDef(a) {
  return !!a && !!a['argmin'];
}

function isArgmaxDef(a) {
  return !!a && !!a['argmax'];
}

const AGGREGATE_OPS = (0, _util.keys)(AGGREGATE_OP_INDEX);
exports.AGGREGATE_OPS = AGGREGATE_OPS;

function isAggregateOp(a) {
  return (0, _vegaUtil.isString)(a) && !!AGGREGATE_OP_INDEX[a];
}

const COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];
exports.COUNTING_OPS = COUNTING_OPS;

function isCountingAggregateOp(aggregate) {
  return aggregate && (0, _vegaUtil.isString)(aggregate) && (0, _util.contains)(COUNTING_OPS, aggregate);
}

function isMinMaxOp(aggregate) {
  return aggregate && (0, _vegaUtil.isString)(aggregate) && (0, _util.contains)(['min', 'max'], aggregate);
}
/** Additive-based aggregation operations.  These can be applied to stack. */


const SUM_OPS = ['count', 'sum', 'distinct', 'valid', 'missing'];
/**
 * Aggregation operators that always produce values within the range [domainMin, domainMax].
 */

exports.SUM_OPS = SUM_OPS;
const SHARED_DOMAIN_OPS = ['mean', 'average', 'median', 'q1', 'q3', 'min', 'max'];
exports.SHARED_DOMAIN_OPS = SHARED_DOMAIN_OPS;
const SHARED_DOMAIN_OP_INDEX = (0, _vegaUtil.toSet)(SHARED_DOMAIN_OPS);
exports.SHARED_DOMAIN_OP_INDEX = SHARED_DOMAIN_OP_INDEX;
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/channel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPositionChannel = isPositionChannel;
exports.getPositionChannelFromLatLong = getPositionChannelFromLatLong;
exports.isGeoPositionChannel = isGeoPositionChannel;
exports.isColorChannel = isColorChannel;
exports.isSingleDefUnitChannel = isSingleDefUnitChannel;
exports.isChannel = isChannel;
exports.isSecondaryRangeChannel = isSecondaryRangeChannel;
exports.getMainRangeChannel = getMainRangeChannel;
exports.isNonPositionScaleChannel = isNonPositionScaleChannel;
exports.supportLegend = supportLegend;
exports.isScaleChannel = isScaleChannel;
exports.supportMark = supportMark;
exports.rangeType = rangeType;
exports.SCALE_CHANNELS = exports.NONPOSITION_SCALE_CHANNELS = exports.POSITION_SCALE_CHANNELS = exports.NONPOSITION_CHANNELS = exports.UNIT_CHANNELS = exports.SECONDARY_RANGE_CHANNEL = exports.SINGLE_DEF_UNIT_CHANNELS = exports.SINGLE_DEF_CHANNELS = exports.CHANNELS = exports.FACET_CHANNELS = exports.GEOPOSITION_CHANNELS = exports.HREF = exports.TOOLTIP = exports.KEY = exports.DETAIL = exports.ORDER = exports.TEXT = exports.STROKEWIDTH = exports.STROKEOPACITY = exports.FILLOPACITY = exports.OPACITY = exports.SIZE = exports.SHAPE = exports.STROKE = exports.FILL = exports.COLOR = exports.LONGITUDE2 = exports.LATITUDE2 = exports.LONGITUDE = exports.LATITUDE = exports.Y2 = exports.X2 = exports.Y = exports.X = exports.FACET = exports.COLUMN = exports.ROW = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _util = require("./util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*
 * Constants and utilities for encoding channels (Visual variables)
 * such as 'x', 'y', 'color'.
 */
// Facet
const ROW = 'row';
exports.ROW = ROW;
const COLUMN = 'column';
exports.COLUMN = COLUMN;
const FACET = 'facet'; // Position

exports.FACET = FACET;
const X = 'x';
exports.X = X;
const Y = 'y';
exports.Y = Y;
const X2 = 'x2';
exports.X2 = X2;
const Y2 = 'y2'; // Geo Position

exports.Y2 = Y2;
const LATITUDE = 'latitude';
exports.LATITUDE = LATITUDE;
const LONGITUDE = 'longitude';
exports.LONGITUDE = LONGITUDE;
const LATITUDE2 = 'latitude2';
exports.LATITUDE2 = LATITUDE2;
const LONGITUDE2 = 'longitude2'; // Mark property with scale

exports.LONGITUDE2 = LONGITUDE2;
const COLOR = 'color';
exports.COLOR = COLOR;
const FILL = 'fill';
exports.FILL = FILL;
const STROKE = 'stroke';
exports.STROKE = STROKE;
const SHAPE = 'shape';
exports.SHAPE = SHAPE;
const SIZE = 'size';
exports.SIZE = SIZE;
const OPACITY = 'opacity';
exports.OPACITY = OPACITY;
const FILLOPACITY = 'fillOpacity';
exports.FILLOPACITY = FILLOPACITY;
const STROKEOPACITY = 'strokeOpacity';
exports.STROKEOPACITY = STROKEOPACITY;
const STROKEWIDTH = 'strokeWidth'; // Non-scale channel

exports.STROKEWIDTH = STROKEWIDTH;
const TEXT = 'text';
exports.TEXT = TEXT;
const ORDER = 'order';
exports.ORDER = ORDER;
const DETAIL = 'detail';
exports.DETAIL = DETAIL;
const KEY = 'key';
exports.KEY = KEY;
const TOOLTIP = 'tooltip';
exports.TOOLTIP = TOOLTIP;
const HREF = 'href';
exports.HREF = HREF;
const POSITION_CHANNEL_INDEX = {
  x: 1,
  y: 1,
  x2: 1,
  y2: 1
};

function isPositionChannel(c) {
  return c in POSITION_CHANNEL_INDEX;
}

function getPositionChannelFromLatLong(channel) {
  switch (channel) {
    case LATITUDE:
      return 'y';

    case LATITUDE2:
      return 'y2';

    case LONGITUDE:
      return 'x';

    case LONGITUDE2:
      return 'x2';
  }
}

const GEOPOSITION_CHANNEL_INDEX = {
  longitude: 1,
  longitude2: 1,
  latitude: 1,
  latitude2: 1
};

function isGeoPositionChannel(c) {
  return c in GEOPOSITION_CHANNEL_INDEX;
}

const GEOPOSITION_CHANNELS = (0, _util.keys)(GEOPOSITION_CHANNEL_INDEX);
exports.GEOPOSITION_CHANNELS = GEOPOSITION_CHANNELS;
const UNIT_CHANNEL_INDEX = Object.assign({}, POSITION_CHANNEL_INDEX, GEOPOSITION_CHANNEL_INDEX, {
  // color
  color: 1,
  fill: 1,
  stroke: 1,
  // other non-position with scale
  opacity: 1,
  fillOpacity: 1,
  strokeOpacity: 1,
  strokeWidth: 1,
  size: 1,
  shape: 1,
  // channels without scales
  order: 1,
  text: 1,
  detail: 1,
  key: 1,
  tooltip: 1,
  href: 1
});

function isColorChannel(channel) {
  return channel === 'color' || channel === 'fill' || channel === 'stroke';
}

const FACET_CHANNEL_INDEX = {
  row: 1,
  column: 1,
  facet: 1
};
const FACET_CHANNELS = (0, _util.keys)(FACET_CHANNEL_INDEX);
exports.FACET_CHANNELS = FACET_CHANNELS;
const CHANNEL_INDEX = Object.assign({}, UNIT_CHANNEL_INDEX, FACET_CHANNEL_INDEX);
const CHANNELS = (0, _util.keys)(CHANNEL_INDEX);
exports.CHANNELS = CHANNELS;

const {
  order: _o,
  detail: _d
} = CHANNEL_INDEX,
      SINGLE_DEF_CHANNEL_INDEX = tslib_1.__rest(CHANNEL_INDEX, ["order", "detail"]);

const {
  order: _o1,
  detail: _d1,
  row: _r,
  column: _c,
  facet: _f
} = CHANNEL_INDEX,
      SINGLE_DEF_UNIT_CHANNEL_INDEX = tslib_1.__rest(CHANNEL_INDEX, ["order", "detail", "row", "column", "facet"]);
/**
 * Channels that cannot have an array of channelDef.
 * model.fieldDef, getFieldDef only work for these channels.
 *
 * (The only two channels that can have an array of channelDefs are "detail" and "order".
 * Since there can be multiple fieldDefs for detail and order, getFieldDef/model.fieldDef
 * are not applicable for them.  Similarly, selection projection won't work with "detail" and "order".)
 */


const SINGLE_DEF_CHANNELS = (0, _util.keys)(SINGLE_DEF_CHANNEL_INDEX);
exports.SINGLE_DEF_CHANNELS = SINGLE_DEF_CHANNELS;
const SINGLE_DEF_UNIT_CHANNELS = (0, _util.keys)(SINGLE_DEF_UNIT_CHANNEL_INDEX); // export type SingleDefChannel = SingleDefUnitChannel | 'row' | 'column' | 'facet';

exports.SINGLE_DEF_UNIT_CHANNELS = SINGLE_DEF_UNIT_CHANNELS;

function isSingleDefUnitChannel(str) {
  return !!SINGLE_DEF_UNIT_CHANNEL_INDEX[str];
}

function isChannel(str) {
  return !!CHANNEL_INDEX[str];
}

const SECONDARY_RANGE_CHANNEL = ['x2', 'y2', 'latitude2', 'longitude2'];
exports.SECONDARY_RANGE_CHANNEL = SECONDARY_RANGE_CHANNEL;

function isSecondaryRangeChannel(c) {
  const main = getMainRangeChannel(c);
  return main !== c;
}
/**
 * Get the main channel for a range channel. E.g. `x` for `x2`.
 */


function getMainRangeChannel(channel) {
  switch (channel) {
    case 'x2':
      return 'x';

    case 'y2':
      return 'y';

    case 'latitude2':
      return 'latitude';

    case 'longitude2':
      return 'longitude';
  }

  return channel;
} // CHANNELS without COLUMN, ROW


const UNIT_CHANNELS = (0, _util.keys)(UNIT_CHANNEL_INDEX); // NONPOSITION_CHANNELS = UNIT_CHANNELS without X, Y, X2, Y2;

exports.UNIT_CHANNELS = UNIT_CHANNELS;

const {
  x: _x,
  y: _y,
  // x2 and y2 share the same scale as x and y
  x2: _x2,
  y2: _y2,
  latitude: _latitude,
  longitude: _longitude,
  latitude2: _latitude2,
  longitude2: _longitude2
} = UNIT_CHANNEL_INDEX,
      // The rest of unit channels then have scale
NONPOSITION_CHANNEL_INDEX = tslib_1.__rest(UNIT_CHANNEL_INDEX, ["x", "y", "x2", "y2", "latitude", "longitude", "latitude2", "longitude2"]);

const NONPOSITION_CHANNELS = (0, _util.keys)(NONPOSITION_CHANNEL_INDEX); // POSITION_SCALE_CHANNELS = X and Y;

exports.NONPOSITION_CHANNELS = NONPOSITION_CHANNELS;
const POSITION_SCALE_CHANNEL_INDEX = {
  x: 1,
  y: 1
};
const POSITION_SCALE_CHANNELS = (0, _util.keys)(POSITION_SCALE_CHANNEL_INDEX); // NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y

exports.POSITION_SCALE_CHANNELS = POSITION_SCALE_CHANNELS;

const {
  // x2 and y2 share the same scale as x and y
  // text and tooltip have format instead of scale,
  // href has neither format, nor scale
  text: _t,
  tooltip: _tt,
  href: _hr,
  // detail and order have no scale
  detail: _dd,
  key: _k,
  order: _oo
} = NONPOSITION_CHANNEL_INDEX,
      NONPOSITION_SCALE_CHANNEL_INDEX = tslib_1.__rest(NONPOSITION_CHANNEL_INDEX, ["text", "tooltip", "href", "detail", "key", "order"]);

const NONPOSITION_SCALE_CHANNELS = (0, _util.keys)(NONPOSITION_SCALE_CHANNEL_INDEX);
exports.NONPOSITION_SCALE_CHANNELS = NONPOSITION_SCALE_CHANNELS;

function isNonPositionScaleChannel(channel) {
  return !!NONPOSITION_CHANNEL_INDEX[channel];
}
/**
 * @returns whether Vega supports legends for a particular channel
 */


function supportLegend(channel) {
  switch (channel) {
    case COLOR:
    case FILL:
    case STROKE:
    case SIZE:
    case SHAPE:
    case OPACITY:
    case STROKEWIDTH:
      return true;

    case FILLOPACITY:
    case STROKEOPACITY:
      return false;
  }
} // Declare SCALE_CHANNEL_INDEX


const SCALE_CHANNEL_INDEX = Object.assign({}, POSITION_SCALE_CHANNEL_INDEX, NONPOSITION_SCALE_CHANNEL_INDEX);
/** List of channels with scales */

const SCALE_CHANNELS = (0, _util.keys)(SCALE_CHANNEL_INDEX);
exports.SCALE_CHANNELS = SCALE_CHANNELS;

function isScaleChannel(channel) {
  return !!SCALE_CHANNEL_INDEX[channel];
}
/**
 * Return whether a channel supports a particular mark type.
 * @param channel  channel name
 * @param mark the mark type
 * @return whether the mark supports the channel
 */


function supportMark(channel, mark) {
  return getSupportedMark(channel)[mark];
}

const ALL_MARKS = {
  // all marks
  area: 'always',
  bar: 'always',
  circle: 'always',
  geoshape: 'always',
  line: 'always',
  rule: 'always',
  point: 'always',
  rect: 'always',
  square: 'always',
  trail: 'always',
  text: 'always',
  tick: 'always'
};

const {
  geoshape: _g
} = ALL_MARKS,
      ALL_MARKS_EXCEPT_GEOSHAPE = tslib_1.__rest(ALL_MARKS, ["geoshape"]);
/**
 * Return a dictionary showing whether a channel supports mark type.
 * @param channel
 * @return A dictionary mapping mark types to 'always', 'binned', or undefined
 */


function getSupportedMark(channel) {
  switch (channel) {
    case COLOR:
    case FILL:
    case STROKE: // falls through

    case DETAIL:
    case KEY:
    case TOOLTIP:
    case HREF:
    case ORDER: // TODO: revise (order might not support rect, which is not stackable?)

    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY:
    case STROKEWIDTH: // falls through

    case FACET:
    case ROW: // falls through

    case COLUMN:
      return ALL_MARKS;

    case X:
    case Y:
    case LATITUDE:
    case LONGITUDE:
      // all marks except geoshape. geoshape does not use X, Y -- it uses a projection
      return ALL_MARKS_EXCEPT_GEOSHAPE;

    case X2:
    case Y2:
    case LATITUDE2:
    case LONGITUDE2:
      return {
        rule: 'always',
        bar: 'always',
        rect: 'always',
        area: 'always',
        circle: 'binned',
        point: 'binned',
        square: 'binned',
        tick: 'binned',
        line: 'binned',
        trail: 'binned'
      };

    case SIZE:
      return {
        point: 'always',
        tick: 'always',
        rule: 'always',
        circle: 'always',
        square: 'always',
        bar: 'always',
        text: 'always',
        line: 'always',
        trail: 'always'
      };

    case SHAPE:
      return {
        point: 'always',
        geoshape: 'always'
      };

    case TEXT:
      return {
        text: 'always'
      };
  }
}

function rangeType(channel) {
  switch (channel) {
    case X:
    case Y:
    case SIZE:
    case STROKEWIDTH:
    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY: // X2 and Y2 use X and Y scales, so they similarly have continuous range. [falls through]

    case X2:
    case Y2:
      return undefined;

    case FACET:
    case ROW:
    case COLUMN:
    case SHAPE: // TEXT, TOOLTIP, and HREF have no scale but have discrete output [falls through]

    case TEXT:
    case TOOLTIP:
    case HREF:
      return 'discrete';
    // Color can be either continuous or discrete, depending on scale type.

    case COLOR:
    case FILL:
    case STROKE:
      return 'flexible';
    // No scale, no range type.

    case LATITUDE:
    case LONGITUDE:
    case LATITUDE2:
    case LONGITUDE2:
    case DETAIL:
    case KEY:
    case ORDER:
      return undefined;
  }
  /* istanbul ignore next: should never reach here. */


  throw new Error('rangeType not implemented for ' + channel);
}
},{"tslib":"node_modules/tslib/tslib.es6.js","./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/log/message.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cannotProjectOnChannelWithoutField = cannotProjectOnChannelWithoutField;
exports.nearestNotSupportForContinuous = nearestNotSupportForContinuous;
exports.selectionNotSupported = selectionNotSupported;
exports.selectionNotFound = selectionNotFound;
exports.noSuchRepeatedValue = noSuchRepeatedValue;
exports.columnsNotSupportByRowCol = columnsNotSupportByRowCol;
exports.unrecognizedParse = unrecognizedParse;
exports.differentParse = differentParse;
exports.invalidTransformIgnored = invalidTransformIgnored;
exports.encodingOverridden = encodingOverridden;
exports.projectionOverridden = projectionOverridden;
exports.primitiveChannelDef = primitiveChannelDef;
exports.invalidFieldType = invalidFieldType;
exports.nonZeroScaleUsedWithLengthMark = nonZeroScaleUsedWithLengthMark;
exports.invalidFieldTypeForCountAggregate = invalidFieldTypeForCountAggregate;
exports.invalidAggregate = invalidAggregate;
exports.missingFieldType = missingFieldType;
exports.droppingColor = droppingColor;
exports.emptyFieldDef = emptyFieldDef;
exports.latLongDeprecated = latLongDeprecated;
exports.incompatibleChannel = incompatibleChannel;
exports.invalidEncodingChannel = invalidEncodingChannel;
exports.facetChannelShouldBeDiscrete = facetChannelShouldBeDiscrete;
exports.facetChannelDropped = facetChannelDropped;
exports.discreteChannelCannotEncode = discreteChannelCannotEncode;
exports.lineWithRange = lineWithRange;
exports.orientOverridden = orientOverridden;
exports.cannotUseScalePropertyWithNonColor = cannotUseScalePropertyWithNonColor;
exports.unaggregateDomainHasNoEffectForRawField = unaggregateDomainHasNoEffectForRawField;
exports.unaggregateDomainWithNonSharedDomainOp = unaggregateDomainWithNonSharedDomainOp;
exports.unaggregatedDomainWithLogScale = unaggregatedDomainWithLogScale;
exports.cannotApplySizeToNonOrientedMark = cannotApplySizeToNonOrientedMark;
exports.rangeStepDropped = rangeStepDropped;
exports.scaleTypeNotWorkWithChannel = scaleTypeNotWorkWithChannel;
exports.scaleTypeNotWorkWithFieldDef = scaleTypeNotWorkWithFieldDef;
exports.scalePropertyNotWorkWithScaleType = scalePropertyNotWorkWithScaleType;
exports.scaleTypeNotWorkWithMark = scaleTypeNotWorkWithMark;
exports.mergeConflictingProperty = mergeConflictingProperty;
exports.mergeConflictingDomainProperty = mergeConflictingDomainProperty;
exports.independentScaleMeansIndependentGuide = independentScaleMeansIndependentGuide;
exports.domainSortDropped = domainSortDropped;
exports.cannotStackRangedMark = cannotStackRangedMark;
exports.cannotStackNonLinearScale = cannotStackNonLinearScale;
exports.stackNonSummativeAggregate = stackNonSummativeAggregate;
exports.invalidTimeUnit = invalidTimeUnit;
exports.dayReplacedWithDate = dayReplacedWithDate;
exports.droppedDay = droppedDay;
exports.errorBarCenterAndExtentAreNotNeeded = errorBarCenterAndExtentAreNotNeeded;
exports.errorBarCenterIsUsedWithWrongExtent = errorBarCenterIsUsedWithWrongExtent;
exports.errorBarContinuousAxisHasCustomizedAggregate = errorBarContinuousAxisHasCustomizedAggregate;
exports.errorBarCenterIsNotNeeded = errorBarCenterIsNotNeeded;
exports.errorBand1DNotSupport = errorBand1DNotSupport;
exports.channelRequiredForBinned = channelRequiredForBinned;
exports.domainRequiredForThresholdScale = domainRequiredForThresholdScale;
exports.INVALID_CHANNEL_FOR_AXIS = exports.MORE_THAN_ONE_SORT = exports.UNABLE_TO_MERGE_DOMAINS = exports.CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = exports.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL = exports.LINE_WITH_VARYING_SIZE = exports.NO_FIELDS_NEEDS_AS = exports.REPEAT_CANNOT_SHARE_AXIS = exports.CONCAT_CANNOT_SHARE_AXIS = exports.NO_INIT_SCALE_BINDINGS = exports.SCALE_BINDINGS_CONTINUOUS = exports.CANNOT_FIX_RANGE_STEP_WITH_FIT = exports.FIT_NON_SINGLE = exports.INVALID_SPEC = void 0;

var _util = require("../util");

/**
 * Collection of all Vega-Lite Error Messages
 */
const INVALID_SPEC = 'Invalid spec'; // FIT

exports.INVALID_SPEC = INVALID_SPEC;
const FIT_NON_SINGLE = 'Autosize "fit" only works for single views and layered views.';
exports.FIT_NON_SINGLE = FIT_NON_SINGLE;
const CANNOT_FIX_RANGE_STEP_WITH_FIT = 'Cannot use a fixed value of "rangeStep" when "autosize" is "fit".'; // SELECTION

exports.CANNOT_FIX_RANGE_STEP_WITH_FIT = CANNOT_FIX_RANGE_STEP_WITH_FIT;

function cannotProjectOnChannelWithoutField(channel) {
  return `Cannot project a selection on encoding channel "${channel}", which has no field.`;
}

function nearestNotSupportForContinuous(mark) {
  return `The "nearest" transform is not supported for ${mark} marks.`;
}

function selectionNotSupported(mark) {
  return `Selection not supported for ${mark} yet`;
}

function selectionNotFound(name) {
  return `Cannot find a selection named "${name}"`;
}

const SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';
exports.SCALE_BINDINGS_CONTINUOUS = SCALE_BINDINGS_CONTINUOUS;
const NO_INIT_SCALE_BINDINGS = 'Selections bound to scales cannot be separately initialized.'; // REPEAT

exports.NO_INIT_SCALE_BINDINGS = NO_INIT_SCALE_BINDINGS;

function noSuchRepeatedValue(field) {
  return `Unknown repeated value "${field}".`;
}

function columnsNotSupportByRowCol(type) {
  return `The "columns" property cannot be used when "${type}" has nested row/column.`;
} // CONCAT


const CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated views yet (https://github.com/vega/vega-lite/issues/2415).'; // REPEAT

exports.CONCAT_CANNOT_SHARE_AXIS = CONCAT_CANNOT_SHARE_AXIS;
const REPEAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in repeated views yet (https://github.com/vega/vega-lite/issues/2415).'; // DATA

exports.REPEAT_CANNOT_SHARE_AXIS = REPEAT_CANNOT_SHARE_AXIS;

function unrecognizedParse(p) {
  return `Unrecognized parse "${p}".`;
}

function differentParse(field, local, ancestor) {
  return `An ancestor parsed field "${field}" as ${ancestor} but a child wants to parse the field as ${local}.`;
} // TRANSFORMS


function invalidTransformIgnored(transform) {
  return `Ignoring an invalid transform: ${(0, _util.stringify)(transform)}.`;
}

const NO_FIELDS_NEEDS_AS = 'If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the data from the secondary source.'; // ENCODING & FACET

exports.NO_FIELDS_NEEDS_AS = NO_FIELDS_NEEDS_AS;

function encodingOverridden(channels) {
  return `Layer's shared ${channels.join(',')} channel ${channels.length === 1 ? 'is' : 'are'} overriden`;
}

function projectionOverridden(opt) {
  const {
    parentProjection,
    projection
  } = opt;
  return `Layer's shared projection ${(0, _util.stringify)(parentProjection)} is overridden by a child projection ${(0, _util.stringify)(projection)}.`;
}

function primitiveChannelDef(channel, type, value) {
  return `Channel ${channel} is a ${type}. Converted to {value: ${(0, _util.stringify)(value)}}.`;
}

function invalidFieldType(type) {
  return `Invalid field type "${type}"`;
}

function nonZeroScaleUsedWithLengthMark(mark, channel, opt) {
  const scaleText = opt.scaleType ? `${opt.scaleType} scale` : opt.zeroFalse ? 'scale with zero=false' : 'scale with custom domain that excludes zero';
  return `A ${scaleText} is used to encode ${mark}'s ${channel}. This can be misleading as the ${channel === 'x' ? 'width' : 'height'} of the ${mark} can be arbitrary based on the scale domain. You may want to use point mark instead.`;
}

function invalidFieldTypeForCountAggregate(type, aggregate) {
  return `Invalid field type "${type}" for aggregate: "${aggregate}", using "quantitative" instead.`;
}

function invalidAggregate(aggregate) {
  return `Invalid aggregation operator "${aggregate}"`;
}

function missingFieldType(channel, newType) {
  return `Missing type for channel "${channel}", using "${newType}" instead.`;
}

function droppingColor(type, opt) {
  const {
    fill,
    stroke
  } = opt;
  return `Dropping color ${type} as the plot also has ` + (fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke');
}

function emptyFieldDef(fieldDef, channel) {
  return `Dropping ${(0, _util.stringify)(fieldDef)} from channel "${channel}" since it does not contain data field or value.`;
}

function latLongDeprecated(channel, type, newChannel) {
  return `${channel}-encoding with type ${type} is deprecated. Replacing with ${newChannel}-encoding.`;
}

const LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';
exports.LINE_WITH_VARYING_SIZE = LINE_WITH_VARYING_SIZE;

function incompatibleChannel(channel, markOrFacet, when) {
  return `${channel} dropped as it is incompatible with "${markOrFacet}"${when ? ` when ${when}` : ''}.`;
}

function invalidEncodingChannel(channel) {
  return `${channel}-encoding is dropped as ${channel} is not a valid encoding channel.`;
}

function facetChannelShouldBeDiscrete(channel) {
  return `${channel} encoding should be discrete (ordinal / nominal / binned).`;
}

function facetChannelDropped(channels) {
  return `Facet encoding dropped as ${channels.join(' and ')} ${channels.length > 1 ? 'are' : 'is'} also specified.`;
}

function discreteChannelCannotEncode(channel, type) {
  return `Using discrete channel "${channel}" to encode "${type}" field can be misleading as it does not encode ${type === 'ordinal' ? 'order' : 'magnitude'}.`;
} // Mark


const BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL = 'Bar mark should not be used with point scale when rangeStep is null. Please use band scale instead.';
exports.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL = BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL;

function lineWithRange(hasX2, hasY2) {
  const channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';
  return `Line mark is for continuous lines and thus cannot be used with ${channels}. We will use the rule mark (line segments) instead.`;
}

function orientOverridden(original, actual) {
  return `Specified orient "${original}" overridden with "${actual}"`;
} // SCALE


const CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = 'custom domain scale cannot be unioned with default field-based domain';
exports.CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN;

function cannotUseScalePropertyWithNonColor(prop) {
  return `Cannot use the scale property "${prop}" with non-color channel.`;
}

function unaggregateDomainHasNoEffectForRawField(fieldDef) {
  return `Using unaggregated domain with raw field has no effect (${(0, _util.stringify)(fieldDef)}).`;
}

function unaggregateDomainWithNonSharedDomainOp(aggregate) {
  return `Unaggregated domain not applicable for "${aggregate}" since it produces values outside the origin domain of the source data.`;
}

function unaggregatedDomainWithLogScale(fieldDef) {
  return `Unaggregated domain is currently unsupported for log scale (${(0, _util.stringify)(fieldDef)}).`;
}

function cannotApplySizeToNonOrientedMark(mark) {
  return `Cannot apply size to non-oriented mark "${mark}".`;
}

function rangeStepDropped(channel) {
  return `rangeStep for "${channel}" is dropped as top-level ${channel === 'x' ? 'width' : 'height'} is provided.`;
}

function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {
  return `Channel "${channel}" does not work with "${scaleType}" scale. We are using "${defaultScaleType}" scale instead.`;
}

function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {
  return `FieldDef does not work with "${scaleType}" scale. We are using "${defaultScaleType}" scale instead.`;
}

function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {
  return `${channel}-scale's "${propName}" is dropped as it does not work with ${scaleType} scale.`;
}

function scaleTypeNotWorkWithMark(mark, scaleType) {
  return `Scale type "${scaleType}" does not work with mark "${mark}".`;
}

function mergeConflictingProperty(property, propertyOf, v1, v2) {
  return `Conflicting ${propertyOf.toString()} property "${property.toString()}" (${(0, _util.stringify)(v1)} and ${(0, _util.stringify)(v2)}).  Using ${(0, _util.stringify)(v1)}.`;
}

function mergeConflictingDomainProperty(property, propertyOf, v1, v2) {
  return `Conflicting ${propertyOf.toString()} property "${property.toString()}" (${(0, _util.stringify)(v1)} and ${(0, _util.stringify)(v2)}).  Using the union of the two domains.`;
}

function independentScaleMeansIndependentGuide(channel) {
  return `Setting the scale to be independent for "${channel}" means we also have to set the guide (axis or legend) to be independent.`;
}

function domainSortDropped(sort) {
  return `Dropping sort property ${(0, _util.stringify)(sort)} as unioned domains only support boolean or op 'count'.`;
}

const UNABLE_TO_MERGE_DOMAINS = 'Unable to merge domains';
exports.UNABLE_TO_MERGE_DOMAINS = UNABLE_TO_MERGE_DOMAINS;
const MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.'; // AXIS

exports.MORE_THAN_ONE_SORT = MORE_THAN_ONE_SORT;
const INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.'; // STACK

exports.INVALID_CHANNEL_FOR_AXIS = INVALID_CHANNEL_FOR_AXIS;

function cannotStackRangedMark(channel) {
  return `Cannot stack "${channel}" if there is already "${channel}2"`;
}

function cannotStackNonLinearScale(scaleType) {
  return `Cannot stack non-linear scale (${scaleType})`;
}

function stackNonSummativeAggregate(aggregate) {
  return `Stacking is applied even though the aggregate function is non-summative ("${aggregate}")`;
} // TIMEUNIT


function invalidTimeUnit(unitName, value) {
  return `Invalid ${unitName}: ${(0, _util.stringify)(value)}`;
}

function dayReplacedWithDate(fullTimeUnit) {
  return `Time unit "${fullTimeUnit}" is not supported. We are replacing it with ${fullTimeUnit.replace('day', 'date')}.`;
}

function droppedDay(d) {
  return `Dropping day from datetime ${(0, _util.stringify)(d)} as day cannot be combined with other units.`;
}

function errorBarCenterAndExtentAreNotNeeded(center, extent) {
  return `${extent ? 'extent ' : ''}${extent && center ? 'and ' : ''}${center ? 'center ' : ''}${extent && center ? 'are ' : 'is '}not needed when data are aggregated.`;
}

function errorBarCenterIsUsedWithWrongExtent(center, extent, mark) {
  return `${center} is not usually used with ${extent} for ${mark}.`;
}

function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {
  return `Continuous axis should not have customized aggregation function ${aggregate}; ${compositeMark} already agregates the axis.`;
}

function errorBarCenterIsNotNeeded(extent, mark) {
  return `Center is not needed to be specified in ${mark} when extent is ${extent}.`;
}

function errorBand1DNotSupport(property) {
  return `1D error band does not support ${property}`;
} // CHANNEL


function channelRequiredForBinned(channel) {
  return `Channel ${channel} is required for "binned" bin`;
}

function domainRequiredForThresholdScale(channel) {
  return `Domain for ${channel} is required for threshold scale`;
}
},{"../util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/log/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrap = wrap;
exports.set = set;
exports.reset = reset;
exports.warn = warn;
exports.info = info;
exports.debug = debug;
exports.LocalLogger = exports.message = void 0;

var _vegaUtil = require("vega-util");

var message_ = _interopRequireWildcard(require("./message"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * Vega-Lite's singleton logger utility.
 */
const message = message_;
/**
 * Main (default) Vega Logger instance for Vega-Lite
 */

exports.message = message;
const main = (0, _vegaUtil.logger)(_vegaUtil.Warn);
let current = main;
/**
 * Logger tool for checking if the code throws correct warning
 */

class LocalLogger {
  constructor() {
    this.warns = [];
    this.infos = [];
    this.debugs = [];
  }

  level() {
    return this;
  }

  warn(...args) {
    this.warns.push(...args);
    return this;
  }

  info(...args) {
    this.infos.push(...args);
    return this;
  }

  debug(...args) {
    this.debugs.push(...args);
    return this;
  }

  error(...args) {
    throw Error(...args);
    return this; // @ts-ignore
  }

}

exports.LocalLogger = LocalLogger;

function wrap(f) {
  return () => {
    current = new LocalLogger();
    f(current);
    reset();
  };
}
/**
 * Set the singleton logger to be a custom logger
 */


function set(newLogger) {
  current = newLogger;
  return current;
}
/**
 * Reset the main logger to use the default Vega Logger
 */


function reset() {
  current = main;
  return current;
} // eslint-disable-next-line @typescript-eslint/no-unused-vars


function warn(..._) {
  current.warn.apply(current, arguments);
} // eslint-disable-next-line @typescript-eslint/no-unused-vars


function info(..._) {
  current.info.apply(current, arguments);
} // eslint-disable-next-line @typescript-eslint/no-unused-vars


function debug(..._) {
  current.debug.apply(current, arguments);
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./message":"node_modules/vega-lite/build/src/log/message.js"}],"node_modules/vega-lite/build/src/datetime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDateTime = isDateTime;
exports.dateTimeExpr = dateTimeExpr;
exports.SHORT_DAYS = exports.DAYS = exports.SHORT_MONTHS = exports.MONTHS = void 0;

var _vegaUtil = require("vega-util");

var log = _interopRequireWildcard(require("./log"));

var _util = require("./util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// DateTime definition object

/*
 * A designated year that starts on Sunday.
 */
const SUNDAY_YEAR = 2006;

function isDateTime(o) {
  return !!o && (!!o.year || !!o.quarter || !!o.month || !!o.date || !!o.day || !!o.hours || !!o.minutes || !!o.seconds || !!o.milliseconds);
}

const MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
exports.MONTHS = MONTHS;
const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));
exports.SHORT_MONTHS = SHORT_MONTHS;
const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
exports.DAYS = DAYS;
const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));
exports.SHORT_DAYS = SHORT_DAYS;

function normalizeQuarter(q) {
  if ((0, _vegaUtil.isNumber)(q)) {
    if (q > 4) {
      log.warn(log.message.invalidTimeUnit('quarter', q));
    } // We accept 1-based quarter, so need to readjust to 0-based quarter


    return (q - 1).toString();
  } else {
    // Invalid quarter
    throw new Error(log.message.invalidTimeUnit('quarter', q));
  }
}

function normalizeMonth(m) {
  if ((0, _vegaUtil.isNumber)(m)) {
    // We accept 1-based month, so need to readjust to 0-based month
    return (m - 1).toString();
  } else {
    const lowerM = m.toLowerCase();
    const monthIndex = MONTHS.indexOf(lowerM);

    if (monthIndex !== -1) {
      return monthIndex + ''; // 0 for january, ...
    }

    const shortM = lowerM.substr(0, 3);
    const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);

    if (shortMonthIndex !== -1) {
      return shortMonthIndex + '';
    } // Invalid month


    throw new Error(log.message.invalidTimeUnit('month', m));
  }
}

function normalizeDay(d) {
  if ((0, _vegaUtil.isNumber)(d)) {
    // mod so that this can be both 0-based where 0 = sunday
    // and 1-based where 7=sunday
    return d % 7 + '';
  } else {
    const lowerD = d.toLowerCase();
    const dayIndex = DAYS.indexOf(lowerD);

    if (dayIndex !== -1) {
      return dayIndex + ''; // 0 for january, ...
    }

    const shortD = lowerD.substr(0, 3);
    const shortDayIndex = SHORT_DAYS.indexOf(shortD);

    if (shortDayIndex !== -1) {
      return shortDayIndex + '';
    } // Invalid day


    throw new Error(log.message.invalidTimeUnit('day', d));
  }
}
/**
 * Return Vega Expression for a particular date time.
 * @param d
 * @param normalize whether to normalize quarter, month, day.
 * @param toJSON whether to return the date in JSON format
 */


function dateTimeExpr(d, normalize = false, toJSON = false) {
  const units = [];

  if (normalize && d.day !== undefined) {
    if ((0, _util.keys)(d).length > 1) {
      log.warn(log.message.droppedDay(d));
      d = (0, _util.duplicate)(d);
      delete d.day;
    }
  }

  if (d.year !== undefined) {
    units.push(d.year);
  } else if (d.day !== undefined) {
    // Set year to 2006 for working with day since January 1 2006 is a Sunday
    units.push(SUNDAY_YEAR);
  } else {
    units.push(0);
  }

  if (d.month !== undefined) {
    const month = normalize ? normalizeMonth(d.month) : d.month;
    units.push(month);
  } else if (d.quarter !== undefined) {
    const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;
    units.push(quarter + '*3');
  } else {
    units.push(0); // months start at zero in JS
  }

  if (d.date !== undefined) {
    units.push(d.date);
  } else if (d.day !== undefined) {
    // HACK: Day only works as a standalone unit
    // This is only correct because we always set year to 2006 for day
    const day = normalize ? normalizeDay(d.day) : d.day;
    units.push(day + '+1');
  } else {
    units.push(1); // Date starts at 1 in JS
  } // Note: can't use TimeUnit enum here as importing it will create
  // circular dependency problem!


  for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds']) {
    if (d[timeUnit] !== undefined) {
      units.push(d[timeUnit]);
    } else {
      units.push(0);
    }
  }

  const unitsString = units.join(', ');

  if (toJSON) {
    if (d.utc) {
      return new Function(`return new Date(Date.UTC(${unitsString}))`)().toJSON();
    } else {
      return new Function(`return new Date(${unitsString})`)().toJSON();
    }
  }

  if (d.utc) {
    return `utc(${unitsString})`;
  } else {
    return `datetime(${unitsString})`;
  }
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./log":"node_modules/vega-lite/build/src/log/index.js","./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/spec/facet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFacetMapping = isFacetMapping;
exports.isFacetFieldDef = isFacetFieldDef;
exports.isFacetSpec = isFacetSpec;

function isFacetMapping(f) {
  return !!f['row'] || !!f['column'];
}

function isFacetFieldDef(channelDef) {
  return !!channelDef && !!channelDef['header'];
}

function isFacetSpec(spec) {
  return spec['facet'] !== undefined;
}
},{}],"node_modules/vega-lite/build/src/timeunit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLocalSingleTimeUnit = isLocalSingleTimeUnit;
exports.isUtcSingleTimeUnit = isUtcSingleTimeUnit;
exports.isUTCTimeUnit = isUTCTimeUnit;
exports.getLocalTimeUnit = getLocalTimeUnit;
exports.isTimeUnit = isTimeUnit;
exports.convert = convert;
exports.getTimeUnitParts = getTimeUnitParts;
exports.containsTimeUnit = containsTimeUnit;
exports.fieldExpr = fieldExpr;
exports.getDateTimeComponents = getDateTimeComponents;
exports.formatExpression = formatExpression;
exports.normalizeTimeUnit = normalizeTimeUnit;
exports.TIMEUNITS = exports.TIMEUNIT_PARTS = exports.TimeUnit = void 0;

var _datetime = require("./datetime");

var log = _interopRequireWildcard(require("./log"));

var _util = require("./util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var TimeUnit;
exports.TimeUnit = TimeUnit;

(function (TimeUnit) {
  TimeUnit.YEAR = 'year';
  TimeUnit.MONTH = 'month';
  TimeUnit.DAY = 'day';
  TimeUnit.DATE = 'date';
  TimeUnit.HOURS = 'hours';
  TimeUnit.MINUTES = 'minutes';
  TimeUnit.SECONDS = 'seconds';
  TimeUnit.MILLISECONDS = 'milliseconds';
  TimeUnit.YEARMONTH = 'yearmonth';
  TimeUnit.YEARMONTHDATE = 'yearmonthdate';
  TimeUnit.YEARMONTHDATEHOURS = 'yearmonthdatehours';
  TimeUnit.YEARMONTHDATEHOURSMINUTES = 'yearmonthdatehoursminutes';
  TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS = 'yearmonthdatehoursminutesseconds'; // MONTHDATE and MONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);

  TimeUnit.MONTHDATE = 'monthdate';
  TimeUnit.MONTHDATEHOURS = 'monthdatehours';
  TimeUnit.HOURSMINUTES = 'hoursminutes';
  TimeUnit.HOURSMINUTESSECONDS = 'hoursminutesseconds';
  TimeUnit.MINUTESSECONDS = 'minutesseconds';
  TimeUnit.SECONDSMILLISECONDS = 'secondsmilliseconds';
  TimeUnit.QUARTER = 'quarter';
  TimeUnit.YEARQUARTER = 'yearquarter';
  TimeUnit.QUARTERMONTH = 'quartermonth';
  TimeUnit.YEARQUARTERMONTH = 'yearquartermonth';
  TimeUnit.UTCYEAR = 'utcyear';
  TimeUnit.UTCMONTH = 'utcmonth';
  TimeUnit.UTCDAY = 'utcday';
  TimeUnit.UTCDATE = 'utcdate';
  TimeUnit.UTCHOURS = 'utchours';
  TimeUnit.UTCMINUTES = 'utcminutes';
  TimeUnit.UTCSECONDS = 'utcseconds';
  TimeUnit.UTCMILLISECONDS = 'utcmilliseconds';
  TimeUnit.UTCYEARMONTH = 'utcyearmonth';
  TimeUnit.UTCYEARMONTHDATE = 'utcyearmonthdate';
  TimeUnit.UTCYEARMONTHDATEHOURS = 'utcyearmonthdatehours';
  TimeUnit.UTCYEARMONTHDATEHOURSMINUTES = 'utcyearmonthdatehoursminutes';
  TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS = 'utcyearmonthdatehoursminutesseconds'; // UTCMONTHDATE and UTCMONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);

  TimeUnit.UTCMONTHDATE = 'utcmonthdate';
  TimeUnit.UTCMONTHDATEHOURS = 'utcmonthdatehours';
  TimeUnit.UTCHOURSMINUTES = 'utchoursminutes';
  TimeUnit.UTCHOURSMINUTESSECONDS = 'utchoursminutesseconds';
  TimeUnit.UTCMINUTESSECONDS = 'utcminutesseconds';
  TimeUnit.UTCSECONDSMILLISECONDS = 'utcsecondsmilliseconds';
  TimeUnit.UTCQUARTER = 'utcquarter';
  TimeUnit.UTCYEARQUARTER = 'utcyearquarter';
  TimeUnit.UTCQUARTERMONTH = 'utcquartermonth';
  TimeUnit.UTCYEARQUARTERMONTH = 'utcyearquartermonth';
})(TimeUnit || (exports.TimeUnit = TimeUnit = {}));
/** Time Unit that only corresponds to only one part of Date objects. */


const LOCAL_SINGLE_TIMEUNIT_INDEX = {
  year: 1,
  quarter: 1,
  month: 1,
  day: 1,
  date: 1,
  hours: 1,
  minutes: 1,
  seconds: 1,
  milliseconds: 1
};
const TIMEUNIT_PARTS = (0, _util.keys)(LOCAL_SINGLE_TIMEUNIT_INDEX);
exports.TIMEUNIT_PARTS = TIMEUNIT_PARTS;

function isLocalSingleTimeUnit(timeUnit) {
  return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];
}

const UTC_SINGLE_TIMEUNIT_INDEX = {
  utcyear: 1,
  utcquarter: 1,
  utcmonth: 1,
  utcday: 1,
  utcdate: 1,
  utchours: 1,
  utcminutes: 1,
  utcseconds: 1,
  utcmilliseconds: 1
};

function isUtcSingleTimeUnit(timeUnit) {
  return !!UTC_SINGLE_TIMEUNIT_INDEX[timeUnit];
}

const LOCAL_MULTI_TIMEUNIT_INDEX = {
  yearquarter: 1,
  yearquartermonth: 1,
  yearmonth: 1,
  yearmonthdate: 1,
  yearmonthdatehours: 1,
  yearmonthdatehoursminutes: 1,
  yearmonthdatehoursminutesseconds: 1,
  quartermonth: 1,
  monthdate: 1,
  monthdatehours: 1,
  hoursminutes: 1,
  hoursminutesseconds: 1,
  minutesseconds: 1,
  secondsmilliseconds: 1
};
const UTC_MULTI_TIMEUNIT_INDEX = {
  utcyearquarter: 1,
  utcyearquartermonth: 1,
  utcyearmonth: 1,
  utcyearmonthdate: 1,
  utcyearmonthdatehours: 1,
  utcyearmonthdatehoursminutes: 1,
  utcyearmonthdatehoursminutesseconds: 1,
  utcquartermonth: 1,
  utcmonthdate: 1,
  utcmonthdatehours: 1,
  utchoursminutes: 1,
  utchoursminutesseconds: 1,
  utcminutesseconds: 1,
  utcsecondsmilliseconds: 1
};
const UTC_TIMEUNIT_INDEX = Object.assign({}, UTC_SINGLE_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);

function isUTCTimeUnit(t) {
  return !!UTC_TIMEUNIT_INDEX[t];
}

function getLocalTimeUnit(t) {
  return t.substr(3);
}

const TIMEUNIT_INDEX = Object.assign({}, LOCAL_SINGLE_TIMEUNIT_INDEX, UTC_SINGLE_TIMEUNIT_INDEX, LOCAL_MULTI_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);
const TIMEUNITS = (0, _util.keys)(TIMEUNIT_INDEX);
exports.TIMEUNITS = TIMEUNITS;

function isTimeUnit(t) {
  return !!TIMEUNIT_INDEX[t];
}

const SET_DATE_METHOD = {
  year: 'setFullYear',
  month: 'setMonth',
  date: 'setDate',
  hours: 'setHours',
  minutes: 'setMinutes',
  seconds: 'setSeconds',
  milliseconds: 'setMilliseconds',
  // Day and quarter have their own special cases
  quarter: null,
  day: null
};
/**
 * Converts a date to only have the measurements relevant to the specified unit
 * i.e. ('yearmonth', '2000-12-04 07:58:14') -> '2000-12-01 00:00:00'
 * Note: the base date is Jan 01 1900 00:00:00
 */

function convert(unit, date) {
  const isUTC = isUTCTimeUnit(unit);
  const result = isUTC ? // start with uniform date
  new Date(Date.UTC(1972, 0, 1, 0, 0, 0, 0)) // 1972 is the first leap year after 1970, the start of unix time
  : new Date(1972, 0, 1, 0, 0, 0, 0);

  for (const timeUnitPart of TIMEUNIT_PARTS) {
    if (containsTimeUnit(unit, timeUnitPart)) {
      switch (timeUnitPart) {
        case TimeUnit.DAY:
          throw new Error("Cannot convert to TimeUnits containing 'day'");

        case TimeUnit.QUARTER:
          {
            const {
              getDateMethod,
              setDateMethod
            } = dateMethods('month', isUTC); // indicate quarter by setting month to be the first of the quarter i.e. may (4) -> april (3)

            result[setDateMethod](Math.floor(date[getDateMethod]() / 3) * 3);
            break;
          }

        default:
          {
            const {
              getDateMethod,
              setDateMethod
            } = dateMethods(timeUnitPart, isUTC);
            result[setDateMethod](date[getDateMethod]());
          }
      }
    }
  }

  return result;
}

function dateMethods(singleUnit, isUtc) {
  const rawSetDateMethod = SET_DATE_METHOD[singleUnit];
  const setDateMethod = isUtc ? 'setUTC' + rawSetDateMethod.substr(3) : rawSetDateMethod;
  const getDateMethod = 'get' + (isUtc ? 'UTC' : '') + rawSetDateMethod.substr(3);
  return {
    setDateMethod,
    getDateMethod
  };
}

function getTimeUnitParts(timeUnit) {
  return TIMEUNIT_PARTS.reduce((parts, part) => {
    if (containsTimeUnit(timeUnit, part)) {
      return [...parts, part];
    }

    return parts;
  }, []);
}
/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */


function containsTimeUnit(fullTimeUnit, timeUnit) {
  const index = fullTimeUnit.indexOf(timeUnit);
  return index > -1 && (timeUnit !== TimeUnit.SECONDS || index === 0 || fullTimeUnit.charAt(index - 1) !== 'i') // exclude milliseconds
  ;
}
/**
 * Returns Vega expresssion for a given timeUnit and fieldRef
 */


function fieldExpr(fullTimeUnit, field) {
  const fieldRef = (0, _util.accessPathWithDatum)(field);
  const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';

  function func(timeUnit) {
    if (timeUnit === TimeUnit.QUARTER) {
      // quarter starting at 0 (0,3,6,9).
      return `(${utc}quarter(${fieldRef})-1)`;
    } else {
      return `${utc}${timeUnit}(${fieldRef})`;
    }
  }

  const d = TIMEUNIT_PARTS.reduce((dateExpr, tu) => {
    if (containsTimeUnit(fullTimeUnit, tu)) {
      dateExpr[tu] = func(tu);
    }

    return dateExpr;
  }, {});
  return (0, _datetime.dateTimeExpr)(d);
}

function getDateTimeComponents(timeUnit, shortTimeLabels) {
  if (!timeUnit) {
    return undefined;
  }

  const dateComponents = [];
  const hasYear = containsTimeUnit(timeUnit, TimeUnit.YEAR);

  if (containsTimeUnit(timeUnit, TimeUnit.MONTH)) {
    // By default use short month name
    dateComponents.push(shortTimeLabels !== false ? '%b' : '%B');
  }

  if (containsTimeUnit(timeUnit, TimeUnit.DAY)) {
    dateComponents.push(shortTimeLabels ? '%a' : '%A');
  } else if (containsTimeUnit(timeUnit, TimeUnit.DATE)) {
    dateComponents.push('%d' + (hasYear ? ',' : '')); // add comma if there is year
  }

  if (hasYear) {
    dateComponents.push(shortTimeLabels ? '%y' : '%Y');
  }

  const timeComponents = [];

  if (containsTimeUnit(timeUnit, TimeUnit.HOURS)) {
    timeComponents.push('%H');
  }

  if (containsTimeUnit(timeUnit, TimeUnit.MINUTES)) {
    timeComponents.push('%M');
  }

  if (containsTimeUnit(timeUnit, TimeUnit.SECONDS)) {
    timeComponents.push('%S');
  }

  if (containsTimeUnit(timeUnit, TimeUnit.MILLISECONDS)) {
    timeComponents.push('%L');
  }

  const dateTimeComponents = [];

  if (dateComponents.length > 0) {
    dateTimeComponents.push(dateComponents.join(' '));
  }

  if (timeComponents.length > 0) {
    dateTimeComponents.push(timeComponents.join(':'));
  }

  return dateTimeComponents;
}
/**
 * returns the signal expression used for axis labels for a time unit
 */


function formatExpression(timeUnit, field, shortTimeLabels, isUTCScale) {
  if (!timeUnit) {
    return undefined;
  }

  const dateTimeComponents = getDateTimeComponents(timeUnit, shortTimeLabels);
  let expression = '';

  if (containsTimeUnit(timeUnit, TimeUnit.QUARTER)) {
    // special expression for quarter as prefix
    expression = `'Q' + quarter(${field})`;
  }

  if (dateTimeComponents.length > 0) {
    if (expression) {
      // Add space between quarter and main time format
      expression += ` + ' ' + `;
    } // We only use utcFormat for utc scale
    // For utc time units, the data is already converted as a part of timeUnit transform.
    // Thus, utc time units should use timeFormat to avoid shifting the time twice.


    if (isUTCScale) {
      expression += `utcFormat(${field}, '${dateTimeComponents.join(' ')}')`;
    } else {
      expression += `timeFormat(${field}, '${dateTimeComponents.join(' ')}')`;
    }
  } // If expression is still an empty string, return undefined instead.


  return expression || undefined;
}

function normalizeTimeUnit(timeUnit) {
  if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {
    log.warn(log.message.dayReplacedWithDate(timeUnit));
    return timeUnit.replace('day', 'date');
  }

  return timeUnit;
}
},{"./datetime":"node_modules/vega-lite/build/src/datetime.js","./log":"node_modules/vega-lite/build/src/log/index.js","./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/type.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isType = isType;
exports.getFullName = getFullName;
exports.GEOJSON = exports.NOMINAL = exports.TEMPORAL = exports.ORDINAL = exports.QUANTITATIVE = exports.TYPE_INDEX = void 0;

/** Constants and utilities for data type */

/** Data type based on level of measurement */
const TYPE_INDEX = {
  quantitative: 1,
  ordinal: 1,
  temporal: 1,
  nominal: 1,
  geojson: 1
};
exports.TYPE_INDEX = TYPE_INDEX;

function isType(t) {
  return !!TYPE_INDEX[t];
}

const QUANTITATIVE = 'quantitative';
exports.QUANTITATIVE = QUANTITATIVE;
const ORDINAL = 'ordinal';
exports.ORDINAL = ORDINAL;
const TEMPORAL = 'temporal';
exports.TEMPORAL = TEMPORAL;
const NOMINAL = 'nominal';
exports.NOMINAL = NOMINAL;
const GEOJSON = 'geojson';
/**
 * Get full, lowercase type name for a given type.
 * @param  type
 * @return Full type name.
 */

exports.GEOJSON = GEOJSON;

function getFullName(type) {
  if (type) {
    type = type.toLowerCase();

    switch (type) {
      case 'q':
      case QUANTITATIVE:
        return 'quantitative';

      case 't':
      case TEMPORAL:
        return 'temporal';

      case 'o':
      case ORDINAL:
        return 'ordinal';

      case 'n':
      case NOMINAL:
        return 'nominal';

      case GEOJSON:
        return 'geojson';
    }
  } // If we get invalid input, return undefined type.


  return undefined;
}
},{}],"node_modules/vega-lite/build/src/channeldef.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isConditionalSelection = isConditionalSelection;
exports.isRepeatRef = isRepeatRef;
exports.toFieldDefBase = toFieldDefBase;
exports.isSortableFieldDef = isSortableFieldDef;
exports.isConditionalDef = isConditionalDef;
exports.hasConditionalFieldDef = hasConditionalFieldDef;
exports.hasConditionalValueDef = hasConditionalValueDef;
exports.isFieldDef = isFieldDef;
exports.isTypedFieldDef = isTypedFieldDef;
exports.isStringFieldDef = isStringFieldDef;
exports.isValueDef = isValueDef;
exports.isScaleFieldDef = isScaleFieldDef;
exports.isPositionFieldDef = isPositionFieldDef;
exports.isMarkPropFieldDef = isMarkPropFieldDef;
exports.isTextFieldDef = isTextFieldDef;
exports.vgField = vgField;
exports.isDiscrete = isDiscrete;
exports.isContinuous = isContinuous;
exports.isCount = isCount;
exports.verbalTitleFormatter = verbalTitleFormatter;
exports.functionalTitleFormatter = functionalTitleFormatter;
exports.setTitleFormatter = setTitleFormatter;
exports.resetTitleFormatter = resetTitleFormatter;
exports.title = title;
exports.getGuide = getGuide;
exports.defaultTitle = defaultTitle;
exports.format = format;
exports.defaultType = defaultType;
exports.getFieldDef = getFieldDef;
exports.getTypedFieldDef = getTypedFieldDef;
exports.normalize = normalize;
exports.normalizeFieldDef = normalizeFieldDef;
exports.normalizeBin = normalizeBin;
exports.channelCompatibility = channelCompatibility;
exports.isTimeFormatFieldDef = isTimeFormatFieldDef;
exports.isTimeFieldDef = isTimeFieldDef;
exports.valueExpr = valueExpr;
exports.valueArray = valueArray;
exports.binRequiresRange = binRequiresRange;
exports.defaultTitleFormatter = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var _aggregate = require("./aggregate");

var _bin = require("./bin");

var _channel = require("./channel");

var _datetime = require("./datetime");

var log = _interopRequireWildcard(require("./log"));

var _facet = require("./spec/facet");

var _timeunit = require("./timeunit");

var _type = require("./type");

var _util = require("./util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// Declaration and utility for variants of a field definition object
function isConditionalSelection(c) {
  return c['selection'];
}

function isRepeatRef(field) {
  return field && !(0, _vegaUtil.isString)(field) && 'repeat' in field;
}

function toFieldDefBase(fieldDef) {
  const {
    field,
    timeUnit,
    bin,
    aggregate
  } = fieldDef;
  return Object.assign({}, timeUnit ? {
    timeUnit
  } : {}, bin ? {
    bin
  } : {}, aggregate ? {
    aggregate
  } : {}, {
    field
  });
}

function isSortableFieldDef(fieldDef) {
  return isTypedFieldDef(fieldDef) && !!fieldDef['sort'];
}

function isConditionalDef(channelDef) {
  return !!channelDef && !!channelDef.condition;
}
/**
 * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef
 */


function hasConditionalFieldDef(channelDef) {
  return !!channelDef && !!channelDef.condition && !(0, _vegaUtil.isArray)(channelDef.condition) && isFieldDef(channelDef.condition);
}

function hasConditionalValueDef(channelDef) {
  return !!channelDef && !!channelDef.condition && ((0, _vegaUtil.isArray)(channelDef.condition) || isValueDef(channelDef.condition));
}

function isFieldDef(channelDef) {
  return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');
}

function isTypedFieldDef(channelDef) {
  return !!channelDef && (!!channelDef['field'] && !!channelDef['type'] || channelDef['aggregate'] === 'count');
}

function isStringFieldDef(channelDef) {
  return isFieldDef(channelDef) && (0, _vegaUtil.isString)(channelDef.field);
}

function isValueDef(channelDef) {
  return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;
}

function isScaleFieldDef(channelDef) {
  return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);
}

function isPositionFieldDef(channelDef) {
  return !!channelDef && (!!channelDef['axis'] || !!channelDef['stack'] || !!channelDef['impute']);
}

function isMarkPropFieldDef(channelDef) {
  return !!channelDef && !!channelDef['legend'];
}

function isTextFieldDef(channelDef) {
  return !!channelDef && !!channelDef['format'];
}

function isOpFieldDef(fieldDef) {
  return !!fieldDef['op'];
}
/**
 * Get a Vega field reference from a Vega-Lite field def.
 */


function vgField(fieldDef, opt = {}) {
  let field = fieldDef.field;
  const prefix = opt.prefix;
  let suffix = opt.suffix;
  let argAccessor = ''; // for accessing argmin/argmax field at the end without getting escaped

  if (isCount(fieldDef)) {
    field = (0, _util.internalField)('count');
  } else {
    let fn;

    if (!opt.nofn) {
      if (isOpFieldDef(fieldDef)) {
        fn = fieldDef.op;
      } else {
        const {
          bin,
          aggregate,
          timeUnit
        } = fieldDef;

        if ((0, _bin.isBinning)(bin)) {
          fn = (0, _bin.binToString)(bin);
          suffix = (opt.binSuffix || '') + (opt.suffix || '');
        } else if (aggregate) {
          if ((0, _aggregate.isArgmaxDef)(aggregate)) {
            argAccessor = `.${field}`;
            field = `argmax_${aggregate.argmax}`;
          } else if ((0, _aggregate.isArgminDef)(aggregate)) {
            argAccessor = `.${field}`;
            field = `argmin_${aggregate.argmin}`;
          } else {
            fn = String(aggregate);
          }
        } else if (timeUnit) {
          fn = String(timeUnit);
        }
      }
    }

    if (fn) {
      field = field ? `${fn}_${field}` : fn;
    }
  }

  if (suffix) {
    field = `${field}_${suffix}`;
  }

  if (prefix) {
    field = `${prefix}_${field}`;
  }

  if (opt.forAs) {
    return field;
  } else if (opt.expr) {
    // Expression to access flattened field. No need to escape dots.
    return (0, _util.flatAccessWithDatum)(field, opt.expr) + argAccessor;
  } else {
    // We flattened all fields so paths should have become dot.
    return (0, _util.replacePathInField)(field) + argAccessor;
  }
}

function isDiscrete(fieldDef) {
  switch (fieldDef.type) {
    case 'nominal':
    case 'ordinal':
    case 'geojson':
      return true;

    case 'quantitative':
      return !!fieldDef.bin;

    case 'temporal':
      return false;
  }

  throw new Error(log.message.invalidFieldType(fieldDef.type));
}

function isContinuous(fieldDef) {
  return !isDiscrete(fieldDef);
}

function isCount(fieldDef) {
  return fieldDef.aggregate === 'count';
}

function verbalTitleFormatter(fieldDef, config) {
  const {
    field,
    bin,
    timeUnit,
    aggregate
  } = fieldDef;

  if (aggregate === 'count') {
    return config.countTitle;
  } else if ((0, _bin.isBinning)(bin)) {
    return `${field} (binned)`;
  } else if (timeUnit) {
    const units = (0, _timeunit.getTimeUnitParts)(timeUnit).join('-');
    return `${field} (${units})`;
  } else if (aggregate) {
    if ((0, _aggregate.isArgmaxDef)(aggregate)) {
      return `${field} for max ${aggregate.argmax}`;
    } else if ((0, _aggregate.isArgminDef)(aggregate)) {
      return `${field} for min ${aggregate.argmin}`;
    } else {
      return `${(0, _util.titlecase)(aggregate)} of ${field}`;
    }
  }

  return field;
}

function functionalTitleFormatter(fieldDef) {
  const {
    aggregate,
    bin,
    timeUnit,
    field
  } = fieldDef;

  if ((0, _aggregate.isArgmaxDef)(aggregate)) {
    return `${field} for argmax(${aggregate.argmax})`;
  } else if ((0, _aggregate.isArgminDef)(aggregate)) {
    return `${field} for argmin(${aggregate.argmin})`;
  }

  const fn = aggregate || timeUnit || (0, _bin.isBinning)(bin) && 'bin';

  if (fn) {
    return fn.toUpperCase() + '(' + field + ')';
  } else {
    return field;
  }
}

const defaultTitleFormatter = (fieldDef, config) => {
  switch (config.fieldTitle) {
    case 'plain':
      return fieldDef.field;

    case 'functional':
      return functionalTitleFormatter(fieldDef);

    default:
      return verbalTitleFormatter(fieldDef, config);
  }
};

exports.defaultTitleFormatter = defaultTitleFormatter;
let titleFormatter = defaultTitleFormatter;

function setTitleFormatter(formatter) {
  titleFormatter = formatter;
}

function resetTitleFormatter() {
  setTitleFormatter(defaultTitleFormatter);
}

function title(fieldDef, config, {
  allowDisabling,
  includeDefault = true
}) {
  const guide = getGuide(fieldDef) || {};
  const guideTitle = guide.title;
  const def = includeDefault ? defaultTitle(fieldDef, config) : undefined;

  if (allowDisabling) {
    return (0, _util.getFirstDefined)(guideTitle, fieldDef.title, def);
  } else {
    return guideTitle || fieldDef.title || def;
  }
}

function getGuide(fieldDef) {
  if (isPositionFieldDef(fieldDef) && fieldDef.axis) {
    return fieldDef.axis;
  } else if (isMarkPropFieldDef(fieldDef) && fieldDef.legend) {
    return fieldDef.legend;
  } else if ((0, _facet.isFacetFieldDef)(fieldDef) && fieldDef.header) {
    return fieldDef.header;
  }

  return undefined;
}

function defaultTitle(fieldDef, config) {
  return titleFormatter(fieldDef, config);
}

function format(fieldDef) {
  if (isTextFieldDef(fieldDef) && fieldDef.format) {
    return fieldDef.format;
  } else {
    const guide = getGuide(fieldDef) || {};
    return guide.format;
  }
}

function defaultType(fieldDef, channel) {
  if (fieldDef.timeUnit) {
    return 'temporal';
  }

  if ((0, _bin.isBinning)(fieldDef.bin)) {
    return 'quantitative';
  }

  switch ((0, _channel.rangeType)(channel)) {
    case 'continuous':
      return 'quantitative';

    case 'discrete':
      return 'nominal';

    case 'flexible':
      // color
      return 'nominal';

    default:
      return 'quantitative';
  }
}
/**
 * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.
 * @param channelDef
 */


function getFieldDef(channelDef) {
  if (isFieldDef(channelDef)) {
    return channelDef;
  } else if (hasConditionalFieldDef(channelDef)) {
    return channelDef.condition;
  }

  return undefined;
}

function getTypedFieldDef(channelDef) {
  if (isFieldDef(channelDef)) {
    return channelDef;
  } else if (hasConditionalFieldDef(channelDef)) {
    return channelDef.condition;
  }

  return undefined;
}
/**
 * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.
 */


function normalize(channelDef, channel) {
  if ((0, _vegaUtil.isString)(channelDef) || (0, _vegaUtil.isNumber)(channelDef) || (0, _vegaUtil.isBoolean)(channelDef)) {
    const primitiveType = (0, _vegaUtil.isString)(channelDef) ? 'string' : (0, _vegaUtil.isNumber)(channelDef) ? 'number' : 'boolean';
    log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));
    return {
      value: channelDef
    };
  } // If a fieldDef contains a field, we need type.


  if (isFieldDef(channelDef)) {
    return normalizeFieldDef(channelDef, channel);
  } else if (hasConditionalFieldDef(channelDef)) {
    return Object.assign({}, channelDef, {
      // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>
      condition: normalizeFieldDef(channelDef.condition, channel)
    });
  }

  return channelDef;
}

function normalizeFieldDef(fieldDef, channel) {
  const {
    aggregate,
    timeUnit,
    bin
  } = fieldDef; // Drop invalid aggregate

  if (aggregate && !(0, _aggregate.isAggregateOp)(aggregate) && !(0, _aggregate.isArgmaxDef)(aggregate) && !(0, _aggregate.isArgminDef)(aggregate)) {
    const {
      aggregate: _
    } = fieldDef,
          fieldDefWithoutAggregate = tslib_1.__rest(fieldDef, ["aggregate"]);

    log.warn(log.message.invalidAggregate(aggregate));
    fieldDef = fieldDefWithoutAggregate;
  } // Normalize Time Unit


  if (timeUnit) {
    fieldDef = Object.assign({}, fieldDef, {
      timeUnit: (0, _timeunit.normalizeTimeUnit)(timeUnit)
    });
  } // Normalize bin


  if ((0, _bin.isBinning)(bin)) {
    fieldDef = Object.assign({}, fieldDef, {
      bin: normalizeBin(bin, channel)
    });
  }

  if ((0, _bin.isBinned)(bin) && !(0, _util.contains)(_channel.POSITION_SCALE_CHANNELS, channel)) {
    log.warn(`Channel ${channel} should not be used with "binned" bin`);
  } // Normalize Type


  if (isTypedFieldDef(fieldDef)) {
    const {
      type
    } = fieldDef;
    const fullType = (0, _type.getFullName)(type);

    if (type !== fullType) {
      // convert short type to full type
      fieldDef = Object.assign({}, fieldDef, {
        type: fullType
      });
    }

    if (type !== 'quantitative') {
      if ((0, _aggregate.isCountingAggregateOp)(aggregate)) {
        log.warn(log.message.invalidFieldTypeForCountAggregate(type, aggregate));
        fieldDef = Object.assign({}, fieldDef, {
          type: 'quantitative'
        });
      }
    }
  } else if (!(0, _channel.isSecondaryRangeChannel)(channel)) {
    // If type is empty / invalid, then augment with default type
    const newType = defaultType(fieldDef, channel);
    log.warn(log.message.missingFieldType(channel, newType));
    fieldDef = Object.assign({}, fieldDef, {
      type: newType
    });
  }

  if (isTypedFieldDef(fieldDef)) {
    const {
      compatible,
      warning
    } = channelCompatibility(fieldDef, channel);

    if (!compatible) {
      log.warn(warning);
    }
  }

  return Object.assign({}, fieldDef, fieldDef.field !== undefined ? {
    field: `${fieldDef.field}`
  } : {});
}

function normalizeBin(bin, channel) {
  if ((0, _vegaUtil.isBoolean)(bin)) {
    return {
      maxbins: (0, _bin.autoMaxBins)(channel)
    };
  } else if (bin === 'binned') {
    return {
      binned: true
    };
  } else if (!bin.maxbins && !bin.step) {
    return Object.assign({}, bin, {
      maxbins: (0, _bin.autoMaxBins)(channel)
    });
  } else {
    return bin;
  }
}

const COMPATIBLE = {
  compatible: true
};

function channelCompatibility(fieldDef, channel) {
  const type = fieldDef.type;

  if (type === 'geojson' && channel !== 'shape') {
    return {
      compatible: false,
      warning: `Channel ${channel} should not be used with a geojson data.`
    };
  }

  switch (channel) {
    case 'row':
    case 'column':
    case 'facet':
      if (isContinuous(fieldDef)) {
        return {
          compatible: false,
          warning: log.message.facetChannelShouldBeDiscrete(channel)
        };
      }

      return COMPATIBLE;

    case 'x':
    case 'y':
    case 'color':
    case 'fill':
    case 'stroke':
    case 'text':
    case 'detail':
    case 'key':
    case 'tooltip':
    case 'href':
      return COMPATIBLE;

    case 'longitude':
    case 'longitude2':
    case 'latitude':
    case 'latitude2':
      if (type !== _type.QUANTITATIVE) {
        return {
          compatible: false,
          warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`
        };
      }

      return COMPATIBLE;

    case 'opacity':
    case 'fillOpacity':
    case 'strokeOpacity':
    case 'strokeWidth':
    case 'size':
    case 'x2':
    case 'y2':
      if (type === 'nominal' && !fieldDef['sort']) {
        return {
          compatible: false,
          warning: `Channel ${channel} should not be used with an unsorted discrete field.`
        };
      }

      return COMPATIBLE;

    case 'shape':
      if (!(0, _util.contains)(['ordinal', 'nominal', 'geojson'], fieldDef.type)) {
        return {
          compatible: false,
          warning: 'Shape channel should be used with only either discrete or geojson data.'
        };
      }

      return COMPATIBLE;

    case 'order':
      if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {
        return {
          compatible: false,
          warning: `Channel order is inappropriate for nominal field, which has no inherent order.`
        };
      }

      return COMPATIBLE;
  }

  throw new Error('channelCompatability not implemented for channel ' + channel);
}
/**
 * Check if the field def uses a time format or does not use any format but is temporal
 * (this does not cover field defs that are temporal but use a number format).
 */


function isTimeFormatFieldDef(fieldDef) {
  const guide = getGuide(fieldDef);
  const formatType = guide && guide.formatType || isTextFieldDef(fieldDef) && fieldDef.formatType;
  return formatType === 'time' || !formatType && isTimeFieldDef(fieldDef);
}
/**
 * Check if field def has tye `temporal`. If you want to also cover field defs that use a time format, use `isTimeFormatFieldDef`.
 */


function isTimeFieldDef(fieldDef) {
  return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;
}
/**
 * Getting a value associated with a fielddef.
 * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)
 */


function valueExpr(v, {
  timeUnit,
  type,
  time,
  undefinedIfExprNotRequired
}) {
  let expr;

  if ((0, _datetime.isDateTime)(v)) {
    expr = (0, _datetime.dateTimeExpr)(v, true);
  } else if ((0, _vegaUtil.isString)(v) || (0, _vegaUtil.isNumber)(v)) {
    if (timeUnit || type === 'temporal') {
      if ((0, _timeunit.isLocalSingleTimeUnit)(timeUnit)) {
        expr = (0, _datetime.dateTimeExpr)({
          [timeUnit]: v
        }, true);
      } else if ((0, _timeunit.isUtcSingleTimeUnit)(timeUnit)) {
        // FIXME is this really correct?
        expr = valueExpr(v, {
          timeUnit: (0, _timeunit.getLocalTimeUnit)(timeUnit)
        });
      } else {
        // just pass the string to date function (which will call JS Date.parse())
        expr = `datetime(${JSON.stringify(v)})`;
      }
    }
  }

  if (expr) {
    return time ? `time(${expr})` : expr;
  } // number or boolean or normal string


  return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);
}
/**
 * Standardize value array -- convert each value to Vega expression if applicable
 */


function valueArray(fieldDef, values) {
  const {
    timeUnit,
    type
  } = fieldDef;
  return values.map(v => {
    const expr = valueExpr(v, {
      timeUnit,
      type,
      undefinedIfExprNotRequired: true
    }); // return signal for the expression if we need an expression

    if (expr !== undefined) {
      return {
        signal: expr
      };
    } // otherwise just return the original value


    return v;
  });
}
/**
 * Checks whether a fieldDef for a particular channel requires a computed bin range.
 */


function binRequiresRange(fieldDef, channel) {
  if (!(0, _bin.isBinning)(fieldDef.bin)) {
    console.warn('Only use this method with binned field defs');
    return false;
  } // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.
  // We could check whether the axis or legend exists (not disabled) but that seems overkill.


  return (0, _channel.isScaleChannel)(channel) && (0, _util.contains)(['ordinal', 'nominal'], fieldDef.type);
}
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./aggregate":"node_modules/vega-lite/build/src/aggregate.js","./bin":"node_modules/vega-lite/build/src/bin.js","./channel":"node_modules/vega-lite/build/src/channel.js","./datetime":"node_modules/vega-lite/build/src/datetime.js","./log":"node_modules/vega-lite/build/src/log/index.js","./spec/facet":"node_modules/vega-lite/build/src/spec/facet.js","./timeunit":"node_modules/vega-lite/build/src/timeunit.js","./type":"node_modules/vega-lite/build/src/type.js","./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/bin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.binToString = binToString;
exports.isBinning = isBinning;
exports.isBinned = isBinned;
exports.isBinParams = isBinParams;
exports.autoMaxBins = autoMaxBins;

var _vegaUtil = require("vega-util");

var _channel = require("./channel");

var _channeldef = require("./channeldef");

var _util = require("./util");

/**
 * Create a key for the bin configuration. Not for prebinned bin.
 */
function binToString(bin) {
  if ((0, _vegaUtil.isBoolean)(bin)) {
    bin = (0, _channeldef.normalizeBin)(bin, undefined);
  }

  return 'bin' + (0, _util.keys)(bin).map(p => (0, _util.varName)(`_${p}_${bin[p]}`)).join('');
}
/**
 * Vega-Lite should bin the data.
 */


function isBinning(bin) {
  return bin === true || isBinParams(bin) && !bin.binned;
}
/**
 * The data is already binned and so Vega-Lite should not bin it again.
 */


function isBinned(bin) {
  return bin === 'binned' || isBinParams(bin) && bin.binned;
}

function isBinParams(bin) {
  return (0, _vegaUtil.isObject)(bin);
}

function autoMaxBins(channel) {
  switch (channel) {
    case _channel.ROW:
    case _channel.COLUMN:
    case _channel.SIZE:
    case _channel.COLOR:
    case _channel.FILL:
    case _channel.STROKE:
    case _channel.STROKEWIDTH:
    case _channel.OPACITY:
    case _channel.FILLOPACITY:
    case _channel.STROKEOPACITY: // Facets and Size shouldn't have too many bins
    // We choose 6 like shape to simplify the rule [falls through]

    case _channel.SHAPE:
      return 6;
    // Vega's "shape" has 6 distinct values

    default:
      return 10;
  }
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./channel":"node_modules/vega-lite/build/src/channel.js","./channeldef":"node_modules/vega-lite/build/src/channeldef.js","./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/encoding.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.channelHasField = channelHasField;
exports.isAggregate = isAggregate;
exports.extractTransformsFromEncoding = extractTransformsFromEncoding;
exports.markChannelCompatible = markChannelCompatible;
exports.normalizeEncoding = normalizeEncoding;
exports.fieldDefs = fieldDefs;
exports.forEach = forEach;
exports.reduce = reduce;
exports.pathGroupingFields = pathGroupingFields;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var _aggregate = require("./aggregate");

var _bin = require("./bin");

var _channel = require("./channel");

var _channeldef = require("./channeldef");

var log = _interopRequireWildcard(require("./log"));

var _timeunit = require("./timeunit");

var _type = require("./type");

var _util = require("./util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function channelHasField(encoding, channel) {
  const channelDef = encoding && encoding[channel];

  if (channelDef) {
    if ((0, _vegaUtil.isArray)(channelDef)) {
      return (0, _util.some)(channelDef, fieldDef => !!fieldDef.field);
    } else {
      return (0, _channeldef.isFieldDef)(channelDef) || (0, _channeldef.hasConditionalFieldDef)(channelDef);
    }
  }

  return false;
}

function isAggregate(encoding) {
  return (0, _util.some)(_channel.CHANNELS, channel => {
    if (channelHasField(encoding, channel)) {
      const channelDef = encoding[channel];

      if ((0, _vegaUtil.isArray)(channelDef)) {
        return (0, _util.some)(channelDef, fieldDef => !!fieldDef.aggregate);
      } else {
        const fieldDef = (0, _channeldef.getFieldDef)(channelDef);
        return fieldDef && !!fieldDef.aggregate;
      }
    }

    return false;
  });
}

function extractTransformsFromEncoding(oldEncoding, config) {
  const groupby = [];
  const bins = [];
  const timeUnits = [];
  const aggregate = [];
  const encoding = {};
  forEach(oldEncoding, (channelDef, channel) => {
    // Extract potential embedded transformations along with remaining properties
    if ((0, _channeldef.isFieldDef)(channelDef)) {
      const {
        field,
        aggregate: aggOp,
        timeUnit,
        bin
      } = channelDef,
            remaining = tslib_1.__rest(channelDef, ["field", "aggregate", "timeUnit", "bin"]);

      if (aggOp || timeUnit || bin) {
        const guide = (0, _channeldef.getGuide)(channelDef);
        const isTitleDefined = guide && guide.title;
        let newField = (0, _channeldef.vgField)(channelDef, {
          forAs: true
        });
        const newFieldDef = Object.assign({}, isTitleDefined ? [] : {
          title: (0, _channeldef.title)(channelDef, config, {
            allowDisabling: true
          })
        }, remaining, {
          // Always overwrite field
          field: newField
        });
        const isPositionChannel = channel === 'x' || channel === 'y';

        if (aggOp) {
          let op;

          if ((0, _aggregate.isArgmaxDef)(aggOp)) {
            op = 'argmax';
            newField = (0, _channeldef.vgField)({
              aggregate: 'argmax',
              field: aggOp.argmax
            }, {
              forAs: true
            });
            newFieldDef.field = `${newField}.${field}`;
          } else if ((0, _aggregate.isArgminDef)(aggOp)) {
            op = 'argmin';
            newField = (0, _channeldef.vgField)({
              aggregate: 'argmin',
              field: aggOp.argmin
            }, {
              forAs: true
            });
            newFieldDef.field = `${newField}.${field}`;
          } else if (aggOp !== 'boxplot' && aggOp !== 'errorbar' && aggOp !== 'errorband') {
            op = aggOp;
          }

          if (op) {
            const aggregateEntry = {
              op,
              as: newField
            };

            if (field) {
              aggregateEntry.field = field;
            }

            aggregate.push(aggregateEntry);
          }
        } else {
          groupby.push(newField);

          if ((0, _channeldef.isTypedFieldDef)(channelDef) && (0, _bin.isBinning)(bin)) {
            bins.push({
              bin,
              field,
              as: newField
            }); // Add additional groupbys for range and end of bins

            groupby.push((0, _channeldef.vgField)(channelDef, {
              binSuffix: 'end'
            }));

            if ((0, _channeldef.binRequiresRange)(channelDef, channel)) {
              groupby.push((0, _channeldef.vgField)(channelDef, {
                binSuffix: 'range'
              }));
            } // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively


            if (isPositionChannel) {
              const secondaryChannel = {
                field: newField + '_end'
              };
              encoding[channel + '2'] = secondaryChannel;
            }

            newFieldDef.bin = 'binned';

            if (!(0, _channel.isSecondaryRangeChannel)(channel)) {
              newFieldDef['type'] = 'quantitative';
            }
          } else if (timeUnit) {
            timeUnits.push({
              timeUnit,
              field,
              as: newField
            }); // Add formatting to appropriate property based on the type of channel we're processing

            const format = (0, _timeunit.getDateTimeComponents)(timeUnit, config.axis.shortTimeLabels).join(' ');
            const formatType = (0, _channeldef.isTypedFieldDef)(channelDef) && channelDef.type !== _type.TEMPORAL && 'time';

            if (channel === 'text' || channel === 'tooltip') {
              newFieldDef['format'] = newFieldDef['format'] || format;

              if (formatType) {
                newFieldDef['formatType'] = formatType;
              }
            } else if ((0, _channel.isNonPositionScaleChannel)(channel)) {
              newFieldDef['legend'] = Object.assign({
                format
              }, formatType ? {
                formatType
              } : {}, newFieldDef['legend']);
            } else if (isPositionChannel) {
              newFieldDef['axis'] = Object.assign({
                format
              }, formatType ? {
                formatType
              } : {}, newFieldDef['axis']);
            }
          }
        } // now the field should refer to post-transformed field instead


        encoding[channel] = newFieldDef;
      } else {
        groupby.push(field);
        encoding[channel] = oldEncoding[channel];
      }
    } else {
      // For value def, just copy
      encoding[channel] = oldEncoding[channel];
    }
  });
  return {
    bins,
    timeUnits,
    aggregate,
    groupby,
    encoding
  };
}

function markChannelCompatible(encoding, channel, mark) {
  const markSupported = (0, _channel.supportMark)(channel, mark);

  if (!markSupported) {
    return false;
  } else if (markSupported === 'binned') {
    const primaryFieldDef = encoding[channel === 'x2' ? 'x' : 'y']; // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef
    // has "binned" data and thus need x2/y2 to specify the bin-end field.

    if ((0, _channeldef.isFieldDef)(primaryFieldDef) && (0, _channeldef.isFieldDef)(encoding[channel]) && (0, _bin.isBinned)(primaryFieldDef.bin)) {
      return true;
    } else {
      return false;
    }
  }

  return true;
}

function normalizeEncoding(encoding, mark) {
  return (0, _util.keys)(encoding).reduce((normalizedEncoding, channel) => {
    if (!(0, _channel.isChannel)(channel)) {
      // Drop invalid channel
      log.warn(log.message.invalidEncodingChannel(channel));
      return normalizedEncoding;
    }

    if (!markChannelCompatible(encoding, channel, mark)) {
      // Drop unsupported channel
      log.warn(log.message.incompatibleChannel(channel, mark));
      return normalizedEncoding;
    } // Drop line's size if the field is aggregated.


    if (channel === 'size' && mark === 'line') {
      const fieldDef = (0, _channeldef.getTypedFieldDef)(encoding[channel]);

      if (fieldDef && fieldDef.aggregate) {
        log.warn(log.message.LINE_WITH_VARYING_SIZE);
        return normalizedEncoding;
      }
    } // Drop color if either fill or stroke is specified


    if (channel === 'color' && ('fill' in encoding || 'stroke' in encoding)) {
      log.warn(log.message.droppingColor('encoding', {
        fill: 'fill' in encoding,
        stroke: 'stroke' in encoding
      }));
      return normalizedEncoding;
    }

    const channelDef = encoding[channel];

    if (channel === 'detail' || channel === 'order' && !(0, _vegaUtil.isArray)(channelDef) && !(0, _channeldef.isValueDef)(channelDef) || channel === 'tooltip' && (0, _vegaUtil.isArray)(channelDef)) {
      if (channelDef) {
        // Array of fieldDefs for detail channel (or production rule)
        normalizedEncoding[channel] = ((0, _vegaUtil.isArray)(channelDef) ? channelDef : [channelDef]).reduce((defs, fieldDef) => {
          if (!(0, _channeldef.isFieldDef)(fieldDef)) {
            log.warn(log.message.emptyFieldDef(fieldDef, channel));
          } else {
            defs.push((0, _channeldef.normalizeFieldDef)(fieldDef, channel));
          }

          return defs;
        }, []);
      }
    } else {
      if (channel === 'tooltip' && channelDef === null) {
        // Preserve null so we can use it to disable tooltip
        normalizedEncoding[channel] = null;
      } else if (!(0, _channeldef.isFieldDef)(channelDef) && !(0, _channeldef.isValueDef)(channelDef) && !(0, _channeldef.isConditionalDef)(channelDef)) {
        log.warn(log.message.emptyFieldDef(channelDef, channel));
        return normalizedEncoding;
      }

      normalizedEncoding[channel] = (0, _channeldef.normalize)(channelDef, channel);
    }

    return normalizedEncoding;
  }, {});
}

function fieldDefs(encoding) {
  const arr = [];

  for (const channel of (0, _util.keys)(encoding)) {
    if (channelHasField(encoding, channel)) {
      const channelDef = encoding[channel];
      ((0, _vegaUtil.isArray)(channelDef) ? channelDef : [channelDef]).forEach(def => {
        if ((0, _channeldef.isFieldDef)(def)) {
          arr.push(def);
        } else if ((0, _channeldef.hasConditionalFieldDef)(def)) {
          arr.push(def.condition);
        }
      });
    }
  }

  return arr;
}

function forEach(mapping, f, thisArg) {
  if (!mapping) {
    return;
  }

  for (const channel of (0, _util.keys)(mapping)) {
    const el = mapping[channel];

    if ((0, _vegaUtil.isArray)(el)) {
      el.forEach(channelDef => {
        f.call(thisArg, channelDef, channel);
      });
    } else {
      f.call(thisArg, el, channel);
    }
  }
}

function reduce(mapping, f, init, thisArg) {
  if (!mapping) {
    return init;
  }

  return (0, _util.keys)(mapping).reduce((r, channel) => {
    const map = mapping[channel];

    if ((0, _vegaUtil.isArray)(map)) {
      return map.reduce((r1, channelDef) => {
        return f.call(thisArg, r1, channelDef, channel);
      }, r);
    } else {
      return f.call(thisArg, r, map, channel);
    }
  }, init);
}
/**
 * Returns list of path grouping fields for the given encoding
 */


function pathGroupingFields(mark, encoding) {
  return (0, _util.keys)(encoding).reduce((details, channel) => {
    switch (channel) {
      // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, cursor should not cause lines to group
      case 'x':
      case 'y':
      case 'href':
      case 'x2':
      case 'y2': // falls through

      case 'latitude':
      case 'longitude':
      case 'latitude2':
      case 'longitude2': // TODO: case 'cursor':
      // text, shape, shouldn't be a part of line/trail/area [falls through]

      case 'text':
      case 'shape': // falls through
      // tooltip fields should not be added to group by [falls through]

      case 'tooltip':
        return details;

      case 'order':
        // order should not group line / trail
        if (mark === 'line' || mark === 'trail') {
          return details;
        }

      // but order should group area for stacking (falls through)

      case 'detail':
      case 'key':
        {
          const channelDef = encoding[channel];

          if ((0, _vegaUtil.isArray)(channelDef) || (0, _channeldef.isFieldDef)(channelDef)) {
            ((0, _vegaUtil.isArray)(channelDef) ? channelDef : [channelDef]).forEach(fieldDef => {
              if (!fieldDef.aggregate) {
                details.push((0, _channeldef.vgField)(fieldDef, {}));
              }
            });
          }

          return details;
        }

      case 'size':
        if (mark === 'trail') {
          // For trail, size should not group trail lines.
          return details;
        }

      // For line, size should group lines.
      // falls through

      case 'color':
      case 'fill':
      case 'stroke':
      case 'opacity':
      case 'fillOpacity':
      case 'strokeOpacity':
      case 'strokeWidth':
        {
          // TODO strokeDashOffset:
          // falls through
          const fieldDef = (0, _channeldef.getTypedFieldDef)(encoding[channel]);

          if (fieldDef && !fieldDef.aggregate) {
            details.push((0, _channeldef.vgField)(fieldDef, {}));
          }

          return details;
        }
    }
  }, []);
}
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./aggregate":"node_modules/vega-lite/build/src/aggregate.js","./bin":"node_modules/vega-lite/build/src/bin.js","./channel":"node_modules/vega-lite/build/src/channel.js","./channeldef":"node_modules/vega-lite/build/src/channeldef.js","./log":"node_modules/vega-lite/build/src/log/index.js","./timeunit":"node_modules/vega-lite/build/src/timeunit.js","./type":"node_modules/vega-lite/build/src/type.js","./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/compositemark/common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterTooltipWithAggregatedField = filterTooltipWithAggregatedField;
exports.getCompositeMarkTooltip = getCompositeMarkTooltip;
exports.makeCompositeAggregatePartFactory = makeCompositeAggregatePartFactory;
exports.partLayerMixins = partLayerMixins;
exports.compositeMarkContinuousAxis = compositeMarkContinuousAxis;
exports.compositeMarkOrient = compositeMarkOrient;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var _channeldef = require("../channeldef");

var _encoding = require("../encoding");

var log = _interopRequireWildcard(require("../log"));

var _mark = require("../mark");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function filterTooltipWithAggregatedField(oldEncoding) {
  const {
    tooltip
  } = oldEncoding,
        filteredEncoding = tslib_1.__rest(oldEncoding, ["tooltip"]);

  if (!tooltip) {
    return {
      filteredEncoding: oldEncoding
    };
  }

  let customTooltipWithAggregatedField;
  let customTooltipWithoutAggregatedField;

  if ((0, _vegaUtil.isArray)(tooltip)) {
    tooltip.forEach(t => {
      if (t.aggregate) {
        if (!customTooltipWithAggregatedField) {
          customTooltipWithAggregatedField = [];
        }

        customTooltipWithAggregatedField.push(t);
      } else {
        if (!customTooltipWithoutAggregatedField) {
          customTooltipWithoutAggregatedField = [];
        }

        customTooltipWithoutAggregatedField.push(t);
      }
    });

    if (customTooltipWithAggregatedField) {
      filteredEncoding.tooltip = customTooltipWithAggregatedField;
    }
  } else {
    if (tooltip['aggregate']) {
      filteredEncoding.tooltip = tooltip;
    } else {
      customTooltipWithoutAggregatedField = tooltip;
    }
  }

  if ((0, _vegaUtil.isArray)(customTooltipWithoutAggregatedField) && customTooltipWithoutAggregatedField.length === 1) {
    customTooltipWithoutAggregatedField = customTooltipWithoutAggregatedField[0];
  }

  return {
    customTooltipWithoutAggregatedField,
    filteredEncoding
  };
}

function getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, withFieldName = true) {
  if ('tooltip' in encodingWithoutContinuousAxis) {
    return {
      tooltip: encodingWithoutContinuousAxis.tooltip
    };
  }

  const fiveSummaryTooltip = tooltipSummary.map(({
    fieldPrefix,
    titlePrefix
  }) => ({
    field: fieldPrefix + continuousAxisChannelDef.field,
    type: continuousAxisChannelDef.type,
    title: titlePrefix + (withFieldName ? ' of ' + continuousAxisChannelDef.field : '')
  }));
  return {
    tooltip: [...fiveSummaryTooltip, // need to cast because TextFieldDef support fewer types of bin
    ...(0, _encoding.fieldDefs)(encodingWithoutContinuousAxis)]
  };
}

function makeCompositeAggregatePartFactory(compositeMarkDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, compositeMarkConfig) {
  const {
    scale,
    axis
  } = continuousAxisChannelDef;
  return ({
    partName,
    mark,
    positionPrefix,
    endPositionPrefix = undefined,
    extraEncoding = {}
  }) => {
    const title = axis && axis.title !== undefined ? undefined : continuousAxisChannelDef.title !== undefined ? continuousAxisChannelDef.title : continuousAxisChannelDef.field;
    return partLayerMixins(compositeMarkDef, partName, compositeMarkConfig, {
      mark,
      encoding: Object.assign({
        [continuousAxis]: Object.assign({
          field: positionPrefix + '_' + continuousAxisChannelDef.field,
          type: continuousAxisChannelDef.type
        }, title ? {
          title
        } : {}, scale ? {
          scale
        } : {}, axis ? {
          axis
        } : {})
      }, (0, _vegaUtil.isString)(endPositionPrefix) ? {
        [continuousAxis + '2']: {
          field: endPositionPrefix + '_' + continuousAxisChannelDef.field,
          type: continuousAxisChannelDef.type
        }
      } : {}, sharedEncoding, extraEncoding)
    });
  };
}

function partLayerMixins(markDef, part, compositeMarkConfig, partBaseSpec) {
  const {
    clip,
    color,
    opacity
  } = markDef;
  const mark = markDef.type;

  if (markDef[part] || markDef[part] === undefined && compositeMarkConfig[part]) {
    return [Object.assign({}, partBaseSpec, {
      mark: Object.assign({}, compositeMarkConfig[part], clip ? {
        clip
      } : {}, color ? {
        color
      } : {}, opacity ? {
        opacity
      } : {}, (0, _mark.isMarkDef)(partBaseSpec.mark) ? partBaseSpec.mark : {
        type: partBaseSpec.mark
      }, {
        style: `${mark}-${part}`
      }, (0, _vegaUtil.isBoolean)(markDef[part]) ? {} : markDef[part])
    })];
  }

  return [];
}

function compositeMarkContinuousAxis(spec, orient, compositeMark) {
  const {
    encoding
  } = spec;
  const continuousAxis = orient === 'vertical' ? 'y' : 'x';
  const continuousAxisChannelDef = encoding[continuousAxis]; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.

  const continuousAxisChannelDef2 = encoding[continuousAxis + '2'];
  const continuousAxisChannelDefError = encoding[continuousAxis + 'Error'];
  const continuousAxisChannelDefError2 = encoding[continuousAxis + 'Error2'];
  return {
    continuousAxisChannelDef: filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),
    continuousAxisChannelDef2: filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),
    continuousAxisChannelDefError: filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),
    continuousAxisChannelDefError2: filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),
    continuousAxis
  };
}

function filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark) {
  if (continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {
    const {
      aggregate
    } = continuousAxisChannelDef,
          continuousAxisWithoutAggregate = tslib_1.__rest(continuousAxisChannelDef, ["aggregate"]);

    if (aggregate !== compositeMark) {
      log.warn(log.message.errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));
    }

    return continuousAxisWithoutAggregate;
  } else {
    return continuousAxisChannelDef;
  }
}

function compositeMarkOrient(spec, compositeMark) {
  const {
    mark,
    encoding
  } = spec;

  if ((0, _channeldef.isFieldDef)(encoding.x) && (0, _channeldef.isContinuous)(encoding.x)) {
    // x is continuous
    if ((0, _channeldef.isFieldDef)(encoding.y) && (0, _channeldef.isContinuous)(encoding.y)) {
      // both x and y are continuous
      if (encoding.x.aggregate === undefined && encoding.y.aggregate === compositeMark) {
        return 'vertical';
      } else if (encoding.y.aggregate === undefined && encoding.x.aggregate === compositeMark) {
        return 'horizontal';
      } else if (encoding.x.aggregate === compositeMark && encoding.y.aggregate === compositeMark) {
        throw new Error('Both x and y cannot have aggregate');
      } else {
        if ((0, _mark.isMarkDef)(mark) && mark.orient) {
          return mark.orient;
        } // default orientation = vertical


        return 'vertical';
      }
    } // x is continuous but y is not


    return 'horizontal';
  } else if ((0, _channeldef.isFieldDef)(encoding.y) && (0, _channeldef.isContinuous)(encoding.y)) {
    // y is continuous but x is not
    return 'vertical';
  } else {
    // Neither x nor y is continuous.
    throw new Error('Need a valid continuous axis for ' + compositeMark + 's');
  }
}
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../encoding":"node_modules/vega-lite/build/src/encoding.js","../log":"node_modules/vega-lite/build/src/log/index.js","../mark":"node_modules/vega-lite/build/src/mark.js"}],"node_modules/vega-lite/build/src/compositemark/boxplot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBoxPlotType = getBoxPlotType;
exports.normalizeBoxPlot = normalizeBoxPlot;
exports.boxPlotNormalizer = exports.BOXPLOT_PARTS = exports.BOXPLOT = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var _encoding2 = require("../encoding");

var log = _interopRequireWildcard(require("../log"));

var _mark = require("../mark");

var _util = require("../util");

var _base = require("./base");

var _common = require("./common");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const BOXPLOT = 'boxplot';
exports.BOXPLOT = BOXPLOT;
const BOXPLOT_PART_INDEX = {
  box: 1,
  median: 1,
  outliers: 1,
  rule: 1,
  ticks: 1
};
const BOXPLOT_PARTS = (0, _util.keys)(BOXPLOT_PART_INDEX);
exports.BOXPLOT_PARTS = BOXPLOT_PARTS;
const boxPlotNormalizer = new _base.CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);
exports.boxPlotNormalizer = boxPlotNormalizer;

function getBoxPlotType(extent) {
  if ((0, _vegaUtil.isNumber)(extent)) {
    return 'tukey';
  } // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`.  However, I'm not exposing this for now.


  return extent;
}

function normalizeBoxPlot(spec, {
  config
}) {
  // TODO: use selection
  const {
    mark,
    encoding: _encoding,
    selection,
    projection: _p
  } = spec,
        outerSpec = tslib_1.__rest(spec, ["mark", "encoding", "selection", "projection"]);

  const markDef = (0, _mark.isMarkDef)(mark) ? mark : {
    type: mark
  }; // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support

  if (selection) {
    log.warn(log.message.selectionNotSupported('boxplot'));
  }

  const extent = markDef.extent || config.boxplot.extent;
  const sizeValue = (0, _util.getFirstDefined)(markDef.size, config.boxplot.size);
  const boxPlotType = getBoxPlotType(extent);
  const {
    transform,
    continuousAxisChannelDef,
    continuousAxis,
    groupby,
    aggregate,
    encodingWithoutContinuousAxis,
    ticksOrient,
    customTooltipWithoutAggregatedField
  } = boxParams(spec, extent, config);

  const {
    color,
    size
  } = encodingWithoutContinuousAxis,
        encodingWithoutSizeColorAndContinuousAxis = tslib_1.__rest(encodingWithoutContinuousAxis, ["color", "size"]);

  const makeBoxPlotPart = sharedEncoding => {
    return (0, _common.makeCompositeAggregatePartFactory)(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);
  };

  const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);
  const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);
  const makeBoxPlotMidTick = makeBoxPlotPart(Object.assign({}, encodingWithoutSizeColorAndContinuousAxis, size ? {
    size
  } : {}));
  const fiveSummaryTooltipEncoding = (0, _common.getCompositeMarkTooltip)([{
    fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_',
    titlePrefix: 'Max'
  }, {
    fieldPrefix: 'upper_box_',
    titlePrefix: 'Q3'
  }, {
    fieldPrefix: 'mid_box_',
    titlePrefix: 'Median'
  }, {
    fieldPrefix: 'lower_box_',
    titlePrefix: 'Q1'
  }, {
    fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_',
    titlePrefix: 'Min'
  }], continuousAxisChannelDef, encodingWithoutContinuousAxis); // ## Whisker Layers

  const endTick = {
    type: 'tick',
    color: 'black',
    opacity: 1,
    orient: ticksOrient
  };
  const whiskerTooltipEncoding = boxPlotType === 'min-max' ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker
  : // for tukey / k-IQR, just show upper/lower-whisker
  (0, _common.getCompositeMarkTooltip)([{
    fieldPrefix: 'upper_whisker_',
    titlePrefix: 'Upper Whisker'
  }, {
    fieldPrefix: 'lower_whisker_',
    titlePrefix: 'Lower Whisker'
  }], continuousAxisChannelDef, encodingWithoutContinuousAxis);
  const whiskerLayers = [...makeBoxPlotExtent({
    partName: 'rule',
    mark: 'rule',
    positionPrefix: 'lower_whisker',
    endPositionPrefix: 'lower_box',
    extraEncoding: whiskerTooltipEncoding
  }), ...makeBoxPlotExtent({
    partName: 'rule',
    mark: 'rule',
    positionPrefix: 'upper_box',
    endPositionPrefix: 'upper_whisker',
    extraEncoding: whiskerTooltipEncoding
  }), ...makeBoxPlotExtent({
    partName: 'ticks',
    mark: endTick,
    positionPrefix: 'lower_whisker',
    extraEncoding: whiskerTooltipEncoding
  }), ...makeBoxPlotExtent({
    partName: 'ticks',
    mark: endTick,
    positionPrefix: 'upper_whisker',
    extraEncoding: whiskerTooltipEncoding
  })]; // ## Box Layers
  // TODO: support hiding certain mark parts

  const boxLayers = [...(boxPlotType !== 'tukey' ? whiskerLayers : []), ...makeBoxPlotBox({
    partName: 'box',
    mark: Object.assign({
      type: 'bar'
    }, sizeValue ? {
      size: sizeValue
    } : {}),
    positionPrefix: 'lower_box',
    endPositionPrefix: 'upper_box',
    extraEncoding: fiveSummaryTooltipEncoding
  }), ...makeBoxPlotMidTick({
    partName: 'median',
    mark: Object.assign({
      type: 'tick'
    }, (0, _vegaUtil.isObject)(config.boxplot.median) && config.boxplot.median.color ? {
      color: config.boxplot.median.color
    } : {}, sizeValue ? {
      size: sizeValue
    } : {}, {
      orient: ticksOrient
    }),
    positionPrefix: 'mid_box',
    extraEncoding: fiveSummaryTooltipEncoding
  })]; // ## Filtered Layers

  let filteredLayersMixins;

  if (boxPlotType !== 'min-max') {
    const lowerBoxExpr = `datum["lower_box_${continuousAxisChannelDef.field}"]`;
    const upperBoxExpr = `datum["upper_box_${continuousAxisChannelDef.field}"]`;
    const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;
    const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent} * ${iqrExpr}`;
    const upperWhiskerExpr = `${upperBoxExpr} + ${extent} * ${iqrExpr}`;
    const fieldExpr = `datum["${continuousAxisChannelDef.field}"]`;
    const joinaggregateTransform = {
      joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),
      groupby
    };
    let filteredWhiskerSpec = undefined;

    if (boxPlotType === 'tukey') {
      filteredWhiskerSpec = {
        transform: [{
          filter: `(${lowerWhiskerExpr} <= ${fieldExpr}) && (${fieldExpr} <= ${upperWhiskerExpr})`
        }, {
          aggregate: [{
            op: 'min',
            field: continuousAxisChannelDef.field,
            as: 'lower_whisker_' + continuousAxisChannelDef.field
          }, {
            op: 'max',
            field: continuousAxisChannelDef.field,
            as: 'upper_whisker_' + continuousAxisChannelDef.field
          }, // preserve lower_box / upper_box
          {
            op: 'min',
            field: 'lower_box_' + continuousAxisChannelDef.field,
            as: 'lower_box_' + continuousAxisChannelDef.field
          }, {
            op: 'max',
            field: 'upper_box_' + continuousAxisChannelDef.field,
            as: 'upper_box_' + continuousAxisChannelDef.field
          }, ...aggregate],
          groupby
        }],
        layer: whiskerLayers
      };
    }

    const {
      tooltip
    } = encodingWithoutSizeColorAndContinuousAxis,
          encodingWithoutSizeColorContinuousAxisAndTooltip = tslib_1.__rest(encodingWithoutSizeColorAndContinuousAxis, ["tooltip"]);

    const outlierLayersMixins = (0, _common.partLayerMixins)(markDef, 'outliers', config.boxplot, {
      transform: [{
        filter: `(${fieldExpr} < ${lowerWhiskerExpr}) || (${fieldExpr} > ${upperWhiskerExpr})`
      }],
      mark: 'point',
      encoding: Object.assign({
        [continuousAxis]: {
          field: continuousAxisChannelDef.field,
          type: continuousAxisChannelDef.type
        }
      }, encodingWithoutSizeColorContinuousAxisAndTooltip, customTooltipWithoutAggregatedField ? {
        tooltip: customTooltipWithoutAggregatedField
      } : {})
    })[0];

    if (outlierLayersMixins && filteredWhiskerSpec) {
      filteredLayersMixins = {
        transform: [joinaggregateTransform],
        layer: [outlierLayersMixins, filteredWhiskerSpec]
      };
    } else if (outlierLayersMixins) {
      filteredLayersMixins = outlierLayersMixins;
      filteredLayersMixins.transform.unshift(joinaggregateTransform);
    } else if (filteredWhiskerSpec) {
      filteredLayersMixins = filteredWhiskerSpec;
      filteredLayersMixins.transform.unshift(joinaggregateTransform);
    }
  }

  if (filteredLayersMixins) {
    // tukey box plot with outliers included
    return Object.assign({}, outerSpec, {
      layer: [...(filteredLayersMixins ? [filteredLayersMixins] : []), {
        // boxplot
        transform,
        layer: boxLayers
      }]
    });
  }

  return Object.assign({}, outerSpec, {
    transform: (outerSpec.transform || []).concat(transform),
    layer: boxLayers
  });
}

function boxParamsQuartiles(continousAxisField) {
  return [{
    op: 'q1',
    field: continousAxisField,
    as: 'lower_box_' + continousAxisField
  }, {
    op: 'q3',
    field: continousAxisField,
    as: 'upper_box_' + continousAxisField
  }];
}

function boxParams(spec, extent, config) {
  const orient = (0, _common.compositeMarkOrient)(spec, BOXPLOT);
  const {
    continuousAxisChannelDef,
    continuousAxis
  } = (0, _common.compositeMarkContinuousAxis)(spec, orient, BOXPLOT);
  const continuousFieldName = continuousAxisChannelDef.field;
  const boxPlotType = getBoxPlotType(extent);
  const boxplotSpecificAggregate = [...boxParamsQuartiles(continuousFieldName), {
    op: 'median',
    field: continuousFieldName,
    as: 'mid_box_' + continuousFieldName
  }, {
    op: 'min',
    field: continuousFieldName,
    as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName
  }, {
    op: 'max',
    field: continuousFieldName,
    as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName
  }];
  const postAggregateCalculates = boxPlotType === 'min-max' || boxPlotType === 'tukey' ? [] : [// This is for the  original k-IQR, which we do not expose
  {
    calculate: `datum["upper_box_${continuousFieldName}"] - datum["lower_box_${continuousFieldName}"]`,
    as: 'iqr_' + continuousFieldName
  }, {
    calculate: `min(datum["upper_box_${continuousFieldName}"] + datum["iqr_${continuousFieldName}"] * ${extent}, datum["max_${continuousFieldName}"])`,
    as: 'upper_whisker_' + continuousFieldName
  }, {
    calculate: `max(datum["lower_box_${continuousFieldName}"] - datum["iqr_${continuousFieldName}"] * ${extent}, datum["min_${continuousFieldName}"])`,
    as: 'lower_whisker_' + continuousFieldName
  }];

  const _a = spec.encoding,
        _b = continuousAxis,
        oldContinuousAxisChannelDef = _a[_b],
        oldEncodingWithoutContinuousAxis = tslib_1.__rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);

  const {
    customTooltipWithoutAggregatedField,
    filteredEncoding
  } = (0, _common.filterTooltipWithAggregatedField)(oldEncodingWithoutContinuousAxis);
  const {
    bins,
    timeUnits,
    aggregate,
    groupby,
    encoding: encodingWithoutContinuousAxis
  } = (0, _encoding2.extractTransformsFromEncoding)(filteredEncoding, config);
  const ticksOrient = orient === 'vertical' ? 'horizontal' : 'vertical';
  return {
    transform: [...bins, ...timeUnits, {
      aggregate: [...aggregate, ...boxplotSpecificAggregate],
      groupby
    }, ...postAggregateCalculates],
    groupby,
    aggregate,
    continuousAxisChannelDef,
    continuousAxis,
    encodingWithoutContinuousAxis,
    ticksOrient,
    customTooltipWithoutAggregatedField
  };
}
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../encoding":"node_modules/vega-lite/build/src/encoding.js","../log":"node_modules/vega-lite/build/src/log/index.js","../mark":"node_modules/vega-lite/build/src/mark.js","../util":"node_modules/vega-lite/build/src/util.js","./base":"node_modules/vega-lite/build/src/compositemark/base.js","./common":"node_modules/vega-lite/build/src/compositemark/common.js"}],"node_modules/vega-lite/build/src/compositemark/errorbar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeErrorBar = normalizeErrorBar;
exports.errorBarParams = errorBarParams;
exports.errorBarNormalizer = exports.ERRORBAR_PARTS = exports.ERRORBAR = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _channeldef = require("../channeldef");

var _encoding = require("../encoding");

var log = _interopRequireWildcard(require("../log"));

var _mark = require("../mark");

var _util = require("../util");

var _base = require("./base");

var _common = require("./common");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const ERRORBAR = 'errorbar';
exports.ERRORBAR = ERRORBAR;
const ERRORBAR_PART_INDEX = {
  ticks: 1,
  rule: 1
};
const ERRORBAR_PARTS = (0, _util.keys)(ERRORBAR_PART_INDEX);
exports.ERRORBAR_PARTS = ERRORBAR_PARTS;
const errorBarNormalizer = new _base.CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);
exports.errorBarNormalizer = errorBarNormalizer;

function normalizeErrorBar(spec, {
  config
}) {
  const {
    transform,
    continuousAxisChannelDef,
    continuousAxis,
    encodingWithoutContinuousAxis,
    ticksOrient,
    markDef,
    outerSpec,
    tooltipEncoding
  } = errorBarParams(spec, ERRORBAR, config);
  const makeErrorBarPart = (0, _common.makeCompositeAggregatePartFactory)(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);
  const tick = {
    type: 'tick',
    orient: ticksOrient
  };
  return Object.assign({}, outerSpec, {
    transform,
    layer: [...makeErrorBarPart({
      partName: 'ticks',
      mark: tick,
      positionPrefix: 'lower',
      extraEncoding: tooltipEncoding
    }), ...makeErrorBarPart({
      partName: 'ticks',
      mark: tick,
      positionPrefix: 'upper',
      extraEncoding: tooltipEncoding
    }), ...makeErrorBarPart({
      partName: 'rule',
      mark: 'rule',
      positionPrefix: 'lower',
      endPositionPrefix: 'upper',
      extraEncoding: tooltipEncoding
    })]
  });
}

function errorBarOrientAndInputType(spec, compositeMark) {
  const {
    encoding
  } = spec;

  if (errorBarIsInputTypeRaw(encoding)) {
    return {
      orient: (0, _common.compositeMarkOrient)(spec, compositeMark),
      inputType: 'raw'
    };
  }

  const isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);
  const isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);
  const x = encoding.x;
  const y = encoding.y;

  if (isTypeAggregatedUpperLower) {
    // type is aggregated-upper-lower
    if (isTypeAggregatedError) {
      throw new Error(compositeMark + ' cannot be both type aggregated-upper-lower and aggregated-error');
    }

    const x2 = encoding.x2;
    const y2 = encoding.y2;

    if ((0, _channeldef.isFieldDef)(x2) && (0, _channeldef.isFieldDef)(y2)) {
      // having both x, x2 and y, y2
      throw new Error(compositeMark + ' cannot have both x2 and y2');
    } else if ((0, _channeldef.isFieldDef)(x2)) {
      if ((0, _channeldef.isFieldDef)(x) && (0, _channeldef.isContinuous)(x)) {
        // having x, x2 quantitative and field y, y2 are not specified
        return {
          orient: 'horizontal',
          inputType: 'aggregated-upper-lower'
        };
      } else {
        // having x, x2 that are not both quantitative
        throw new Error('Both x and x2 have to be quantitative in ' + compositeMark);
      }
    } else if ((0, _channeldef.isFieldDef)(y2)) {
      // y2 is a FieldDef
      if ((0, _channeldef.isFieldDef)(y) && (0, _channeldef.isContinuous)(y)) {
        // having y, y2 quantitative and field x, x2 are not specified
        return {
          orient: 'vertical',
          inputType: 'aggregated-upper-lower'
        };
      } else {
        // having y, y2 that are not both quantitative
        throw new Error('Both y and y2 have to be quantitative in ' + compositeMark);
      }
    }

    throw new Error('No ranged axis');
  } else {
    // type is aggregated-error
    const xError = encoding.xError;
    const xError2 = encoding.xError2;
    const yError = encoding.yError;
    const yError2 = encoding.yError2;

    if ((0, _channeldef.isFieldDef)(xError2) && !(0, _channeldef.isFieldDef)(xError)) {
      // having xError2 without xError
      throw new Error(compositeMark + ' cannot have xError2 without xError');
    }

    if ((0, _channeldef.isFieldDef)(yError2) && !(0, _channeldef.isFieldDef)(yError)) {
      // having yError2 without yError
      throw new Error(compositeMark + ' cannot have yError2 without yError');
    }

    if ((0, _channeldef.isFieldDef)(xError) && (0, _channeldef.isFieldDef)(yError)) {
      // having both xError and yError
      throw new Error(compositeMark + ' cannot have both xError and yError with both are quantiative');
    } else if ((0, _channeldef.isFieldDef)(xError)) {
      if ((0, _channeldef.isFieldDef)(x) && (0, _channeldef.isContinuous)(x)) {
        // having x and xError that are all quantitative
        return {
          orient: 'horizontal',
          inputType: 'aggregated-error'
        };
      } else {
        // having x, xError, and xError2 that are not all quantitative
        throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');
      }
    } else if ((0, _channeldef.isFieldDef)(yError)) {
      if ((0, _channeldef.isFieldDef)(y) && (0, _channeldef.isContinuous)(y)) {
        // having y and yError that are all quantitative
        return {
          orient: 'vertical',
          inputType: 'aggregated-error'
        };
      } else {
        // having y, yError, and yError2 that are not all quantitative
        throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');
      }
    }

    throw new Error('No ranged axis');
  }
}

function errorBarIsInputTypeRaw(encoding) {
  return ((0, _channeldef.isFieldDef)(encoding.x) || (0, _channeldef.isFieldDef)(encoding.y)) && !(0, _channeldef.isFieldDef)(encoding.x2) && !(0, _channeldef.isFieldDef)(encoding.y2) && !(0, _channeldef.isFieldDef)(encoding.xError) && !(0, _channeldef.isFieldDef)(encoding.xError2) && !(0, _channeldef.isFieldDef)(encoding.yError) && !(0, _channeldef.isFieldDef)(encoding.yError2);
}

function errorBarIsInputTypeAggregatedUpperLower(encoding) {
  return (0, _channeldef.isFieldDef)(encoding.x2) || (0, _channeldef.isFieldDef)(encoding.y2);
}

function errorBarIsInputTypeAggregatedError(encoding) {
  return (0, _channeldef.isFieldDef)(encoding.xError) || (0, _channeldef.isFieldDef)(encoding.xError2) || (0, _channeldef.isFieldDef)(encoding.yError) || (0, _channeldef.isFieldDef)(encoding.yError2);
}

function errorBarParams(spec, compositeMark, config) {
  // TODO: use selection
  const {
    mark,
    encoding,
    selection,
    projection: _p
  } = spec,
        outerSpec = tslib_1.__rest(spec, ["mark", "encoding", "selection", "projection"]);

  const markDef = (0, _mark.isMarkDef)(mark) ? mark : {
    type: mark
  }; // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support

  if (selection) {
    log.warn(log.message.selectionNotSupported(compositeMark));
  }

  const {
    orient,
    inputType
  } = errorBarOrientAndInputType(spec, compositeMark);
  const {
    continuousAxisChannelDef,
    continuousAxisChannelDef2,
    continuousAxisChannelDefError,
    continuousAxisChannelDefError2,
    continuousAxis
  } = (0, _common.compositeMarkContinuousAxis)(spec, orient, compositeMark);
  const {
    errorBarSpecificAggregate,
    postAggregateCalculates,
    tooltipSummary,
    tooltipTitleWithFieldName
  } = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config);

  const _a = continuousAxis,
        oldContinuousAxisChannelDef = encoding[_a],
        _b = continuousAxis === 'x' ? 'x2' : 'y2',
        oldContinuousAxisChannelDef2 = encoding[_b],
        _c = continuousAxis === 'x' ? 'xError' : 'yError',
        oldContinuousAxisChannelDefError = encoding[_c],
        _d = continuousAxis === 'x' ? 'xError2' : 'yError2',
        oldContinuousAxisChannelDefError2 = encoding[_d],
        oldEncodingWithoutContinuousAxis = tslib_1.__rest(encoding, [typeof _a === "symbol" ? _a : _a + "", typeof _b === "symbol" ? _b : _b + "", typeof _c === "symbol" ? _c : _c + "", typeof _d === "symbol" ? _d : _d + ""]);

  const {
    bins,
    timeUnits,
    aggregate: oldAggregate,
    groupby: oldGroupBy,
    encoding: encodingWithoutContinuousAxis
  } = (0, _encoding.extractTransformsFromEncoding)(oldEncodingWithoutContinuousAxis, config);
  const aggregate = [...oldAggregate, ...errorBarSpecificAggregate];
  const groupby = inputType !== 'raw' ? [] : oldGroupBy;
  const tooltipEncoding = (0, _common.getCompositeMarkTooltip)(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);
  return {
    transform: [...(outerSpec.transform || []), ...bins, ...timeUnits, ...(!aggregate.length ? [] : [{
      aggregate,
      groupby
    }]), ...postAggregateCalculates],
    groupby,
    continuousAxisChannelDef,
    continuousAxis,
    encodingWithoutContinuousAxis,
    ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',
    markDef,
    outerSpec,
    tooltipEncoding
  };
}

function errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {
  let errorBarSpecificAggregate = [];
  let postAggregateCalculates = [];
  const continuousFieldName = continuousAxisChannelDef.field;
  let tooltipSummary;
  let tooltipTitleWithFieldName = false;

  if (inputType === 'raw') {
    const center = markDef.center ? markDef.center : markDef.extent ? markDef.extent === 'iqr' ? 'median' : 'mean' : config.errorbar.center;
    const extent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';

    if (center === 'median' !== (extent === 'iqr')) {
      log.warn(log.message.errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));
    }

    if (extent === 'stderr' || extent === 'stdev') {
      errorBarSpecificAggregate = [{
        op: extent,
        field: continuousFieldName,
        as: 'extent_' + continuousFieldName
      }, {
        op: center,
        field: continuousFieldName,
        as: 'center_' + continuousFieldName
      }];
      postAggregateCalculates = [{
        calculate: `datum["center_${continuousFieldName}"] + datum["extent_${continuousFieldName}"]`,
        as: 'upper_' + continuousFieldName
      }, {
        calculate: `datum["center_${continuousFieldName}"] - datum["extent_${continuousFieldName}"]`,
        as: 'lower_' + continuousFieldName
      }];
      tooltipSummary = [{
        fieldPrefix: 'center_',
        titlePrefix: (0, _util.titlecase)(center)
      }, {
        fieldPrefix: 'upper_',
        titlePrefix: getTitlePrefix(center, extent, '+')
      }, {
        fieldPrefix: 'lower_',
        titlePrefix: getTitlePrefix(center, extent, '-')
      }];
      tooltipTitleWithFieldName = true;
    } else {
      if (markDef.center && markDef.extent) {
        log.warn(log.message.errorBarCenterIsNotNeeded(markDef.extent, compositeMark));
      }

      let centerOp;
      let lowerExtentOp;
      let upperExtentOp;

      if (extent === 'ci') {
        centerOp = 'mean';
        lowerExtentOp = 'ci0';
        upperExtentOp = 'ci1';
      } else {
        centerOp = 'median';
        lowerExtentOp = 'q1';
        upperExtentOp = 'q3';
      }

      errorBarSpecificAggregate = [{
        op: lowerExtentOp,
        field: continuousFieldName,
        as: 'lower_' + continuousFieldName
      }, {
        op: upperExtentOp,
        field: continuousFieldName,
        as: 'upper_' + continuousFieldName
      }, {
        op: centerOp,
        field: continuousFieldName,
        as: 'center_' + continuousFieldName
      }];
      tooltipSummary = [{
        fieldPrefix: 'upper_',
        titlePrefix: (0, _channeldef.title)({
          field: continuousFieldName,
          aggregate: upperExtentOp,
          type: 'quantitative'
        }, config, {
          allowDisabling: false
        })
      }, {
        fieldPrefix: 'lower_',
        titlePrefix: (0, _channeldef.title)({
          field: continuousFieldName,
          aggregate: lowerExtentOp,
          type: 'quantitative'
        }, config, {
          allowDisabling: false
        })
      }, {
        fieldPrefix: 'center_',
        titlePrefix: (0, _channeldef.title)({
          field: continuousFieldName,
          aggregate: centerOp,
          type: 'quantitative'
        }, config, {
          allowDisabling: false
        })
      }];
    }
  } else {
    if (markDef.center || markDef.extent) {
      log.warn(log.message.errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));
    }

    if (inputType === 'aggregated-upper-lower') {
      tooltipSummary = [];
      postAggregateCalculates = [{
        calculate: `datum["${continuousAxisChannelDef2.field}"]`,
        as: 'upper_' + continuousFieldName
      }, {
        calculate: `datum["${continuousFieldName}"]`,
        as: 'lower_' + continuousFieldName
      }];
    } else if (inputType === 'aggregated-error') {
      tooltipSummary = [{
        fieldPrefix: '',
        titlePrefix: continuousFieldName
      }];
      postAggregateCalculates = [{
        calculate: `datum["${continuousFieldName}"] + datum["${continuousAxisChannelDefError.field}"]`,
        as: 'upper_' + continuousFieldName
      }];

      if (continuousAxisChannelDefError2) {
        postAggregateCalculates.push({
          calculate: `datum["${continuousFieldName}"] + datum["${continuousAxisChannelDefError2.field}"]`,
          as: 'lower_' + continuousFieldName
        });
      } else {
        postAggregateCalculates.push({
          calculate: `datum["${continuousFieldName}"] - datum["${continuousAxisChannelDefError.field}"]`,
          as: 'lower_' + continuousFieldName
        });
      }
    }

    for (const postAggregateCalculate of postAggregateCalculates) {
      tooltipSummary.push({
        fieldPrefix: postAggregateCalculate.as.substring(0, 6),
        titlePrefix: postAggregateCalculate.calculate.replace(new RegExp('datum\\[\\"', 'g'), '').replace(new RegExp('\\"\\]', 'g'), '')
      });
    }
  }

  return {
    postAggregateCalculates,
    errorBarSpecificAggregate,
    tooltipSummary,
    tooltipTitleWithFieldName
  };
}

function getTitlePrefix(center, extent, operation) {
  return (0, _util.titlecase)(center) + ' ' + operation + ' ' + extent;
}
},{"tslib":"node_modules/tslib/tslib.es6.js","../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../encoding":"node_modules/vega-lite/build/src/encoding.js","../log":"node_modules/vega-lite/build/src/log/index.js","../mark":"node_modules/vega-lite/build/src/mark.js","../util":"node_modules/vega-lite/build/src/util.js","./base":"node_modules/vega-lite/build/src/compositemark/base.js","./common":"node_modules/vega-lite/build/src/compositemark/common.js"}],"node_modules/vega-lite/build/src/compositemark/errorband.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeErrorBand = normalizeErrorBand;
exports.errorBandNormalizer = exports.ERRORBAND_PARTS = exports.ERRORBAND = void 0;

var log = _interopRequireWildcard(require("../log"));

var _util = require("../util");

var _base = require("./base");

var _common = require("./common");

var _errorbar = require("./errorbar");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const ERRORBAND = 'errorband';
exports.ERRORBAND = ERRORBAND;
const ERRORBAND_PART_INDEX = {
  band: 1,
  borders: 1
};
const ERRORBAND_PARTS = (0, _util.keys)(ERRORBAND_PART_INDEX);
exports.ERRORBAND_PARTS = ERRORBAND_PARTS;
const errorBandNormalizer = new _base.CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);
exports.errorBandNormalizer = errorBandNormalizer;

function normalizeErrorBand(spec, {
  config
}) {
  const {
    transform,
    continuousAxisChannelDef,
    continuousAxis,
    encodingWithoutContinuousAxis,
    markDef,
    outerSpec,
    tooltipEncoding
  } = (0, _errorbar.errorBarParams)(spec, ERRORBAND, config);
  const errorBandDef = markDef;
  const makeErrorBandPart = (0, _common.makeCompositeAggregatePartFactory)(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);
  const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;
  let bandMark = {
    type: is2D ? 'area' : 'rect'
  };
  let bordersMark = {
    type: is2D ? 'line' : 'rule'
  };
  const interpolate = Object.assign({}, errorBandDef.interpolate ? {
    interpolate: errorBandDef.interpolate
  } : {}, errorBandDef.tension && errorBandDef.interpolate ? {
    interpolate: errorBandDef.tension
  } : {});

  if (is2D) {
    bandMark = Object.assign({}, bandMark, interpolate);
    bordersMark = Object.assign({}, bordersMark, interpolate);
  } else if (errorBandDef.interpolate) {
    log.warn(log.message.errorBand1DNotSupport('interpolate'));
  } else if (errorBandDef.tension) {
    log.warn(log.message.errorBand1DNotSupport('tension'));
  }

  return Object.assign({}, outerSpec, {
    transform,
    layer: [...makeErrorBandPart({
      partName: 'band',
      mark: bandMark,
      positionPrefix: 'lower',
      endPositionPrefix: 'upper',
      extraEncoding: tooltipEncoding
    }), ...makeErrorBandPart({
      partName: 'borders',
      mark: bordersMark,
      positionPrefix: 'lower',
      extraEncoding: tooltipEncoding
    }), ...makeErrorBandPart({
      partName: 'borders',
      mark: bordersMark,
      positionPrefix: 'upper',
      extraEncoding: tooltipEncoding
    })]
  });
}
},{"../log":"node_modules/vega-lite/build/src/log/index.js","../util":"node_modules/vega-lite/build/src/util.js","./base":"node_modules/vega-lite/build/src/compositemark/base.js","./common":"node_modules/vega-lite/build/src/compositemark/common.js","./errorbar":"node_modules/vega-lite/build/src/compositemark/errorbar.js"}],"node_modules/vega-lite/build/src/compositemark/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.add = add;
exports.remove = remove;
exports.getAllCompositeMarks = getAllCompositeMarks;

var _util = require("../util");

var _base = require("./base");

var _boxplot = require("./boxplot");

var _errorband = require("./errorband");

var _errorbar = require("./errorbar");

/**
 * Registry index for all composite mark's normalizer
 */
const compositeMarkRegistry = {};

function add(mark, run, parts) {
  const normalizer = new _base.CompositeMarkNormalizer(mark, run);
  compositeMarkRegistry[mark] = {
    normalizer,
    parts
  };
}

function remove(mark) {
  delete compositeMarkRegistry[mark];
}

function getAllCompositeMarks() {
  return (0, _util.keys)(compositeMarkRegistry);
}

add(_boxplot.BOXPLOT, _boxplot.normalizeBoxPlot, _boxplot.BOXPLOT_PARTS);
add(_errorbar.ERRORBAR, _errorbar.normalizeErrorBar, _errorbar.ERRORBAR_PARTS);
add(_errorband.ERRORBAND, _errorband.normalizeErrorBand, _errorband.ERRORBAND_PARTS);
},{"../util":"node_modules/vega-lite/build/src/util.js","./base":"node_modules/vega-lite/build/src/compositemark/base.js","./boxplot":"node_modules/vega-lite/build/src/compositemark/boxplot.js","./errorband":"node_modules/vega-lite/build/src/compositemark/errorband.js","./errorbar":"node_modules/vega-lite/build/src/compositemark/errorbar.js"}],"node_modules/vega-lite/build/src/guide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VL_ONLY_LEGEND_CONFIG = exports.VL_ONLY_GUIDE_CONFIG = void 0;
const VL_ONLY_GUIDE_CONFIG = ['shortTimeLabels'];
exports.VL_ONLY_GUIDE_CONFIG = VL_ONLY_GUIDE_CONFIG;
const VL_ONLY_LEGEND_CONFIG = ['gradientHorizontalMaxLength', 'gradientHorizontalMinLength', 'gradientVerticalMaxLength', 'gradientVerticalMinLength'];
exports.VL_ONLY_LEGEND_CONFIG = VL_ONLY_LEGEND_CONFIG;
},{}],"node_modules/vega-lite/build/src/legend.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VG_LEGEND_PROPERTIES = exports.LEGEND_PROPERTIES = exports.defaultLegendConfig = void 0;

var _util = require("./util");

const defaultLegendConfig = {
  gradientHorizontalMaxLength: 200,
  gradientHorizontalMinLength: 100,
  gradientVerticalMaxLength: 200,
  gradientVerticalMinLength: 64 // This is the Vega's minimum.

};
exports.defaultLegendConfig = defaultLegendConfig;
const COMMON_LEGEND_PROPERTY_INDEX = {
  clipHeight: 1,
  columnPadding: 1,
  columns: 1,
  cornerRadius: 1,
  direction: 1,
  fillColor: 1,
  format: 1,
  formatType: 1,
  gradientLength: 1,
  gradientOpacity: 1,
  gradientStrokeColor: 1,
  gradientStrokeWidth: 1,
  gradientThickness: 1,
  gridAlign: 1,
  labelAlign: 1,
  labelBaseline: 1,
  labelColor: 1,
  labelFont: 1,
  labelFontSize: 1,
  labelFontStyle: 1,
  labelFontWeight: 1,
  labelLimit: 1,
  labelOffset: 1,
  labelOpacity: 1,
  labelOverlap: 1,
  labelPadding: 1,
  labelSeparation: 1,
  legendX: 1,
  legendY: 1,
  offset: 1,
  orient: 1,
  padding: 1,
  rowPadding: 1,
  strokeColor: 1,
  symbolDash: 1,
  symbolDashOffset: 1,
  symbolFillColor: 1,
  symbolOffset: 1,
  symbolOpacity: 1,
  symbolSize: 1,
  symbolStrokeColor: 1,
  symbolStrokeWidth: 1,
  symbolType: 1,
  tickCount: 1,
  tickMinStep: 1,
  title: 1,
  titleAlign: 1,
  titleAnchor: 1,
  titleBaseline: 1,
  titleColor: 1,
  titleFont: 1,
  titleFontSize: 1,
  titleFontStyle: 1,
  titleFontWeight: 1,
  titleLimit: 1,
  titleOpacity: 1,
  titleOrient: 1,
  titlePadding: 1,
  type: 1,
  values: 1,
  zindex: 1
};
const VG_LEGEND_PROPERTY_INDEX = Object.assign({}, COMMON_LEGEND_PROPERTY_INDEX, {
  // channel scales
  opacity: 1,
  shape: 1,
  stroke: 1,
  fill: 1,
  size: 1,
  strokeWidth: 1,
  // encode
  encode: 1
});
const LEGEND_PROPERTIES = (0, _util.keys)(COMMON_LEGEND_PROPERTY_INDEX);
exports.LEGEND_PROPERTIES = LEGEND_PROPERTIES;
const VG_LEGEND_PROPERTIES = (0, _util.keys)(VG_LEGEND_PROPERTY_INDEX);
exports.VG_LEGEND_PROPERTIES = VG_LEGEND_PROPERTIES;
},{"./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/scale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scaleCompatible = scaleCompatible;
exports.scaleTypePrecedence = scaleTypePrecedence;
exports.hasDiscreteDomain = hasDiscreteDomain;
exports.hasContinuousDomain = hasContinuousDomain;
exports.isContinuousToContinuous = isContinuousToContinuous;
exports.isContinuousToDiscrete = isContinuousToDiscrete;
exports.isExtendedScheme = isExtendedScheme;
exports.isSelectionDomain = isSelectionDomain;
exports.scaleTypeSupportProperty = scaleTypeSupportProperty;
exports.channelScalePropertyIncompatability = channelScalePropertyIncompatability;
exports.scaleTypeSupportDataType = scaleTypeSupportDataType;
exports.channelSupportScaleType = channelSupportScaleType;
exports.getSupportedScaleType = getSupportedScaleType;
exports.SCALE_TYPE_INDEX = exports.NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = exports.SCALE_PROPERTIES = exports.defaultScaleConfig = exports.TIME_SCALE_TYPES = exports.DISCRETE_DOMAIN_SCALES = exports.CONTINUOUS_DOMAIN_SCALES = exports.CONTINUOUS_TO_DISCRETE_SCALES = exports.CONTINUOUS_TO_CONTINUOUS_SCALES = exports.SCALE_TYPES = exports.ScaleType = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var CHANNEL = _interopRequireWildcard(require("./channel"));

var log = _interopRequireWildcard(require("./log"));

var TYPE = _interopRequireWildcard(require("./type"));

var _util = require("./util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var ScaleType;
exports.ScaleType = ScaleType;

(function (ScaleType) {
  // Continuous - Quantitative
  ScaleType.LINEAR = 'linear';
  ScaleType.LOG = 'log';
  ScaleType.POW = 'pow';
  ScaleType.SQRT = 'sqrt';
  ScaleType.SYMLOG = 'symlog'; // Continuous - Time

  ScaleType.TIME = 'time';
  ScaleType.UTC = 'utc'; // Discretizing scales

  ScaleType.QUANTILE = 'quantile';
  ScaleType.QUANTIZE = 'quantize';
  ScaleType.THRESHOLD = 'threshold';
  ScaleType.BIN_ORDINAL = 'bin-ordinal'; // Discrete scales

  ScaleType.ORDINAL = 'ordinal';
  ScaleType.POINT = 'point';
  ScaleType.BAND = 'band';
})(ScaleType || (exports.ScaleType = ScaleType = {}));
/**
 * Index for scale categories -- only scale of the same categories can be merged together.
 * Current implementation is trying to be conservative and avoid merging scale type that might not work together
 */


const SCALE_CATEGORY_INDEX = {
  linear: 'numeric',
  log: 'numeric',
  pow: 'numeric',
  sqrt: 'numeric',
  symlog: 'numeric',
  time: 'time',
  utc: 'time',
  ordinal: 'ordinal',
  'bin-ordinal': 'bin-ordinal',
  point: 'ordinal-position',
  band: 'ordinal-position',
  quantile: 'discretizing',
  quantize: 'discretizing',
  threshold: 'discretizing'
};
const SCALE_TYPES = (0, _util.keys)(SCALE_CATEGORY_INDEX);
/**
 * Whether the two given scale types can be merged together.
 */

exports.SCALE_TYPES = SCALE_TYPES;

function scaleCompatible(scaleType1, scaleType2) {
  const scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];
  const scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];
  return scaleCategory1 === scaleCategory2 || scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time' || scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time';
}
/**
 * Index for scale precedence -- high score = higher priority for merging.
 */


const SCALE_PRECEDENCE_INDEX = {
  // numeric
  linear: 0,
  log: 1,
  pow: 1,
  sqrt: 1,
  symlog: 1,
  // time
  time: 0,
  utc: 0,
  // ordinal-position -- these have higher precedence than continuous scales as they support more types of data
  point: 10,
  band: 11,
  // non grouped types
  ordinal: 0,
  'bin-ordinal': 0,
  quantile: 0,
  quantize: 0,
  threshold: 0
};
/**
 * Return scale categories -- only scale of the same categories can be merged together.
 */

function scaleTypePrecedence(scaleType) {
  return SCALE_PRECEDENCE_INDEX[scaleType];
}

const CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog', 'time', 'utc'];
exports.CONTINUOUS_TO_CONTINUOUS_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES;
const CONTINUOUS_TO_CONTINUOUS_INDEX = (0, _vegaUtil.toSet)(CONTINUOUS_TO_CONTINUOUS_SCALES);
const CONTINUOUS_TO_DISCRETE_SCALES = ['quantile', 'quantize', 'threshold'];
exports.CONTINUOUS_TO_DISCRETE_SCALES = CONTINUOUS_TO_DISCRETE_SCALES;
const CONTINUOUS_TO_DISCRETE_INDEX = (0, _vegaUtil.toSet)(CONTINUOUS_TO_DISCRETE_SCALES);
const CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat(['quantile', 'quantize', 'threshold']);
exports.CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_DOMAIN_SCALES;
const CONTINUOUS_DOMAIN_INDEX = (0, _vegaUtil.toSet)(CONTINUOUS_DOMAIN_SCALES);
const DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];
exports.DISCRETE_DOMAIN_SCALES = DISCRETE_DOMAIN_SCALES;
const DISCRETE_DOMAIN_INDEX = (0, _vegaUtil.toSet)(DISCRETE_DOMAIN_SCALES);
const TIME_SCALE_TYPES = ['time', 'utc'];
exports.TIME_SCALE_TYPES = TIME_SCALE_TYPES;

function hasDiscreteDomain(type) {
  return type in DISCRETE_DOMAIN_INDEX;
}

function hasContinuousDomain(type) {
  return type in CONTINUOUS_DOMAIN_INDEX;
}

function isContinuousToContinuous(type) {
  return type in CONTINUOUS_TO_CONTINUOUS_INDEX;
}

function isContinuousToDiscrete(type) {
  return type in CONTINUOUS_TO_DISCRETE_INDEX;
}

const defaultScaleConfig = {
  textXRangeStep: 90,
  rangeStep: 20,
  pointPadding: 0.5,
  barBandPaddingInner: 0.1,
  rectBandPaddingInner: 0,
  minBandSize: 2,
  minFontSize: 8,
  maxFontSize: 40,
  minOpacity: 0.3,
  maxOpacity: 0.8,
  // FIXME: revise if these *can* become ratios of rangeStep
  minSize: 9,
  minStrokeWidth: 1,
  maxStrokeWidth: 4,
  quantileCount: 4,
  quantizeCount: 4
};
exports.defaultScaleConfig = defaultScaleConfig;

function isExtendedScheme(scheme) {
  return scheme && !!scheme['name'];
}

function isSelectionDomain(domain) {
  return domain && domain['selection'];
}

const SCALE_PROPERTY_INDEX = {
  type: 1,
  domain: 1,
  align: 1,
  range: 1,
  rangeStep: 1,
  scheme: 1,
  bins: 1,
  // Other properties
  reverse: 1,
  round: 1,
  // quantitative / time
  clamp: 1,
  nice: 1,
  // quantitative
  base: 1,
  exponent: 1,
  constant: 1,
  interpolate: 1,
  zero: 1,
  // band/point
  padding: 1,
  paddingInner: 1,
  paddingOuter: 1
};
const SCALE_PROPERTIES = (0, _util.keys)(SCALE_PROPERTY_INDEX);
exports.SCALE_PROPERTIES = SCALE_PROPERTIES;

const {
  type,
  domain,
  range,
  rangeStep,
  scheme
} = SCALE_PROPERTY_INDEX,
      NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = tslib_1.__rest(SCALE_PROPERTY_INDEX, ["type", "domain", "range", "rangeStep", "scheme"]);

const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = (0, _util.keys)(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);
exports.NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES;
const SCALE_TYPE_INDEX = generateScaleTypeIndex();
exports.SCALE_TYPE_INDEX = SCALE_TYPE_INDEX;

function scaleTypeSupportProperty(scaleType, propName) {
  switch (propName) {
    case 'type':
    case 'domain':
    case 'reverse':
    case 'range':
      return true;

    case 'scheme':
    case 'interpolate':
      return !(0, _util.contains)(['point', 'band', 'identity'], scaleType);

    case 'bins':
      return !(0, _util.contains)(['point', 'band', 'identity', 'ordinal'], scaleType);

    case 'round':
      return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';

    case 'padding':
      return isContinuousToContinuous(scaleType) || (0, _util.contains)(['point', 'band'], scaleType);

    case 'paddingOuter':
    case 'rangeStep':
    case 'align':
      return (0, _util.contains)(['point', 'band'], scaleType);

    case 'paddingInner':
      return scaleType === 'band';

    case 'clamp':
      return isContinuousToContinuous(scaleType);

    case 'nice':
      return isContinuousToContinuous(scaleType) || scaleType === 'quantize' || scaleType === 'threshold';

    case 'exponent':
      return scaleType === 'pow';

    case 'base':
      return scaleType === 'log';

    case 'constant':
      return scaleType === 'symlog';

    case 'zero':
      return hasContinuousDomain(scaleType) && !(0, _util.contains)(['log', 'time', 'utc', 'threshold', 'quantile' // quantile depends on distribution so zero does not matter
      ], scaleType);
  }
}
/**
 * Returns undefined if the input channel supports the input scale property name
 */


function channelScalePropertyIncompatability(channel, propName) {
  switch (propName) {
    case 'interpolate':
    case 'scheme':
      if (!(0, CHANNEL.isColorChannel)(channel)) {
        return log.message.cannotUseScalePropertyWithNonColor(channel);
      }

      return undefined;

    case 'align':
    case 'type':
    case 'bins':
    case 'domain':
    case 'range':
    case 'base':
    case 'exponent':
    case 'constant':
    case 'nice':
    case 'padding':
    case 'paddingInner':
    case 'paddingOuter':
    case 'rangeStep':
    case 'reverse':
    case 'round':
    case 'clamp':
    case 'zero':
      return undefined;
    // GOOD!
  }
}

function scaleTypeSupportDataType(specifiedType, fieldDefType) {
  if ((0, _util.contains)([TYPE.ORDINAL, TYPE.NOMINAL], fieldDefType)) {
    return specifiedType === undefined || hasDiscreteDomain(specifiedType);
  } else if (fieldDefType === TYPE.TEMPORAL) {
    return (0, _util.contains)([ScaleType.TIME, ScaleType.UTC, undefined], specifiedType);
  } else if (fieldDefType === TYPE.QUANTITATIVE) {
    return (0, _util.contains)([ScaleType.LOG, ScaleType.POW, ScaleType.SQRT, ScaleType.SYMLOG, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.THRESHOLD, ScaleType.LINEAR, undefined], specifiedType);
  }

  return true;
}

function channelSupportScaleType(channel, scaleType) {
  switch (channel) {
    case CHANNEL.X:
    case CHANNEL.Y:
      return isContinuousToContinuous(scaleType) || (0, _util.contains)(['band', 'point'], scaleType);

    case CHANNEL.SIZE: // TODO: size and opacity can support ordinal with more modification

    case CHANNEL.STROKEWIDTH:
    case CHANNEL.OPACITY:
    case CHANNEL.FILLOPACITY:
    case CHANNEL.STROKEOPACITY:
      // Although it generally doesn't make sense to use band with size and opacity,
      // it can also work since we use band: 0.5 to get midpoint.
      return isContinuousToContinuous(scaleType) || isContinuousToDiscrete(scaleType) || (0, _util.contains)(['band', 'point'], scaleType);

    case CHANNEL.COLOR:
    case CHANNEL.FILL:
    case CHANNEL.STROKE:
      return scaleType !== 'band';
    // band does not make sense with color

    case CHANNEL.SHAPE:
      return scaleType === 'ordinal';
    // shape = lookup only
  }
  /* istanbul ignore next: it should never reach here */


  return false;
}

function getSupportedScaleType(channel, fieldDefType) {
  return SCALE_TYPE_INDEX[generateScaleTypeIndexKey(channel, fieldDefType)];
} // generates ScaleTypeIndex where keys are encoding channels and values are list of valid ScaleTypes


function generateScaleTypeIndex() {
  const index = {};

  for (const channel of CHANNEL.CHANNELS) {
    for (const fieldDefType of (0, _util.keys)(TYPE.TYPE_INDEX)) {
      for (const scaleType of SCALE_TYPES) {
        const key = generateScaleTypeIndexKey(channel, fieldDefType);

        if (channelSupportScaleType(channel, scaleType) && scaleTypeSupportDataType(scaleType, fieldDefType)) {
          index[key] = index[key] || [];
          index[key].push(scaleType);
        }
      }
    }
  }

  return index;
}

function generateScaleTypeIndexKey(channel, fieldDefType) {
  return channel + '_' + fieldDefType;
}
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./channel":"node_modules/vega-lite/build/src/channel.js","./log":"node_modules/vega-lite/build/src/log/index.js","./type":"node_modules/vega-lite/build/src/type.js","./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/selection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isIntervalSelection = isIntervalSelection;
exports.defaultConfig = exports.SELECTION_ID = void 0;
const SELECTION_ID = '_vgsid_';
exports.SELECTION_ID = SELECTION_ID;

function isIntervalSelection(s) {
  return s.type === 'interval';
}

const defaultConfig = {
  single: {
    on: 'click',
    fields: [SELECTION_ID],
    resolve: 'global',
    empty: 'all',
    clear: 'dblclick'
  },
  multi: {
    on: 'click',
    fields: [SELECTION_ID],
    toggle: 'event.shiftKey',
    resolve: 'global',
    empty: 'all',
    clear: 'dblclick'
  },
  interval: {
    on: '[mousedown, window:mouseup] > window:mousemove!',
    encodings: ['x', 'y'],
    translate: '[mousedown, window:mouseup] > window:mousemove!',
    zoom: 'wheel!',
    mark: {
      fill: '#333',
      fillOpacity: 0.125,
      stroke: 'white'
    },
    resolve: 'global',
    clear: 'dblclick'
  }
};
exports.defaultConfig = defaultConfig;
},{}],"node_modules/vega-lite/build/src/spec/concat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAnyConcatSpec = isAnyConcatSpec;
exports.isConcatSpec = isConcatSpec;
exports.isVConcatSpec = isVConcatSpec;
exports.isHConcatSpec = isHConcatSpec;

function isAnyConcatSpec(spec) {
  return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);
}

function isConcatSpec(spec) {
  return spec['concat'] !== undefined;
}

function isVConcatSpec(spec) {
  return spec['vconcat'] !== undefined;
}

function isHConcatSpec(spec) {
  return spec['hconcat'] !== undefined;
}
},{}],"node_modules/vega-lite/build/src/spec/repeat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isRepeatSpec = isRepeatSpec;

function isRepeatSpec(spec) {
  return spec['repeat'] !== undefined;
}
},{}],"node_modules/vega-lite/build/src/spec/base.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractCompositionLayout = extractCompositionLayout;
exports.DEFAULT_SPACING = void 0;

var _vegaUtil = require("vega-util");

var _util = require("../util");

var _concat = require("./concat");

var _facet = require("./facet");

var _repeat = require("./repeat");

const DEFAULT_SPACING = 20;
exports.DEFAULT_SPACING = DEFAULT_SPACING;
const COMPOSITION_LAYOUT_INDEX = {
  align: 1,
  bounds: 1,
  center: 1,
  columns: 1,
  spacing: 1
};
const COMPOSITION_LAYOUT_PROPERTIES = (0, _util.keys)(COMPOSITION_LAYOUT_INDEX);

function extractCompositionLayout(spec, specType, config) {
  const compositionConfig = config[specType];
  const layout = {}; // Apply config first

  const {
    spacing: spacingConfig,
    columns
  } = compositionConfig;

  if (spacingConfig !== undefined) {
    layout.spacing = spacingConfig;
  }

  if (columns !== undefined) {
    if ((0, _facet.isFacetSpec)(spec) && !(0, _facet.isFacetMapping)(spec.facet) || (0, _repeat.isRepeatSpec)(spec) && (0, _vegaUtil.isArray)(spec.repeat) || (0, _concat.isConcatSpec)(spec)) {
      layout.columns = columns;
    }
  } // Then copy properties from the spec


  for (const prop of COMPOSITION_LAYOUT_PROPERTIES) {
    if (spec[prop] !== undefined) {
      if (prop === 'spacing') {
        const spacing = spec[prop];
        layout[prop] = (0, _vegaUtil.isNumber)(spacing) ? spacing : {
          row: spacing.row || spacingConfig,
          column: spacing.column || spacingConfig
        };
      } else {
        layout[prop] = spec[prop];
      }
    }
  }

  return layout;
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../util":"node_modules/vega-lite/build/src/util.js","./concat":"node_modules/vega-lite/build/src/spec/concat.js","./facet":"node_modules/vega-lite/build/src/spec/facet.js","./repeat":"node_modules/vega-lite/build/src/spec/repeat.js"}],"node_modules/vega-lite/build/src/title.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractTitleConfig = extractTitleConfig;

var tslib_1 = _interopRequireWildcard(require("tslib"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function extractTitleConfig(titleConfig) {
  const {
    // These are non-mark title config that need to be hardcoded
    anchor,
    frame,
    offset,
    orient,
    // color needs to be redirect to fill
    color
  } = titleConfig,
        // The rest are mark config.
  titleMarkConfig = tslib_1.__rest(titleConfig, ["anchor", "frame", "offset", "orient", "color"]);

  const mark = Object.assign({}, titleMarkConfig, color ? {
    fill: color
  } : {});
  const nonMark = Object.assign({}, anchor ? {
    anchor
  } : {}, frame ? {
    frame
  } : {}, offset ? {
    offset
  } : {}, orient ? {
    orient
  } : {});
  return {
    mark,
    nonMark
  };
}
},{"tslib":"node_modules/tslib/tslib.es6.js"}],"node_modules/vega-lite/build/src/config.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isVgScheme = isVgScheme;
exports.initConfig = initConfig;
exports.stripAndRedirectConfig = stripAndRedirectConfig;
exports.defaultConfig = exports.defaultViewConfig = void 0;

var _vegaUtil = require("vega-util");

var _compositemark = require("./compositemark");

var _guide = require("./guide");

var _legend = require("./legend");

var mark = _interopRequireWildcard(require("./mark"));

var _scale = require("./scale");

var _selection = require("./selection");

var _base = require("./spec/base");

var _title = require("./title");

var _util = require("./util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const defaultViewConfig = {
  width: 200,
  height: 200
};
exports.defaultViewConfig = defaultViewConfig;

function isVgScheme(rangeConfig) {
  return rangeConfig && !!rangeConfig['scheme'];
}

const defaultConfig = {
  padding: 5,
  timeFormat: '%b %d, %Y',
  countTitle: 'Count of Records',
  invalidValues: 'filter',
  view: defaultViewConfig,
  mark: mark.defaultMarkConfig,
  area: {},
  bar: mark.defaultBarConfig,
  circle: {},
  geoshape: {},
  line: {},
  point: {},
  rect: mark.defaultRectConfig,
  rule: {
    color: 'black'
  },
  square: {},
  text: {
    color: 'black'
  },
  tick: mark.defaultTickConfig,
  trail: {},
  boxplot: {
    size: 14,
    extent: 1.5,
    box: {},
    median: {
      color: 'white'
    },
    outliers: {},
    rule: {},
    ticks: null
  },
  errorbar: {
    center: 'mean',
    rule: true,
    ticks: false
  },
  errorband: {
    band: {
      opacity: 0.3
    },
    borders: false
  },
  scale: _scale.defaultScaleConfig,
  projection: {},
  axis: {},
  axisX: {},
  axisY: {},
  axisLeft: {},
  axisRight: {},
  axisTop: {},
  axisBottom: {},
  axisBand: {},
  legend: _legend.defaultLegendConfig,
  header: {
    titlePadding: 10,
    labelPadding: 10
  },
  headerColumn: {},
  headerRow: {},
  headerFacet: {},
  selection: _selection.defaultConfig,
  style: {},
  title: {},
  facet: {
    spacing: _base.DEFAULT_SPACING
  },
  repeat: {
    spacing: _base.DEFAULT_SPACING
  },
  concat: {
    spacing: _base.DEFAULT_SPACING
  }
};
exports.defaultConfig = defaultConfig;

function initConfig(config) {
  return (0, _util.mergeDeep)((0, _util.duplicate)(defaultConfig), config);
}

const MARK_STYLES = ['view', ...mark.PRIMITIVE_MARKS];
const VL_ONLY_CONFIG_PROPERTIES = ['padding', 'facet', 'concat', 'repeat', 'numberFormat', 'timeFormat', 'countTitle', 'header', 'stack', 'scale', 'selection', 'invalidValues', 'overlay' // FIXME: Redesign and unhide this
];
const VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = Object.assign({
  view: ['width', 'height']
}, mark.VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX);

function stripAndRedirectConfig(config) {
  config = (0, _util.duplicate)(config);

  for (const prop of VL_ONLY_CONFIG_PROPERTIES) {
    delete config[prop];
  } // Remove Vega-Lite only axis/legend config


  if (config.axis) {
    for (const prop of _guide.VL_ONLY_GUIDE_CONFIG) {
      delete config.axis[prop];
    }
  }

  if (config.legend) {
    for (const prop of _guide.VL_ONLY_GUIDE_CONFIG) {
      delete config.legend[prop];
    }

    for (const prop of _guide.VL_ONLY_LEGEND_CONFIG) {
      delete config.legend[prop];
    }
  } // Remove Vega-Lite only generic mark config


  if (config.mark) {
    for (const prop of mark.VL_ONLY_MARK_CONFIG_PROPERTIES) {
      delete config.mark[prop];
    }
  }

  for (const markType of MARK_STYLES) {
    // Remove Vega-Lite-only mark config
    for (const prop of mark.VL_ONLY_MARK_CONFIG_PROPERTIES) {
      delete config[markType][prop];
    } // Remove Vega-Lite only mark-specific config


    const vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];

    if (vlOnlyMarkSpecificConfigs) {
      for (const prop of vlOnlyMarkSpecificConfigs) {
        delete config[markType][prop];
      }
    } // Redirect mark config to config.style so that mark config only affect its own mark type
    // without affecting other marks that share the same underlying Vega marks.
    // For example, config.rect should not affect bar marks.


    redirectConfig(config, markType);
  }

  for (const m of (0, _compositemark.getAllCompositeMarks)()) {
    // Clean up the composite mark config as we don't need them in the output specs anymore
    delete config[m];
  } // Redirect config.title -- so that title config do not
  // affect header labels, which also uses `title` directive to implement.


  redirectConfig(config, 'title', 'group-title'); // Remove empty config objects

  for (const prop in config) {
    if ((0, _vegaUtil.isObject)(config[prop]) && (0, _util.keys)(config[prop]).length === 0) {
      delete config[prop];
    }
  }

  return (0, _util.keys)(config).length > 0 ? config : undefined;
}

function redirectConfig(config, prop, // string = composite mark
toProp, compositeMarkPart) {
  const propConfig = prop === 'title' ? (0, _title.extractTitleConfig)(config.title).mark : compositeMarkPart ? config[prop][compositeMarkPart] : config[prop];

  if (prop === 'view') {
    toProp = 'cell'; // View's default style is "cell"
  }

  const style = Object.assign({}, propConfig, config.style[prop]); // set config.style if it is not an empty object

  if ((0, _util.keys)(style).length > 0) {
    config.style[toProp || prop] = style;
  }

  if (!compositeMarkPart) {
    // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.
    delete config[prop];
  }
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./compositemark":"node_modules/vega-lite/build/src/compositemark/index.js","./guide":"node_modules/vega-lite/build/src/guide.js","./legend":"node_modules/vega-lite/build/src/legend.js","./mark":"node_modules/vega-lite/build/src/mark.js","./scale":"node_modules/vega-lite/build/src/scale.js","./selection":"node_modules/vega-lite/build/src/selection.js","./spec/base":"node_modules/vega-lite/build/src/spec/base.js","./title":"node_modules/vega-lite/build/src/title.js","./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/spec/layer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLayerSpec = isLayerSpec;

function isLayerSpec(spec) {
  return spec['layer'] !== undefined;
}
},{}],"node_modules/vega-lite/build/src/spec/map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpecMapper = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var log = _interopRequireWildcard(require("../log"));

var _concat = require("./concat");

var _facet = require("./facet");

var _layer = require("./layer");

var _repeat = require("./repeat");

var _unit = require("./unit");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class SpecMapper {
  map(spec, params) {
    if ((0, _facet.isFacetSpec)(spec)) {
      return this.mapFacet(spec, params);
    } else if ((0, _repeat.isRepeatSpec)(spec)) {
      return this.mapRepeat(spec, params);
    } else if ((0, _concat.isHConcatSpec)(spec)) {
      return this.mapHConcat(spec, params);
    } else if ((0, _concat.isVConcatSpec)(spec)) {
      return this.mapVConcat(spec, params);
    } else if ((0, _concat.isConcatSpec)(spec)) {
      return this.mapConcat(spec, params);
    } else {
      return this.mapLayerOrUnit(spec, params);
    }
  }

  mapLayerOrUnit(spec, params) {
    if ((0, _layer.isLayerSpec)(spec)) {
      return this.mapLayer(spec, params);
    } else if ((0, _unit.isUnitSpec)(spec)) {
      return this.mapUnit(spec, params);
    }

    throw new Error(log.message.INVALID_SPEC);
  }

  mapLayer(spec, params) {
    return Object.assign({}, spec, {
      layer: spec.layer.map(subspec => this.mapLayerOrUnit(subspec, params))
    });
  }

  mapHConcat(spec, params) {
    return Object.assign({}, spec, {
      hconcat: spec.hconcat.map(subspec => this.map(subspec, params))
    });
  }

  mapVConcat(spec, params) {
    return Object.assign({}, spec, {
      vconcat: spec.vconcat.map(subspec => this.map(subspec, params))
    });
  }

  mapConcat(spec, params) {
    const {
      concat
    } = spec,
          rest = tslib_1.__rest(spec, ["concat"]);

    return Object.assign({}, rest, {
      concat: concat.map(subspec => this.map(subspec, params))
    });
  }

  mapFacet(spec, params) {
    return Object.assign({}, spec, {
      // TODO: remove "any" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760
      spec: this.map(spec.spec, params)
    });
  }

  mapRepeat(spec, params) {
    return Object.assign({}, spec, {
      spec: this.map(spec.spec, params)
    });
  }

}

exports.SpecMapper = SpecMapper;
},{"tslib":"node_modules/tslib/tslib.es6.js","../log":"node_modules/vega-lite/build/src/log/index.js","./concat":"node_modules/vega-lite/build/src/spec/concat.js","./facet":"node_modules/vega-lite/build/src/spec/facet.js","./layer":"node_modules/vega-lite/build/src/spec/layer.js","./repeat":"node_modules/vega-lite/build/src/spec/repeat.js","./unit":"node_modules/vega-lite/build/src/spec/unit.js"}],"node_modules/vega-lite/build/src/stack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isStackOffset = isStackOffset;
exports.stack = stack;
exports.STACK_BY_DEFAULT_MARKS = exports.STACKABLE_MARKS = void 0;

var _vegaUtil = require("vega-util");

var _aggregate = require("./aggregate");

var _channel = require("./channel");

var _channeldef = require("./channeldef");

var _encoding = require("./encoding");

var log = _interopRequireWildcard(require("./log"));

var _mark = require("./mark");

var _scale = require("./scale");

var _util = require("./util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const STACK_OFFSET_INDEX = {
  zero: 1,
  center: 1,
  normalize: 1
};

function isStackOffset(s) {
  return !!STACK_OFFSET_INDEX[s];
}

const STACKABLE_MARKS = [_mark.BAR, _mark.AREA, _mark.RULE, _mark.POINT, _mark.CIRCLE, _mark.SQUARE, _mark.LINE, _mark.TEXT, _mark.TICK];
exports.STACKABLE_MARKS = STACKABLE_MARKS;
const STACK_BY_DEFAULT_MARKS = [_mark.BAR, _mark.AREA];
exports.STACK_BY_DEFAULT_MARKS = STACK_BY_DEFAULT_MARKS;

function potentialStackedChannel(encoding) {
  const xDef = encoding.x;
  const yDef = encoding.y;

  if ((0, _channeldef.isFieldDef)(xDef) && (0, _channeldef.isFieldDef)(yDef)) {
    if (xDef.type === 'quantitative' && yDef.type === 'quantitative') {
      if (xDef.stack) {
        return 'x';
      } else if (yDef.stack) {
        return 'y';
      } // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y


      if (!!xDef.aggregate !== !!yDef.aggregate) {
        return xDef.aggregate ? 'x' : 'y';
      }
    } else if (xDef.type === 'quantitative') {
      return 'x';
    } else if (yDef.type === 'quantitative') {
      return 'y';
    }
  } else if ((0, _channeldef.isFieldDef)(xDef) && xDef.type === 'quantitative') {
    return 'x';
  } else if ((0, _channeldef.isFieldDef)(yDef) && yDef.type === 'quantitative') {
    return 'y';
  }

  return undefined;
} // Note: CompassQL uses this method and only pass in required properties of each argument object.
// If required properties change, make sure to update CompassQL.


function stack(m, encoding, stackConfig, opt = {}) {
  const mark = (0, _mark.isMarkDef)(m) ? m.type : m; // Should have stackable mark

  if (!(0, _util.contains)(STACKABLE_MARKS, mark)) {
    return null;
  }

  const fieldChannel = potentialStackedChannel(encoding);

  if (!fieldChannel) {
    return null;
  }

  const stackedFieldDef = encoding[fieldChannel];
  const stackedField = (0, _channeldef.isStringFieldDef)(stackedFieldDef) ? (0, _channeldef.vgField)(stackedFieldDef, {}) : undefined;
  const dimensionChannel = fieldChannel === 'x' ? 'y' : 'x';
  const dimensionDef = encoding[dimensionChannel];
  const dimensionField = (0, _channeldef.isStringFieldDef)(dimensionDef) ? (0, _channeldef.vgField)(dimensionDef, {}) : undefined; // Should have grouping level of detail that is different from the dimension field

  const stackBy = _channel.NONPOSITION_CHANNELS.reduce((sc, channel) => {
    // Ignore tooltip in stackBy (https://github.com/vega/vega-lite/issues/4001)
    if (channel !== 'tooltip' && (0, _encoding.channelHasField)(encoding, channel)) {
      const channelDef = encoding[channel];
      ((0, _vegaUtil.isArray)(channelDef) ? channelDef : [channelDef]).forEach(cDef => {
        const fieldDef = (0, _channeldef.getTypedFieldDef)(cDef);

        if (fieldDef.aggregate) {
          return;
        } // Check whether the channel's field is identical to x/y's field or if the channel is a repeat


        const f = (0, _channeldef.isStringFieldDef)(fieldDef) ? (0, _channeldef.vgField)(fieldDef, {}) : undefined;

        if ( // if fielddef is a repeat, just include it in the stack by
        !f || // otherwise, the field must be different from x and y fields.
        f !== dimensionField && f !== stackedField) {
          sc.push({
            channel,
            fieldDef
          });
        }
      });
    }

    return sc;
  }, []); // Automatically determine offset


  let offset;

  if (stackedFieldDef.stack !== undefined) {
    if ((0, _vegaUtil.isBoolean)(stackedFieldDef.stack)) {
      offset = stackedFieldDef.stack ? 'zero' : null;
    } else {
      offset = stackedFieldDef.stack;
    }
  } else if (stackBy.length > 0) {
    if ((0, _util.contains)(STACK_BY_DEFAULT_MARKS, mark)) {
      // Bar and Area with sum ops are automatically stacked by default
      offset = (0, _util.getFirstDefined)(stackConfig, 'zero');
    } else {
      offset = stackConfig;
    }
  }

  if (!offset || !isStackOffset(offset)) {
    return null;
  } // warn when stacking non-linear


  if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== _scale.ScaleType.LINEAR) {
    if (opt.disallowNonLinearStack) {
      return null;
    } else {
      log.warn(log.message.cannotStackNonLinearScale(stackedFieldDef.scale.type));
    }
  } // Check if it is a ranged mark


  if ((0, _encoding.channelHasField)(encoding, fieldChannel === _channel.X ? _channel.X2 : _channel.Y2)) {
    if (stackedFieldDef.stack !== undefined) {
      log.warn(log.message.cannotStackRangedMark(fieldChannel));
    }

    return null;
  } // Warn if stacking summative aggregate


  if (stackedFieldDef.aggregate && !(0, _util.contains)(_aggregate.SUM_OPS, stackedFieldDef.aggregate)) {
    log.warn(log.message.stackNonSummativeAggregate(stackedFieldDef.aggregate));
  }

  return {
    groupbyChannel: dimensionDef ? dimensionChannel : undefined,
    fieldChannel,
    impute: (0, _mark.isPathMark)(mark),
    stackBy,
    offset
  };
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./aggregate":"node_modules/vega-lite/build/src/aggregate.js","./channel":"node_modules/vega-lite/build/src/channel.js","./channeldef":"node_modules/vega-lite/build/src/channeldef.js","./encoding":"node_modules/vega-lite/build/src/encoding.js","./log":"node_modules/vega-lite/build/src/log/index.js","./mark":"node_modules/vega-lite/build/src/mark.js","./scale":"node_modules/vega-lite/build/src/scale.js","./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/normalize/pathoverlay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PathOverlayNormalizer = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var _mark = require("../mark");

var _unit = require("../spec/unit");

var _stack = require("../stack");

var _util = require("../util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function dropLineAndPoint(markDef) {
  const {
    point: _point,
    line: _line
  } = markDef,
        mark = tslib_1.__rest(markDef, ["point", "line"]);

  return (0, _util.keys)(mark).length > 1 ? mark : mark.type;
}

function dropLineAndPointFromConfig(config) {
  for (const mark of ['line', 'area', 'rule', 'trail']) {
    if (config[mark]) {
      config = Object.assign({}, config, {
        [mark]: (0, _util.omit)(config[mark], ['point', 'line'])
      });
    }
  }

  return config;
}

function getPointOverlay(markDef, markConfig = {}, encoding) {
  if (markDef.point === 'transparent') {
    return {
      opacity: 0
    };
  } else if (markDef.point) {
    // truthy : true or object
    return (0, _vegaUtil.isObject)(markDef.point) ? markDef.point : {};
  } else if (markDef.point !== undefined) {
    // false or null
    return null;
  } else {
    // undefined (not disabled)
    if (markConfig.point || encoding.shape) {
      // enable point overlay if config[mark].point is truthy or if encoding.shape is provided
      return (0, _vegaUtil.isObject)(markConfig.point) ? markConfig.point : {};
    } // markDef.point is defined as falsy


    return undefined;
  }
}

function getLineOverlay(markDef, markConfig = {}) {
  if (markDef.line) {
    // true or object
    return markDef.line === true ? {} : markDef.line;
  } else if (markDef.line !== undefined) {
    // false or null
    return null;
  } else {
    // undefined (not disabled)
    if (markConfig.line) {
      // enable line overlay if config[mark].line is truthy
      return markConfig.line === true ? {} : markConfig.line;
    } // markDef.point is defined as falsy


    return undefined;
  }
}

class PathOverlayNormalizer {
  constructor() {
    this.name = 'path-overlay';
  }

  hasMatchingType(spec, config) {
    if ((0, _unit.isUnitSpec)(spec)) {
      const {
        mark,
        encoding
      } = spec;
      const markDef = (0, _mark.isMarkDef)(mark) ? mark : {
        type: mark
      };

      switch (markDef.type) {
        case 'line':
        case 'rule':
        case 'trail':
          return !!getPointOverlay(markDef, config[markDef.type], encoding);

        case 'area':
          return (// false / null are also included as we want to remove the properties
            !!getPointOverlay(markDef, config[markDef.type], encoding) || !!getLineOverlay(markDef, config[markDef.type])
          );
      }
    }

    return false;
  }

  run(spec, params, normalize) {
    const {
      config
    } = params;

    const {
      selection,
      projection,
      encoding,
      mark
    } = spec,
          outerSpec = tslib_1.__rest(spec, ["selection", "projection", "encoding", "mark"]);

    const markDef = (0, _mark.isMarkDef)(mark) ? mark : {
      type: mark
    };
    const pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);
    const lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);
    const layer = [Object.assign({}, selection ? {
      selection
    } : {}, {
      // Do not include point / line overlay in the normalize spec
      mark: dropLineAndPoint(Object.assign({}, markDef, markDef.type === 'area' ? {
        opacity: 0.7
      } : {})),
      // drop shape from encoding as this might be used to trigger point overlay
      encoding: (0, _util.omit)(encoding, ['shape'])
    })]; // FIXME: determine rules for applying selections.
    // Need to copy stack config to overlayed layer

    const stackProps = (0, _stack.stack)(markDef, encoding, config ? config.stack : undefined);
    let overlayEncoding = encoding;

    if (stackProps) {
      const {
        fieldChannel: stackFieldChannel,
        offset
      } = stackProps;
      overlayEncoding = Object.assign({}, encoding, {
        [stackFieldChannel]: Object.assign({}, encoding[stackFieldChannel], offset ? {
          stack: offset
        } : {})
      });
    }

    if (lineOverlay) {
      layer.push(Object.assign({}, projection ? {
        projection
      } : {}, {
        mark: Object.assign({
          type: 'line'
        }, (0, _util.pick)(markDef, ['clip', 'interpolate', 'tension', 'tooltip']), lineOverlay),
        encoding: overlayEncoding
      }));
    }

    if (pointOverlay) {
      layer.push(Object.assign({}, projection ? {
        projection
      } : {}, {
        mark: Object.assign({
          type: 'point',
          opacity: 1,
          filled: true
        }, (0, _util.pick)(markDef, ['clip', 'tooltip']), pointOverlay),
        encoding: overlayEncoding
      }));
    }

    return normalize(Object.assign({}, outerSpec, {
      layer
    }), Object.assign({}, params, {
      config: dropLineAndPointFromConfig(config)
    }));
  }

}

exports.PathOverlayNormalizer = PathOverlayNormalizer;
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../mark":"node_modules/vega-lite/build/src/mark.js","../spec/unit":"node_modules/vega-lite/build/src/spec/unit.js","../stack":"node_modules/vega-lite/build/src/stack.js","../util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/normalize/ruleforrangedline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RuleForRangedLineNormalizer = void 0;

var _bin = require("../bin");

var _channel = require("../channel");

var _channeldef = require("../channeldef");

var log = _interopRequireWildcard(require("../log"));

var _unit = require("../spec/unit");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class RuleForRangedLineNormalizer {
  constructor() {
    this.name = 'RuleForRangedLine';
  }

  hasMatchingType(spec) {
    if ((0, _unit.isUnitSpec)(spec)) {
      const {
        encoding,
        mark
      } = spec;

      if (mark === 'line') {
        for (const channel of _channel.SECONDARY_RANGE_CHANNEL) {
          const mainChannel = (0, _channel.getMainRangeChannel)(channel);
          const mainChannelDef = encoding[mainChannel];

          if (!!encoding[channel] && (0, _channeldef.isFieldDef)(mainChannelDef) && !(0, _bin.isBinned)(mainChannelDef.bin)) {
            return true;
          }
        }
      }
    }

    return false;
  }

  run(spec, params, normalize) {
    const {
      encoding
    } = spec;
    log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));
    return normalize(Object.assign({}, spec, {
      mark: 'rule'
    }), params);
  }

}

exports.RuleForRangedLineNormalizer = RuleForRangedLineNormalizer;
},{"../bin":"node_modules/vega-lite/build/src/bin.js","../channel":"node_modules/vega-lite/build/src/channel.js","../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../log":"node_modules/vega-lite/build/src/log/index.js","../spec/unit":"node_modules/vega-lite/build/src/spec/unit.js"}],"node_modules/vega-lite/build/src/normalize/core.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CoreNormalizer = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var _channel = require("../channel");

var _boxplot = require("../compositemark/boxplot");

var _errorband = require("../compositemark/errorband");

var _errorbar = require("../compositemark/errorbar");

var _encoding = require("../encoding");

var log = _interopRequireWildcard(require("../log"));

var _facet = require("../spec/facet");

var _map = require("../spec/map");

var _unit = require("../spec/unit");

var _util = require("../util");

var _pathoverlay = require("./pathoverlay");

var _ruleforrangedline = require("./ruleforrangedline");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class CoreNormalizer extends _map.SpecMapper {
  constructor() {
    super(...arguments);
    this.nonFacetUnitNormalizers = [_boxplot.boxPlotNormalizer, _errorbar.errorBarNormalizer, _errorband.errorBandNormalizer, new _pathoverlay.PathOverlayNormalizer(), new _ruleforrangedline.RuleForRangedLineNormalizer()];
  }

  map(spec, params) {
    // Special handling for a faceted unit spec as it can return a facet spec, not just a layer or unit spec like a normal unit spec.
    if ((0, _unit.isUnitSpec)(spec)) {
      const hasRow = (0, _encoding.channelHasField)(spec.encoding, _channel.ROW);
      const hasColumn = (0, _encoding.channelHasField)(spec.encoding, _channel.COLUMN);
      const hasFacet = (0, _encoding.channelHasField)(spec.encoding, _channel.FACET);

      if (hasRow || hasColumn || hasFacet) {
        return this.mapFacetedUnit(spec, params);
      }
    }

    return super.map(spec, params);
  } // This is for normalizing non-facet unit


  mapUnit(spec, params) {
    const {
      parentEncoding,
      parentProjection
    } = params;

    if (parentEncoding || parentProjection) {
      return this.mapUnitWithParentEncodingOrProjection(spec, params);
    }

    const normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);

    for (const unitNormalizer of this.nonFacetUnitNormalizers) {
      if (unitNormalizer.hasMatchingType(spec, params.config)) {
        return unitNormalizer.run(spec, params, normalizeLayerOrUnit);
      }
    }

    return spec;
  }

  mapRepeat(spec, params) {
    const {
      repeat
    } = spec;

    if (!(0, _vegaUtil.isArray)(repeat) && spec.columns) {
      // is repeat with row/column
      spec = (0, _util.omit)(spec, ['columns']);
      log.warn(log.message.columnsNotSupportByRowCol('repeat'));
    }

    return Object.assign({}, spec, {
      spec: this.map(spec.spec, params)
    });
  }

  mapFacet(spec, params) {
    const {
      facet
    } = spec;

    if ((0, _facet.isFacetMapping)(facet) && spec.columns) {
      // is facet with row/column
      spec = (0, _util.omit)(spec, ['columns']);
      log.warn(log.message.columnsNotSupportByRowCol('facet'));
    }

    return super.mapFacet(spec, params);
  }

  mapUnitWithParentEncodingOrProjection(spec, params) {
    const {
      encoding,
      projection
    } = spec;
    const {
      parentEncoding,
      parentProjection,
      config
    } = params;
    const mergedProjection = mergeProjection({
      parentProjection,
      projection
    });
    const mergedEncoding = mergeEncoding({
      parentEncoding,
      encoding
    });
    return this.mapUnit(Object.assign({}, spec, mergedProjection ? {
      projection: mergedProjection
    } : {}, mergedEncoding ? {
      encoding: mergedEncoding
    } : {}), {
      config
    });
  }

  mapFacetedUnit(spec, params) {
    // New encoding in the inside spec should not contain row / column
    // as row/column should be moved to facet
    const _a = spec.encoding,
          {
      row,
      column,
      facet
    } = _a,
          encoding = tslib_1.__rest(_a, ["row", "column", "facet"]); // Mark and encoding should be moved into the inner spec


    const {
      mark,
      width,
      projection,
      height,
      selection,
      encoding: _
    } = spec,
          outerSpec = tslib_1.__rest(spec, ["mark", "width", "projection", "height", "selection", "encoding"]);

    if (facet && (row || column)) {
      log.warn(log.message.facetChannelDropped([...(row ? [_channel.ROW] : []), ...(column ? [_channel.COLUMN] : [])]));
    }

    return this.mapFacet(Object.assign({}, outerSpec, {
      // row / column has higher precedence than facet
      facet: row || column ? Object.assign({}, row ? {
        row
      } : {}, column ? {
        column
      } : {}) : facet,
      spec: Object.assign({}, projection ? {
        projection
      } : {}, {
        mark
      }, width ? {
        width
      } : {}, height ? {
        height
      } : {}, {
        encoding
      }, selection ? {
        selection
      } : {})
    }), params);
  }

  mapLayer(spec, _a) {
    // Special handling for extended layer spec
    var {
      parentEncoding,
      parentProjection
    } = _a,
        otherParams = tslib_1.__rest(_a, ["parentEncoding", "parentProjection"]);

    const {
      encoding,
      projection
    } = spec,
          rest = tslib_1.__rest(spec, ["encoding", "projection"]);

    const params = Object.assign({}, otherParams, {
      parentEncoding: mergeEncoding({
        parentEncoding,
        encoding
      }),
      parentProjection: mergeProjection({
        parentProjection,
        projection
      })
    });
    return super.mapLayer(rest, params);
  }

}

exports.CoreNormalizer = CoreNormalizer;

function mergeEncoding(opt) {
  const {
    parentEncoding,
    encoding
  } = opt;

  if (parentEncoding && encoding) {
    const overriden = (0, _util.keys)(parentEncoding).reduce((o, key) => {
      if (encoding[key]) {
        o.push(key);
      }

      return o;
    }, []);

    if (overriden.length > 0) {
      log.warn(log.message.encodingOverridden(overriden));
    }
  }

  const merged = Object.assign({}, parentEncoding || {}, encoding || {});
  return (0, _util.keys)(merged).length > 0 ? merged : undefined;
}

function mergeProjection(opt) {
  const {
    parentProjection,
    projection
  } = opt;

  if (parentProjection && projection) {
    log.warn(log.message.projectionOverridden({
      parentProjection,
      projection
    }));
  }

  return projection || parentProjection;
}
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../channel":"node_modules/vega-lite/build/src/channel.js","../compositemark/boxplot":"node_modules/vega-lite/build/src/compositemark/boxplot.js","../compositemark/errorband":"node_modules/vega-lite/build/src/compositemark/errorband.js","../compositemark/errorbar":"node_modules/vega-lite/build/src/compositemark/errorbar.js","../encoding":"node_modules/vega-lite/build/src/encoding.js","../log":"node_modules/vega-lite/build/src/log/index.js","../spec/facet":"node_modules/vega-lite/build/src/spec/facet.js","../spec/map":"node_modules/vega-lite/build/src/spec/map.js","../spec/unit":"node_modules/vega-lite/build/src/spec/unit.js","../util":"node_modules/vega-lite/build/src/util.js","./pathoverlay":"node_modules/vega-lite/build/src/normalize/pathoverlay.js","./ruleforrangedline":"node_modules/vega-lite/build/src/normalize/ruleforrangedline.js"}],"node_modules/vega-lite/build/src/normalize/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalize = normalize;

var _config = require("../config");

var _core = require("./core");

function normalize(spec, config) {
  if (config === undefined) {
    config = (0, _config.initConfig)(spec.config);
  }

  return normalizeGenericSpec(spec, config);
}

const normalizer = new _core.CoreNormalizer();
/**
 * Decompose extended unit specs into composition of pure unit specs.
 */

function normalizeGenericSpec(spec, config = {}) {
  return normalizer.map(spec, {
    config
  });
}
},{"../config":"node_modules/vega-lite/build/src/config.js","./core":"node_modules/vega-lite/build/src/normalize/core.js"}],"node_modules/vega-lite/build/src/spec/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "isAnyConcatSpec", {
  enumerable: true,
  get: function () {
    return _concat.isAnyConcatSpec;
  }
});
Object.defineProperty(exports, "isHConcatSpec", {
  enumerable: true,
  get: function () {
    return _concat.isHConcatSpec;
  }
});
Object.defineProperty(exports, "isVConcatSpec", {
  enumerable: true,
  get: function () {
    return _concat.isVConcatSpec;
  }
});
Object.defineProperty(exports, "isFacetSpec", {
  enumerable: true,
  get: function () {
    return _facet.isFacetSpec;
  }
});
Object.defineProperty(exports, "isLayerSpec", {
  enumerable: true,
  get: function () {
    return _layer.isLayerSpec;
  }
});
Object.defineProperty(exports, "isRepeatSpec", {
  enumerable: true,
  get: function () {
    return _repeat.isRepeatSpec;
  }
});
Object.defineProperty(exports, "isUnitSpec", {
  enumerable: true,
  get: function () {
    return _unit.isUnitSpec;
  }
});

var _concat = require("./concat");

var _facet = require("./facet");

var _layer = require("./layer");

var _repeat = require("./repeat");

var _unit = require("./unit");
},{"./concat":"node_modules/vega-lite/build/src/spec/concat.js","./facet":"node_modules/vega-lite/build/src/spec/facet.js","./layer":"node_modules/vega-lite/build/src/spec/layer.js","./repeat":"node_modules/vega-lite/build/src/spec/repeat.js","./unit":"node_modules/vega-lite/build/src/spec/unit.js"}],"node_modules/vega-lite/build/src/spec/toplevel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeAutoSize = normalizeAutoSize;
exports.extractTopLevelProperties = extractTopLevelProperties;

var _vegaUtil = require("vega-util");

var log = _interopRequireWildcard(require("../log"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _normalizeAutoSize(autosize) {
  return (0, _vegaUtil.isString)(autosize) ? {
    type: autosize
  } : autosize || {};
}

function normalizeAutoSize(topLevelAutosize, configAutosize, isUnitOrLayer = true) {
  const autosize = Object.assign({
    type: 'pad'
  }, _normalizeAutoSize(configAutosize), _normalizeAutoSize(topLevelAutosize));

  if (autosize.type === 'fit') {
    if (!isUnitOrLayer) {
      log.warn(log.message.FIT_NON_SINGLE);
      autosize.type = 'pad';
    }
  }

  return autosize;
}

const TOP_LEVEL_PROPERTIES = ['background', 'padding' // We do not include "autosize" here as it is supported by only unit and layer specs and thus need to be normalized
];

function extractTopLevelProperties(t) {
  return TOP_LEVEL_PROPERTIES.reduce((o, p) => {
    if (t && t[p] !== undefined) {
      o[p] = t[p];
    }

    return o;
  }, {});
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../log":"node_modules/vega-lite/build/src/log/index.js"}],"node_modules/vega-lite/build/src/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isUrlData = isUrlData;
exports.isInlineData = isInlineData;
exports.isNamedData = isNamedData;
exports.isGenerator = isGenerator;
exports.isSequenceGenerator = isSequenceGenerator;
exports.isSphereGenerator = isSphereGenerator;
exports.isGraticuleGenerator = isGraticuleGenerator;
exports.RAW = exports.MAIN = void 0;

function isUrlData(data) {
  return !!data['url'];
}

function isInlineData(data) {
  return !!data['values'];
}

function isNamedData(data) {
  return !!data['name'] && !isUrlData(data) && !isInlineData(data) && !isGenerator(data);
}

function isGenerator(data) {
  return data && (isSequenceGenerator(data) || isSphereGenerator(data) || isGraticuleGenerator(data));
}

function isSequenceGenerator(data) {
  return !!data['sequence'];
}

function isSphereGenerator(data) {
  return !!data['sphere'];
}

function isGraticuleGenerator(data) {
  return !!data['graticule'];
}

const MAIN = 'main';
exports.MAIN = MAIN;
const RAW = 'raw';
exports.RAW = RAW;
},{}],"node_modules/vega-lite/build/src/predicate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSelectionPredicate = isSelectionPredicate;
exports.isFieldEqualPredicate = isFieldEqualPredicate;
exports.isFieldLTPredicate = isFieldLTPredicate;
exports.isFieldLTEPredicate = isFieldLTEPredicate;
exports.isFieldGTPredicate = isFieldGTPredicate;
exports.isFieldGTEPredicate = isFieldGTEPredicate;
exports.isFieldRangePredicate = isFieldRangePredicate;
exports.isFieldOneOfPredicate = isFieldOneOfPredicate;
exports.isFieldValidPredicate = isFieldValidPredicate;
exports.isFieldPredicate = isFieldPredicate;
exports.fieldFilterExpression = fieldFilterExpression;
exports.normalizePredicate = normalizePredicate;

var _vegaUtil = require("vega-util");

var _channeldef = require("./channeldef");

var _timeunit = require("./timeunit");

function isSelectionPredicate(predicate) {
  return predicate && predicate['selection'];
}

function isFieldEqualPredicate(predicate) {
  return predicate && !!predicate.field && predicate.equal !== undefined;
}

function isFieldLTPredicate(predicate) {
  return predicate && !!predicate.field && predicate.lt !== undefined;
}

function isFieldLTEPredicate(predicate) {
  return predicate && !!predicate.field && predicate.lte !== undefined;
}

function isFieldGTPredicate(predicate) {
  return predicate && !!predicate.field && predicate.gt !== undefined;
}

function isFieldGTEPredicate(predicate) {
  return predicate && !!predicate.field && predicate.gte !== undefined;
}

function isFieldRangePredicate(predicate) {
  if (predicate && predicate.field) {
    if ((0, _vegaUtil.isArray)(predicate.range) && predicate.range.length === 2) {
      return true;
    }
  }

  return false;
}

function isFieldOneOfPredicate(predicate) {
  return predicate && !!predicate.field && ((0, _vegaUtil.isArray)(predicate.oneOf) || (0, _vegaUtil.isArray)(predicate.in)) // backward compatibility
  ;
}

function isFieldValidPredicate(predicate) {
  return predicate && !!predicate.field && predicate.valid !== undefined;
}

function isFieldPredicate(predicate) {
  return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate) || isFieldLTPredicate(predicate) || isFieldGTPredicate(predicate) || isFieldLTEPredicate(predicate) || isFieldGTEPredicate(predicate);
}

function predicateValueExpr(v, timeUnit) {
  return (0, _channeldef.valueExpr)(v, {
    timeUnit,
    time: true
  });
}

function predicateValuesExpr(vals, timeUnit) {
  return vals.map(v => predicateValueExpr(v, timeUnit));
} // This method is used by Voyager.  Do not change its behavior without changing Voyager.


function fieldFilterExpression(predicate, useInRange = true) {
  const {
    field,
    timeUnit
  } = predicate;
  const fieldExpr = timeUnit ? // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.
  // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline
  // TODO: support utc
  'time(' + (0, _timeunit.fieldExpr)(timeUnit, field) + ')' : (0, _channeldef.vgField)(predicate, {
    expr: 'datum'
  });

  if (isFieldEqualPredicate(predicate)) {
    return fieldExpr + '===' + predicateValueExpr(predicate.equal, timeUnit);
  } else if (isFieldLTPredicate(predicate)) {
    const upper = predicate.lt;
    return `${fieldExpr}<${predicateValueExpr(upper, timeUnit)}`;
  } else if (isFieldGTPredicate(predicate)) {
    const lower = predicate.gt;
    return `${fieldExpr}>${predicateValueExpr(lower, timeUnit)}`;
  } else if (isFieldLTEPredicate(predicate)) {
    const upper = predicate.lte;
    return `${fieldExpr}<=${predicateValueExpr(upper, timeUnit)}`;
  } else if (isFieldGTEPredicate(predicate)) {
    const lower = predicate.gte;
    return `${fieldExpr}>=${predicateValueExpr(lower, timeUnit)}`;
  } else if (isFieldOneOfPredicate(predicate)) {
    return `indexof([${predicateValuesExpr(predicate.oneOf, timeUnit).join(',')}], ${fieldExpr}) !== -1`;
  } else if (isFieldValidPredicate(predicate)) {
    return predicate.valid ? `${fieldExpr}!==null&&!isNaN(${fieldExpr})` : `${fieldExpr}===null||isNaN(${fieldExpr})`;
  } else if (isFieldRangePredicate(predicate)) {
    const lower = predicate.range[0];
    const upper = predicate.range[1];

    if (lower !== null && upper !== null && useInRange) {
      return 'inrange(' + fieldExpr + ', [' + predicateValueExpr(lower, timeUnit) + ', ' + predicateValueExpr(upper, timeUnit) + '])';
    }

    const exprs = [];

    if (lower !== null) {
      exprs.push(`${fieldExpr} >= ${predicateValueExpr(lower, timeUnit)}`);
    }

    if (upper !== null) {
      exprs.push(`${fieldExpr} <= ${predicateValueExpr(upper, timeUnit)}`);
    }

    return exprs.length > 0 ? exprs.join(' && ') : 'true';
  }
  /* istanbul ignore next: it should never reach here */


  throw new Error(`Invalid field predicate: ${JSON.stringify(predicate)}`);
}

function normalizePredicate(f) {
  if (isFieldPredicate(f) && f.timeUnit) {
    return Object.assign({}, f, {
      timeUnit: (0, _timeunit.normalizeTimeUnit)(f.timeUnit)
    });
  }

  return f;
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./channeldef":"node_modules/vega-lite/build/src/channeldef.js","./timeunit":"node_modules/vega-lite/build/src/timeunit.js"}],"node_modules/vega-lite/build/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFilter = isFilter;
exports.isImputeSequence = isImputeSequence;
exports.isLookup = isLookup;
exports.isSample = isSample;
exports.isWindow = isWindow;
exports.isJoinAggregate = isJoinAggregate;
exports.isFlatten = isFlatten;
exports.isCalculate = isCalculate;
exports.isBin = isBin;
exports.isImpute = isImpute;
exports.isTimeUnit = isTimeUnit;
exports.isAggregate = isAggregate;
exports.isStack = isStack;
exports.isFold = isFold;
exports.normalizeTransform = normalizeTransform;

var _logical = require("./logical");

var _predicate = require("./predicate");

function isFilter(t) {
  return t['filter'] !== undefined;
}

function isImputeSequence(t) {
  return t && t['stop'] !== undefined;
}

function isLookup(t) {
  return t['lookup'] !== undefined;
}

function isSample(t) {
  return t['sample'] !== undefined;
}

function isWindow(t) {
  return t['window'] !== undefined;
}

function isJoinAggregate(t) {
  return t['joinaggregate'] !== undefined;
}

function isFlatten(t) {
  return t['flatten'] !== undefined;
}

function isCalculate(t) {
  return t['calculate'] !== undefined;
}

function isBin(t) {
  return !!t['bin'];
}

function isImpute(t) {
  return t['impute'] !== undefined;
}

function isTimeUnit(t) {
  return t['timeUnit'] !== undefined;
}

function isAggregate(t) {
  return t['aggregate'] !== undefined;
}

function isStack(t) {
  return t['stack'] !== undefined;
}

function isFold(t) {
  return t['fold'] !== undefined;
}

function normalizeTransform(transform) {
  return transform.map(t => {
    if (isFilter(t)) {
      return {
        filter: (0, _logical.normalizeLogicalOperand)(t.filter, _predicate.normalizePredicate)
      };
    }

    return t;
  });
}
},{"./logical":"node_modules/vega-lite/build/src/logical.js","./predicate":"node_modules/vega-lite/build/src/predicate.js"}],"node_modules/vega-lite/build/src/vega.schema.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSignalRef = isSignalRef;
exports.isVgRangeStep = isVgRangeStep;
exports.isDataRefUnionedDomain = isDataRefUnionedDomain;
exports.isFieldRefUnionDomain = isFieldRefUnionDomain;
exports.isDataRefDomain = isDataRefDomain;
exports.VG_MARK_CONFIGS = void 0;

var _vegaUtil = require("vega-util");

var _util = require("./util");

function isSignalRef(o) {
  return !!o['signal'];
}

function isVgRangeStep(range) {
  return !!range['step'];
}

function isDataRefUnionedDomain(domain) {
  if (!(0, _vegaUtil.isArray)(domain)) {
    return 'fields' in domain && !('data' in domain);
  }

  return false;
}

function isFieldRefUnionDomain(domain) {
  if (!(0, _vegaUtil.isArray)(domain)) {
    return 'fields' in domain && 'data' in domain;
  }

  return false;
}

function isDataRefDomain(domain) {
  if (!(0, _vegaUtil.isArray)(domain)) {
    return 'field' in domain && 'data' in domain;
  }

  return false;
}

const VG_MARK_CONFIG_INDEX = {
  opacity: 1,
  fill: 1,
  fillOpacity: 1,
  stroke: 1,
  strokeCap: 1,
  strokeWidth: 1,
  strokeOpacity: 1,
  strokeDash: 1,
  strokeDashOffset: 1,
  strokeJoin: 1,
  strokeMiterLimit: 1,
  size: 1,
  shape: 1,
  interpolate: 1,
  tension: 1,
  orient: 1,
  align: 1,
  baseline: 1,
  text: 1,
  dir: 1,
  dx: 1,
  dy: 1,
  ellipsis: 1,
  limit: 1,
  radius: 1,
  theta: 1,
  angle: 1,
  font: 1,
  fontSize: 1,
  fontWeight: 1,
  fontStyle: 1,
  cursor: 1,
  href: 1,
  tooltip: 1,
  cornerRadius: 1,
  x: 1,
  y: 1,
  x2: 1,
  y2: 1,
  width: 1,
  height: 1 // commented below are vg channel that do not have mark config.
  // xc'|'width'|'yc'|'height'
  // clip: 1,
  // endAngle: 1,
  // innerRadius: 1,
  // outerRadius: 1,
  // path: 1,
  // startAngle: 1,
  // url: 1,

};
const VG_MARK_CONFIGS = (0, _util.keys)(VG_MARK_CONFIG_INDEX);
exports.VG_MARK_CONFIGS = VG_MARK_CONFIGS;
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/axis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAxisProperty = isAxisProperty;
exports.AXIS_PROPERTIES = exports.VG_AXIS_PROPERTIES = exports.AXIS_PROPERTY_TYPE = exports.AXIS_PARTS = void 0;

var _util = require("./util");

const AXIS_PARTS = ['domain', 'grid', 'labels', 'ticks', 'title'];
/**
 * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.
 * (Properties not listed are applicable for both)
 */

exports.AXIS_PARTS = AXIS_PARTS;
const AXIS_PROPERTY_TYPE = {
  grid: 'grid',
  gridColor: 'grid',
  gridDash: 'grid',
  gridOpacity: 'grid',
  gridScale: 'grid',
  gridWidth: 'grid',
  orient: 'main',
  bandPosition: 'both',
  domain: 'main',
  domainColor: 'main',
  domainOpacity: 'main',
  domainWidth: 'main',
  format: 'main',
  formatType: 'main',
  labelAlign: 'main',
  labelAngle: 'main',
  labelBaseline: 'main',
  labelBound: 'main',
  labelColor: 'main',
  labelFlush: 'main',
  labelFlushOffset: 'main',
  labelFont: 'main',
  labelFontSize: 'main',
  labelFontWeight: 'main',
  labelLimit: 'main',
  labelOpacity: 'main',
  labelOverlap: 'main',
  labelPadding: 'main',
  labels: 'main',
  maxExtent: 'main',
  minExtent: 'main',
  offset: 'main',
  position: 'main',
  tickColor: 'main',
  tickExtra: 'main',
  tickOffset: 'both',
  tickOpacity: 'main',
  tickRound: 'main',
  ticks: 'main',
  tickSize: 'main',
  title: 'main',
  titleAlign: 'main',
  titleAngle: 'main',
  titleBaseline: 'main',
  titleColor: 'main',
  titleFont: 'main',
  titleFontSize: 'main',
  titleFontWeight: 'main',
  titleLimit: 'main',
  titleOpacity: 'main',
  titlePadding: 'main',
  titleX: 'main',
  titleY: 'main',
  tickWidth: 'both',
  tickCount: 'both',
  values: 'both',
  scale: 'both',
  zindex: 'both' // this is actually set afterward, so it doesn't matter

};
exports.AXIS_PROPERTY_TYPE = AXIS_PROPERTY_TYPE;
const COMMON_AXIS_PROPERTIES_INDEX = {
  orient: 1,
  bandPosition: 1,
  domain: 1,
  domainColor: 1,
  domainDash: 1,
  domainDashOffset: 1,
  domainOpacity: 1,
  domainWidth: 1,
  format: 1,
  formatType: 1,
  grid: 1,
  gridColor: 1,
  gridDash: 1,
  gridDashOffset: 1,
  gridOpacity: 1,
  gridWidth: 1,
  labelAlign: 1,
  labelAngle: 1,
  labelBaseline: 1,
  labelBound: 1,
  labelColor: 1,
  labelFlush: 1,
  labelFlushOffset: 1,
  labelFont: 1,
  labelFontSize: 1,
  labelFontStyle: 1,
  labelFontWeight: 1,
  labelLimit: 1,
  labelOpacity: 1,
  labelOverlap: 1,
  labelPadding: 1,
  labels: 1,
  labelSeparation: 1,
  maxExtent: 1,
  minExtent: 1,
  offset: 1,
  position: 1,
  tickColor: 1,
  tickCount: 1,
  tickDash: 1,
  tickDashOffset: 1,
  tickExtra: 1,
  tickMinStep: 1,
  tickOffset: 1,
  tickOpacity: 1,
  tickRound: 1,
  ticks: 1,
  tickSize: 1,
  tickWidth: 1,
  title: 1,
  titleAlign: 1,
  titleAnchor: 1,
  titleAngle: 1,
  titleBaseline: 1,
  titleColor: 1,
  titleFont: 1,
  titleFontSize: 1,
  titleFontStyle: 1,
  titleFontWeight: 1,
  titleLimit: 1,
  titleOpacity: 1,
  titlePadding: 1,
  titleX: 1,
  titleY: 1,
  values: 1,
  zindex: 1
};
const AXIS_PROPERTIES_INDEX = Object.assign({}, COMMON_AXIS_PROPERTIES_INDEX, {
  encoding: 1
});
const VG_AXIS_PROPERTIES_INDEX = Object.assign({
  gridScale: 1,
  scale: 1
}, COMMON_AXIS_PROPERTIES_INDEX, {
  encode: 1
});

function isAxisProperty(prop) {
  return !!AXIS_PROPERTIES_INDEX[prop];
}

const VG_AXIS_PROPERTIES = (0, _util.keys)(VG_AXIS_PROPERTIES_INDEX); // Export for dependent projects

exports.VG_AXIS_PROPERTIES = VG_AXIS_PROPERTIES;
const AXIS_PROPERTIES = (0, _util.keys)(AXIS_PROPERTIES_INDEX);
exports.AXIS_PROPERTIES = AXIS_PROPERTIES;
},{"./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/compile/axis/assemble.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assembleAxis = assembleAxis;
exports.assembleAxisSignals = assembleAxisSignals;
exports.assembleAxes = assembleAxes;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var _axis = require("../../axis");

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _util = require("../../util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function assembleTitle(title, config) {
  if ((0, _vegaUtil.isArray)(title)) {
    return title.map(fieldDef => (0, _channeldef.defaultTitle)(fieldDef, config)).join(', ');
  }

  return title;
}

function assembleAxis(axisCmpt, kind, config, opt = {
  header: false
}) {
  const _a = axisCmpt.combine(),
        {
    orient,
    scale,
    title,
    zindex
  } = _a,
        axis = tslib_1.__rest(_a, ["orient", "scale", "title", "zindex"]); // Remove properties that are not valid for this kind of axis


  (0, _util.keys)(axis).forEach(key => {
    const propType = _axis.AXIS_PROPERTY_TYPE[key];

    if (propType && propType !== kind && propType !== 'both') {
      delete axis[key];
    }
  });

  if (kind === 'grid') {
    if (!axis.grid) {
      return undefined;
    } // Remove unnecessary encode block


    if (axis.encode) {
      // Only need to keep encode block for grid
      const {
        grid
      } = axis.encode;
      axis.encode = Object.assign({}, grid ? {
        grid
      } : {});

      if ((0, _util.keys)(axis.encode).length === 0) {
        delete axis.encode;
      }
    }

    return Object.assign({
      scale,
      orient
    }, axis, {
      domain: false,
      labels: false,
      // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`
      // would not affect gridAxis
      maxExtent: 0,
      minExtent: 0,
      ticks: false,
      zindex: (0, _util.getFirstDefined)(zindex, 0) // put grid behind marks by default

    });
  } else {
    // kind === 'main'
    if (!opt.header && axisCmpt.mainExtracted) {
      // if mainExtracted has been extracted to a separate facet
      return undefined;
    } // Remove unnecessary encode block


    if (axis.encode) {
      for (const part of _axis.AXIS_PARTS) {
        if (!axisCmpt.hasAxisPart(part)) {
          delete axis.encode[part];
        }
      }

      if ((0, _util.keys)(axis.encode).length === 0) {
        delete axis.encode;
      }
    }

    const titleString = assembleTitle(title, config);
    return Object.assign({
      scale,
      orient,
      grid: false
    }, titleString ? {
      title: titleString
    } : {}, axis, {
      zindex: (0, _util.getFirstDefined)(zindex, 1) // put axis line above marks by default

    });
  }
}
/**
 * Add axis signals so grid line works correctly
 * (Fix https://github.com/vega/vega-lite/issues/4226)
 */


function assembleAxisSignals(model) {
  const {
    axes
  } = model.component;

  for (const channel of _channel.POSITION_SCALE_CHANNELS) {
    if (axes[channel]) {
      for (const axis of axes[channel]) {
        if (!axis.get('gridScale')) {
          // If there is x-axis but no y-scale for gridScale, need to set height/weight so x-axis can draw the grid with the right height.  Same for y-axis and width.
          const sizeType = channel === 'x' ? 'height' : 'width';
          return [{
            name: sizeType,
            update: model.getSizeSignalRef(sizeType).signal
          }];
        }
      }
    }
  }

  return [];
}

function assembleAxes(axisComponents, config) {
  const {
    x = [],
    y = []
  } = axisComponents;
  return [...x.map(a => assembleAxis(a, 'main', config)), ...x.map(a => assembleAxis(a, 'grid', config)), ...y.map(a => assembleAxis(a, 'main', config)), ...y.map(a => assembleAxis(a, 'grid', config))].filter(a => a); // filter undefined
}
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../axis":"node_modules/vega-lite/build/src/axis.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/header.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HEADER_LABEL_PROPERTIES = exports.HEADER_TITLE_PROPERTIES = exports.HEADER_LABEL_PROPERTIES_MAP = exports.HEADER_TITLE_PROPERTIES_MAP = void 0;

var _util = require("./util");

const HEADER_TITLE_PROPERTIES_MAP = {
  titleAlign: 'align',
  titleAnchor: 'anchor',
  titleAngle: 'angle',
  titleBaseline: 'baseline',
  titleColor: 'color',
  titleFont: 'font',
  titleFontSize: 'fontSize',
  titleFontStyle: 'fontStyle',
  titleFontWeight: 'fontWeight',
  titleLimit: 'limit',
  titleOrient: 'orient',
  titlePadding: 'offset'
};
exports.HEADER_TITLE_PROPERTIES_MAP = HEADER_TITLE_PROPERTIES_MAP;
const HEADER_LABEL_PROPERTIES_MAP = {
  labelAlign: 'align',
  labelAnchor: 'anchor',
  labelAngle: 'angle',
  labelColor: 'color',
  labelFont: 'font',
  labelFontSize: 'fontSize',
  labelFontStyle: 'fontStyle',
  labelLimit: 'limit',
  labelOrient: 'orient',
  labelPadding: 'offset'
};
exports.HEADER_LABEL_PROPERTIES_MAP = HEADER_LABEL_PROPERTIES_MAP;
const HEADER_TITLE_PROPERTIES = (0, _util.keys)(HEADER_TITLE_PROPERTIES_MAP);
exports.HEADER_TITLE_PROPERTIES = HEADER_TITLE_PROPERTIES;
const HEADER_LABEL_PROPERTIES = (0, _util.keys)(HEADER_LABEL_PROPERTIES_MAP);
exports.HEADER_LABEL_PROPERTIES = HEADER_LABEL_PROPERTIES;
},{"./util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSortByEncoding = isSortByEncoding;
exports.isSortField = isSortField;
exports.isSortArray = isSortArray;
exports.DEFAULT_SORT_OP = void 0;

var _vegaUtil = require("vega-util");

const DEFAULT_SORT_OP = 'mean';
exports.DEFAULT_SORT_OP = DEFAULT_SORT_OP;

function isSortByEncoding(sort) {
  return !!sort && !!sort['encoding'];
}

function isSortField(sort) {
  return !!sort && (sort['op'] === 'count' || !!sort['field']);
}

function isSortArray(sort) {
  return !!sort && (0, _vegaUtil.isArray)(sort);
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js"}],"node_modules/vega-lite/build/src/compile/axis/config.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAxisConfig = getAxisConfig;

function getAxisConfig(property, config, channel, orient, scaleType) {
  // configTypes to loop, starting from higher precedence
  const configTypes = [...(scaleType === 'band' ? ['axisBand'] : []), channel === 'x' ? 'axisX' : 'axisY', // axisTop, axisBottom, ...
  ...(orient ? ['axis' + orient.substr(0, 1).toUpperCase() + orient.substr(1)] : []), 'axis'];

  for (const configType of configTypes) {
    if (config[configType] && config[configType][property] !== undefined) {
      return config[configType][property];
    }
  }

  return undefined;
}
},{}],"node_modules/vega-lite/build/src/compile/axis/properties.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultGrid = defaultGrid;
exports.gridScale = gridScale;
exports.labelAngle = labelAngle;
exports.defaultLabelBaseline = defaultLabelBaseline;
exports.defaultLabelAlign = defaultLabelAlign;
exports.defaultLabelFlush = defaultLabelFlush;
exports.defaultLabelOverlap = defaultLabelOverlap;
exports.orient = orient;
exports.defaultTickCount = defaultTickCount;
exports.values = values;

var _bin = require("../../bin");

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var log = _interopRequireWildcard(require("../../log"));

var _scale = require("../../scale");

var _type = require("../../type");

var _util = require("../../util");

var _config = require("./config");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// TODO: we need to refactor this method after we take care of config refactoring

/**
 * Default rules for whether to show a grid should be shown for a channel.
 * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned
 */
function defaultGrid(scaleType, fieldDef) {
  return !(0, _scale.hasDiscreteDomain)(scaleType) && !(0, _bin.isBinning)(fieldDef.bin);
}

function gridScale(model, channel) {
  const gridChannel = channel === 'x' ? 'y' : 'x';

  if (model.getScaleComponent(gridChannel)) {
    return model.scaleName(gridChannel);
  }

  return undefined;
}

function labelAngle(model, specifiedAxis, channel, fieldDef) {
  // try axis value
  if (specifiedAxis.labelAngle !== undefined) {
    return (0, _util.normalizeAngle)(specifiedAxis.labelAngle);
  } else {
    // try axis config value
    const angle = (0, _config.getAxisConfig)('labelAngle', model.config, channel, orient(channel), model.getScaleComponent(channel).get('type'));

    if (angle !== undefined) {
      return (0, _util.normalizeAngle)(angle);
    } else {
      // get default value
      if (channel === _channel.X && (0, _util.contains)([_type.NOMINAL, _type.ORDINAL], fieldDef.type)) {
        return 270;
      } // no default


      return undefined;
    }
  }
}

function defaultLabelBaseline(angle, axisOrient) {
  if (angle !== undefined) {
    angle = (0, _util.normalizeAngle)(angle);

    if (axisOrient === 'top' || axisOrient === 'bottom') {
      if (angle <= 45 || 315 <= angle) {
        return axisOrient === 'top' ? 'bottom' : 'top';
      } else if (135 <= angle && angle <= 225) {
        return axisOrient === 'top' ? 'top' : 'bottom';
      } else {
        return 'middle';
      }
    } else {
      if (angle <= 45 || 315 <= angle || 135 <= angle && angle <= 225) {
        return 'middle';
      } else if (45 <= angle && angle <= 135) {
        return axisOrient === 'left' ? 'top' : 'bottom';
      } else {
        return axisOrient === 'left' ? 'bottom' : 'top';
      }
    }
  }

  return undefined;
}

function defaultLabelAlign(angle, axisOrient) {
  if (angle !== undefined) {
    angle = (0, _util.normalizeAngle)(angle);

    if (axisOrient === 'top' || axisOrient === 'bottom') {
      if (angle % 180 === 0) {
        return 'center';
      } else if (0 < angle && angle < 180) {
        return axisOrient === 'top' ? 'right' : 'left';
      } else {
        return axisOrient === 'top' ? 'left' : 'right';
      }
    } else {
      if ((angle + 90) % 180 === 0) {
        return 'center';
      } else if (90 <= angle && angle < 270) {
        return axisOrient === 'left' ? 'left' : 'right';
      } else {
        return axisOrient === 'left' ? 'right' : 'left';
      }
    }
  }

  return undefined;
}

function defaultLabelFlush(fieldDef, channel) {
  if (channel === 'x' && (0, _util.contains)(['quantitative', 'temporal'], fieldDef.type)) {
    return true;
  }

  return undefined;
}

function defaultLabelOverlap(fieldDef, scaleType) {
  // do not prevent overlap for nominal data because there is no way to infer what the missing labels are
  if (fieldDef.type !== 'nominal') {
    if (scaleType === 'log') {
      return 'greedy';
    }

    return true;
  }

  return undefined;
}

function orient(channel) {
  switch (channel) {
    case _channel.X:
      return 'bottom';

    case _channel.Y:
      return 'left';
  }
  /* istanbul ignore next: This should never happen. */


  throw new Error(log.message.INVALID_CHANNEL_FOR_AXIS);
}

function defaultTickCount({
  fieldDef,
  scaleType,
  size
}) {
  if (!(0, _scale.hasDiscreteDomain)(scaleType) && scaleType !== 'log' && !(0, _util.contains)(['month', 'hours', 'day', 'quarter'], fieldDef.timeUnit)) {
    if ((0, _bin.isBinning)(fieldDef.bin)) {
      // for binned data, we don't want more ticks than maxbins
      return {
        signal: `ceil(${size.signal}/10)`
      };
    }

    return {
      signal: `ceil(${size.signal}/40)`
    };
  }

  return undefined;
}

function values(specifiedAxis, model, fieldDef) {
  const vals = specifiedAxis.values;

  if (vals) {
    return (0, _channeldef.valueArray)(fieldDef, vals);
  }

  return undefined;
}
},{"../../bin":"node_modules/vega-lite/build/src/bin.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../type":"node_modules/vega-lite/build/src/type.js","../../util":"node_modules/vega-lite/build/src/util.js","./config":"node_modules/vega-lite/build/src/compile/axis/config.js"}],"node_modules/vega-lite/build/src/compile/common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyMarkConfig = applyMarkConfig;
exports.getStyles = getStyles;
exports.getMarkConfig = getMarkConfig;
exports.getStyleConfig = getStyleConfig;
exports.formatSignalRef = formatSignalRef;
exports.numberFormat = numberFormat;
exports.numberFormatExpr = numberFormatExpr;
exports.binFormatExpression = binFormatExpression;
exports.timeFormatExpression = timeFormatExpression;
exports.sortParams = sortParams;
exports.mergeTitleFieldDefs = mergeTitleFieldDefs;
exports.mergeTitle = mergeTitle;
exports.mergeTitleComponent = mergeTitleComponent;

var _vegaUtil = require("vega-util");

var _bin = require("../bin");

var _channeldef = require("../channeldef");

var _scale = require("../scale");

var _timeunit = require("../timeunit");

var _type = require("../type");

var _util = require("../util");

function applyMarkConfig(e, model, propsList) {
  for (const property of propsList) {
    const value = getMarkConfig(property, model.markDef, model.config);

    if (value !== undefined) {
      e[property] = {
        value: value
      };
    }
  }

  return e;
}

function getStyles(mark) {
  return [].concat(mark.type, mark.style || []);
}
/**
 * Return property value from style or mark specific config property if exists.
 * Otherwise, return general mark specific config.
 */


function getMarkConfig(channel, mark, config, {
  vgChannel
} = {} // Note: Ham: I use `any` here as it's too hard to make TS knows that MarkConfig[vgChannel] would have the same type as MarkConfig[P]
) {
  return (0, _util.getFirstDefined)( // style config has highest precedence
  vgChannel ? getStyleConfig(channel, mark, config.style) : undefined, getStyleConfig(channel, mark, config.style), // then mark-specific config
  vgChannel ? config[mark.type][vgChannel] : undefined, config[mark.type][channel], // If there is vgChannel, skip vl channel.
  // For example, vl size for text is vg fontSize, but config.mark.size is only for point size.
  vgChannel ? config.mark[vgChannel] : config.mark[channel]);
}

function getStyleConfig(prop, mark, styleConfigIndex) {
  const styles = getStyles(mark);
  let value;

  for (const style of styles) {
    const styleConfig = styleConfigIndex[style]; // MarkConfig extends VgMarkConfig so a prop may not be a valid property for style
    // However here we also check if it is defined, so it is okay to cast here

    const p = prop;

    if (styleConfig && styleConfig[p] !== undefined) {
      value = styleConfig[p];
    }
  }

  return value;
}

function formatSignalRef(fieldDef, specifiedFormat, expr, config) {
  if ((0, _channeldef.isTimeFormatFieldDef)(fieldDef)) {
    const isUTCScale = (0, _channeldef.isScaleFieldDef)(fieldDef) && fieldDef['scale'] && fieldDef['scale'].type === _scale.ScaleType.UTC;

    return {
      signal: timeFormatExpression((0, _channeldef.vgField)(fieldDef, {
        expr
      }), fieldDef.timeUnit, specifiedFormat, config.text.shortTimeLabels, config.timeFormat, isUTCScale, true)
    };
  } else {
    const format = numberFormat(fieldDef, specifiedFormat, config);

    if ((0, _bin.isBinning)(fieldDef.bin)) {
      const startField = (0, _channeldef.vgField)(fieldDef, {
        expr
      });
      const endField = (0, _channeldef.vgField)(fieldDef, {
        expr,
        binSuffix: 'end'
      });
      return {
        signal: binFormatExpression(startField, endField, format, config)
      };
    } else if (fieldDef.type === 'quantitative' || format) {
      return {
        signal: `${formatExpr((0, _channeldef.vgField)(fieldDef, {
          expr,
          binSuffix: 'range'
        }), format)}`
      };
    } else {
      return {
        signal: `''+${(0, _channeldef.vgField)(fieldDef, {
          expr
        })}`
      };
    }
  }
}
/**
 * Returns number format for a fieldDef
 */


function numberFormat(fieldDef, specifiedFormat, config) {
  // Specified format in axis/legend has higher precedence than fieldDef.format
  if (specifiedFormat) {
    return specifiedFormat;
  }

  if (fieldDef.type === _type.QUANTITATIVE) {
    // we only apply the default if the field is quantitative
    return config.numberFormat;
  }

  return undefined;
}

function formatExpr(field, format) {
  return `format(${field}, "${format || ''}")`;
}

function numberFormatExpr(field, specifiedFormat, config) {
  return formatExpr(field, specifiedFormat || config.numberFormat);
}

function binFormatExpression(startField, endField, format, config) {
  return `${startField} === null || isNaN(${startField}) ? "null" : ${numberFormatExpr(startField, format, config)} + " - " + ${numberFormatExpr(endField, format, config)}`;
}
/**
 * Returns the time expression used for axis/legend labels or text mark for a temporal field
 */


function timeFormatExpression(field, timeUnit, format, shortTimeLabels, rawTimeFormat, // should be provided only for actual text and headers, not axis/legend labels
isUTCScale, alwaysReturn = false) {
  if (!timeUnit || format) {
    // If there is not time unit, or if user explicitly specify format for axis/legend/text.
    format = format || rawTimeFormat; // only use provided timeFormat if there is no timeUnit.

    if (format || alwaysReturn) {
      return `${isUTCScale ? 'utc' : 'time'}Format(${field}, '${format}')`;
    } else {
      return undefined;
    }
  } else {
    return (0, _timeunit.formatExpression)(timeUnit, field, shortTimeLabels, isUTCScale);
  }
}
/**
 * Return Vega sort parameters (tuple of field and order).
 */


function sortParams(orderDef, fieldRefOption) {
  return ((0, _vegaUtil.isArray)(orderDef) ? orderDef : [orderDef]).reduce((s, orderChannelDef) => {
    s.field.push((0, _channeldef.vgField)(orderChannelDef, fieldRefOption));
    s.order.push(orderChannelDef.sort || 'ascending');
    return s;
  }, {
    field: [],
    order: []
  });
}

function mergeTitleFieldDefs(f1, f2) {
  const merged = [...f1];
  f2.forEach(fdToMerge => {
    for (const fieldDef1 of merged) {
      // If already exists, no need to append to merged array
      if ((0, _util.stringify)(fieldDef1) === (0, _util.stringify)(fdToMerge)) {
        return;
      }
    }

    merged.push(fdToMerge);
  });
  return merged;
}

function mergeTitle(title1, title2) {
  if (title1 === title2 || !title2) {
    // if titles are the same or title2 is falsy
    return title1;
  } else if (!title1) {
    // if title1 is falsy
    return title2;
  } else {
    // join title with comma if they are different
    return title1 + ', ' + title2;
  }
}

function mergeTitleComponent(v1, v2) {
  if ((0, _vegaUtil.isArray)(v1.value) && (0, _vegaUtil.isArray)(v2.value)) {
    return {
      explicit: v1.explicit,
      value: mergeTitleFieldDefs(v1.value, v2.value)
    };
  } else if (!(0, _vegaUtil.isArray)(v1.value) && !(0, _vegaUtil.isArray)(v2.value)) {
    return {
      explicit: v1.explicit,
      value: mergeTitle(v1.value, v2.value)
    };
  }
  /* istanbul ignore next: Condition should not happen -- only for warning in development. */


  throw new Error('It should never reach here');
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../bin":"node_modules/vega-lite/build/src/bin.js","../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../scale":"node_modules/vega-lite/build/src/scale.js","../timeunit":"node_modules/vega-lite/build/src/timeunit.js","../type":"node_modules/vega-lite/build/src/type.js","../util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/compile/data/dataflow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OutputNode = exports.DataFlowNode = void 0;

var _util = require("../../util");

/**
 * A node in the dataflow tree.
 */
class DataFlowNode {
  constructor(parent, debugName) {
    this.debugName = debugName;
    this._children = [];
    this._parent = null;

    if (parent) {
      this.parent = parent;
    }
  }
  /**
   * Clone this node with a deep copy but don't clone links to children or parents.
   */


  clone() {
    throw new Error('Cannot clone node');
  }
  /**
   * Return a hash of the node.
   */


  hash() {
    if (this._hash === undefined) {
      this._hash = (0, _util.uniqueId)();
    }

    return this._hash;
  }
  /**
   * Set of fields that are being created by this node.
   */


  producedFields() {
    return new Set();
  }

  dependentFields() {
    return new Set();
  }

  get parent() {
    return this._parent;
  }
  /**
   * Set the parent of the node and also add this node to the parent's children.
   */


  set parent(parent) {
    this._parent = parent;

    if (parent) {
      parent.addChild(this);
    }
  }

  get children() {
    return this._children;
  }

  numChildren() {
    return this._children.length;
  }

  addChild(child, loc) {
    // do not add the same child twice
    if (this._children.indexOf(child) > -1) {
      console.warn('Attempt to add the same child twice.');
      return;
    }

    if (loc !== undefined) {
      this._children.splice(loc, 0, child);
    } else {
      this._children.push(child);
    }
  }

  removeChild(oldChild) {
    const loc = this._children.indexOf(oldChild);

    this._children.splice(loc, 1);

    return loc;
  }
  /**
   * Remove node from the dataflow.
   */


  remove() {
    let loc = this._parent.removeChild(this);

    for (const child of this._children) {
      // do not use the set method because we want to insert at a particular location
      child._parent = this._parent;

      this._parent.addChild(child, loc++);
    }
  }
  /**
   * Insert another node as a parent of this node.
   */


  insertAsParentOf(other) {
    const parent = other.parent;
    parent.removeChild(this);
    this.parent = parent;
    other.parent = this;
  }

  swapWithParent() {
    const parent = this._parent;
    const newParent = parent.parent; // reconnect the children

    for (const child of this._children) {
      child.parent = parent;
    } // remove old links


    this._children = []; // equivalent to removing every child link one by one

    parent.removeChild(this);
    parent.parent.removeChild(parent); // swap two nodes

    this.parent = newParent;
    parent.parent = this;
  }

}

exports.DataFlowNode = DataFlowNode;

class OutputNode extends DataFlowNode {
  /**
   * @param source The name of the source. Will change in assemble.
   * @param type The type of the output node.
   * @param refCounts A global ref counter map.
   */
  constructor(parent, source, type, refCounts) {
    super(parent, source);
    this.type = type;
    this.refCounts = refCounts;
    this._source = this._name = source;

    if (this.refCounts && !(this._name in this.refCounts)) {
      this.refCounts[this._name] = 0;
    }
  }

  clone() {
    const cloneObj = new this.constructor();
    cloneObj.debugName = 'clone_' + this.debugName;
    cloneObj._source = this._source;
    cloneObj._name = 'clone_' + this._name;
    cloneObj.type = this.type;
    cloneObj.refCounts = this.refCounts;
    cloneObj.refCounts[cloneObj._name] = 0;
    return cloneObj;
  }
  /**
   * Request the datasource name and increase the ref counter.
   *
   * During the parsing phase, this will return the simple name such as 'main' or 'raw'.
   * It is crucial to request the name from an output node to mark it as a required node.
   * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.
   *
   * In the assemble phase, this will return the correct name.
   */


  getSource() {
    this.refCounts[this._name]++;
    return this._source;
  }

  isRequired() {
    return !!this.refCounts[this._name];
  }

  setSource(source) {
    this._source = source;
  }

}

exports.OutputNode = OutputNode;
},{"../../util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/compile/data/expressions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDependentFields = getDependentFields;

var _vegaExpression = require("vega-expression");

function getName(node) {
  const name = [];

  if (node.type === 'Identifier') {
    return [node.name];
  }

  if (node.type === 'Literal') {
    return [node.value];
  }

  if (node.type === 'MemberExpression') {
    name.push(...getName(node.object));
    name.push(...getName(node.property));
  }

  return name;
}

function startsWithDatum(node) {
  if (node.object.type === 'MemberExpression') {
    return startsWithDatum(node.object);
  }

  return node.object.name === 'datum';
}

function getDependentFields(expression) {
  const ast = (0, _vegaExpression.parse)(expression);
  const dependents = new Set();
  ast.visit(node => {
    if (node.type === 'MemberExpression' && startsWithDatum(node)) {
      dependents.add(getName(node).slice(1).join('.'));
    }
  });
  return dependents;
}
},{"vega-expression":"node_modules/vega-expression/index.js"}],"node_modules/vega-lite/build/src/compile/data/calculate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortArrayIndexField = sortArrayIndexField;
exports.CalculateNode = void 0;

var _channeldef = require("../../channeldef");

var _predicate = require("../../predicate");

var _sort = require("../../sort");

var _util = require("../../util");

var _dataflow = require("./dataflow");

var _expressions = require("./expressions");

/**
 * We don't know what a calculate node depends on so we should never move it beyond anything that produces fields.
 */
class CalculateNode extends _dataflow.DataFlowNode {
  constructor(parent, transform) {
    super(parent);
    this.transform = transform;
    this._dependentFields = (0, _expressions.getDependentFields)(this.transform.calculate);
  }

  clone() {
    return new CalculateNode(null, (0, _util.duplicate)(this.transform));
  }

  static parseAllForSortIndex(parent, model) {
    // get all the encoding with sort fields from model
    model.forEachFieldDef((fieldDef, channel) => {
      if (!(0, _channeldef.isScaleFieldDef)(fieldDef)) {
        return;
      }

      if ((0, _sort.isSortArray)(fieldDef.sort)) {
        const {
          field,
          timeUnit
        } = fieldDef;
        const sort = fieldDef.sort; // generate `datum["a"] === val0 ? 0 : datum["a"] === val1 ? 1 : ... : n` via FieldEqualPredicate

        const calculate = sort.map((sortValue, i) => {
          return `${(0, _predicate.fieldFilterExpression)({
            field,
            timeUnit,
            equal: sortValue
          })} ? ${i} : `;
        }).join('') + sort.length;
        parent = new CalculateNode(parent, {
          calculate,
          as: sortArrayIndexField(fieldDef, channel, {
            forAs: true
          })
        });
      }
    });
    return parent;
  }

  producedFields() {
    return new Set([this.transform.as]);
  }

  dependentFields() {
    return this._dependentFields;
  }

  assemble() {
    return {
      type: 'formula',
      expr: this.transform.calculate,
      as: this.transform.as
    };
  }

  hash() {
    return `Calculate ${(0, _util.hash)(this.transform)}`;
  }

}

exports.CalculateNode = CalculateNode;

function sortArrayIndexField(fieldDef, channel, opt) {
  return (0, _channeldef.vgField)(fieldDef, Object.assign({
    prefix: channel,
    suffix: 'sort_index'
  }, opt || {}));
}
},{"../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../predicate":"node_modules/vega-lite/build/src/predicate.js","../../sort":"node_modules/vega-lite/build/src/sort.js","../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js","./expressions":"node_modules/vega-lite/build/src/compile/data/expressions.js"}],"node_modules/vega-lite/build/src/compile/header/common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHeaderChannel = getHeaderChannel;
exports.getHeaderProperty = getHeaderProperty;
exports.getHeaderProperties = getHeaderProperties;

var _util = require("../../util");

/**
 * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.
 */
function getHeaderChannel(channel, orient) {
  if ((0, _util.contains)(['top', 'bottom'], orient)) {
    return 'column';
  } else if ((0, _util.contains)(['left', 'right'], orient)) {
    return 'row';
  }

  return channel === 'row' ? 'row' : 'column';
}

function getHeaderProperty(prop, facetFieldDef, config, channel) {
  const headerSpecificConfig = channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;
  return (0, _util.getFirstDefined)(facetFieldDef && facetFieldDef.header ? facetFieldDef.header[prop] : undefined, headerSpecificConfig[prop], config.header[prop]);
}

function getHeaderProperties(properties, facetFieldDef, config, channel) {
  const props = {};

  for (const prop of properties) {
    const value = getHeaderProperty(prop, facetFieldDef, config, channel);

    if (value !== undefined) {
      props[prop] = value;
    }
  }

  return props;
}
},{"../../util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/compile/header/component.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HEADER_TYPES = exports.HEADER_CHANNELS = void 0;
const HEADER_CHANNELS = ['row', 'column'];
exports.HEADER_CHANNELS = HEADER_CHANNELS;
const HEADER_TYPES = ['header', 'footer'];
exports.HEADER_TYPES = HEADER_TYPES;
},{}],"node_modules/vega-lite/build/src/compile/header/assemble.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assembleTitleGroup = assembleTitleGroup;
exports.defaultHeaderGuideAlign = defaultHeaderGuideAlign;
exports.defaultHeaderGuideBaseline = defaultHeaderGuideBaseline;
exports.assembleHeaderGroups = assembleHeaderGroups;
exports.assembleLabelTitle = assembleLabelTitle;
exports.assembleHeaderGroup = assembleHeaderGroup;
exports.getLayoutTitleBand = getLayoutTitleBand;
exports.assembleLayoutTitleBand = assembleLayoutTitleBand;
exports.assembleHeaderProperties = assembleHeaderProperties;

var _vegaUtil = require("vega-util");

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _header = require("../../header");

var _sort = require("../../sort");

var _facet = require("../../spec/facet");

var _util = require("../../util");

var _properties = require("../axis/properties");

var _common = require("../common");

var _calculate = require("../data/calculate");

var _model = require("../model");

var _common2 = require("./common");

var _component = require("./component");

// TODO: rename to assembleHeaderTitleGroup
function assembleTitleGroup(model, channel) {
  const title = model.component.layoutHeaders[channel].title;
  const config = model.config ? model.config : undefined;
  const facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef ? model.component.layoutHeaders[channel].facetFieldDef : undefined;
  const {
    titleAnchor,
    titleAngle,
    titleOrient
  } = (0, _common2.getHeaderProperties)(['titleAnchor', 'titleAngle', 'titleOrient'], facetFieldDef, config, channel);
  const headerChannel = (0, _common2.getHeaderChannel)(channel, titleOrient);
  return {
    name: `${channel}-title`,
    type: 'group',
    role: `${headerChannel}-title`,
    title: Object.assign({
      text: title
    }, channel === 'row' ? {
      orient: 'left'
    } : {}, {
      style: 'guide-title'
    }, defaultHeaderGuideBaseline(titleAngle, headerChannel), defaultHeaderGuideAlign(headerChannel, titleAngle, titleAnchor), assembleHeaderProperties(config, facetFieldDef, channel, _header.HEADER_TITLE_PROPERTIES, _header.HEADER_TITLE_PROPERTIES_MAP))
  };
}

function defaultHeaderGuideAlign(headerChannel, angle, anchor = 'middle') {
  switch (anchor) {
    case 'start':
      return {
        align: 'left'
      };

    case 'end':
      return {
        align: 'right'
      };
  }

  const align = (0, _properties.defaultLabelAlign)(angle, headerChannel === 'row' ? 'left' : 'top');
  return align ? {
    align
  } : {};
}

function defaultHeaderGuideBaseline(angle, channel) {
  const baseline = (0, _properties.defaultLabelBaseline)(angle, channel === 'row' ? 'left' : 'top');
  return baseline ? {
    baseline
  } : {};
}

function assembleHeaderGroups(model, channel) {
  const layoutHeader = model.component.layoutHeaders[channel];
  const groups = [];

  for (const headerType of _component.HEADER_TYPES) {
    if (layoutHeader[headerType]) {
      for (const headerCmpt of layoutHeader[headerType]) {
        groups.push(assembleHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt));
      }
    }
  }

  return groups;
}

function getSort(facetFieldDef, channel) {
  const {
    sort
  } = facetFieldDef;

  if ((0, _sort.isSortField)(sort)) {
    return {
      field: (0, _channeldef.vgField)(sort, {
        expr: 'datum'
      }),
      order: sort.order || 'ascending'
    };
  } else if ((0, _vegaUtil.isArray)(sort)) {
    return {
      field: (0, _calculate.sortArrayIndexField)(facetFieldDef, channel, {
        expr: 'datum'
      }),
      order: 'ascending'
    };
  } else {
    return {
      field: (0, _channeldef.vgField)(facetFieldDef, {
        expr: 'datum'
      }),
      order: sort || 'ascending'
    };
  }
}

function assembleLabelTitle(facetFieldDef, channel, config) {
  const {
    format,
    labelAngle,
    labelAnchor,
    labelOrient
  } = (0, _common2.getHeaderProperties)(['format', 'labelAngle', 'labelAnchor', 'labelOrient'], facetFieldDef, config, channel);
  const headerChannel = (0, _common2.getHeaderChannel)(channel, labelOrient);
  return Object.assign({
    text: (0, _common.formatSignalRef)(facetFieldDef, format, 'parent', config)
  }, channel === 'row' ? {
    orient: 'left'
  } : {}, {
    style: 'guide-label',
    frame: 'group'
  }, defaultHeaderGuideBaseline(labelAngle, headerChannel), defaultHeaderGuideAlign(headerChannel, labelAngle, labelAnchor), assembleHeaderProperties(config, facetFieldDef, channel, _header.HEADER_LABEL_PROPERTIES, _header.HEADER_LABEL_PROPERTIES_MAP));
}

function assembleHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt) {
  if (headerCmpt) {
    let title = null;
    const {
      facetFieldDef
    } = layoutHeader;
    const config = model.config ? model.config : undefined;

    if (facetFieldDef && headerCmpt.labels) {
      const {
        labelOrient
      } = (0, _common2.getHeaderProperties)(['labelOrient'], facetFieldDef, config, channel); // Include label title in the header if orient aligns with the channel

      if (channel === 'row' && !(0, _util.contains)(['top', 'bottom'], labelOrient) || channel === 'column' && !(0, _util.contains)(['left', 'right'], labelOrient)) {
        title = assembleLabelTitle(facetFieldDef, channel, config);
      }
    }

    const isFacetWithoutRowCol = (0, _model.isFacetModel)(model) && !(0, _facet.isFacetMapping)(model.facet);
    const axes = headerCmpt.axes;
    const hasAxes = axes && axes.length > 0;

    if (title || hasAxes) {
      const sizeChannel = channel === 'row' ? 'height' : 'width';
      return Object.assign({
        name: model.getName(`${channel}_${headerType}`),
        type: 'group',
        role: `${channel}-${headerType}`
      }, layoutHeader.facetFieldDef ? {
        from: {
          data: model.getName(channel + '_domain')
        },
        sort: getSort(facetFieldDef, channel)
      } : {}, hasAxes && isFacetWithoutRowCol ? {
        from: {
          data: model.getName(`facet_domain_${channel}`)
        }
      } : {}, title ? {
        title
      } : {}, headerCmpt.sizeSignal ? {
        encode: {
          update: {
            [sizeChannel]: headerCmpt.sizeSignal
          }
        }
      } : {}, hasAxes ? {
        axes
      } : {});
    }
  }

  return null;
}

const LAYOUT_TITLE_BAND = {
  column: {
    start: 0,
    end: 1
  },
  row: {
    start: 1,
    end: 0
  }
};

function getLayoutTitleBand(titleAnchor, headerChannel) {
  return LAYOUT_TITLE_BAND[headerChannel][titleAnchor];
}

function assembleLayoutTitleBand(headerComponentIndex, config) {
  const titleBand = {};

  for (const channel of _channel.FACET_CHANNELS) {
    const headerComponent = headerComponentIndex[channel];

    if (headerComponent && headerComponent.facetFieldDef) {
      const {
        titleAnchor,
        titleOrient
      } = (0, _common2.getHeaderProperties)(['titleAnchor', 'titleOrient'], headerComponent.facetFieldDef, config, channel);
      const headerChannel = (0, _common2.getHeaderChannel)(channel, titleOrient);
      const band = getLayoutTitleBand(titleAnchor, headerChannel);

      if (band !== undefined) {
        titleBand[headerChannel] = band;
      }
    }
  }

  return (0, _util.keys)(titleBand).length > 0 ? titleBand : undefined;
}

function assembleHeaderProperties(config, facetFieldDef, channel, properties, propertiesMap) {
  const props = {};

  for (const prop of properties) {
    if (!propertiesMap[prop]) {
      continue;
    }

    const value = (0, _common2.getHeaderProperty)(prop, facetFieldDef, config, channel);

    if (value !== undefined) {
      props[propertiesMap[prop]] = value;
    }
  }

  return props;
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../header":"node_modules/vega-lite/build/src/header.js","../../sort":"node_modules/vega-lite/build/src/sort.js","../../spec/facet":"node_modules/vega-lite/build/src/spec/facet.js","../../util":"node_modules/vega-lite/build/src/util.js","../axis/properties":"node_modules/vega-lite/build/src/compile/axis/properties.js","../common":"node_modules/vega-lite/build/src/compile/common.js","../data/calculate":"node_modules/vega-lite/build/src/compile/data/calculate.js","../model":"node_modules/vega-lite/build/src/compile/model.js","./common":"node_modules/vega-lite/build/src/compile/header/common.js","./component":"node_modules/vega-lite/build/src/compile/header/component.js"}],"node_modules/vega-lite/build/src/compile/layoutsize/assemble.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assembleLayoutSignals = assembleLayoutSignals;
exports.sizeSignals = sizeSignals;
exports.sizeExpr = sizeExpr;

var _scale = require("../../scale");

var _util = require("../../util");

var _vega = require("../../vega.schema");

var _model = require("../model");

function assembleLayoutSignals(model) {
  return [...sizeSignals(model, 'width'), ...sizeSignals(model, 'height')];
}

function sizeSignals(model, sizeType) {
  const channel = sizeType === 'width' ? 'x' : 'y';
  const size = model.component.layoutSize.get(sizeType);

  if (!size || size === 'merged') {
    return [];
  } // Read size signal name from name map, just in case it is the top-level size signal that got renamed.


  const name = model.getSizeSignalRef(sizeType).signal;

  if (size === 'range-step') {
    const scaleComponent = model.getScaleComponent(channel);

    if (scaleComponent) {
      const type = scaleComponent.get('type');
      const range = scaleComponent.get('range');

      if ((0, _scale.hasDiscreteDomain)(type) && (0, _vega.isVgRangeStep)(range)) {
        const scaleName = model.scaleName(channel);

        if ((0, _model.isFacetModel)(model.parent)) {
          // If parent is facet and this is an independent scale, return only signal signal
          // as the width/height will be calculated using the cardinality from
          // facet's aggregate rather than reading from scale domain
          const parentResolve = model.parent.component.resolve;

          if (parentResolve.scale[channel] === 'independent') {
            return [stepSignal(scaleName, range)];
          }
        }

        return [stepSignal(scaleName, range), {
          name,
          update: sizeExpr(scaleName, scaleComponent, `domain('${scaleName}').length`)
        }];
      }
    }
    /* istanbul ignore next: Condition should not happen -- only for warning in development. */


    throw new Error('layout size is range step although there is no rangeStep.');
  } else {
    return [{
      name,
      value: size
    }];
  }
}

function stepSignal(scaleName, range) {
  return {
    name: scaleName + '_step',
    value: range.step
  };
}

function sizeExpr(scaleName, scaleComponent, cardinality) {
  const type = scaleComponent.get('type');
  const padding = scaleComponent.get('padding');
  const paddingOuter = (0, _util.getFirstDefined)(scaleComponent.get('paddingOuter'), padding);
  let paddingInner = scaleComponent.get('paddingInner');
  paddingInner = type === 'band' ? // only band has real paddingInner
  paddingInner !== undefined ? paddingInner : padding : // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,
  // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.
  1;
  return `bandspace(${cardinality}, ${paddingInner}, ${paddingOuter}) * ${scaleName}_step`;
}
},{"../../scale":"node_modules/vega-lite/build/src/scale.js","../../util":"node_modules/vega-lite/build/src/util.js","../../vega.schema":"node_modules/vega-lite/build/src/vega.schema.js","../model":"node_modules/vega-lite/build/src/compile/model.js"}],"node_modules/vega-lite/build/src/compile/data/timeunit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeUnitNode = void 0;

var _channeldef = require("../../channeldef");

var _timeunit = require("../../timeunit");

var _util = require("../../util");

var _dataflow = require("./dataflow");

class TimeUnitNode extends _dataflow.DataFlowNode {
  constructor(parent, formula) {
    super(parent);
    this.formula = formula;
  }

  clone() {
    return new TimeUnitNode(null, (0, _util.duplicate)(this.formula));
  }

  static makeFromEncoding(parent, model) {
    const formula = model.reduceFieldDef((timeUnitComponent, fieldDef) => {
      const {
        timeUnit,
        field
      } = fieldDef;

      if (timeUnit) {
        const as = (0, _channeldef.vgField)(fieldDef, {
          forAs: true
        });
        const component = {
          as,
          timeUnit,
          field
        };
        timeUnitComponent[(0, _util.hash)(component)] = component;
      }

      return timeUnitComponent;
    }, {});

    if ((0, _util.keys)(formula).length === 0) {
      return null;
    }

    return new TimeUnitNode(parent, formula);
  }

  static makeFromTransform(parent, t) {
    const component = Object.assign({}, t);
    return new TimeUnitNode(parent, {
      [(0, _util.hash)(component)]: component
    });
  }
  /**
   * Merge together TimeUnitNodes assigning the children of `other` to `this`
   * and removing `other`.
   */


  merge(other) {
    this.formula = Object.assign({}, this.formula, other.formula);

    for (const child of other.children) {
      other.removeChild(child);
      child.parent = this;
    }

    other.remove();
  }

  producedFields() {
    return new Set((0, _util.vals)(this.formula).map(f => f.as));
  }

  dependentFields() {
    return new Set((0, _util.vals)(this.formula).map(f => f.field));
  }

  hash() {
    return `TimeUnit ${(0, _util.hash)(this.formula)}`;
  }

  assemble() {
    return (0, _util.vals)(this.formula).map(c => {
      return {
        type: 'formula',
        as: c.as,
        expr: (0, _timeunit.fieldExpr)(c.timeUnit, c.field)
      };
    });
  }

}

exports.TimeUnitNode = TimeUnitNode;
},{"../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../timeunit":"node_modules/vega-lite/build/src/timeunit.js","../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/selection/transforms/scales.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.domain = domain;
exports.default = void 0;

var _vegaUtil = require("vega-util");

var _ = require("..");

var _channel = require("../../../channel");

var log = _interopRequireWildcard(require("../../../log"));

var _scale = require("../../../scale");

var _util = require("../../../util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const scaleBindings = {
  has: selCmpt => {
    return selCmpt.type === 'interval' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind === 'scales';
  },
  parse: (model, selDef, selCmpt) => {
    const name = (0, _util.varName)(selCmpt.name);
    const bound = selCmpt.scales = [];

    for (const proj of selCmpt.project.items) {
      const channel = proj.channel;

      if (!(0, _channel.isScaleChannel)(channel)) {
        continue;
      }

      const scale = model.getScaleComponent(channel);
      const scaleType = scale ? scale.get('type') : undefined;

      if (!scale || !(0, _scale.hasContinuousDomain)(scaleType)) {
        log.warn(log.message.SCALE_BINDINGS_CONTINUOUS);
        continue;
      }

      scale.set('domainRaw', {
        signal: (0, _util.accessPathWithDatum)(proj.field, name)
      }, true);
      bound.push(proj); // Bind both x/y for diag plot of repeated views.

      if (model.repeater && model.repeater.row === model.repeater.column) {
        const scale2 = model.getScaleComponent(channel === _channel.X ? _channel.Y : _channel.X);
        scale2.set('domainRaw', {
          signal: (0, _util.accessPathWithDatum)(proj.field, name)
        }, true);
      }
    }
  },
  topLevelSignals: (model, selCmpt, signals) => {
    const bound = selCmpt.scales.filter(proj => !signals.filter(s => s.name === proj.signals.data).length); // Top-level signals are only needed for multiview displays and if this
    // view's top-level signals haven't already been generated.

    if (!model.parent || !bound.length) {
      return signals;
    } // vlSelectionResolve does not account for the behavior of bound scales in
    // multiview displays. Each unit view adds a tuple to the store, but the
    // state of the selection is the unit selection most recently updated. This
    // state is captured by the top-level signals that we insert and "push
    // outer" to from within the units. We need to reassemble this state into
    // the top-level named signal, except no single selCmpt has a global view.


    const namedSg = signals.filter(s => s.name === selCmpt.name)[0];
    const update = namedSg.update;

    if (update.indexOf(_.VL_SELECTION_RESOLVE) >= 0) {
      namedSg.update = `{${bound.map(proj => `${(0, _vegaUtil.stringValue)(proj.field)}: ${proj.signals.data}`).join(', ')}}`;
    } else {
      for (const proj of bound) {
        const mapping = `, ${(0, _vegaUtil.stringValue)(proj.field)}: ${proj.signals.data}`;

        if (update.indexOf(mapping) < 0) {
          namedSg.update = update.substring(0, update.length - 1) + mapping + '}';
        }
      }
    }

    return signals.concat(bound.map(proj => ({
      name: proj.signals.data
    })));
  },
  signals: (model, selCmpt, signals) => {
    // Nested signals need only push to top-level signals with multiview displays.
    if (model.parent) {
      for (const proj of selCmpt.scales) {
        const signal = signals.filter(s => s.name === proj.signals.data)[0];
        signal.push = 'outer';
        delete signal.value;
        delete signal.update;
      }
    }

    return signals;
  }
};
var _default = scaleBindings;
exports.default = _default;

function domain(model, channel) {
  const scale = (0, _vegaUtil.stringValue)(model.scaleName(channel));
  return `domain(${scale})`;
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","..":"node_modules/vega-lite/build/src/compile/selection/index.js","../../../channel":"node_modules/vega-lite/build/src/channel.js","../../../log":"node_modules/vega-lite/build/src/log/index.js","../../../scale":"node_modules/vega-lite/build/src/scale.js","../../../util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/compile/selection/transforms/project.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SelectionProjectionComponent = exports.TUPLE_FIELDS = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var _channel = require("../../../channel");

var log = _interopRequireWildcard(require("../../../log"));

var _scale = require("../../../scale");

var _selection = require("../../../selection");

var _util = require("../../../util");

var _timeunit = require("../../data/timeunit");

var _scales = _interopRequireDefault(require("./scales"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const TUPLE_FIELDS = '_tuple_fields';
exports.TUPLE_FIELDS = TUPLE_FIELDS;

class SelectionProjectionComponent {
  constructor(...items) {
    this.items = items;
    this.has = {};
  }

}

exports.SelectionProjectionComponent = SelectionProjectionComponent;
const project = {
  has: () => {
    return true; // This transform handles its own defaults, so always run parse.
  },
  parse: (model, selDef, selCmpt) => {
    const name = selCmpt.name;
    const proj = selCmpt.project || (selCmpt.project = new SelectionProjectionComponent());
    const parsed = {};
    const timeUnits = {};
    const signals = new Set();

    const signalName = (p, range) => {
      const suffix = range === 'visual' ? p.channel : p.field;
      let sg = (0, _util.varName)(`${name}_${suffix}`);

      for (let counter = 1; signals.has(sg); counter++) {
        sg = (0, _util.varName)(`${name}_${suffix}_${counter}`);
      }

      signals.add(sg);
      return {
        [range]: sg
      };
    }; // If no explicit projection (either fields or encodings) is specified, set some defaults.
    // If an initial value is set, try to infer projections.
    // Otherwise, use the default configuration.


    if (!selDef.fields && !selDef.encodings) {
      const cfg = model.config.selection[selDef.type];

      if (selDef.init) {
        for (const init of (0, _vegaUtil.array)(selDef.init)) {
          for (const key of (0, _util.keys)(init)) {
            if ((0, _channel.isSingleDefUnitChannel)(key)) {
              (selDef.encodings || (selDef.encodings = [])).push(key);
            } else {
              if ((0, _selection.isIntervalSelection)(selDef)) {
                log.warn('Interval selections should be initialized using "x" and/or "y" keys.');
                selDef.encodings = cfg.encodings;
              } else {
                (selDef.fields || (selDef.fields = [])).push(key);
              }
            }
          }
        }
      } else {
        selDef.encodings = cfg.encodings;
        selDef.fields = cfg.fields;
      }
    } // TODO: find a possible channel mapping for these fields.


    for (const field of selDef.fields || []) {
      const p = {
        type: 'E',
        field
      };
      p.signals = Object.assign({}, signalName(p, 'data'));
      proj.items.push(p);
    }

    for (const channel of selDef.encodings || []) {
      const fieldDef = model.fieldDef(channel);

      if (fieldDef) {
        let field = fieldDef.field;

        if (fieldDef.timeUnit) {
          field = model.vgField(channel); // Construct TimeUnitComponents which will be combined into a
          // TimeUnitNode. This node may need to be inserted into the
          // dataflow if the selection is used across views that do not
          // have these time units defined.

          const component = {
            as: field,
            field: fieldDef.field,
            timeUnit: fieldDef.timeUnit
          };
          timeUnits[(0, _util.hash)(component)] = component;
        } // Prevent duplicate projections on the same field.
        // TODO: what if the same field is bound to multiple channels (e.g., SPLOM diag).


        if (!parsed[field]) {
          // Determine whether the tuple will store enumerated or ranged values.
          // Interval selections store ranges for continuous scales, and enumerations otherwise.
          // Single/multi selections store ranges for binned fields, and enumerations otherwise.
          let type = 'E';

          if (selCmpt.type === 'interval') {
            const scaleType = model.getScaleComponent(channel).get('type');

            if ((0, _scale.hasContinuousDomain)(scaleType)) {
              type = 'R';
            }
          } else if (fieldDef.bin) {
            type = 'R-RE';
          }

          const p = {
            field,
            channel,
            type
          };
          p.signals = Object.assign({}, signalName(p, 'data'), signalName(p, 'visual'));
          proj.items.push(parsed[field] = p);
          proj.has[channel] = parsed[field];
        }
      } else {
        log.warn(log.message.cannotProjectOnChannelWithoutField(channel));
      }
    }

    if (selDef.init) {
      if (_scales.default.has(selCmpt)) {
        log.warn(log.message.NO_INIT_SCALE_BINDINGS);
      } else {
        const parseInit = i => {
          return proj.items.map(p => i[p.channel] !== undefined ? i[p.channel] : i[p.field]);
        };

        if ((0, _selection.isIntervalSelection)(selDef)) {
          selCmpt.init = parseInit(selDef.init);
        } else {
          const init = (0, _vegaUtil.isArray)(selDef.init) ? selDef.init : [selDef.init];
          selCmpt.init = init.map(parseInit);
        }
      }
    }

    if ((0, _util.keys)(timeUnits).length) {
      proj.timeUnit = new _timeunit.TimeUnitNode(null, timeUnits);
    }
  },
  signals: (model, selCmpt, allSignals) => {
    const name = selCmpt.name + TUPLE_FIELDS;
    const hasSignal = allSignals.filter(s => s.name === name);
    return hasSignal.length ? allSignals : allSignals.concat({
      name,
      value: selCmpt.project.items.map(proj => {
        const {
          signals
        } = proj,
              rest = tslib_1.__rest(proj, ["signals"]);

        return rest;
      })
    });
  }
};
var _default = project;
exports.default = _default;
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../../channel":"node_modules/vega-lite/build/src/channel.js","../../../log":"node_modules/vega-lite/build/src/log/index.js","../../../scale":"node_modules/vega-lite/build/src/scale.js","../../../selection":"node_modules/vega-lite/build/src/selection.js","../../../util":"node_modules/vega-lite/build/src/util.js","../../data/timeunit":"node_modules/vega-lite/build/src/compile/data/timeunit.js","./scales":"node_modules/vega-lite/build/src/compile/selection/transforms/scales.js"}],"node_modules/vega-lite/build/src/compile/selection/interval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SCALE_TRIGGER = exports.BRUSH = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var _2 = require(".");

var _channel = require("../../channel");

var _log = require("../../log");

var _scale = require("../../scale");

var _util = require("../../util");

var _assemble = require("./assemble");

var _project = require("./transforms/project");

var _scales = _interopRequireDefault(require("./transforms/scales"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const BRUSH = '_brush';
exports.BRUSH = BRUSH;
const SCALE_TRIGGER = '_scale_trigger';
exports.SCALE_TRIGGER = SCALE_TRIGGER;
const interval = {
  signals: (model, selCmpt) => {
    const name = selCmpt.name;
    const fieldsSg = name + _project.TUPLE_FIELDS;

    const hasScales = _scales.default.has(selCmpt);

    const signals = [];
    const dataSignals = [];
    const scaleTriggers = [];

    if (selCmpt.translate && !hasScales) {
      const filterExpr = `!event.item || event.item.mark.name !== ${(0, _vegaUtil.stringValue)(name + BRUSH)}`;
      events(selCmpt, (_, evt) => {
        const filters = evt.between[0].filter || (evt.between[0].filter = []);

        if (filters.indexOf(filterExpr) < 0) {
          filters.push(filterExpr);
        }
      });
    }

    selCmpt.project.items.forEach((proj, i) => {
      const channel = proj.channel;

      if (channel !== _channel.X && channel !== _channel.Y) {
        (0, _log.warn)('Interval selections only support x and y encoding channels.');
        return;
      }

      const init = selCmpt.init ? selCmpt.init[i] : null;
      const cs = channelSignals(model, selCmpt, proj, init);
      const dname = proj.signals.data;
      const vname = proj.signals.visual;
      const scaleName = (0, _vegaUtil.stringValue)(model.scaleName(channel));
      const scaleType = model.getScaleComponent(channel).get('type');
      const toNum = (0, _scale.hasContinuousDomain)(scaleType) ? '+' : '';
      signals.push(...cs);
      dataSignals.push(dname);
      scaleTriggers.push({
        scaleName: model.scaleName(channel),
        expr: `(!isArray(${dname}) || ` + `(${toNum}invert(${scaleName}, ${vname})[0] === ${toNum}${dname}[0] && ` + `${toNum}invert(${scaleName}, ${vname})[1] === ${toNum}${dname}[1]))`
      });
    }); // Proxy scale reactions to ensure that an infinite loop doesn't occur
    // when an interval selection filter touches the scale.

    if (!hasScales) {
      signals.push({
        name: name + SCALE_TRIGGER,
        value: {},
        on: [{
          events: scaleTriggers.map(t => ({
            scale: t.scaleName
          })),
          update: scaleTriggers.map(t => t.expr).join(' && ') + ` ? ${name + SCALE_TRIGGER} : {}`
        }]
      });
    } // Only add an interval to the store if it has valid data extents. Data extents
    // are set to null if pixel extents are equal to account for intervals over
    // ordinal/nominal domains which, when inverted, will still produce a valid datum.


    const init = selCmpt.init;
    const update = `unit: ${(0, _2.unitName)(model)}, fields: ${fieldsSg}, values`;
    return signals.concat(Object.assign({
      name: name + _2.TUPLE
    }, init ? {
      init: `{${update}: ${(0, _assemble.assembleInit)(init)}}`
    } : {}, {
      on: [{
        events: [{
          signal: dataSignals.join(' || ')
        }],
        update: dataSignals.join(' && ') + ` ? {${update}: [${dataSignals}]} : null`
      }]
    }));
  },
  modifyExpr: (model, selCmpt) => {
    const tpl = selCmpt.name + _2.TUPLE;
    return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${(0, _2.unitName)(model)}}`);
  },
  marks: (model, selCmpt, marks) => {
    const name = selCmpt.name;
    const {
      x,
      y
    } = selCmpt.project.has;
    const xvname = x && x.signals.visual;
    const yvname = y && y.signals.visual;
    const store = `data(${(0, _vegaUtil.stringValue)(selCmpt.name + _2.STORE)})`; // Do not add a brush if we're binding to scales.

    if (_scales.default.has(selCmpt)) {
      return marks;
    }

    const update = {
      x: x !== undefined ? {
        signal: `${xvname}[0]`
      } : {
        value: 0
      },
      y: y !== undefined ? {
        signal: `${yvname}[0]`
      } : {
        value: 0
      },
      x2: x !== undefined ? {
        signal: `${xvname}[1]`
      } : {
        field: {
          group: 'width'
        }
      },
      y2: y !== undefined ? {
        signal: `${yvname}[1]`
      } : {
        field: {
          group: 'height'
        }
      }
    }; // If the selection is resolved to global, only a single interval is in
    // the store. Wrap brush mark's encodings with a production rule to test
    // this based on the `unit` property. Hide the brush mark if it corresponds
    // to a unit different from the one in the store.

    if (selCmpt.resolve === 'global') {
      for (const key of (0, _util.keys)(update)) {
        update[key] = [Object.assign({
          test: `${store}.length && ${store}[0].unit === ${(0, _2.unitName)(model)}`
        }, update[key]), {
          value: 0
        }];
      }
    } // Two brush marks ensure that fill colors and other aesthetic choices do
    // not interefere with the core marks, but that the brushed region can still
    // be interacted with (e.g., dragging it around).


    const _a = selCmpt.mark,
          {
      fill,
      fillOpacity
    } = _a,
          stroke = tslib_1.__rest(_a, ["fill", "fillOpacity"]);

    const vgStroke = (0, _util.keys)(stroke).reduce((def, k) => {
      def[k] = [{
        test: [x !== undefined && `${xvname}[0] !== ${xvname}[1]`, y !== undefined && `${yvname}[0] !== ${yvname}[1]`].filter(t => t).join(' && '),
        value: stroke[k]
      }, {
        value: null
      }];
      return def;
    }, {});
    return [{
      name: name + BRUSH + '_bg',
      type: 'rect',
      clip: true,
      encode: {
        enter: {
          fill: {
            value: fill
          },
          fillOpacity: {
            value: fillOpacity
          }
        },
        update: update
      }
    }, ...marks, {
      name: name + BRUSH,
      type: 'rect',
      clip: true,
      encode: {
        enter: {
          fill: {
            value: 'transparent'
          }
        },
        update: Object.assign({}, update, vgStroke)
      }
    }];
  }
};
var _default = interval;
/**
 * Returns the visual and data signals for an interval selection.
 */

exports.default = _default;

function channelSignals(model, selCmpt, proj, init) {
  const channel = proj.channel;
  const vname = proj.signals.visual;
  const dname = proj.signals.data;

  const hasScales = _scales.default.has(selCmpt);

  const scaleName = (0, _vegaUtil.stringValue)(model.scaleName(channel));
  const scale = model.getScaleComponent(channel);
  const scaleType = scale ? scale.get('type') : undefined;

  const scaled = str => `scale(${scaleName}, ${str})`;

  const size = model.getSizeSignalRef(channel === _channel.X ? 'width' : 'height').signal;
  const coord = `${channel}(unit)`;
  const on = events(selCmpt, (def, evt) => {
    return [...def, {
      events: evt.between[0],
      update: `[${coord}, ${coord}]`
    }, {
      events: evt,
      update: `[${vname}[0], clamp(${coord}, 0, ${size})]` // Brush End

    }];
  }); // React to pan/zooms of continuous scales. Non-continuous scales
  // (band, point) cannot be pan/zoomed and any other changes
  // to their domains (e.g., filtering) should clear the brushes.

  on.push({
    events: {
      signal: selCmpt.name + SCALE_TRIGGER
    },
    update: (0, _scale.hasContinuousDomain)(scaleType) ? `[${scaled(`${dname}[0]`)}, ${scaled(`${dname}[1]`)}]` : `[0, 0]`
  });
  return hasScales ? [{
    name: dname,
    on: []
  }] : [Object.assign({
    name: vname
  }, init ? {
    init: (0, _assemble.assembleInit)(init, scaled)
  } : {
    value: []
  }, {
    on: on
  }), Object.assign({
    name: dname
  }, init ? {
    init: (0, _assemble.assembleInit)(init)
  } : {}, {
    on: [{
      events: {
        signal: vname
      },
      update: `${vname}[0] === ${vname}[1] ? null : invert(${scaleName}, ${vname})`
    }]
  })];
}

function events(selCmpt, cb) {
  return selCmpt.events.reduce((on, evt) => {
    if (!evt.between) {
      (0, _log.warn)(`${evt} is not an ordered event stream for interval selections`);
      return on;
    }

    return cb(on, evt);
  }, []);
}
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js",".":"node_modules/vega-lite/build/src/compile/selection/index.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../util":"node_modules/vega-lite/build/src/util.js","./assemble":"node_modules/vega-lite/build/src/compile/selection/assemble.js","./transforms/project":"node_modules/vega-lite/build/src/compile/selection/transforms/project.js","./transforms/scales":"node_modules/vega-lite/build/src/compile/selection/transforms/scales.js"}],"node_modules/vega-lite/build/src/compile/selection/multi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.singleOrMultiSignals = singleOrMultiSignals;
exports.default = void 0;

var _ = require(".");

var _util = require("../../util");

var _project = require("./transforms/project");

function singleOrMultiSignals(model, selCmpt) {
  const name = selCmpt.name;
  const fieldsSg = name + _project.TUPLE_FIELDS;
  const proj = selCmpt.project;
  const datum = '(item().isVoronoi ? datum.datum : datum)';
  const values = proj.items.map(p => {
    const fieldDef = model.fieldDef(p.channel); // Binned fields should capture extents, for a range test against the raw field.

    return fieldDef && fieldDef.bin ? `[${(0, _util.accessPathWithDatum)(model.vgField(p.channel, {}), datum)}, ` + `${(0, _util.accessPathWithDatum)(model.vgField(p.channel, {
      binSuffix: 'end'
    }), datum)}]` : `${(0, _util.accessPathWithDatum)(p.field, datum)}`;
  }).join(', '); // Only add a discrete selection to the store if a datum is present _and_
  // the interaction isn't occurring on a group mark. This guards against
  // polluting interactive state with invalid values in faceted displays
  // as the group marks are also data-driven. We force the update to account
  // for constant null states but varying toggles (e.g., shift-click in
  // whitespace followed by a click in whitespace; the store should only
  // be cleared on the second click).

  const update = `unit: ${(0, _.unitName)(model)}, fields: ${fieldsSg}, values`;
  const signals = [{
    name: name + _.TUPLE,
    on: [{
      events: selCmpt.events,
      update: `datum && item().mark.marktype !== 'group' ? {${update}: [${values}]} : null`,
      force: true
    }]
  }];
  return signals;
}

const multi = {
  signals: singleOrMultiSignals,
  modifyExpr: (model, selCmpt) => {
    const tpl = selCmpt.name + _.TUPLE;
    return tpl + ', ' + (selCmpt.resolve === 'global' ? 'null' : `{unit: ${(0, _.unitName)(model)}}`);
  }
};
var _default = multi;
exports.default = _default;
},{".":"node_modules/vega-lite/build/src/compile/selection/index.js","../../util":"node_modules/vega-lite/build/src/util.js","./transforms/project":"node_modules/vega-lite/build/src/compile/selection/transforms/project.js"}],"node_modules/vega-lite/build/src/compile/selection/single.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ = require(".");

var _multi = require("./multi");

const single = {
  signals: _multi.singleOrMultiSignals,
  modifyExpr: (model, selCmpt) => {
    const tpl = selCmpt.name + _.TUPLE;
    return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${(0, _.unitName)(model)}}`);
  }
};
var _default = single;
exports.default = _default;
},{".":"node_modules/vega-lite/build/src/compile/selection/index.js","./multi":"node_modules/vega-lite/build/src/compile/selection/multi.js"}],"node_modules/vega-lite/build/src/compile/selection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forEachSelection = forEachSelection;
exports.unitName = unitName;
exports.requiresSelectionId = requiresSelectionId;
exports.isRawSelectionDomain = isRawSelectionDomain;
exports.VL_SELECTION_RESOLVE = exports.SELECTION_DOMAIN = exports.MODIFY = exports.TUPLE = exports.STORE = void 0;

var _vegaUtil = require("vega-util");

var _channel = require("../../channel");

var _selection = require("../../selection");

var _util = require("../../util");

var _model = require("../model");

var _interval = _interopRequireDefault(require("./interval"));

var _multi = _interopRequireDefault(require("./multi"));

var _single = _interopRequireDefault(require("./single"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const STORE = '_store';
exports.STORE = STORE;
const TUPLE = '_tuple';
exports.TUPLE = TUPLE;
const MODIFY = '_modify';
exports.MODIFY = MODIFY;
const SELECTION_DOMAIN = '_selection_domain_';
exports.SELECTION_DOMAIN = SELECTION_DOMAIN;
const VL_SELECTION_RESOLVE = 'vlSelectionResolve';
exports.VL_SELECTION_RESOLVE = VL_SELECTION_RESOLVE;
const compilers = {
  single: _single.default,
  multi: _multi.default,
  interval: _interval.default
};

function forEachSelection(model, cb) {
  const selections = model.component.selection;

  for (const name in selections) {
    if (selections.hasOwnProperty(name)) {
      const sel = selections[name];
      cb(sel, compilers[sel.type]);
    }
  }
}

function getFacetModel(model) {
  let parent = model.parent;

  while (parent) {
    if ((0, _model.isFacetModel)(parent)) {
      break;
    }

    parent = parent.parent;
  }

  return parent;
}

function unitName(model) {
  let name = (0, _vegaUtil.stringValue)(model.name);
  const facetModel = getFacetModel(model);

  if (facetModel) {
    const {
      facet
    } = facetModel;

    for (const channel of _channel.FACET_CHANNELS) {
      if (facet[channel]) {
        name += ` + '__facet_${channel}_' + (${(0, _util.accessPathWithDatum)(facetModel.vgField(channel), 'facet')})`;
      }
    }
  }

  return name;
}

function requiresSelectionId(model) {
  let identifier = false;
  forEachSelection(model, selCmpt => {
    identifier = identifier || selCmpt.project.items.some(proj => proj.field === _selection.SELECTION_ID);
  });
  return identifier;
}

function isRawSelectionDomain(domainRaw) {
  return domainRaw.signal.indexOf(SELECTION_DOMAIN) >= 0;
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../selection":"node_modules/vega-lite/build/src/selection.js","../../util":"node_modules/vega-lite/build/src/util.js","../model":"node_modules/vega-lite/build/src/compile/model.js","./interval":"node_modules/vega-lite/build/src/compile/selection/interval.js","./multi":"node_modules/vega-lite/build/src/compile/selection/multi.js","./single":"node_modules/vega-lite/build/src/compile/selection/single.js"}],"node_modules/vega-lite/build/src/compile/selection/transforms/nearest.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var log = _interopRequireWildcard(require("../../../log"));

var _mark = require("../../../mark");

var _mixins = require("../../mark/mixins");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const VORONOI = 'voronoi';
const nearest = {
  has: selCmpt => {
    return selCmpt.type !== 'interval' && selCmpt.nearest;
  },
  marks: (model, selCmpt, marks) => {
    const {
      x,
      y
    } = selCmpt.project.has;
    const markType = model.mark;

    if ((0, _mark.isPathMark)(markType)) {
      log.warn(log.message.nearestNotSupportForContinuous(markType));
      return marks;
    }

    const cellDef = {
      name: model.getName(VORONOI),
      type: 'path',
      from: {
        data: model.getName('marks')
      },
      encode: {
        update: Object.assign({
          fill: {
            value: 'transparent'
          },
          strokeWidth: {
            value: 0.35
          },
          stroke: {
            value: 'transparent'
          },
          isVoronoi: {
            value: true
          }
        }, (0, _mixins.tooltip)(model, {
          reactiveGeom: true
        }))
      },
      transform: [{
        type: 'voronoi',
        x: {
          expr: x || !x && !y ? 'datum.datum.x || 0' : '0'
        },
        y: {
          expr: y || !x && !y ? 'datum.datum.y || 0' : '0'
        },
        size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]
      }]
    };
    let index = 0;
    let exists = false;
    marks.forEach((mark, i) => {
      const name = mark.name || '';

      if (name === model.component.mark[0].name) {
        index = i;
      } else if (name.indexOf(VORONOI) >= 0) {
        exists = true;
      }
    });

    if (!exists) {
      marks.splice(index + 1, 0, cellDef);
    }

    return marks;
  }
};
var _default = nearest;
exports.default = _default;
},{"../../../log":"node_modules/vega-lite/build/src/log/index.js","../../../mark":"node_modules/vega-lite/build/src/mark.js","../../mark/mixins":"node_modules/vega-lite/build/src/compile/mark/mixins.js"}],"node_modules/vega-lite/build/src/compile/selection/transforms/inputs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ = require("..");

var _util = require("../../../util");

var _assemble = require("../assemble");

var _nearest = _interopRequireDefault(require("./nearest"));

var _project = require("./project");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const inputBindings = {
  has: selCmpt => {
    return selCmpt.type === 'single' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales';
  },
  topLevelSignals: (model, selCmpt, signals) => {
    const name = selCmpt.name;
    const proj = selCmpt.project;
    const bind = selCmpt.bind;
    const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).

    const datum = _nearest.default.has(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';
    proj.items.forEach((p, i) => {
      const sgname = (0, _util.varName)(`${name}_${p.field}`);
      const hasSignal = signals.filter(s => s.name === sgname);

      if (!hasSignal.length) {
        signals.unshift(Object.assign({
          name: sgname
        }, init ? {
          init: (0, _assemble.assembleInit)(init[i])
        } : {
          value: null
        }, {
          on: [{
            events: selCmpt.events,
            update: `datum && item().mark.marktype !== 'group' ? ${(0, _util.accessPathWithDatum)(p.field, datum)} : null`
          }],
          bind: bind[p.field] || bind[p.channel] || bind
        }));
      }
    });
    return signals;
  },
  signals: (model, selCmpt, signals) => {
    const name = selCmpt.name;
    const proj = selCmpt.project;
    const signal = signals.filter(s => s.name === name + _.TUPLE)[0];
    const fields = name + _project.TUPLE_FIELDS;
    const values = proj.items.map(p => (0, _util.varName)(`${name}_${p.field}`));
    const valid = values.map(v => `${v} !== null`).join(' && ');

    if (values.length) {
      signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;
    }

    delete signal.value;
    delete signal.on;
    return signals;
  }
};
var _default = inputBindings;
exports.default = _default;
},{"..":"node_modules/vega-lite/build/src/compile/selection/index.js","../../../util":"node_modules/vega-lite/build/src/util.js","../assemble":"node_modules/vega-lite/build/src/compile/selection/assemble.js","./nearest":"node_modules/vega-lite/build/src/compile/selection/transforms/nearest.js","./project":"node_modules/vega-lite/build/src/compile/selection/transforms/project.js"}],"node_modules/vega-lite/build/src/compile/selection/transforms/toggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TOGGLE = void 0;

var _ = require("..");

const TOGGLE = '_toggle';
exports.TOGGLE = TOGGLE;
const toggle = {
  has: selCmpt => {
    return selCmpt.type === 'multi' && selCmpt.toggle;
  },
  signals: (model, selCmpt, signals) => {
    return signals.concat({
      name: selCmpt.name + TOGGLE,
      value: false,
      on: [{
        events: selCmpt.events,
        update: selCmpt.toggle
      }]
    });
  },
  modifyExpr: (model, selCmpt) => {
    const tpl = selCmpt.name + _.TUPLE;
    const signal = selCmpt.name + TOGGLE;
    return `${signal} ? null : ${tpl}, ` + (selCmpt.resolve === 'global' ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${(0, _.unitName)(model)}}, `) + `${signal} ? ${tpl} : null`;
  }
};
var _default = toggle;
exports.default = _default;
},{"..":"node_modules/vega-lite/build/src/compile/selection/index.js"}],"node_modules/vega-lite/build/src/compile/selection/transforms/clear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vegaEventSelector = require("vega-event-selector");

var _ = require("..");

var _util = require("../../../util");

var _inputs = _interopRequireDefault(require("./inputs"));

var _toggle = _interopRequireWildcard(require("./toggle"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const clear = {
  has: selCmpt => {
    return selCmpt.clear !== false;
  },
  parse: (model, selDef, selCmpt) => {
    if (selDef.clear) {
      selCmpt.clear = (0, _vegaEventSelector.selector)(selDef.clear, 'scope');
    }
  },
  topLevelSignals: (model, selCmpt, signals) => {
    if (_inputs.default.has(selCmpt)) {
      selCmpt.project.items.forEach(proj => {
        const idx = signals.findIndex(n => n.name === (0, _util.varName)(`${selCmpt.name}_${proj.field}`));

        if (idx !== -1) {
          signals[idx].on.push({
            events: selCmpt.clear,
            update: 'null'
          });
        }
      });
    }

    return signals;
  },
  signals: (model, selCmpt, signals) => {
    function addClear(idx, update) {
      if (idx !== -1 && signals[idx].on) {
        signals[idx].on.push({
          events: selCmpt.clear,
          update
        });
      }
    } // Be as minimalist as possible when adding clear triggers to minimize dataflow execution.


    if (selCmpt.type === 'interval') {
      selCmpt.project.items.forEach(proj => {
        const vIdx = signals.findIndex(n => n.name === proj.signals.visual);
        addClear(vIdx, '[0, 0]');

        if (vIdx === -1) {
          const dIdx = signals.findIndex(n => n.name === proj.signals.data);
          addClear(dIdx, 'null');
        }
      });
    } else {
      let tIdx = signals.findIndex(n => n.name === selCmpt.name + _.TUPLE);
      addClear(tIdx, 'null');

      if (_toggle.default.has(selCmpt)) {
        tIdx = signals.findIndex(n => n.name === selCmpt.name + _toggle.TOGGLE);
        addClear(tIdx, 'false');
      }
    }

    return signals;
  }
};
var _default = clear;
exports.default = _default;
},{"vega-event-selector":"node_modules/vega-event-selector/index.js","..":"node_modules/vega-lite/build/src/compile/selection/index.js","../../../util":"node_modules/vega-lite/build/src/util.js","./inputs":"node_modules/vega-lite/build/src/compile/selection/transforms/inputs.js","./toggle":"node_modules/vega-lite/build/src/compile/selection/transforms/toggle.js"}],"node_modules/vega-lite/build/src/compile/selection/transforms/translate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vegaEventSelector = require("vega-event-selector");

var _channel = require("../../../channel");

var _interval = require("../interval");

var _scales = _interopRequireWildcard(require("./scales"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const ANCHOR = '_translate_anchor';
const DELTA = '_translate_delta';
const translate = {
  has: selCmpt => {
    return selCmpt.type === 'interval' && selCmpt.translate;
  },
  signals: (model, selCmpt, signals) => {
    const name = selCmpt.name;

    const hasScales = _scales.default.has(selCmpt);

    const anchor = name + ANCHOR;
    const {
      x,
      y
    } = selCmpt.project.has;
    let events = (0, _vegaEventSelector.selector)(selCmpt.translate, 'scope');

    if (!hasScales) {
      events = events.map(e => (e.between[0].markname = name + _interval.BRUSH, e));
    }

    signals.push({
      name: anchor,
      value: {},
      on: [{
        events: events.map(e => e.between[0]),
        update: '{x: x(unit), y: y(unit)' + (x !== undefined ? ', extent_x: ' + (hasScales ? (0, _scales.domain)(model, _channel.X) : `slice(${x.signals.visual})`) : '') + (y !== undefined ? ', extent_y: ' + (hasScales ? (0, _scales.domain)(model, _channel.Y) : `slice(${y.signals.visual})`) : '') + '}'
      }]
    }, {
      name: name + DELTA,
      value: {},
      on: [{
        events: events,
        update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`
      }]
    });

    if (x !== undefined) {
      onDelta(model, selCmpt, x, 'width', signals);
    }

    if (y !== undefined) {
      onDelta(model, selCmpt, y, 'height', signals);
    }

    return signals;
  }
};
var _default = translate;
exports.default = _default;

function onDelta(model, selCmpt, proj, size, signals) {
  const name = selCmpt.name;
  const anchor = name + ANCHOR;
  const delta = name + DELTA;
  const channel = proj.channel;

  const hasScales = _scales.default.has(selCmpt);

  const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];
  const sizeSg = model.getSizeSignalRef(size).signal;
  const scaleCmpt = model.getScaleComponent(channel);
  const scaleType = scaleCmpt.get('type');
  const sign = hasScales && channel === _channel.X ? '-' : ''; // Invert delta when panning x-scales.

  const extent = `${anchor}.extent_${channel}`;
  const offset = `${sign}${delta}.${channel} / ` + (hasScales ? `${sizeSg}` : `span(${extent})`);
  const panFn = !hasScales ? 'panLinear' : scaleType === 'log' ? 'panLog' : scaleType === 'pow' ? 'panPow' : 'panLinear';
  const update = `${panFn}(${extent}, ${offset}` + (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') + ')';
  signal.on.push({
    events: {
      signal: delta
    },
    update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`
  });
}
},{"vega-event-selector":"node_modules/vega-event-selector/index.js","../../../channel":"node_modules/vega-lite/build/src/channel.js","../interval":"node_modules/vega-lite/build/src/compile/selection/interval.js","./scales":"node_modules/vega-lite/build/src/compile/selection/transforms/scales.js"}],"node_modules/vega-lite/build/src/compile/selection/transforms/zoom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vegaEventSelector = require("vega-event-selector");

var _vegaUtil = require("vega-util");

var _channel = require("../../../channel");

var _interval = require("../interval");

var _scales = _interopRequireWildcard(require("./scales"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const ANCHOR = '_zoom_anchor';
const DELTA = '_zoom_delta';
const zoom = {
  has: selCmpt => {
    return selCmpt.type === 'interval' && selCmpt.zoom;
  },
  signals: (model, selCmpt, signals) => {
    const name = selCmpt.name;

    const hasScales = _scales.default.has(selCmpt);

    const delta = name + DELTA;
    const {
      x,
      y
    } = selCmpt.project.has;
    const sx = (0, _vegaUtil.stringValue)(model.scaleName(_channel.X));
    const sy = (0, _vegaUtil.stringValue)(model.scaleName(_channel.Y));
    let events = (0, _vegaEventSelector.selector)(selCmpt.zoom, 'scope');

    if (!hasScales) {
      events = events.map(e => (e.markname = name + _interval.BRUSH, e));
    }

    signals.push({
      name: name + ANCHOR,
      on: [{
        events: events,
        update: !hasScales ? `{x: x(unit), y: y(unit)}` : '{' + [sx ? `x: invert(${sx}, x(unit))` : '', sy ? `y: invert(${sy}, y(unit))` : ''].filter(expr => !!expr).join(', ') + '}'
      }]
    }, {
      name: delta,
      on: [{
        events: events,
        force: true,
        update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'
      }]
    });

    if (x !== undefined) {
      onDelta(model, selCmpt, x, 'width', signals);
    }

    if (y !== undefined) {
      onDelta(model, selCmpt, y, 'height', signals);
    }

    return signals;
  }
};
var _default = zoom;
exports.default = _default;

function onDelta(model, selCmpt, proj, size, signals) {
  const name = selCmpt.name;
  const channel = proj.channel;

  const hasScales = _scales.default.has(selCmpt);

  const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];
  const sizeSg = model.getSizeSignalRef(size).signal;
  const scaleCmpt = model.getScaleComponent(channel);
  const scaleType = scaleCmpt.get('type');
  const base = hasScales ? (0, _scales.domain)(model, channel) : signal.name;
  const delta = name + DELTA;
  const anchor = `${name}${ANCHOR}.${channel}`;
  const zoomFn = !hasScales ? 'zoomLinear' : scaleType === 'log' ? 'zoomLog' : scaleType === 'pow' ? 'zoomPow' : 'zoomLinear';
  const update = `${zoomFn}(${base}, ${anchor}, ${delta}` + (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') + ')';
  signal.on.push({
    events: {
      signal: delta
    },
    update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`
  });
}
},{"vega-event-selector":"node_modules/vega-event-selector/index.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../../channel":"node_modules/vega-lite/build/src/channel.js","../interval":"node_modules/vega-lite/build/src/compile/selection/interval.js","./scales":"node_modules/vega-lite/build/src/compile/selection/transforms/scales.js"}],"node_modules/vega-lite/build/src/compile/selection/transforms/transforms.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forEachTransform = forEachTransform;

var _clear = _interopRequireDefault(require("./clear"));

var _inputs = _interopRequireDefault(require("./inputs"));

var _nearest = _interopRequireDefault(require("./nearest"));

var _project = _interopRequireDefault(require("./project"));

var _scales = _interopRequireDefault(require("./scales"));

var _toggle = _interopRequireDefault(require("./toggle"));

var _translate = _interopRequireDefault(require("./translate"));

var _zoom = _interopRequireDefault(require("./zoom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const compilers = [_project.default, _toggle.default, _scales.default, _translate.default, _zoom.default, _inputs.default, _nearest.default, _clear.default];

function forEachTransform(selCmpt, cb) {
  for (const t of compilers) {
    if (t.has(selCmpt)) {
      cb(t);
    }
  }
}
},{"./clear":"node_modules/vega-lite/build/src/compile/selection/transforms/clear.js","./inputs":"node_modules/vega-lite/build/src/compile/selection/transforms/inputs.js","./nearest":"node_modules/vega-lite/build/src/compile/selection/transforms/nearest.js","./project":"node_modules/vega-lite/build/src/compile/selection/transforms/project.js","./scales":"node_modules/vega-lite/build/src/compile/selection/transforms/scales.js","./toggle":"node_modules/vega-lite/build/src/compile/selection/transforms/toggle.js","./translate":"node_modules/vega-lite/build/src/compile/selection/transforms/translate.js","./zoom":"node_modules/vega-lite/build/src/compile/selection/transforms/zoom.js"}],"node_modules/vega-lite/build/src/compile/selection/assemble.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assembleInit = assembleInit;
exports.assembleInitData = assembleInitData;
exports.assembleUnitSelectionSignals = assembleUnitSelectionSignals;
exports.assembleFacetSignals = assembleFacetSignals;
exports.assembleTopLevelSignals = assembleTopLevelSignals;
exports.assembleUnitSelectionData = assembleUnitSelectionData;
exports.assembleUnitSelectionMarks = assembleUnitSelectionMarks;
exports.assembleLayerSelectionMarks = assembleLayerSelectionMarks;
exports.assembleSelectionPredicate = assembleSelectionPredicate;
exports.assembleSelectionScaleDomain = assembleSelectionScaleDomain;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaEventSelector = require("vega-event-selector");

var _vegaUtil = require("vega-util");

var _ = require(".");

var _datetime = require("../../datetime");

var _log = require("../../log");

var _util = require("../../util");

var _model = require("../model");

var _transforms = require("./transforms/transforms");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function assembleInit(init, wrap = _vegaUtil.identity) {
  if ((0, _vegaUtil.isArray)(init)) {
    const str = init.map(v => assembleInit(v, wrap)).join(', ');
    return `[${str}]`;
  } else if ((0, _datetime.isDateTime)(init)) {
    return wrap((0, _datetime.dateTimeExpr)(init));
  }

  return wrap(JSON.stringify(init));
}

function assembleInitData(init) {
  if ((0, _vegaUtil.isArray)(init)) {
    return init.map(v => assembleInitData(v));
  } else if ((0, _datetime.isDateTime)(init)) {
    return (0, _datetime.dateTimeExpr)(init, false, true);
  }

  return init;
}

function assembleUnitSelectionSignals(model, signals) {
  (0, _.forEachSelection)(model, (selCmpt, selCompiler) => {
    const name = selCmpt.name;
    let modifyExpr = selCompiler.modifyExpr(model, selCmpt);
    signals.push(...selCompiler.signals(model, selCmpt));
    (0, _transforms.forEachTransform)(selCmpt, txCompiler => {
      if (txCompiler.signals) {
        signals = txCompiler.signals(model, selCmpt, signals);
      }

      if (txCompiler.modifyExpr) {
        modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);
      }
    });
    signals.push({
      name: name + _.MODIFY,
      update: `modify(${(0, _vegaUtil.stringValue)(selCmpt.name + _.STORE)}, ${modifyExpr})`
    });
  });
  return signals;
}

function assembleFacetSignals(model, signals) {
  if (model.component.selection && (0, _util.keys)(model.component.selection).length) {
    const name = (0, _vegaUtil.stringValue)(model.getName('cell'));
    signals.unshift({
      name: 'facet',
      value: {},
      on: [{
        events: (0, _vegaEventSelector.selector)('mousemove', 'scope'),
        update: `isTuple(facet) ? facet : group(${name}).datum`
      }]
    });
  }

  return signals;
}

function assembleTopLevelSignals(model, signals) {
  let hasSelections = false;
  (0, _.forEachSelection)(model, (selCmpt, selCompiler) => {
    const name = selCmpt.name;
    const store = (0, _vegaUtil.stringValue)(name + _.STORE);
    const hasSg = signals.filter(s => s.name === name);

    if (!hasSg.length) {
      signals.push({
        name: selCmpt.name,
        update: `${_.VL_SELECTION_RESOLVE}(${store}` + (selCmpt.resolve === 'global' ? ')' : `, ${(0, _vegaUtil.stringValue)(selCmpt.resolve)})`)
      });
    }

    hasSelections = true;

    if (selCompiler.topLevelSignals) {
      signals = selCompiler.topLevelSignals(model, selCmpt, signals);
    }

    (0, _transforms.forEachTransform)(selCmpt, txCompiler => {
      if (txCompiler.topLevelSignals) {
        signals = txCompiler.topLevelSignals(model, selCmpt, signals);
      }
    });
  });

  if (hasSelections) {
    const hasUnit = signals.filter(s => s.name === 'unit');

    if (!hasUnit.length) {
      signals.unshift({
        name: 'unit',
        value: {},
        on: [{
          events: 'mousemove',
          update: 'isTuple(group()) ? group() : unit'
        }]
      });
    }
  }

  return signals;
}

function assembleUnitSelectionData(model, data) {
  (0, _.forEachSelection)(model, selCmpt => {
    const init = {
      name: selCmpt.name + _.STORE
    };

    if (selCmpt.init) {
      const fields = selCmpt.project.items.map(proj => {
        const {
          signals
        } = proj,
              rest = tslib_1.__rest(proj, ["signals"]);

        return rest;
      });
      const insert = selCmpt.init.map(i => assembleInitData(i));
      init.values = selCmpt.type === 'interval' ? [{
        unit: (0, _.unitName)(model),
        fields,
        values: insert
      }] : insert.map(i => ({
        unit: (0, _.unitName)(model),
        fields,
        values: i
      }));
    }

    const contains = data.filter(d => d.name === selCmpt.name + _.STORE);

    if (!contains.length) {
      data.push(init);
    }
  });
  return data;
}

function assembleUnitSelectionMarks(model, marks) {
  (0, _.forEachSelection)(model, (selCmpt, selCompiler) => {
    marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;
    (0, _transforms.forEachTransform)(selCmpt, txCompiler => {
      if (txCompiler.marks) {
        marks = txCompiler.marks(model, selCmpt, marks);
      }
    });
  });
  return marks;
}

function assembleLayerSelectionMarks(model, marks) {
  for (const child of model.children) {
    if ((0, _model.isUnitModel)(child)) {
      marks = assembleUnitSelectionMarks(child, marks);
    }
  }

  return marks;
}

function assembleSelectionPredicate(model, selections, dfnode) {
  const stores = [];

  function expr(name) {
    const vname = (0, _util.varName)(name);
    const selCmpt = model.getSelectionComponent(vname, name);
    const store = (0, _vegaUtil.stringValue)(vname + _.STORE);

    if (selCmpt.project.timeUnit) {
      const child = dfnode || model.component.data.raw;
      const tunode = selCmpt.project.timeUnit.clone();

      if (child.parent) {
        tunode.insertAsParentOf(child);
      } else {
        child.parent = tunode;
      }
    }

    if (selCmpt.empty !== 'none') {
      stores.push(store);
    }

    return `vlSelectionTest(${store}, datum` + (selCmpt.resolve === 'global' ? ')' : `, ${(0, _vegaUtil.stringValue)(selCmpt.resolve)})`);
  }

  const predicateStr = (0, _util.logicalExpr)(selections, expr);
  return (stores.length ? '!(' + stores.map(s => `length(data(${s}))`).join(' || ') + ') || ' : '') + `(${predicateStr})`;
} // Selections are parsed _after_ scales. If a scale domain is set to
// use a selection, the SELECTION_DOMAIN constant is used as the
// domainRaw.signal during scale.parse and then replaced with the necessary
// selection expression function during scale.assemble. To not pollute the
// type signatures to account for this setup, the selection domain definition
// is coerced to a string and appended to SELECTION_DOMAIN.


function assembleSelectionScaleDomain(model, domainRaw) {
  const selDomain = JSON.parse(domainRaw.signal.replace(_.SELECTION_DOMAIN, ''));
  const name = (0, _util.varName)(selDomain.selection);
  const encoding = selDomain.encoding;
  let field = selDomain.field;
  let selCmpt = model.component.selection && model.component.selection[name];

  if (selCmpt) {
    (0, _log.warn)('Use "bind": "scales" to setup a binding for scales and selections within the same view.');
  } else {
    selCmpt = model.getSelectionComponent(name, selDomain.selection);

    if (!encoding && !field) {
      field = selCmpt.project.items[0].field;

      if (selCmpt.project.items.length > 1) {
        (0, _log.warn)('A "field" or "encoding" must be specified when using a selection as a scale domain. ' + `Using "field": ${(0, _vegaUtil.stringValue)(field)}.`);
      }
    } else if (encoding && !field) {
      const encodings = selCmpt.project.items.filter(p => p.channel === encoding);

      if (!encodings.length || encodings.length > 1) {
        field = selCmpt.project.items[0].field;
        (0, _log.warn)((!encodings.length ? 'No ' : 'Multiple ') + `matching ${(0, _vegaUtil.stringValue)(encoding)} encoding found for selection ${(0, _vegaUtil.stringValue)(selDomain.selection)}. ` + `Using "field": ${(0, _vegaUtil.stringValue)(field)}.`);
      } else {
        field = encodings[0].field;
      }
    }

    return {
      signal: (0, _util.accessPathWithDatum)(field, name)
    };
  }

  return {
    signal: 'null'
  };
}
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-event-selector":"node_modules/vega-event-selector/index.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js",".":"node_modules/vega-lite/build/src/compile/selection/index.js","../../datetime":"node_modules/vega-lite/build/src/datetime.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../util":"node_modules/vega-lite/build/src/util.js","../model":"node_modules/vega-lite/build/src/compile/model.js","./transforms/transforms":"node_modules/vega-lite/build/src/compile/selection/transforms/transforms.js"}],"node_modules/vega-lite/build/src/compile/predicate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expression = expression;

var _vegaUtil = require("vega-util");

var _predicate = require("../predicate");

var _util = require("../util");

var _assemble = require("./selection/assemble");

/**
 * Converts a predicate into an expression.
 */
// model is only used for selection filters.
function expression(model, filterOp, node) {
  return (0, _util.logicalExpr)(filterOp, predicate => {
    if ((0, _vegaUtil.isString)(predicate)) {
      return predicate;
    } else if ((0, _predicate.isSelectionPredicate)(predicate)) {
      return (0, _assemble.assembleSelectionPredicate)(model, predicate.selection, node);
    } else {
      // Filter Object
      return (0, _predicate.fieldFilterExpression)(predicate);
    }
  });
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../predicate":"node_modules/vega-lite/build/src/predicate.js","../util":"node_modules/vega-lite/build/src/util.js","./selection/assemble":"node_modules/vega-lite/build/src/compile/selection/assemble.js"}],"node_modules/vega-lite/build/src/compile/mark/valueref.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fieldInvalidTestValueRef = fieldInvalidTestValueRef;
exports.fieldInvalidPredicate = fieldInvalidPredicate;
exports.position = position;
exports.position2 = position2;
exports.getOffset = getOffset;
exports.bin = bin;
exports.fieldRef = fieldRef;
exports.bandRef = bandRef;
exports.midPoint = midPoint;
exports.vgValueRef = vgValueRef;
exports.tooltipForEncoding = tooltipForEncoding;
exports.text = text;
exports.mid = mid;
exports.positionDefault = positionDefault;

var _vegaUtil = require("vega-util");

var _aggregate = require("../../aggregate");

var _bin = require("../../bin");

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _encoding = require("../../encoding");

var log = _interopRequireWildcard(require("../../log"));

var _mark = require("../../mark");

var _scale = require("../../scale");

var _type = require("../../type");

var _util = require("../../util");

var _common = require("../common");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function midPointWithPositionInvalidTest(params) {
  const {
    channel,
    channelDef,
    mark,
    scale
  } = params;
  const ref = midPoint(params); // Wrap to check if the positional value is invalid, if so, plot the point on the min value

  if ( // Only this for field def without counting aggregate (as count wouldn't be null)
  (0, _channeldef.isFieldDef)(channelDef) && !(0, _aggregate.isCountingAggregateOp)(channelDef.aggregate) && // and only for continuous scale without zero (otherwise, null / invalid will be interpreted as zero, which doesn't cause layout problem)
  scale && (0, _scale.isContinuousToContinuous)(scale.get('type')) && scale.get('zero') === false) {
    return wrapPositionInvalidTest({
      fieldDef: channelDef,
      channel,
      mark,
      ref
    });
  }

  return ref;
}

function wrapPositionInvalidTest({
  fieldDef,
  channel,
  mark,
  ref
}) {
  if (!(0, _mark.isPathMark)(mark)) {
    // Only do this for non-path mark (as path marks will already use "defined" to skip points)
    return [fieldInvalidTestValueRef(fieldDef, channel), ref];
  }

  return ref;
}

function fieldInvalidTestValueRef(fieldDef, channel) {
  const test = fieldInvalidPredicate(fieldDef, true);
  const mainChannel = (0, _channel.getMainRangeChannel)(channel);
  const zeroValueRef = mainChannel === 'x' ? {
    value: 0
  } : {
    field: {
      group: 'height'
    }
  };
  return Object.assign({
    test
  }, zeroValueRef);
}

function fieldInvalidPredicate(field, invalid = true) {
  field = (0, _vegaUtil.isString)(field) ? field : (0, _channeldef.vgField)(field, {
    expr: 'datum'
  });
  const op = invalid ? '||' : '&&';
  const eq = invalid ? '===' : '!==';
  return `${field} ${eq} null ${op} ${invalid ? '' : '!'}isNaN(${field})`;
} // TODO: we need to find a way to refactor these so that scaleName is a part of scale
// but that's complicated.  For now, this is a huge step moving forward.

/**
 * @return Vega ValueRef for normal x- or y-position without projection
 */


function position(params) {
  const {
    channel,
    channelDef,
    scaleName,
    stack,
    offset
  } = params;

  if ((0, _channeldef.isFieldDef)(channelDef) && stack && channel === stack.fieldChannel) {
    // x or y use stack_end so that stacked line's point mark use stack_end too.
    return fieldRef(channelDef, scaleName, {
      suffix: 'end'
    }, {
      offset
    });
  }

  return midPointWithPositionInvalidTest(params);
}
/**
 * @return Vega ValueRef for normal x2- or y2-position without projection
 */


function position2({
  channel,
  channelDef,
  channel2Def,
  scaleName,
  scale,
  stack,
  mark,
  offset,
  defaultRef
}) {
  if ((0, _channeldef.isFieldDef)(channelDef) && stack && // If fieldChannel is X and channel is X2 (or Y and Y2)
  channel.charAt(0) === stack.fieldChannel.charAt(0)) {
    return fieldRef(channelDef, scaleName, {
      suffix: 'start'
    }, {
      offset
    });
  }

  return midPointWithPositionInvalidTest({
    channel,
    channelDef: channel2Def,
    scaleName,
    scale,
    stack,
    mark,
    offset,
    defaultRef
  });
}

function getOffset(channel, markDef) {
  const offsetChannel = channel + 'Offset'; // Need to cast as the type can't be inferred automatically
  // TODO: in the future read from encoding channel too

  const markDefOffsetValue = markDef[offsetChannel];

  if (markDefOffsetValue) {
    return markDefOffsetValue;
  }

  return undefined;
}
/**
 * Value Ref for binned fields
 */


function bin({
  channel,
  fieldDef,
  scaleName,
  mark,
  side,
  offset
}) {
  const binSuffix = side === 'start' ? undefined : 'end';
  const ref = fieldRef(fieldDef, scaleName, {
    binSuffix
  }, offset ? {
    offset
  } : {});
  return wrapPositionInvalidTest({
    fieldDef,
    channel,
    mark,
    ref
  });
}

function fieldRef(fieldDef, scaleName, opt, mixins) {
  const ref = Object.assign({}, scaleName ? {
    scale: scaleName
  } : {}, {
    field: (0, _channeldef.vgField)(fieldDef, opt)
  });

  if (mixins) {
    const {
      offset,
      band
    } = mixins;
    return Object.assign({}, ref, offset ? {
      offset
    } : {}, band ? {
      band
    } : {});
  }

  return ref;
}

function bandRef(scaleName, band = true) {
  return {
    scale: scaleName,
    band: band
  };
}
/**
 * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.
 */


function binMidSignal({
  scaleName,
  fieldDef,
  fieldDef2,
  offset,
  band
}) {
  band = (0, _util.getFirstDefined)(band, 0.5);
  const start = (0, _channeldef.vgField)(fieldDef, {
    expr: 'datum'
  });
  const end = fieldDef2 !== undefined ? (0, _channeldef.vgField)(fieldDef2, {
    expr: 'datum'
  }) : (0, _channeldef.vgField)(fieldDef, {
    binSuffix: 'end',
    expr: 'datum'
  });
  return Object.assign({
    signal: `scale("${scaleName}", ${band} * ${start} + ${1 - band} * ${end})`
  }, offset ? {
    offset
  } : {});
}
/**
 * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.
 */


function midPoint({
  channel,
  channelDef,
  channel2Def,
  scaleName,
  scale,
  stack,
  offset,
  defaultRef
}) {
  // TODO: datum support
  if (channelDef) {
    /* istanbul ignore else */
    if ((0, _channeldef.isFieldDef)(channelDef)) {
      if ((0, _channeldef.isTypedFieldDef)(channelDef)) {
        if ((0, _bin.isBinning)(channelDef.bin)) {
          // Use middle only for x an y to place marks in the center between start and end of the bin range.
          // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.
          if ((0, _util.contains)([_channel.X, _channel.Y], channel) && channelDef.type === _type.QUANTITATIVE) {
            if (stack && stack.impute) {
              // For stack, we computed bin_mid so we can impute.
              return fieldRef(channelDef, scaleName, {
                binSuffix: 'mid'
              }, {
                offset
              });
            } // For non-stack, we can just calculate bin mid on the fly using signal.


            return binMidSignal({
              scaleName,
              fieldDef: channelDef,
              offset
            });
          }

          return fieldRef(channelDef, scaleName, (0, _channeldef.binRequiresRange)(channelDef, channel) ? {
            binSuffix: 'range'
          } : {}, {
            offset
          });
        } else if ((0, _bin.isBinned)(channelDef.bin)) {
          if ((0, _channeldef.isFieldDef)(channel2Def)) {
            return binMidSignal({
              scaleName,
              fieldDef: channelDef,
              fieldDef2: channel2Def,
              offset
            });
          } else {
            const channel2 = channel === _channel.X ? _channel.X2 : _channel.Y2;
            log.warn(log.message.channelRequiredForBinned(channel2));
          }
        }
      }

      if (scale) {
        const scaleType = scale.get('type');

        if ((0, _scale.hasDiscreteDomain)(scaleType)) {
          if (scaleType === 'band') {
            // For band, to get mid point, need to offset by half of the band
            return fieldRef(channelDef, scaleName, {
              binSuffix: 'range'
            }, {
              band: 0.5,
              offset
            });
          }

          return fieldRef(channelDef, scaleName, {
            binSuffix: 'range'
          }, {
            offset
          });
        }
      }

      return fieldRef(channelDef, scaleName, {}, {
        offset
      }); // no need for bin suffix
    } else if ((0, _channeldef.isValueDef)(channelDef)) {
      const value = channelDef.value;
      const offsetMixins = offset ? {
        offset
      } : {};
      return Object.assign({}, vgValueRef(channel, value), offsetMixins);
    } // If channelDef is neither field def or value def, it's a condition-only def.
    // In such case, we will use default ref.

  }

  return (0, _vegaUtil.isFunction)(defaultRef) ? defaultRef() : defaultRef;
}
/**
 * Convert special "width" and "height" values in Vega-Lite into Vega value ref.
 */


function vgValueRef(channel, value) {
  if ((0, _util.contains)(['x', 'x2'], channel) && value === 'width') {
    return {
      field: {
        group: 'width'
      }
    };
  } else if ((0, _util.contains)(['y', 'y2'], channel) && value === 'height') {
    return {
      field: {
        group: 'height'
      }
    };
  }

  return {
    value
  };
}

function tooltipForEncoding(encoding, config, {
  reactiveGeom
} = {}) {
  const keyValues = [];
  const usedKey = {};
  const toSkip = {};
  const expr = reactiveGeom ? 'datum.datum' : 'datum';
  const tooltipTuples = [];

  function add(fDef, channel) {
    const mainChannel = (0, _channel.getMainRangeChannel)(channel);
    const fieldDef = (0, _channeldef.isTypedFieldDef)(fDef) ? fDef : Object.assign({}, fDef, {
      type: encoding[mainChannel].type // for secondary field def, copy type from main channel

    });
    const key = (0, _channeldef.title)(fieldDef, config, {
      allowDisabling: false
    });
    let value = text(fieldDef, config, expr).signal;

    if (channel === 'x' || channel === 'y') {
      const channel2 = channel === 'x' ? 'x2' : 'y2';
      const fieldDef2 = (0, _channeldef.getFieldDef)(encoding[channel2]);

      if ((0, _bin.isBinned)(fieldDef.bin) && fieldDef2) {
        const startField = (0, _channeldef.vgField)(fieldDef, {
          expr
        });
        const endField = (0, _channeldef.vgField)(fieldDef2, {
          expr
        });
        value = (0, _common.binFormatExpression)(startField, endField, (0, _channeldef.format)(fieldDef), config);
        toSkip[channel2] = true;
      }
    }

    tooltipTuples.push({
      channel,
      key,
      value
    });
  }

  (0, _encoding.forEach)(encoding, (channelDef, channel) => {
    if ((0, _channeldef.isFieldDef)(channelDef)) {
      add(channelDef, channel);
    } else if ((0, _channeldef.hasConditionalFieldDef)(channelDef)) {
      add(channelDef.condition, channel);
    }
  });

  for (const {
    channel,
    key,
    value
  } of tooltipTuples) {
    if (!toSkip[channel] && !usedKey[key]) {
      keyValues.push(`${(0, _vegaUtil.stringValue)(key)}: ${value}`);
      usedKey[key] = true;
    }
  }

  return keyValues.length ? {
    signal: `{${keyValues.join(', ')}}`
  } : undefined;
}

function text(channelDef, config, expr = 'datum') {
  // text
  if (channelDef) {
    if ((0, _channeldef.isValueDef)(channelDef)) {
      return {
        value: channelDef.value
      };
    }

    if ((0, _channeldef.isTypedFieldDef)(channelDef)) {
      return (0, _common.formatSignalRef)(channelDef, (0, _channeldef.format)(channelDef), expr, config);
    }
  }

  return undefined;
}

function mid(sizeRef) {
  return Object.assign({}, sizeRef, {
    mult: 0.5
  });
}

function positionDefault({
  markDef,
  config,
  defaultRef,
  channel,
  scaleName,
  scale,
  mark,
  checkBarAreaWithoutZero: checkBarAreaWithZero
}) {
  return () => {
    const mainChannel = (0, _channel.getMainRangeChannel)(channel);
    const definedValueOrConfig = (0, _util.getFirstDefined)(markDef[channel], (0, _common.getMarkConfig)(channel, markDef, config));

    if (definedValueOrConfig !== undefined) {
      return vgValueRef(channel, definedValueOrConfig);
    }

    if ((0, _vegaUtil.isString)(defaultRef)) {
      if (scaleName) {
        const scaleType = scale.get('type');

        if ((0, _util.contains)([_scale.ScaleType.LOG, _scale.ScaleType.TIME, _scale.ScaleType.UTC], scaleType)) {
          // Log scales cannot have zero.
          // Zero in time scale is arbitrary, and does not affect ratio.
          // (Time is an interval level of measurement, not ratio).
          // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.
          if (checkBarAreaWithZero && (mark === 'bar' || mark === 'area')) {
            log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, mainChannel, {
              scaleType
            }));
          }
        } else {
          if (scale.domainDefinitelyIncludesZero()) {
            return {
              scale: scaleName,
              value: 0
            };
          }

          if (checkBarAreaWithZero && (mark === 'bar' || mark === 'area')) {
            log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, mainChannel, {
              zeroFalse: scale.explicit.zero === false
            }));
          }
        }
      }

      if (defaultRef === 'zeroOrMin') {
        return mainChannel === 'x' ? {
          value: 0
        } : {
          field: {
            group: 'height'
          }
        };
      } else {
        // zeroOrMax
        return mainChannel === 'x' ? {
          field: {
            group: 'width'
          }
        } : {
          value: 0
        };
      }
    }

    return defaultRef;
  };
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../aggregate":"node_modules/vega-lite/build/src/aggregate.js","../../bin":"node_modules/vega-lite/build/src/bin.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../encoding":"node_modules/vega-lite/build/src/encoding.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../mark":"node_modules/vega-lite/build/src/mark.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../type":"node_modules/vega-lite/build/src/type.js","../../util":"node_modules/vega-lite/build/src/util.js","../common":"node_modules/vega-lite/build/src/compile/common.js"}],"node_modules/vega-lite/build/src/compile/mark/mixins.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.color = color;
exports.baseEncodeEntry = baseEncodeEntry;
exports.valueIfDefined = valueIfDefined;
exports.defined = defined;
exports.nonPosition = nonPosition;
exports.wrapCondition = wrapCondition;
exports.tooltip = tooltip;
exports.text = text;
exports.bandPosition = bandPosition;
exports.centeredPointPositionWithSize = centeredPointPositionWithSize;
exports.binPosition = binPosition;
exports.pointPosition = pointPosition;
exports.pointPosition2 = pointPosition2;

var _vegaUtil = require("vega-util");

var _bin = require("../../bin");

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var log = _interopRequireWildcard(require("../../log"));

var _mark = require("../../mark");

var _scale = require("../../scale");

var _util = require("../../util");

var _vega = require("../../vega.schema");

var _common = require("../common");

var _predicate = require("../predicate");

var _assemble = require("../selection/assemble");

var ref = _interopRequireWildcard(require("./valueref"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function isVisible(c) {
  return c !== 'transparent' && c !== null && c !== undefined;
}

function color(model) {
  const {
    markDef,
    encoding,
    config
  } = model;
  const {
    filled,
    type: markType
  } = markDef;
  const configValue = {
    fill: (0, _common.getMarkConfig)('fill', markDef, config),
    stroke: (0, _common.getMarkConfig)('stroke', markDef, config),
    color: (0, _common.getMarkConfig)('color', markDef, config)
  };
  const transparentIfNeeded = (0, _util.contains)(['bar', 'point', 'circle', 'square', 'geoshape'], markType) ? 'transparent' : undefined;
  const defaultFill = (0, _util.getFirstDefined)(markDef.fill, configValue.fill, // If there is no fill, always fill symbols, bar, geoshape
  // with transparent fills https://github.com/vega/vega-lite/issues/1316
  transparentIfNeeded);
  const defaultStroke = (0, _util.getFirstDefined)(markDef.stroke, configValue.stroke);
  const colorVgChannel = filled ? 'fill' : 'stroke';
  const fillStrokeMarkDefAndConfig = Object.assign({}, defaultFill ? {
    fill: {
      value: defaultFill
    }
  } : {}, defaultStroke ? {
    stroke: {
      value: defaultStroke
    }
  } : {});

  if (encoding.fill || encoding.stroke) {
    // ignore encoding.color, markDef.color, config.color
    if (markDef.color) {
      // warn for markDef.color  (no need to warn encoding.color as it will be dropped in normalized already)
      log.warn(log.message.droppingColor('property', {
        fill: 'fill' in encoding,
        stroke: 'stroke' in encoding
      }));
    }

    return Object.assign({}, nonPosition('fill', model, {
      defaultValue: (0, _util.getFirstDefined)(defaultFill, transparentIfNeeded)
    }), nonPosition('stroke', model, {
      defaultValue: defaultStroke
    }));
  } else if (encoding.color) {
    return Object.assign({}, fillStrokeMarkDefAndConfig, nonPosition('color', model, {
      vgChannel: colorVgChannel,
      // apply default fill/stroke first, then color config, then transparent if needed.
      defaultValue: (0, _util.getFirstDefined)(markDef[colorVgChannel], markDef.color, configValue[colorVgChannel], configValue.color, filled ? transparentIfNeeded : undefined)
    }));
  } else if (isVisible(markDef.fill) || isVisible(markDef.stroke)) {
    // Ignore markDef.color
    if (markDef.color) {
      log.warn(log.message.droppingColor('property', {
        fill: 'fill' in markDef,
        stroke: 'stroke' in markDef
      }));
    }

    return fillStrokeMarkDefAndConfig;
  } else if (markDef.color) {
    return Object.assign({}, fillStrokeMarkDefAndConfig, {
      // override config with markDef.color
      [colorVgChannel]: {
        value: markDef.color
      }
    });
  } else if (isVisible(configValue.fill) || isVisible(configValue.stroke)) {
    // ignore config.color
    return fillStrokeMarkDefAndConfig;
  } else if (configValue.color) {
    return Object.assign({}, transparentIfNeeded ? {
      fill: {
        value: 'transparent'
      }
    } : {}, {
      [colorVgChannel]: {
        value: configValue.color
      }
    });
  }

  return {};
}

function baseEncodeEntry(model, ignore) {
  const {
    fill,
    stroke
  } = color(model);
  return Object.assign({}, markDefProperties(model.markDef, ignore), wrapAllFieldsInvalid(model, 'fill', fill), wrapAllFieldsInvalid(model, 'stroke', stroke), nonPosition('opacity', model), nonPosition('fillOpacity', model), nonPosition('strokeOpacity', model), nonPosition('strokeWidth', model), tooltip(model), text(model, 'href'));
}

function wrapAllFieldsInvalid(model, channel, valueRef) {
  const {
    config,
    mark
  } = model;

  if (config.invalidValues === 'hide' && valueRef && !(0, _mark.isPathMark)(mark)) {
    // For non-path marks, we have to exclude invalid values (null and NaN) for scales with continuous domains.
    // For path marks, we will use "defined" property and skip these values instead.
    const test = allFieldsInvalidPredicate(model, {
      invalid: true,
      channels: _channel.SCALE_CHANNELS
    });

    if (test) {
      return {
        [channel]: [// prepend the invalid case
        // TODO: support custom value
        {
          test,
          value: null
        }, ...(0, _vegaUtil.array)(valueRef)]
      };
    }
  }

  return valueRef ? {
    [channel]: valueRef
  } : {};
}

function markDefProperties(mark, ignore) {
  return _vega.VG_MARK_CONFIGS.reduce((m, prop) => {
    if (mark[prop] !== undefined && ignore[prop] !== 'ignore') {
      m[prop] = {
        value: mark[prop]
      };
    }

    return m;
  }, {});
}

function valueIfDefined(prop, value) {
  if (value !== undefined) {
    return {
      [prop]: {
        value: value
      }
    };
  }

  return undefined;
}

function allFieldsInvalidPredicate(model, {
  invalid = false,
  channels
}) {
  const filterIndex = channels.reduce((aggregator, channel) => {
    const scaleComponent = model.getScaleComponent(channel);

    if (scaleComponent) {
      const scaleType = scaleComponent.get('type');
      const field = model.vgField(channel, {
        expr: 'datum'
      }); // While discrete domain scales can handle invalid values, continuous scales can't.

      if (field && (0, _scale.hasContinuousDomain)(scaleType)) {
        aggregator[field] = true;
      }
    }

    return aggregator;
  }, {});
  const fields = (0, _util.keys)(filterIndex);

  if (fields.length > 0) {
    const op = invalid ? '||' : '&&';
    return fields.map(field => (0, ref.fieldInvalidPredicate)(field, invalid)).join(` ${op} `);
  }

  return undefined;
}

function defined(model) {
  if (model.config.invalidValues) {
    const signal = allFieldsInvalidPredicate(model, {
      channels: ['x', 'y']
    });

    if (signal) {
      return {
        defined: {
          signal
        }
      };
    }
  }

  return {};
}
/**
 * Return mixins for non-positional channels with scales.  (Text doesn't have scale.)
 */


function nonPosition(channel, model, opt = {}) {
  const {
    markDef,
    encoding,
    config
  } = model;
  const {
    vgChannel = channel
  } = opt;
  let {
    defaultRef,
    defaultValue
  } = opt;

  if (defaultRef === undefined) {
    // prettier-ignore
    defaultValue = defaultValue || (vgChannel === channel ? // When vl channel is the same as Vega's, no need to read from config as Vega will apply them correctly
    markDef[channel] : // However, when they are different (e.g, vl's text size is vg fontSize), need to read "size" from configs
    (0, _util.getFirstDefined)(markDef[channel], markDef[vgChannel], (0, _common.getMarkConfig)(channel, markDef, config, {
      vgChannel
    })));
    defaultRef = defaultValue ? {
      value: defaultValue
    } : undefined;
  }

  const channelDef = encoding[channel];
  return wrapCondition(model, channelDef, vgChannel, cDef => {
    return ref.midPoint({
      channel,
      channelDef: cDef,
      scaleName: model.scaleName(channel),
      scale: model.getScaleComponent(channel),
      stack: null,
      defaultRef
    });
  });
}
/**
 * Return a mixin that includes a Vega production rule for a Vega-Lite conditional channel definition.
 * or a simple mixin if channel def has no condition.
 */


function wrapCondition(model, channelDef, vgChannel, refFn) {
  const condition = channelDef && channelDef.condition;
  const valueRef = refFn(channelDef);

  if (condition) {
    const conditions = (0, _vegaUtil.isArray)(condition) ? condition : [condition];
    const vgConditions = conditions.map(c => {
      const conditionValueRef = refFn(c);
      const test = (0, _channeldef.isConditionalSelection)(c) ? (0, _assemble.assembleSelectionPredicate)(model, c.selection) : (0, _predicate.expression)(model, c.test);
      return Object.assign({
        test
      }, conditionValueRef);
    });
    return {
      [vgChannel]: [...vgConditions, ...(valueRef !== undefined ? [valueRef] : [])]
    };
  } else {
    return valueRef !== undefined ? {
      [vgChannel]: valueRef
    } : {};
  }
}

function tooltip(model, opt = {}) {
  const {
    encoding,
    markDef,
    config
  } = model;
  const channelDef = encoding.tooltip;

  if ((0, _vegaUtil.isArray)(channelDef)) {
    return {
      tooltip: ref.tooltipForEncoding({
        tooltip: channelDef
      }, config, opt)
    };
  } else {
    return wrapCondition(model, channelDef, 'tooltip', cDef => {
      // use valueRef based on channelDef first
      const tooltipRefFromChannelDef = ref.text(cDef, model.config, opt.reactiveGeom ? 'datum.datum' : 'datum');

      if (tooltipRefFromChannelDef) {
        return tooltipRefFromChannelDef;
      }

      if (cDef === null) {
        // Allow using encoding.tooltip = null to disable tooltip
        return undefined;
      } // If tooltipDef does not exist, then use value from markDef or config


      const markTooltip = (0, _util.getFirstDefined)(markDef.tooltip, (0, _common.getMarkConfig)('tooltip', markDef, config));

      if ((0, _vegaUtil.isString)(markTooltip)) {
        return {
          value: markTooltip
        };
      } else if ((0, _vegaUtil.isObject)(markTooltip)) {
        // `tooltip` is `{fields: 'encodings' | 'fields'}`
        if (markTooltip.content === 'encoding') {
          return ref.tooltipForEncoding(encoding, config, opt);
        } else {
          return {
            signal: 'datum'
          };
        }
      }

      return undefined;
    });
  }
}

function text(model, channel = 'text') {
  const channelDef = model.encoding[channel];
  return wrapCondition(model, channelDef, channel, cDef => ref.text(cDef, model.config));
}

function bandPosition(fieldDef, channel, model, defaultSizeRef) {
  const scaleName = model.scaleName(channel);
  const sizeChannel = channel === 'x' ? 'width' : 'height';

  if (model.encoding.size || model.markDef.size !== undefined || defaultSizeRef && defaultSizeRef.value !== undefined) {
    const orient = model.markDef.orient;

    if (orient) {
      const centeredBandPositionMixins = {
        // Use xc/yc and place the mark at the middle of the band
        // This way we never have to deal with size's condition for x/y position.
        [channel + 'c']: ref.fieldRef(fieldDef, scaleName, {}, {
          band: 0.5
        })
      };

      if ((0, _channeldef.getTypedFieldDef)(model.encoding.size)) {
        return Object.assign({}, centeredBandPositionMixins, nonPosition('size', model, {
          vgChannel: sizeChannel
        }));
      } else if ((0, _channeldef.isValueDef)(model.encoding.size)) {
        return Object.assign({}, centeredBandPositionMixins, nonPosition('size', model, {
          vgChannel: sizeChannel
        }));
      } else if (model.markDef.size !== undefined) {
        return Object.assign({}, centeredBandPositionMixins, {
          [sizeChannel]: {
            value: model.markDef.size
          }
        });
      } else if (defaultSizeRef && defaultSizeRef.value !== undefined) {
        return Object.assign({}, centeredBandPositionMixins, {
          [sizeChannel]: defaultSizeRef
        });
      }
    } else {
      log.warn(log.message.cannotApplySizeToNonOrientedMark(model.markDef.type));
    }
  }

  return {
    // FIXME: make offset works correctly here when we support group bar (https://github.com/vega/vega-lite/issues/396)
    [channel]: ref.fieldRef(fieldDef, scaleName, {
      binSuffix: 'range'
    }, {}),
    [sizeChannel]: defaultSizeRef || ref.bandRef(scaleName)
  };
}

function centeredPointPositionWithSize(channel, model, defaultPosRef, defaultSizeRef) {
  const centerChannel = channel === 'x' ? 'xc' : 'yc';
  const sizeChannel = channel === 'x' ? 'width' : 'height';
  return Object.assign({}, pointPosition(channel, model, defaultPosRef, centerChannel), nonPosition('size', model, {
    defaultRef: defaultSizeRef,
    vgChannel: sizeChannel
  }));
}

function binPosition({
  fieldDef,
  fieldDef2,
  channel,
  scaleName,
  mark,
  spacing = 0,
  reverse
}) {
  const binSpacing = {
    x: reverse ? spacing : 0,
    x2: reverse ? 0 : spacing,
    y: reverse ? 0 : spacing,
    y2: reverse ? spacing : 0
  };
  const channel2 = channel === _channel.X ? _channel.X2 : _channel.Y2;

  if ((0, _bin.isBinning)(fieldDef.bin)) {
    return {
      [channel2]: ref.bin({
        channel,
        fieldDef,
        scaleName,
        mark,
        side: 'start',
        offset: binSpacing[`${channel}2`]
      }),
      [channel]: ref.bin({
        channel,
        fieldDef,
        scaleName,
        mark,
        side: 'end',
        offset: binSpacing[channel]
      })
    };
  } else if ((0, _bin.isBinned)(fieldDef.bin) && (0, _channeldef.isFieldDef)(fieldDef2)) {
    return {
      [channel2]: ref.fieldRef(fieldDef, scaleName, {}, {
        offset: binSpacing[`${channel}2`]
      }),
      [channel]: ref.fieldRef(fieldDef2, scaleName, {}, {
        offset: binSpacing[channel]
      })
    };
  } else {
    log.warn(log.message.channelRequiredForBinned(channel2));
    return undefined;
  }
}
/**
 * Return mixins for point (non-band) position channels.
 */


function pointPosition(channel, model, defaultRef, vgChannel) {
  // TODO: refactor how refer to scale as discussed in https://github.com/vega/vega-lite/pull/1613
  const {
    encoding,
    mark,
    markDef,
    config,
    stack
  } = model;
  const channelDef = encoding[channel];
  const channel2Def = encoding[channel === _channel.X ? _channel.X2 : _channel.Y2];
  const scaleName = model.scaleName(channel);
  const scale = model.getScaleComponent(channel);
  const offset = ref.getOffset(channel, model.markDef);
  const valueRef = !channelDef && (encoding.latitude || encoding.longitude) ? // use geopoint output if there are lat/long and there is no point position overriding lat/long.
  {
    field: model.getName(channel)
  } : ref.position({
    channel,
    channelDef,
    channel2Def,
    scaleName,
    scale,
    stack,
    mark,
    offset,
    defaultRef: ref.positionDefault({
      markDef,
      config,
      defaultRef,
      channel,
      scaleName,
      scale,
      mark,
      checkBarAreaWithoutZero: !channel2Def // only check for non-ranged marks

    })
  });
  return {
    [vgChannel || channel]: valueRef
  };
}
/**
 * Return mixins for x2, y2.
 * If channel is not specified, return one channel based on orientation.
 */


function pointPosition2(model, defaultRef, channel) {
  const {
    encoding,
    mark,
    markDef,
    stack,
    config
  } = model;
  const baseChannel = channel === 'x2' ? 'x' : 'y';
  const sizeChannel = channel === 'x2' ? 'width' : 'height';
  const channelDef = encoding[baseChannel];
  const scaleName = model.scaleName(baseChannel);
  const scale = model.getScaleComponent(baseChannel);
  const offset = ref.getOffset(channel, model.markDef);

  if (!channelDef && (encoding.latitude || encoding.longitude)) {
    // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.
    return {
      [channel]: {
        field: model.getName(channel)
      }
    };
  }

  const valueRef = ref.position2({
    channel,
    channelDef,
    channel2Def: encoding[channel],
    scaleName,
    scale,
    stack,
    mark,
    offset,
    defaultRef: undefined
  });

  if (valueRef !== undefined) {
    return {
      [channel]: valueRef
    };
  } // TODO: check width/height encoding here once we add them
  // no x2/y2 encoding, then try to read x2/y2 or width/height based on precedence:
  // markDef > config.style > mark-specific config (config[mark]) > general mark config (config.mark)


  return (0, _util.getFirstDefined)(position2orSize(channel, markDef), position2orSize(channel, {
    [channel]: (0, _common.getStyleConfig)(channel, markDef, config.style),
    [sizeChannel]: (0, _common.getStyleConfig)(sizeChannel, markDef, config.style)
  }), position2orSize(channel, config[mark]), position2orSize(channel, config.mark), {
    [channel]: ref.positionDefault({
      markDef,
      config,
      defaultRef,
      channel,
      scaleName,
      scale,
      mark,
      checkBarAreaWithoutZero: !encoding[channel] // only check for non-ranged marks

    })()
  });
}

function position2orSize(channel, markDef) {
  const sizeChannel = channel === 'x2' ? 'width' : 'height';

  if (markDef[channel]) {
    return {
      [channel]: ref.vgValueRef(channel, markDef[channel])
    };
  } else if (markDef[sizeChannel]) {
    return {
      [sizeChannel]: {
        value: markDef[sizeChannel]
      }
    };
  }

  return undefined;
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../bin":"node_modules/vega-lite/build/src/bin.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../mark":"node_modules/vega-lite/build/src/mark.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../util":"node_modules/vega-lite/build/src/util.js","../../vega.schema":"node_modules/vega-lite/build/src/vega.schema.js","../common":"node_modules/vega-lite/build/src/compile/common.js","../predicate":"node_modules/vega-lite/build/src/compile/predicate.js","../selection/assemble":"node_modules/vega-lite/build/src/compile/selection/assemble.js","./valueref":"node_modules/vega-lite/build/src/compile/mark/valueref.js"}],"node_modules/vega-lite/build/src/compile/guide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.guideEncodeEntry = guideEncodeEntry;

var _util = require("../util");

var _mixins = require("./mark/mixins");

function guideEncodeEntry(encoding, model) {
  return (0, _util.keys)(encoding).reduce((encode, channel) => {
    const valueDef = encoding[channel];
    return Object.assign({}, encode, (0, _mixins.wrapCondition)(model, valueDef, channel, x => ({
      value: x.value
    })));
  }, {});
}
},{"../util":"node_modules/vega-lite/build/src/util.js","./mark/mixins":"node_modules/vega-lite/build/src/compile/mark/mixins.js"}],"node_modules/vega-lite/build/src/compile/resolve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultScaleResolve = defaultScaleResolve;
exports.parseGuideResolve = parseGuideResolve;

var _channel = require("../channel");

var log = _interopRequireWildcard(require("../log"));

var _util = require("../util");

var _model = require("./model");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function defaultScaleResolve(channel, model) {
  if ((0, _model.isLayerModel)(model) || (0, _model.isFacetModel)(model)) {
    return 'shared';
  } else if ((0, _model.isConcatModel)(model) || (0, _model.isRepeatModel)(model)) {
    return (0, _util.contains)(_channel.POSITION_SCALE_CHANNELS, channel) ? 'independent' : 'shared';
  }
  /* istanbul ignore next: should never reach here. */


  throw new Error('invalid model type for resolve');
}

function parseGuideResolve(resolve, channel) {
  const channelScaleResolve = resolve.scale[channel];
  const guide = (0, _util.contains)(_channel.POSITION_SCALE_CHANNELS, channel) ? 'axis' : 'legend';

  if (channelScaleResolve === 'independent') {
    if (resolve[guide][channel] === 'shared') {
      log.warn(log.message.independentScaleMeansIndependentGuide(channel));
    }

    return 'independent';
  }

  return resolve[guide][channel] || 'shared';
}
},{"../channel":"node_modules/vega-lite/build/src/channel.js","../log":"node_modules/vega-lite/build/src/log/index.js","../util":"node_modules/vega-lite/build/src/util.js","./model":"node_modules/vega-lite/build/src/compile/model.js"}],"node_modules/vega-lite/build/src/compile/split.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeExplicit = makeExplicit;
exports.makeImplicit = makeImplicit;
exports.tieBreakByComparing = tieBreakByComparing;
exports.defaultTieBreaker = defaultTieBreaker;
exports.mergeValuesWithExplicit = mergeValuesWithExplicit;
exports.Split = void 0;

var log = _interopRequireWildcard(require("../log"));

var _util = require("../util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * Generic class for storing properties that are explicitly specified
 * and implicitly determined by the compiler.
 * This is important for scale/axis/legend merging as
 * we want to prioritize properties that users explicitly specified.
 */
class Split {
  constructor(explicit = {}, implicit = {}) {
    this.explicit = explicit;
    this.implicit = implicit;
  }

  clone() {
    return new Split((0, _util.duplicate)(this.explicit), (0, _util.duplicate)(this.implicit));
  }

  combine() {
    // FIXME remove "as any".
    // Add "as any" to avoid an error "Spread types may only be created from object types".
    return Object.assign({}, this.explicit, this.implicit);
  }

  get(key) {
    // Explicit has higher precedence
    return (0, _util.getFirstDefined)(this.explicit[key], this.implicit[key]);
  }

  getWithExplicit(key) {
    // Explicit has higher precedence
    if (this.explicit[key] !== undefined) {
      return {
        explicit: true,
        value: this.explicit[key]
      };
    } else if (this.implicit[key] !== undefined) {
      return {
        explicit: false,
        value: this.implicit[key]
      };
    }

    return {
      explicit: false,
      value: undefined
    };
  }

  setWithExplicit(key, value) {
    if (value.value !== undefined) {
      this.set(key, value.value, value.explicit);
    }
  }

  set(key, value, explicit) {
    delete this[explicit ? 'implicit' : 'explicit'][key];
    this[explicit ? 'explicit' : 'implicit'][key] = value;
    return this;
  }

  copyKeyFromSplit(key, s) {
    // Explicit has higher precedence
    if (s.explicit[key] !== undefined) {
      this.set(key, s.explicit[key], true);
    } else if (s.implicit[key] !== undefined) {
      this.set(key, s.implicit[key], false);
    }
  }

  copyKeyFromObject(key, s) {
    // Explicit has higher precedence
    if (s[key] !== undefined) {
      this.set(key, s[key], true);
    }
  }
  /**
   * Merge split object into this split object. Properties from the other split
   * overwrite properties from this split.
   */


  copyAll(other) {
    for (const key of (0, _util.keys)(other.combine())) {
      const val = other.getWithExplicit(key);
      this.setWithExplicit(key, val);
    }
  }

}

exports.Split = Split;

function makeExplicit(value) {
  return {
    explicit: true,
    value
  };
}

function makeImplicit(value) {
  return {
    explicit: false,
    value
  };
}

function tieBreakByComparing(compare) {
  return (v1, v2, property, propertyOf) => {
    const diff = compare(v1.value, v2.value);

    if (diff > 0) {
      return v1;
    } else if (diff < 0) {
      return v2;
    }

    return defaultTieBreaker(v1, v2, property, propertyOf);
  };
}

function defaultTieBreaker(v1, v2, property, propertyOf) {
  if (v1.explicit && v2.explicit) {
    log.warn(log.message.mergeConflictingProperty(property, propertyOf, v1.value, v2.value));
  } // If equal score, prefer v1.


  return v1;
}

function mergeValuesWithExplicit(v1, v2, property, propertyOf, tieBreaker = defaultTieBreaker) {
  if (v1 === undefined || v1.value === undefined) {
    // For first run
    return v2;
  }

  if (v1.explicit && !v2.explicit) {
    return v1;
  } else if (v2.explicit && !v1.explicit) {
    return v2;
  } else if ((0, _util.stringify)(v1.value) === (0, _util.stringify)(v2.value)) {
    return v1;
  } else {
    return tieBreaker(v1, v2, property, propertyOf);
  }
}
},{"../log":"node_modules/vega-lite/build/src/log/index.js","../util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/compile/legend/component.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LegendComponent = void 0;

var _split = require("../split");

class LegendComponent extends _split.Split {}

exports.LegendComponent = LegendComponent;
},{"../split":"node_modules/vega-lite/build/src/compile/split.js"}],"node_modules/vega-lite/build/src/compile/legend/properties.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.values = values;
exports.defaultSymbolType = defaultSymbolType;
exports.clipHeight = clipHeight;
exports.type = type;
exports.defaultType = defaultType;
exports.direction = direction;
exports.defaultGradientLength = defaultGradientLength;
exports.defaultLabelOverlap = defaultLabelOverlap;

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _scale = require("../../scale");

var _util = require("../../util");

var _encode = require("./encode");

function values(legend, fieldDef) {
  const vals = legend.values;

  if (vals) {
    return (0, _channeldef.valueArray)(fieldDef, vals);
  }

  return undefined;
}

function defaultSymbolType(mark, channel, shapeChannelDef, markShape) {
  if (channel !== 'shape') {
    // use the value from the shape encoding or the mark config if they exist
    const shape = (0, _encode.getFirstConditionValue)(shapeChannelDef) || markShape;

    if (shape) {
      return shape;
    }
  }

  switch (mark) {
    case 'bar':
    case 'rect':
    case 'square':
      return 'square';

    case 'line':
    case 'trail':
    case 'rule':
      return 'stroke';

    case 'point':
    case 'circle':
    case 'tick':
    case 'geoshape':
    case 'area':
    case 'text':
      return 'circle';
  }
}

function clipHeight(legendType) {
  if (legendType === 'gradient') {
    return 20;
  }

  return undefined;
}

function type(params) {
  const {
    legend
  } = params;
  return (0, _util.getFirstDefined)(legend.type, defaultType(params));
}

function defaultType({
  channel,
  timeUnit,
  scaleType,
  alwaysReturn
}) {
  // Following the logic in https://github.com/vega/vega-parser/blob/master/src/parsers/legend.js
  if ((0, _channel.isColorChannel)(channel)) {
    if ((0, _util.contains)(['quarter', 'month', 'day'], timeUnit)) {
      return 'symbol';
    }

    if ((0, _scale.isContinuousToContinuous)(scaleType)) {
      return alwaysReturn ? 'gradient' : undefined;
    }
  }

  return alwaysReturn ? 'symbol' : undefined;
}

function direction({
  legend,
  legendConfig,
  timeUnit,
  channel,
  scaleType
}) {
  const orient = (0, _util.getFirstDefined)(legend.orient, legendConfig.orient, 'right');
  const legendType = type({
    legend,
    channel,
    timeUnit,
    scaleType,
    alwaysReturn: true
  });
  return (0, _util.getFirstDefined)(legend.direction, legendConfig[legendType ? 'gradientDirection' : 'symbolDirection'], defaultDirection(orient, legendType));
}

function defaultDirection(orient, legendType) {
  switch (orient) {
    case 'top':
    case 'bottom':
      return 'horizontal';

    case 'left':
    case 'right':
    case 'none':
    case undefined:
      // undefined = "right" in Vega
      return undefined;
    // vertical is Vega's default

    default:
      // top-left / ...
      // For inner legend, uses compact layout like Tableau
      return legendType === 'gradient' ? 'horizontal' : undefined;
  }
}

function defaultGradientLength({
  legend,
  legendConfig,
  model,
  channel,
  scaleType
}) {
  const {
    gradientHorizontalMaxLength,
    gradientHorizontalMinLength,
    gradientVerticalMaxLength,
    gradientVerticalMinLength
  } = legendConfig;
  const dir = direction({
    legend,
    legendConfig,
    channel,
    scaleType
  });

  if (dir === 'horizontal') {
    const orient = (0, _util.getFirstDefined)(legend.orient, legendConfig.orient);

    if (orient === 'top' || orient === 'bottom') {
      return gradientLengthSignal(model, 'width', gradientHorizontalMinLength, gradientHorizontalMaxLength);
    } else {
      return gradientHorizontalMinLength;
    }
  } else {
    // vertical / undefined (Vega uses vertical by default)
    return gradientLengthSignal(model, 'height', gradientVerticalMinLength, gradientVerticalMaxLength);
  }
}

function gradientLengthSignal(model, sizeType, min, max) {
  const sizeSignal = model.getSizeSignalRef(sizeType).signal;
  return {
    signal: `clamp(${sizeSignal}, ${min}, ${max})`
  };
}

function defaultLabelOverlap(scaleType) {
  if ((0, _util.contains)(['quantile', 'threshold', 'log'], scaleType)) {
    return 'greedy';
  }

  return undefined;
}
},{"../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../util":"node_modules/vega-lite/build/src/util.js","./encode":"node_modules/vega-lite/build/src/compile/legend/encode.js"}],"node_modules/vega-lite/build/src/compile/legend/encode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.symbols = symbols;
exports.gradient = gradient;
exports.labels = labels;
exports.getFirstConditionValue = getFirstConditionValue;

var _vegaUtil = require("vega-util");

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _mark = require("../../mark");

var _scale = require("../../scale");

var _util = require("../../util");

var _common = require("../common");

var mixins = _interopRequireWildcard(require("../mark/mixins"));

var _properties = require("./properties");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function type(legendCmp, model, channel) {
  const scaleType = model.getScaleComponent(channel).get('type');
  return (0, _util.getFirstDefined)(legendCmp.get('type'), (0, _properties.defaultType)({
    channel,
    scaleType,
    alwaysReturn: true
  }));
}

function symbols(fieldDef, symbolsSpec, model, channel, legendCmp) {
  if (type(legendCmp, model, channel) !== 'symbol') {
    return undefined;
  }

  let out = Object.assign({}, (0, _common.applyMarkConfig)({}, model, _mark.FILL_STROKE_CONFIG), mixins.color(model)); // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry

  const {
    markDef,
    encoding,
    config
  } = model;
  const filled = markDef.filled;
  const opacity = getMaxValue(encoding.opacity) || markDef.opacity;

  if (out.fill) {
    // for fill legend, we don't want any fill in symbol
    if (channel === 'fill' || filled && channel === _channel.COLOR) {
      delete out.fill;
    } else {
      if (out.fill['field']) {
        // For others, set fill to some opaque value (or nothing if a color is already set)
        if (legendCmp.get('symbolFillColor')) {
          delete out.fill;
        } else {
          out.fill = {
            value: config.legend.symbolBaseFillColor || 'black'
          };
          out.fillOpacity = {
            value: opacity || 1
          };
        }
      } else if ((0, _vegaUtil.isArray)(out.fill)) {
        const fill = getFirstConditionValue(encoding.fill || encoding.color) || markDef.fill || filled && markDef.color;

        if (fill) {
          out.fill = {
            value: fill
          };
        }
      }
    }
  }

  if (out.stroke) {
    if (channel === 'stroke' || !filled && channel === _channel.COLOR) {
      delete out.stroke;
    } else {
      if (out.stroke['field']) {
        // For others, remove stroke field
        delete out.stroke;
      } else if ((0, _vegaUtil.isArray)(out.stroke)) {
        const stroke = (0, _util.getFirstDefined)(getFirstConditionValue(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : undefined);

        if (stroke) {
          out.stroke = {
            value: stroke
          };
        }
      }
    }
  }

  if (channel !== _channel.OPACITY) {
    if (opacity) {
      // only apply opacity if it is neither zero or undefined
      out.opacity = {
        value: opacity
      };
    }
  }

  out = Object.assign({}, out, symbolsSpec);
  return (0, _util.keys)(out).length > 0 ? out : undefined;
}

function gradient(fieldDef, gradientSpec, model, channel, legendCmp) {
  if (type(legendCmp, model, channel) !== 'gradient') {
    return undefined;
  }

  let out = {};
  const opacity = getMaxValue(model.encoding.opacity) || model.markDef.opacity;

  if (opacity) {
    // only apply opacity if it is neither zero or undefined
    out.opacity = {
      value: opacity
    };
  }

  out = Object.assign({}, out, gradientSpec);
  return (0, _util.keys)(out).length > 0 ? out : undefined;
}

function labels(fieldDef, labelsSpec, model, channel) {
  const legend = model.legend(channel);
  const config = model.config;
  let out = {};

  if ((0, _channeldef.isTimeFormatFieldDef)(fieldDef)) {
    const isUTCScale = model.getScaleComponent(channel).get('type') === _scale.ScaleType.UTC;

    const expr = (0, _common.timeFormatExpression)('datum.value', fieldDef.timeUnit, legend.format, config.legend.shortTimeLabels, config.timeFormat, isUTCScale);
    labelsSpec = Object.assign({}, expr ? {
      text: {
        signal: expr
      }
    } : {}, labelsSpec);
  }

  out = Object.assign({}, out, labelsSpec);
  return (0, _util.keys)(out).length > 0 ? out : undefined;
}

function getMaxValue(channelDef) {
  return getConditionValue(channelDef, (v, conditionalDef) => Math.max(v, conditionalDef.value));
}

function getFirstConditionValue(channelDef) {
  return getConditionValue(channelDef, (v, conditionalDef) => {
    return (0, _util.getFirstDefined)(v, conditionalDef.value);
  });
}

function getConditionValue(channelDef, reducer) {
  if ((0, _channeldef.hasConditionalValueDef)(channelDef)) {
    return ((0, _vegaUtil.isArray)(channelDef.condition) ? channelDef.condition : [channelDef.condition]).reduce(reducer, channelDef.value);
  } else if ((0, _channeldef.isValueDef)(channelDef)) {
    return channelDef.value;
  }

  return undefined;
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../mark":"node_modules/vega-lite/build/src/mark.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../util":"node_modules/vega-lite/build/src/util.js","../common":"node_modules/vega-lite/build/src/compile/common.js","../mark/mixins":"node_modules/vega-lite/build/src/compile/mark/mixins.js","./properties":"node_modules/vega-lite/build/src/compile/legend/properties.js"}],"node_modules/vega-lite/build/src/compile/legend/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseLegend = parseLegend;
exports.parseLegendForChannel = parseLegendForChannel;
exports.mergeLegendComponent = mergeLegendComponent;

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _legend = require("../../legend");

var _type = require("../../type");

var _util = require("../../util");

var _common = require("../common");

var _guide = require("../guide");

var _model = require("../model");

var _resolve = require("../resolve");

var _split = require("../split");

var _component = require("./component");

var encode = _interopRequireWildcard(require("./encode"));

var properties = _interopRequireWildcard(require("./properties"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function parseLegend(model) {
  if ((0, _model.isUnitModel)(model)) {
    model.component.legends = parseUnitLegend(model);
  } else {
    model.component.legends = parseNonUnitLegend(model);
  }
}

function parseUnitLegend(model) {
  const {
    encoding
  } = model;
  return [_channel.COLOR, _channel.FILL, _channel.STROKE, _channel.STROKEWIDTH, _channel.SIZE, _channel.SHAPE, _channel.OPACITY, _channel.FILLOPACITY, _channel.STROKEOPACITY].reduce((legendComponent, channel) => {
    const def = encoding[channel];

    if (model.legend(channel) && model.getScaleComponent(channel) && !((0, _channeldef.isFieldDef)(def) && channel === _channel.SHAPE && def.type === _type.GEOJSON)) {
      legendComponent[channel] = parseLegendForChannel(model, channel);
    }

    return legendComponent;
  }, {});
}

function getLegendDefWithScale(model, channel) {
  const scale = model.scaleName(_channel.COLOR);

  if (channel === 'color') {
    return model.markDef.filled ? {
      fill: scale
    } : {
      stroke: scale
    };
  }

  return {
    [channel]: model.scaleName(channel)
  };
}

function isExplicit(value, property, legend, fieldDef) {
  switch (property) {
    case 'values':
      // specified legend.values is already respected, but may get transformed.
      return !!legend.values;

    case 'title':
      // title can be explicit if fieldDef.title is set
      if (property === 'title' && value === fieldDef.title) {
        return true;
      }

  } // Otherwise, things are explicit if the returned value matches the specified property


  return value === legend[property];
}

function parseLegendForChannel(model, channel) {
  const fieldDef = model.fieldDef(channel);
  const legend = model.legend(channel);
  const legendCmpt = new _component.LegendComponent({}, getLegendDefWithScale(model, channel));

  for (const property of _legend.LEGEND_PROPERTIES) {
    const value = getProperty(property, legend, channel, model);

    if (value !== undefined) {
      const explicit = isExplicit(value, property, legend, fieldDef);

      if (explicit || model.config.legend[property] === undefined) {
        legendCmpt.set(property, value, explicit);
      }
    }
  }

  const legendEncoding = legend.encoding || {};
  const legendEncode = ['labels', 'legend', 'title', 'symbols', 'gradient'].reduce((e, part) => {
    const legendEncodingPart = (0, _guide.guideEncodeEntry)(legendEncoding[part] || {}, model);
    const value = encode[part] ? encode[part](fieldDef, legendEncodingPart, model, channel, legendCmpt) // apply rule
    : legendEncodingPart; // no rule -- just default values

    if (value !== undefined && (0, _util.keys)(value).length > 0) {
      e[part] = {
        update: value
      };
    }

    return e;
  }, {});

  if ((0, _util.keys)(legendEncode).length > 0) {
    legendCmpt.set('encode', legendEncode, !!legend.encoding);
  }

  return legendCmpt;
}

function getProperty(property, legend, channel, model) {
  const {
    encoding,
    mark
  } = model;
  const fieldDef = (0, _channeldef.getTypedFieldDef)(encoding[channel]);
  const legendConfig = model.config.legend;
  const {
    timeUnit
  } = fieldDef;
  const scaleType = model.getScaleComponent(channel).get('type');

  switch (property) {
    // TODO: enable when https://github.com/vega/vega/issues/1351 is fixed
    // case 'clipHeight':
    //   return getFirstDefined(specifiedLegend.clipHeight, properties.clipHeight(properties.type(...)));
    case 'direction':
      return (0, properties.direction)({
        legend,
        legendConfig,
        timeUnit,
        channel,
        scaleType
      });

    case 'format':
      // We don't include temporal field here as we apply format in encode block
      if ((0, _channeldef.isTimeFormatFieldDef)(fieldDef)) {
        return undefined;
      }

      return (0, _common.numberFormat)(fieldDef, legend.format, model.config);

    case 'formatType':
      // Same as format, we don't include temporal field here as we apply format in encode block
      if ((0, _channeldef.isTimeFormatFieldDef)(fieldDef)) {
        return undefined;
      }

      return legend.formatType;

    case 'gradientLength':
      return (0, _util.getFirstDefined)( // do specified gradientLength first
      legend.gradientLength, legendConfig.gradientLength, // Otherwise, use smart default based on plot height
      properties.defaultGradientLength({
        model,
        legend,
        legendConfig,
        channel,
        scaleType
      }));

    case 'labelOverlap':
      return (0, _util.getFirstDefined)(legend.labelOverlap, properties.defaultLabelOverlap(scaleType));

    case 'symbolType':
      return (0, _util.getFirstDefined)(legend.symbolType, properties.defaultSymbolType(mark, channel, encoding.shape, model.markDef.shape));

    case 'title':
      return (0, _channeldef.title)(fieldDef, model.config, {
        allowDisabling: true
      }) || undefined;

    case 'type':
      return (0, properties.type)({
        legend,
        channel,
        timeUnit,
        scaleType,
        alwaysReturn: false
      });

    case 'values':
      return properties.values(legend, fieldDef);
  } // Otherwise, return specified property.


  return legend[property];
}

function parseNonUnitLegend(model) {
  const {
    legends,
    resolve
  } = model.component;

  for (const child of model.children) {
    parseLegend(child);
    (0, _util.keys)(child.component.legends).forEach(channel => {
      resolve.legend[channel] = (0, _resolve.parseGuideResolve)(model.component.resolve, channel);

      if (resolve.legend[channel] === 'shared') {
        // If the resolve says shared (and has not been overridden)
        // We will try to merge and see if there is a conflict
        legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);

        if (!legends[channel]) {
          // If merge returns nothing, there is a conflict so we cannot make the legend shared.
          // Thus, mark legend as independent and remove the legend component.
          resolve.legend[channel] = 'independent';
          delete legends[channel];
        }
      }
    });
  }

  (0, _util.keys)(legends).forEach(channel => {
    for (const child of model.children) {
      if (!child.component.legends[channel]) {
        // skip if the child does not have a particular legend
        continue;
      }

      if (resolve.legend[channel] === 'shared') {
        // After merging shared legend, make sure to remove legend from child
        delete child.component.legends[channel];
      }
    }
  });
  return legends;
}

function mergeLegendComponent(mergedLegend, childLegend) {
  if (!mergedLegend) {
    return childLegend.clone();
  }

  const mergedOrient = mergedLegend.getWithExplicit('orient');
  const childOrient = childLegend.getWithExplicit('orient');

  if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
    // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
    // Cannot merge due to inconsistent orient
    return undefined;
  }

  let typeMerged = false; // Otherwise, let's merge

  for (const prop of _legend.VG_LEGEND_PROPERTIES) {
    const mergedValueWithExplicit = (0, _split.mergeValuesWithExplicit)(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', // Tie breaker function
    (v1, v2) => {
      switch (prop) {
        case 'symbolType':
          return mergeSymbolType(v1, v2);

        case 'title':
          return (0, _common.mergeTitleComponent)(v1, v2);

        case 'type':
          // There are only two types. If we have different types, then prefer symbol over gradient.
          typeMerged = true;
          return (0, _split.makeImplicit)('symbol');
      }

      return (0, _split.defaultTieBreaker)(v1, v2, prop, 'legend');
    });
    mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);
  }

  if (typeMerged) {
    if (((mergedLegend.implicit || {}).encode || {}).gradient) {
      (0, _util.deleteNestedProperty)(mergedLegend.implicit, ['encode', 'gradient']);
    }

    if (((mergedLegend.explicit || {}).encode || {}).gradient) {
      (0, _util.deleteNestedProperty)(mergedLegend.explicit, ['encode', 'gradient']);
    }
  }

  return mergedLegend;
}

function mergeSymbolType(st1, st2) {
  if (st2.value === 'circle') {
    // prefer "circle" over "stroke"
    return st2;
  }

  return st1;
}
},{"../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../legend":"node_modules/vega-lite/build/src/legend.js","../../type":"node_modules/vega-lite/build/src/type.js","../../util":"node_modules/vega-lite/build/src/util.js","../common":"node_modules/vega-lite/build/src/compile/common.js","../guide":"node_modules/vega-lite/build/src/compile/guide.js","../model":"node_modules/vega-lite/build/src/compile/model.js","../resolve":"node_modules/vega-lite/build/src/compile/resolve.js","../split":"node_modules/vega-lite/build/src/compile/split.js","./component":"node_modules/vega-lite/build/src/compile/legend/component.js","./encode":"node_modules/vega-lite/build/src/compile/legend/encode.js","./properties":"node_modules/vega-lite/build/src/compile/legend/properties.js"}],"node_modules/vega-lite/build/src/compile/legend/assemble.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assembleLegends = assembleLegends;

var _util = require("../../util");

var _parse = require("./parse");

function assembleLegends(model) {
  const legendComponentIndex = model.component.legends;
  const legendByDomain = {};

  for (const channel of (0, _util.keys)(legendComponentIndex)) {
    const scaleComponent = model.getScaleComponent(channel);
    const domainHash = (0, _util.stringify)(scaleComponent.get('domains'));

    if (legendByDomain[domainHash]) {
      for (const mergedLegendComponent of legendByDomain[domainHash]) {
        const merged = (0, _parse.mergeLegendComponent)(mergedLegendComponent, legendComponentIndex[channel]);

        if (!merged) {
          // If cannot merge, need to add this legend separately
          legendByDomain[domainHash].push(legendComponentIndex[channel]);
        }
      }
    } else {
      legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];
    }
  }

  return (0, _util.flatten)((0, _util.vals)(legendByDomain)).map(legendCmpt => {
    const legend = legendCmpt.combine();

    if (legend.encode && legend.encode.symbols) {
      const out = legend.encode.symbols.update;

      if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke && !legend.stroke) {
        // For non color channel's legend, we need to override symbol stroke config from Vega config if stroke channel is not used.
        out.stroke = {
          value: 'transparent'
        };
      }

      if (legend.fill) {
        // If top-level fill is defined, for non color channel's legend, we need remove fill.
        delete out.fill;
      }
    }

    return legend;
  });
}
},{"../../util":"node_modules/vega-lite/build/src/util.js","./parse":"node_modules/vega-lite/build/src/compile/legend/parse.js"}],"node_modules/vega-lite/build/src/compile/projection/assemble.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assembleProjections = assembleProjections;
exports.assembleProjectionsForModelAndChildren = assembleProjectionsForModelAndChildren;
exports.assembleProjectionForModel = assembleProjectionForModel;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _util = require("../../util");

var _vega = require("../../vega.schema");

var _model = require("../model");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function assembleProjections(model) {
  if ((0, _model.isLayerModel)(model) || (0, _model.isConcatModel)(model) || (0, _model.isRepeatModel)(model)) {
    return assembleProjectionsForModelAndChildren(model);
  } else {
    return assembleProjectionForModel(model);
  }
}

function assembleProjectionsForModelAndChildren(model) {
  return model.children.reduce((projections, child) => {
    return projections.concat(child.assembleProjections());
  }, assembleProjectionForModel(model));
}

function assembleProjectionForModel(model) {
  const component = model.component.projection;

  if (!component || component.merged) {
    return [];
  }

  const projection = component.combine();

  const {
    name
  } = projection,
        rest = tslib_1.__rest(projection, ["name"]); // we need to extract name so that it is always present in the output and pass TS type validation


  if (!component.data) {
    // generate custom projection, no automatic fitting
    return [Object.assign({
      name
    }, {
      translate: {
        signal: '[width / 2, height / 2]'
      }
    }, rest)];
  } else {
    // generate projection that uses extent fitting
    const size = {
      signal: `[${component.size.map(ref => ref.signal).join(', ')}]`
    };
    const fit = component.data.reduce((sources, data) => {
      const source = (0, _vega.isSignalRef)(data) ? data.signal : `data('${model.lookupDataSource(data)}')`;

      if (!(0, _util.contains)(sources, source)) {
        // build a unique list of sources
        sources.push(source);
      }

      return sources;
    }, []);

    if (fit.length <= 0) {
      throw new Error("Projection's fit didn't find any data sources");
    }

    return [Object.assign({
      name,
      size,
      fit: {
        signal: fit.length > 1 ? `[${fit.join(', ')}]` : fit[0]
      }
    }, rest)];
  }
}
},{"tslib":"node_modules/tslib/tslib.es6.js","../../util":"node_modules/vega-lite/build/src/util.js","../../vega.schema":"node_modules/vega-lite/build/src/vega.schema.js","../model":"node_modules/vega-lite/build/src/compile/model.js"}],"node_modules/vega-lite/build/src/projection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PROJECTION_PROPERTIES = void 0;
const PROJECTION_PROPERTIES = ['type', 'clipAngle', 'clipExtent', 'center', 'rotate', 'precision', 'reflectX', 'reflectY', 'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];
exports.PROJECTION_PROPERTIES = PROJECTION_PROPERTIES;
},{}],"node_modules/vega-lite/build/src/compile/projection/component.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProjectionComponent = void 0;

var _split = require("../split");

class ProjectionComponent extends _split.Split {
  constructor(name, specifiedProjection, size, data) {
    super(Object.assign({}, specifiedProjection), // all explicit properties of projection
    {
      name // name as initial implicit property

    });
    this.specifiedProjection = specifiedProjection;
    this.size = size;
    this.data = data;
    this.merged = false;
  }
  /**
   * Whether the projection parameters should fit provided data.
   */


  get isFit() {
    return !!this.data;
  }

}

exports.ProjectionComponent = ProjectionComponent;
},{"../split":"node_modules/vega-lite/build/src/compile/split.js"}],"node_modules/vega-lite/build/src/compile/projection/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseProjection = parseProjection;

var _channel = require("../../channel");

var _data = require("../../data");

var _projection = require("../../projection");

var _type = require("../../type");

var _util = require("../../util");

var _model = require("../model");

var _component = require("./component");

function parseProjection(model) {
  model.component.projection = (0, _model.isUnitModel)(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);
}

function parseUnitProjection(model) {
  if (model.hasProjection) {
    const proj = model.specifiedProjection;
    const fit = !(proj && (proj.scale != null || proj.translate != null));
    const size = fit ? [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')] : undefined;
    const data = fit ? gatherFitData(model) : undefined;
    return new _component.ProjectionComponent(model.projectionName(true), Object.assign({}, model.config.projection || {}, proj || {}), size, data);
  }

  return undefined;
}

function gatherFitData(model) {
  const data = [];
  [[_channel.LONGITUDE, _channel.LATITUDE], [_channel.LONGITUDE2, _channel.LATITUDE2]].forEach(posssiblePair => {
    if (model.channelHasField(posssiblePair[0]) || model.channelHasField(posssiblePair[1])) {
      data.push({
        signal: model.getName(`geojson_${data.length}`)
      });
    }
  });

  if (model.channelHasField(_channel.SHAPE) && model.fieldDef(_channel.SHAPE).type === _type.GEOJSON) {
    data.push({
      signal: model.getName(`geojson_${data.length}`)
    });
  }

  if (data.length === 0) {
    // main source is geojson, so we can just use that
    data.push(model.requestDataName(_data.MAIN));
  }

  return data;
}

function mergeIfNoConflict(first, second) {
  const allPropertiesShared = (0, _util.every)(_projection.PROJECTION_PROPERTIES, prop => {
    // neither has the property
    if (!first.explicit.hasOwnProperty(prop) && !second.explicit.hasOwnProperty(prop)) {
      return true;
    } // both have property and an equal value for property


    if (first.explicit.hasOwnProperty(prop) && second.explicit.hasOwnProperty(prop) && // some properties might be signals or objects and require hashing for comparison
    (0, _util.stringify)(first.get(prop)) === (0, _util.stringify)(second.get(prop))) {
      return true;
    }

    return false;
  });
  const size = (0, _util.stringify)(first.size) === (0, _util.stringify)(second.size);

  if (size) {
    if (allPropertiesShared) {
      return first;
    } else if ((0, _util.stringify)(first.explicit) === (0, _util.stringify)({})) {
      return second;
    } else if ((0, _util.stringify)(second.explicit) === (0, _util.stringify)({})) {
      return first;
    }
  } // if all properties don't match, let each unit spec have its own projection


  return null;
}

function parseNonUnitProjections(model) {
  if (model.children.length === 0) {
    return undefined;
  }

  let nonUnitProjection; // parse all children first

  model.children.forEach(child => parseProjection(child)); // analyze parsed projections, attempt to merge

  const mergable = (0, _util.every)(model.children, child => {
    const projection = child.component.projection;

    if (!projection) {
      // child layer does not use a projection
      return true;
    } else if (!nonUnitProjection) {
      // cached 'projection' is null, cache this one
      nonUnitProjection = projection;
      return true;
    } else {
      const merge = mergeIfNoConflict(nonUnitProjection, projection);

      if (merge) {
        nonUnitProjection = merge;
      }

      return !!merge;
    }
  }); // if cached one and all other children share the same projection,

  if (nonUnitProjection && mergable) {
    // so we can elevate it to the layer level
    const name = model.projectionName(true);
    const modelProjection = new _component.ProjectionComponent(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, (0, _util.duplicate)(nonUnitProjection.data)); // rename and assign all others as merged

    model.children.forEach(child => {
      const projection = child.component.projection;

      if (projection) {
        if (projection.isFit) {
          modelProjection.data.push(...child.component.projection.data);
        }

        child.renameProjection(projection.get('name'), name);
        projection.merged = true;
      }
    });
    return modelProjection;
  }

  return undefined;
}
},{"../../channel":"node_modules/vega-lite/build/src/channel.js","../../data":"node_modules/vega-lite/build/src/data.js","../../projection":"node_modules/vega-lite/build/src/projection.js","../../type":"node_modules/vega-lite/build/src/type.js","../../util":"node_modules/vega-lite/build/src/util.js","../model":"node_modules/vega-lite/build/src/compile/model.js","./component":"node_modules/vega-lite/build/src/compile/projection/component.js"}],"node_modules/vega-lite/build/src/compile/data/bin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBinSignalName = getBinSignalName;
exports.BinNode = void 0;

var _vegaUtil = require("vega-util");

var _bin = require("../../bin");

var _channeldef = require("../../channeldef");

var _util = require("../../util");

var _common = require("../common");

var _model = require("../model");

var _dataflow = require("./dataflow");

function rangeFormula(model, fieldDef, channel, config) {
  if ((0, _channeldef.binRequiresRange)(fieldDef, channel)) {
    // read format from axis or legend, if there is no format then use config.numberFormat
    const guide = (0, _model.isUnitModel)(model) ? model.axis(channel) || model.legend(channel) || {} : {};
    const startField = (0, _channeldef.vgField)(fieldDef, {
      expr: 'datum'
    });
    const endField = (0, _channeldef.vgField)(fieldDef, {
      expr: 'datum',
      binSuffix: 'end'
    });
    return {
      formulaAs: (0, _channeldef.vgField)(fieldDef, {
        binSuffix: 'range',
        forAs: true
      }),
      formula: (0, _common.binFormatExpression)(startField, endField, guide.format, config)
    };
  }

  return {};
}

function binKey(bin, field) {
  return `${(0, _bin.binToString)(bin)}_${field}`;
}

function getSignalsFromModel(model, key) {
  return {
    signal: model.getName(`${key}_bins`),
    extentSignal: model.getName(`${key}_extent`)
  };
}

function getBinSignalName(model, field, bin) {
  const normalizedBin = (0, _channeldef.normalizeBin)(bin, undefined) || {};
  const key = binKey(normalizedBin, field);
  return model.getName(`${key}_bins`);
}

function isBinTransform(t) {
  return 'as' in t;
}

function createBinComponent(t, bin, model) {
  let as;

  if (isBinTransform(t)) {
    as = (0, _vegaUtil.isString)(t.as) ? [t.as, `${t.as}_end`] : [t.as[0], t.as[1]];
  } else {
    as = [(0, _channeldef.vgField)(t, {
      forAs: true
    }), (0, _channeldef.vgField)(t, {
      binSuffix: 'end',
      forAs: true
    })];
  }

  const normalizedBin = (0, _channeldef.normalizeBin)(bin, undefined) || {};
  const key = binKey(normalizedBin, t.field);
  const {
    signal,
    extentSignal
  } = getSignalsFromModel(model, key);
  const binComponent = Object.assign({
    bin: normalizedBin,
    field: t.field,
    as: [as]
  }, signal ? {
    signal
  } : {}, extentSignal ? {
    extentSignal
  } : {});
  return {
    key,
    binComponent
  };
}

class BinNode extends _dataflow.DataFlowNode {
  constructor(parent, bins) {
    super(parent);
    this.bins = bins;
  }

  clone() {
    return new BinNode(null, (0, _util.duplicate)(this.bins));
  }

  static makeFromEncoding(parent, model) {
    const bins = model.reduceFieldDef((binComponentIndex, fieldDef, channel) => {
      if ((0, _channeldef.isTypedFieldDef)(fieldDef) && (0, _bin.isBinning)(fieldDef.bin)) {
        const {
          key,
          binComponent
        } = createBinComponent(fieldDef, fieldDef.bin, model);
        binComponentIndex[key] = Object.assign({}, binComponent, binComponentIndex[key], rangeFormula(model, fieldDef, channel, model.config));
      }

      return binComponentIndex;
    }, {});

    if ((0, _util.keys)(bins).length === 0) {
      return null;
    }

    return new BinNode(parent, bins);
  }
  /**
   * Creates a bin node from BinTransform.
   * The optional parameter should provide
   */


  static makeFromTransform(parent, t, model) {
    const {
      key,
      binComponent
    } = createBinComponent(t, t.bin, model);
    return new BinNode(parent, {
      [key]: binComponent
    });
  }
  /**
   * Merge bin nodes. This method either integrates the bin config from the other node
   * or if this node already has a bin config, renames the corresponding signal in the model.
   */


  merge(other, renameSignal) {
    for (const key of (0, _util.keys)(other.bins)) {
      if (key in this.bins) {
        renameSignal(other.bins[key].signal, this.bins[key].signal); // Ensure that we don't have duplicate names for signal pairs

        this.bins[key].as = (0, _util.unique)([...this.bins[key].as, ...other.bins[key].as], _util.hash);
      } else {
        this.bins[key] = other.bins[key];
      }
    }

    for (const child of other.children) {
      other.removeChild(child);
      child.parent = this;
    }

    other.remove();
  }

  producedFields() {
    return new Set((0, _util.flatten)((0, _util.flatten)((0, _util.vals)(this.bins).map(c => c.as))));
  }

  dependentFields() {
    return new Set((0, _util.vals)(this.bins).map(c => c.field));
  }

  hash() {
    return `Bin ${(0, _util.hash)(this.bins)}`;
  }

  assemble() {
    return (0, _util.flatten)((0, _util.vals)(this.bins).map(bin => {
      const transform = [];
      const [binAs, ...remainingAs] = bin.as;
      const binTrans = Object.assign({
        type: 'bin',
        field: (0, _util.replacePathInField)(bin.field),
        as: binAs,
        signal: bin.signal
      }, bin.bin);

      if (!bin.bin.extent && bin.extentSignal) {
        transform.push({
          type: 'extent',
          field: (0, _util.replacePathInField)(bin.field),
          signal: bin.extentSignal
        });
        binTrans.extent = {
          signal: bin.extentSignal
        };
      }

      transform.push(binTrans);

      for (const as of remainingAs) {
        for (let i = 0; i < 2; i++) {
          transform.push({
            type: 'formula',
            expr: (0, _channeldef.vgField)({
              field: binAs[i]
            }, {
              expr: 'datum'
            }),
            as: as[i]
          });
        }
      }

      if (bin.formula) {
        transform.push({
          type: 'formula',
          expr: bin.formula,
          as: bin.formulaAs
        });
      }

      return transform;
    }));
  }

}

exports.BinNode = BinNode;
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../bin":"node_modules/vega-lite/build/src/bin.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../util":"node_modules/vega-lite/build/src/util.js","../common":"node_modules/vega-lite/build/src/compile/common.js","../model":"node_modules/vega-lite/build/src/compile/model.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/source.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SourceNode = void 0;

var _data = require("../../data");

var _util = require("../../util");

var _dataflow = require("./dataflow");

class SourceNode extends _dataflow.DataFlowNode {
  constructor(data) {
    super(null); // source cannot have parent

    data = data || {
      name: 'source'
    };
    let format;

    if (!(0, _data.isGenerator)(data)) {
      format = data.format ? Object.assign({}, (0, _util.omit)(data.format, ['parse'])) : {};
    }

    if ((0, _data.isInlineData)(data)) {
      this._data = {
        values: data.values
      };
    } else if ((0, _data.isUrlData)(data)) {
      this._data = {
        url: data.url
      };

      if (!format.type) {
        // Extract extension from URL using snippet from
        // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript
        let defaultExtension = /(?:\.([^.]+))?$/.exec(data.url)[1];

        if (!(0, _util.contains)(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {
          defaultExtension = 'json';
        } // defaultExtension has type string but we ensure that it is DataFormatType above


        format.type = defaultExtension;
      }
    } else if ((0, _data.isSphereGenerator)(data)) {
      // hardwire GeoJSON sphere data into output specification
      this._data = {
        values: [{
          type: 'Sphere'
        }]
      };
    } else if ((0, _data.isNamedData)(data) || (0, _data.isGenerator)(data)) {
      this._data = {};
    } // set flag to check if generator


    this._generator = (0, _data.isGenerator)(data); // any dataset can be named

    if (data.name) {
      this._name = data.name;
    }

    if (format && (0, _util.keys)(format).length > 0) {
      this._data.format = format;
    }
  }

  get data() {
    return this._data;
  }

  hasName() {
    return !!this._name;
  }

  get isGenerator() {
    return this._generator;
  }

  get dataName() {
    return this._name;
  }

  set dataName(name) {
    this._name = name;
  }

  set parent(parent) {
    throw new Error('Source nodes have to be roots.');
  }

  remove() {
    throw new Error('Source nodes are roots and cannot be removed.');
  }

  hash() {
    throw new Error('Cannot hash sources');
  }

  assemble() {
    return Object.assign({
      name: this._name
    }, this._data, {
      transform: []
    });
  }

}

exports.SourceNode = SourceNode;
},{"../../data":"node_modules/vega-lite/build/src/data.js","../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/debug.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debug = debug;
exports.draw = draw;
exports.checkLinks = checkLinks;

var _util = require("./../../util");

var _source = require("./source");

/**
 * Print debug information for dataflow tree.
 */
function debug(node) {
  console.log(`${node.constructor.name}${node.debugName ? `(${node.debugName})` : ''} -> ${node.children.map(c => {
    return `${c.constructor.name}${c.debugName ? ` (${c.debugName})` : ''}`;
  })}`);
  console.log(node);
  node.children.forEach(debug);
}
/**
 * Print the dataflow tree as graphviz.
 *
 * Render the output in http://viz-js.com/.
 */


function draw(roots) {
  // check the graph before printing it since the logic below assumes a consistent graph
  checkLinks(roots);
  const nodes = {};
  const edges = [];

  function getId(node) {
    let id = node['__uniqueid'];

    if (id === undefined) {
      id = (0, _util.uniqueId)();
      node['__uniqueid'] = id;
    }

    return id;
  }

  function getLabel(node) {
    const out = [node.constructor.name.slice(0, -4)];

    if (node.debugName) {
      out.push(`<i>${node.debugName}</i>`);
    } else if (node instanceof _source.SourceNode) {
      if (node.data.name || node.data.url) {
        out.push(`<i>${node.data.name || node.data.url}</i>`);
      }
    }

    const dep = node.dependentFields();

    if (dep.size) {
      out.push(`<font color="grey" point-size="10">IN:</font> ${[...node.dependentFields()].join(', ')}`);
    }

    const prod = node.producedFields();

    if (prod.size) {
      out.push(`<font color="grey" point-size="10">OUT:</font> ${[...node.producedFields()].join(', ')}`);
    }

    return out.join('<br/>');
  }

  function collector(node) {
    const id = getId(node);
    nodes[id] = {
      id: id,
      label: getLabel(node),
      hash: node instanceof _source.SourceNode ? node.data.url || node.data.name || node.debugName : String(node.hash()).replace(/"/g, '')
    };

    for (const child of node.children) {
      edges.push([id, getId(child)]);
      collector(child);
    }
  }

  roots.forEach(n => collector(n));
  const dot = `digraph DataFlow {
  rankdir = TB;
  node [shape=record]
  ${(0, _util.entries)(nodes).map(({
    key,
    value
  }) => `  "${key}" [
    label = <${value.label}>;
    tooltip = "[${value.id}]&#010;${value.hash}"
  ]`).join('\n')}

  ${edges.map(([source, target]) => `"${source}" -> "${target}"`).join(' ')}
}`;
  console.log(dot);
  return dot;
}
/**
 * Iterates over a dataflow graph and checks whether all links are consistent.
 */


function checkLinks(nodes) {
  for (const node of nodes) {
    for (const child of node.children) {
      if (child.parent !== node) {
        console.error('Dataflow graph is inconsistent.', node, child);
        return false;
      }
    }

    if (!checkLinks(node.children)) {
      return false;
    }
  }

  return true;
}
},{"./../../util":"node_modules/vega-lite/build/src/util.js","./source":"node_modules/vega-lite/build/src/compile/data/source.js"}],"node_modules/vega-lite/build/src/compile/data/graticule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraticuleNode = void 0;

var _dataflow = require("./dataflow");

class GraticuleNode extends _dataflow.DataFlowNode {
  constructor(parent, params) {
    super(parent);
    this.params = params;
  }

  clone() {
    return new GraticuleNode(null, this.params);
  }

  assemble() {
    return Object.assign({
      type: 'graticule'
    }, this.params === true ? {} : this.params);
  }

}

exports.GraticuleNode = GraticuleNode;
},{"./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/sequence.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SequenceNode = void 0;

var _dataflow = require("./dataflow");

class SequenceNode extends _dataflow.DataFlowNode {
  constructor(parent, params) {
    super(parent);
    this.params = params;
  }

  clone() {
    return new SequenceNode(null, this.params);
  }

  producedFields() {
    return new Set([this.params.as || 'data']);
  }

  assemble() {
    return Object.assign({
      type: 'sequence'
    }, this.params);
  }

}

exports.SequenceNode = SequenceNode;
},{"./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/optimizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDataSourceNode = isDataSourceNode;
exports.TopDownOptimizer = exports.BottomUpOptimizer = void 0;

var _source = require("./source");

var _graticule = require("./graticule");

var _sequence = require("./sequence");

/**
 * Whether this dataflow node is the source of the dataflow that produces data i.e. a source or a generator.
 */
function isDataSourceNode(node) {
  return node instanceof _source.SourceNode || node instanceof _graticule.GraticuleNode || node instanceof _sequence.SequenceNode;
}
/**
 * Abstract base class for BottomUpOptimizer and TopDownOptimizer.
 * Contains only mutation handling logic. Subclasses need to implement iteration logic.
 */


class OptimizerBase {
  constructor() {
    this._mutated = false;
  } // Once true, _mutated is never set to false


  setMutated() {
    this._mutated = true;
  }

  get mutatedFlag() {
    return this._mutated;
  }

}
/**
 * Starts from a node and runs the optimization function(the "run" method) upwards to the root,
 * depending on the continueFlag and mutatedFlag values returned by the optimization function.
 */


class BottomUpOptimizer extends OptimizerBase {
  constructor() {
    super();
    this._continue = false;
  }

  setContinue() {
    this._continue = true;
  }

  get continueFlag() {
    return this._continue;
  }

  get flags() {
    return {
      continueFlag: this.continueFlag,
      mutatedFlag: this.mutatedFlag
    };
  }

  set flags({
    continueFlag,
    mutatedFlag
  }) {
    if (continueFlag) {
      this.setContinue();
    }

    if (mutatedFlag) {
      this.setMutated();
    }
  }
  /**
   * Reset the state of the optimizer after it has completed a run from the bottom of the tree to the top.
   */


  reset() {// do nothing
  }

  optimizeNextFromLeaves(node) {
    if (isDataSourceNode(node)) {
      return false;
    }

    const next = node.parent;
    const {
      continueFlag
    } = this.run(node);

    if (continueFlag) {
      this.optimizeNextFromLeaves(next);
    }

    return this.mutatedFlag;
  }

}
/**
 * The optimizer function( the "run" method), is invoked on the given node and then continues recursively.
 */


exports.BottomUpOptimizer = BottomUpOptimizer;

class TopDownOptimizer extends OptimizerBase {}

exports.TopDownOptimizer = TopDownOptimizer;
},{"./source":"node_modules/vega-lite/build/src/compile/data/source.js","./graticule":"node_modules/vega-lite/build/src/compile/data/graticule.js","./sequence":"node_modules/vega-lite/build/src/compile/data/sequence.js"}],"node_modules/vega-lite/build/src/compile/data/aggregate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AggregateNode = void 0;

var _aggregate = require("../../aggregate");

var _bin = require("../../bin");

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var log = _interopRequireWildcard(require("../../log"));

var _util = require("../../util");

var _dataflow = require("./dataflow");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function addDimension(dims, channel, fieldDef, model) {
  if ((0, _channeldef.isTypedFieldDef)(fieldDef) && (0, _bin.isBinning)(fieldDef.bin)) {
    dims.add((0, _channeldef.vgField)(fieldDef, {}));
    dims.add((0, _channeldef.vgField)(fieldDef, {
      binSuffix: 'end'
    }));

    if ((0, _channeldef.binRequiresRange)(fieldDef, channel)) {
      dims.add((0, _channeldef.vgField)(fieldDef, {
        binSuffix: 'range'
      }));
    }
  } else if ((0, _channel.isGeoPositionChannel)(channel)) {
    const posChannel = (0, _channel.getPositionChannelFromLatLong)(channel);
    dims.add(model.getName(posChannel));
  } else {
    dims.add((0, _channeldef.vgField)(fieldDef));
  }

  return dims;
}

function mergeMeasures(parentMeasures, childMeasures) {
  for (const field of (0, _util.keys)(childMeasures)) {
    // when we merge a measure, we either have to add an aggregation operator or even a new field
    const ops = childMeasures[field];

    for (const op of (0, _util.keys)(ops)) {
      if (field in parentMeasures) {
        // add operator to existing measure field
        parentMeasures[field][op] = new Set([...(parentMeasures[field][op] || []), ...ops[op]]);
      } else {
        parentMeasures[field] = {
          [op]: ops[op]
        };
      }
    }
  }
}

class AggregateNode extends _dataflow.DataFlowNode {
  /**
   * @param dimensions string set for dimensions
   * @param measures dictionary mapping field name => dict of aggregation functions and names to use
   */
  constructor(parent, dimensions, measures) {
    super(parent);
    this.dimensions = dimensions;
    this.measures = measures;
  }

  clone() {
    return new AggregateNode(null, new Set(this.dimensions), (0, _util.duplicate)(this.measures));
  }

  get groupBy() {
    return this.dimensions;
  }

  static makeFromEncoding(parent, model) {
    let isAggregate = false;
    model.forEachFieldDef(fd => {
      if (fd.aggregate) {
        isAggregate = true;
      }
    });
    const meas = {};
    const dims = new Set();

    if (!isAggregate) {
      // no need to create this node if the model has no aggregation
      return null;
    }

    model.forEachFieldDef((fieldDef, channel) => {
      const {
        aggregate,
        field
      } = fieldDef;

      if (aggregate) {
        if (aggregate === 'count') {
          meas['*'] = meas['*'] || {};
          meas['*']['count'] = new Set([(0, _channeldef.vgField)(fieldDef, {
            forAs: true
          })]);
        } else {
          if ((0, _aggregate.isArgminDef)(aggregate) || (0, _aggregate.isArgmaxDef)(aggregate)) {
            const op = (0, _aggregate.isArgminDef)(aggregate) ? 'argmin' : 'argmax';
            const argField = aggregate[op];
            meas[argField] = meas[argField] || {};
            meas[argField][op] = new Set([(0, _channeldef.vgField)({
              op,
              field: argField
            }, {
              forAs: true
            })]);
          } else {
            meas[field] = meas[field] || {};
            meas[field][aggregate] = new Set([(0, _channeldef.vgField)(fieldDef, {
              forAs: true
            })]);
          } // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain


          if ((0, _channel.isScaleChannel)(channel) && model.scaleDomain(channel) === 'unaggregated') {
            meas[field] = meas[field] || {};
            meas[field]['min'] = new Set([(0, _channeldef.vgField)({
              field,
              aggregate: 'min'
            }, {
              forAs: true
            })]);
            meas[field]['max'] = new Set([(0, _channeldef.vgField)({
              field,
              aggregate: 'max'
            }, {
              forAs: true
            })]);
          }
        }
      } else {
        addDimension(dims, channel, fieldDef, model);
      }
    });

    if (dims.size + (0, _util.keys)(meas).length === 0) {
      return null;
    }

    return new AggregateNode(parent, dims, meas);
  }

  static makeFromTransform(parent, t) {
    const dims = new Set();
    const meas = {};

    for (const s of t.aggregate) {
      const {
        op,
        field,
        as
      } = s;

      if (op) {
        if (op === 'count') {
          meas['*'] = meas['*'] || {};
          meas['*']['count'] = new Set([as ? as : (0, _channeldef.vgField)(s, {
            forAs: true
          })]);
        } else {
          meas[field] = meas[field] || {};
          meas[field][op] = new Set([as ? as : (0, _channeldef.vgField)(s, {
            forAs: true
          })]);
        }
      }
    }

    for (const s of t.groupby || []) {
      dims.add(s);
    }

    if (dims.size + (0, _util.keys)(meas).length === 0) {
      return null;
    }

    return new AggregateNode(parent, dims, meas);
  }

  merge(other) {
    if ((0, _util.setEqual)(this.dimensions, other.dimensions)) {
      mergeMeasures(this.measures, other.measures);
      return true;
    } else {
      log.debug('different dimensions, cannot merge');
      return false;
    }
  }

  addDimensions(fields) {
    fields.forEach(this.dimensions.add, this.dimensions);
  }

  dependentFields() {
    return new Set([...this.dimensions, ...(0, _util.keys)(this.measures)]);
  }

  producedFields() {
    const out = new Set();

    for (const field of (0, _util.keys)(this.measures)) {
      for (const op of (0, _util.keys)(this.measures[field])) {
        const m = this.measures[field][op];

        if (m.size === 0) {
          out.add(`${op}_${field}`);
        } else {
          m.forEach(out.add, out);
        }
      }
    }

    return out;
  }

  hash() {
    return `Aggregate ${(0, _util.hash)({
      dimensions: this.dimensions,
      measures: this.measures
    })}`;
  }

  assemble() {
    const ops = [];
    const fields = [];
    const as = [];

    for (const field of (0, _util.keys)(this.measures)) {
      for (const op of (0, _util.keys)(this.measures[field])) {
        for (const alias of this.measures[field][op]) {
          as.push(alias);
          ops.push(op);
          fields.push(field === '*' ? null : (0, _util.replacePathInField)(field));
        }
      }
    }

    const result = {
      type: 'aggregate',
      groupby: [...this.dimensions],
      ops,
      fields,
      as
    };
    return result;
  }

}

exports.AggregateNode = AggregateNode;
},{"../../aggregate":"node_modules/vega-lite/build/src/aggregate.js","../../bin":"node_modules/vega-lite/build/src/bin.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/facet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FacetNode = void 0;

var _vegaUtil = require("vega-util");

var _bin = require("../../bin");

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var log = _interopRequireWildcard(require("../../log"));

var _scale = require("../../scale");

var _sort = require("../../sort");

var _util = require("../../util");

var _vega = require("../../vega.schema");

var _component = require("../header/component");

var _domain = require("../scale/domain");

var _calculate = require("./calculate");

var _dataflow = require("./dataflow");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * A node that helps us track what fields we are faceting by.
 */
class FacetNode extends _dataflow.DataFlowNode {
  /**
   * @param model The facet model.
   * @param name The name that this facet source will have.
   * @param data The source data for this facet data.
   */
  constructor(parent, model, name, data) {
    super(parent);
    this.model = model;
    this.name = name;
    this.data = data;

    for (const channel of _channel.FACET_CHANNELS) {
      const fieldDef = model.facet[channel];

      if (fieldDef) {
        const {
          bin,
          sort
        } = fieldDef;
        this[channel] = Object.assign({
          name: model.getName(`${channel}_domain`),
          fields: [(0, _channeldef.vgField)(fieldDef), ...((0, _bin.isBinning)(bin) ? [(0, _channeldef.vgField)(fieldDef, {
            binSuffix: 'end'
          })] : [])]
        }, (0, _sort.isSortField)(sort) ? {
          sortField: sort
        } : (0, _vegaUtil.isArray)(sort) ? {
          sortIndexField: (0, _calculate.sortArrayIndexField)(fieldDef, channel)
        } : {});
      }
    }

    this.childModel = model.child;
  }

  hash() {
    let out = `Facet`;

    for (const channel of _channel.FACET_CHANNELS) {
      if (this[channel]) {
        out += ` ${channel.charAt(0)}:${(0, _util.hash)(this[channel])}`;
      }
    }

    return out;
  }

  get fields() {
    const f = [];

    for (const channel of _channel.FACET_CHANNELS) {
      if (this[channel] && this[channel].fields) {
        f.push(...this[channel].fields);
      }
    }

    return f;
  }
  /**
   * The name to reference this source is its name.
   */


  getSource() {
    return this.name;
  }

  getChildIndependentFieldsWithStep() {
    const childIndependentFieldsWithStep = {};

    for (const channel of ['x', 'y']) {
      const childScaleComponent = this.childModel.component.scales[channel];

      if (childScaleComponent && !childScaleComponent.merged) {
        // independent scale
        const type = childScaleComponent.get('type');
        const range = childScaleComponent.get('range');

        if ((0, _scale.hasDiscreteDomain)(type) && (0, _vega.isVgRangeStep)(range)) {
          const domain = (0, _domain.assembleDomain)(this.childModel, channel);
          const field = (0, _domain.getFieldFromDomain)(domain);

          if (field) {
            childIndependentFieldsWithStep[channel] = field;
          } else {
            log.warn('Unknown field for ${channel}.  Cannot calculate view size.');
          }
        }
      }
    }

    return childIndependentFieldsWithStep;
  }

  assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep) {
    const childChannel = {
      row: 'y',
      column: 'x'
    }[channel];
    const fields = [];
    const ops = [];
    const as = [];

    if (childIndependentFieldsWithStep && childIndependentFieldsWithStep[childChannel]) {
      if (crossedDataName) {
        // If there is a crossed data, calculate max
        fields.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);
        ops.push('max');
      } else {
        // If there is no crossed data, just calculate distinct
        fields.push(childIndependentFieldsWithStep[childChannel]);
        ops.push('distinct');
      } // Although it is technically a max, just name it distinct so it's easier to refer to it


      as.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);
    }

    const {
      sortField,
      sortIndexField
    } = this[channel];

    if (sortField) {
      const {
        op = _sort.DEFAULT_SORT_OP,
        field
      } = sortField;
      fields.push(field);
      ops.push(op);
      as.push((0, _channeldef.vgField)(sortField, {
        forAs: true
      }));
    } else if (sortIndexField) {
      fields.push(sortIndexField);
      ops.push('max');
      as.push(sortIndexField);
    }

    return {
      name: this[channel].name,
      // Use data from the crossed one if it exist
      source: crossedDataName || this.data,
      transform: [Object.assign({
        type: 'aggregate',
        groupby: this[channel].fields
      }, fields.length ? {
        fields,
        ops,
        as
      } : {})]
    };
  }

  assembleFacetHeaderData(childIndependentFieldsWithStep) {
    const {
      columns
    } = this.model.layout;
    const {
      layoutHeaders
    } = this.model.component;
    const data = [];
    const hasSharedAxis = {};

    for (const headerChannel of _component.HEADER_CHANNELS) {
      for (const headerType of _component.HEADER_TYPES) {
        const headers = layoutHeaders[headerChannel] && layoutHeaders[headerChannel][headerType] || [];

        for (const header of headers) {
          if (header.axes && header.axes.length > 0) {
            hasSharedAxis[headerChannel] = true;
            break;
          }
        }
      }

      if (hasSharedAxis[headerChannel]) {
        const cardinality = `length(data("${this.facet.name}"))`;
        const stop = headerChannel === 'row' ? columns ? {
          signal: `ceil(${cardinality} / ${columns})`
        } : 1 : columns ? {
          signal: `min(${cardinality}, ${columns})`
        } : {
          signal: cardinality
        };
        data.push({
          name: `${this.facet.name}_${headerChannel}`,
          transform: [{
            type: 'sequence',
            start: 0,
            stop
          }]
        });
      }
    }

    const {
      row,
      column
    } = hasSharedAxis;

    if (row || column) {
      data.unshift(this.assembleRowColumnHeaderData('facet', null, childIndependentFieldsWithStep));
    }

    return data;
  }

  assemble() {
    const data = [];
    let crossedDataName = null;
    const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();
    const {
      column,
      row,
      facet
    } = this;

    if (column && row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {
      // Need to create a cross dataset to correctly calculate cardinality
      crossedDataName = `cross_${this.column.name}_${this.row.name}`;
      const fields = [].concat(childIndependentFieldsWithStep.x || [], childIndependentFieldsWithStep.y || []);
      const ops = fields.map(() => 'distinct');
      data.push({
        name: crossedDataName,
        source: this.data,
        transform: [{
          type: 'aggregate',
          groupby: this.fields,
          fields,
          ops
        }]
      });
    }

    for (const channel of [_channel.COLUMN, _channel.ROW]) {
      if (this[channel]) {
        data.push(this.assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep));
      }
    }

    if (facet) {
      const facetData = this.assembleFacetHeaderData(childIndependentFieldsWithStep);

      if (facetData) {
        data.push(...facetData);
      }
    }

    return data;
  }

}

exports.FacetNode = FacetNode;
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../bin":"node_modules/vega-lite/build/src/bin.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../sort":"node_modules/vega-lite/build/src/sort.js","../../util":"node_modules/vega-lite/build/src/util.js","../../vega.schema":"node_modules/vega-lite/build/src/vega.schema.js","../header/component":"node_modules/vega-lite/build/src/compile/header/component.js","../scale/domain":"node_modules/vega-lite/build/src/compile/scale/domain.js","./calculate":"node_modules/vega-lite/build/src/compile/data/calculate.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterNode = void 0;

var _util = require("../../util");

var _predicate = require("../predicate");

var _dataflow = require("./dataflow");

var _expressions = require("./expressions");

class FilterNode extends _dataflow.DataFlowNode {
  constructor(parent, model, filter) {
    super(parent);
    this.model = model;
    this.filter = filter; // TODO: refactor this to not take a node and
    // then add a static function makeFromOperand and make the constructor take only an expression

    this.expr = (0, _predicate.expression)(this.model, this.filter, this);
    this._dependentFields = (0, _expressions.getDependentFields)(this.expr);
  }

  clone() {
    return new FilterNode(null, this.model, (0, _util.duplicate)(this.filter));
  }

  dependentFields() {
    return this._dependentFields;
  }

  assemble() {
    return {
      type: 'filter',
      expr: this.expr
    };
  }

  hash() {
    return `Filter ${this.expr}`;
  }

}

exports.FilterNode = FilterNode;
},{"../../util":"node_modules/vega-lite/build/src/util.js","../predicate":"node_modules/vega-lite/build/src/compile/predicate.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js","./expressions":"node_modules/vega-lite/build/src/compile/data/expressions.js"}],"node_modules/vega-lite/build/src/compile/data/formatparse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParseNode = void 0;

var _vegaUtil = require("vega-util");

var _aggregate = require("../../aggregate");

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _data = require("../../data");

var _datetime = require("../../datetime");

var log = _interopRequireWildcard(require("../../log"));

var _logical = require("../../logical");

var _mark = require("../../mark");

var _predicate = require("../../predicate");

var _sort = require("../../sort");

var _util = require("../../util");

var _model = require("../model");

var _split = require("../split");

var _dataflow = require("./dataflow");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * Remove quotes from a string.
 */
function unquote(pattern) {
  if (pattern[0] === "'" && pattern[pattern.length - 1] === "'" || pattern[0] === '"' && pattern[pattern.length - 1] === '"') {
    return pattern.slice(1, -1);
  }

  return pattern;
}
/**
 * @param field The field.
 * @param parse What to parse the field as.
 */


function parseExpression(field, parse) {
  const f = (0, _util.accessPathWithDatum)(field);

  if (parse === 'number') {
    return `toNumber(${f})`;
  } else if (parse === 'boolean') {
    return `toBoolean(${f})`;
  } else if (parse === 'string') {
    return `toString(${f})`;
  } else if (parse === 'date') {
    return `toDate(${f})`;
  } else if (parse === 'flatten') {
    return f;
  } else if (parse.indexOf('date:') === 0) {
    const specifier = unquote(parse.slice(5, parse.length));
    return `timeParse(${f},'${specifier}')`;
  } else if (parse.indexOf('utc:') === 0) {
    const specifier = unquote(parse.slice(4, parse.length));
    return `utcParse(${f},'${specifier}')`;
  } else {
    log.warn(log.message.unrecognizedParse(parse));
    return null;
  }
}

class ParseNode extends _dataflow.DataFlowNode {
  clone() {
    return new ParseNode(null, (0, _util.duplicate)(this._parse));
  }

  constructor(parent, parse) {
    super(parent);
    this._parse = parse;
  }

  hash() {
    return `Parse ${(0, _util.hash)(this._parse)}`;
  }
  /**
   * Creates a parse node from a data.format.parse and updates ancestorParse.
   */


  static makeExplicit(parent, model, ancestorParse) {
    // Custom parse
    let explicit = {};
    const data = model.data;

    if (!(0, _data.isGenerator)(data) && data && data.format && data.format.parse) {
      explicit = data.format.parse;
    }

    return this.makeWithAncestors(parent, explicit, {}, ancestorParse);
  }

  static makeImplicitFromFilterTransform(parent, transform, ancestorParse) {
    const parse = {};
    (0, _logical.forEachLeaf)(transform.filter, filter => {
      if ((0, _predicate.isFieldPredicate)(filter)) {
        // Automatically add a parse node for filters with filter objects
        let val = null; // For EqualFilter, just use the equal property.
        // For RangeFilter and OneOfFilter, all array members should have
        // the same type, so we only use the first one.

        if ((0, _predicate.isFieldEqualPredicate)(filter)) {
          val = filter.equal;
        } else if ((0, _predicate.isFieldRangePredicate)(filter)) {
          val = filter.range[0];
        } else if ((0, _predicate.isFieldOneOfPredicate)(filter)) {
          val = (filter.oneOf || filter['in'])[0];
        } // else -- for filter expression, we can't infer anything


        if (val) {
          if ((0, _datetime.isDateTime)(val)) {
            parse[filter.field] = 'date';
          } else if ((0, _vegaUtil.isNumber)(val)) {
            parse[filter.field] = 'number';
          } else if ((0, _vegaUtil.isString)(val)) {
            parse[filter.field] = 'string';
          }
        }

        if (filter.timeUnit) {
          parse[filter.field] = 'date';
        }
      }
    });

    if ((0, _util.keys)(parse).length === 0) {
      return null;
    }

    return this.makeWithAncestors(parent, {}, parse, ancestorParse);
  }
  /**
   * Creates a parse node for implicit parsing from a model and updates ancestorParse.
   */


  static makeImplicitFromEncoding(parent, model, ancestorParse) {
    const implicit = {};

    function add(fieldDef) {
      if ((0, _channeldef.isTimeFormatFieldDef)(fieldDef)) {
        implicit[fieldDef.field] = 'date';
      } else if (fieldDef.type === 'quantitative' && (0, _aggregate.isMinMaxOp)(fieldDef.aggregate) // we need to parse numbers to support correct min and max
      ) {
          implicit[fieldDef.field] = 'number';
        } else if ((0, _util.accessPathDepth)(fieldDef.field) > 1) {
        // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.
        // (Parsing numbers / dates already flattens numeric and temporal fields.)
        if (!(fieldDef.field in implicit)) {
          implicit[fieldDef.field] = 'flatten';
        }
      } else if ((0, _channeldef.isScaleFieldDef)(fieldDef) && (0, _sort.isSortField)(fieldDef.sort) && (0, _util.accessPathDepth)(fieldDef.sort.field) > 1) {
        // Flatten fields that we sort by but that are not otherwise flattened.
        if (!(fieldDef.sort.field in implicit)) {
          implicit[fieldDef.sort.field] = 'flatten';
        }
      }
    }

    if ((0, _model.isUnitModel)(model) || (0, _model.isFacetModel)(model)) {
      // Parse encoded fields
      model.forEachFieldDef((fieldDef, channel) => {
        if ((0, _channeldef.isTypedFieldDef)(fieldDef)) {
          add(fieldDef);
        } else {
          const mainChannel = (0, _channel.getMainRangeChannel)(channel);
          const mainFieldDef = model.fieldDef(mainChannel);
          add(Object.assign({}, fieldDef, {
            type: mainFieldDef.type
          }));
        }
      });
    } // Parse quantitative dimension fields of path marks as numbers so that we sort them correctly.


    if ((0, _model.isUnitModel)(model)) {
      const {
        mark,
        markDef,
        encoding
      } = model;

      if ((0, _mark.isPathMark)(mark) && // No need to sort by dimension if we have a connected scatterplot (order channel is present)
      !model.encoding.order) {
        const dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';
        const dimensionChannelDef = encoding[dimensionChannel];

        if ((0, _channeldef.isFieldDef)(dimensionChannelDef) && dimensionChannelDef.type === 'quantitative' && !(dimensionChannelDef.field in implicit)) {
          implicit[dimensionChannelDef.field] = 'number';
        }
      }
    }

    return this.makeWithAncestors(parent, {}, implicit, ancestorParse);
  }
  /**
   * Creates a parse node from "explicit" parse and "implicit" parse and updates ancestorParse.
   */


  static makeWithAncestors(parent, explicit, implicit, ancestorParse) {
    // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as "derived"). We also don't need to flatten a field that has already been parsed.
    for (const field of (0, _util.keys)(implicit)) {
      const parsedAs = ancestorParse.getWithExplicit(field);

      if (parsedAs.value !== undefined) {
        // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.
        if (parsedAs.explicit || parsedAs.value === implicit[field] || parsedAs.value === 'derived' || implicit[field] === 'flatten') {
          delete implicit[field];
        } else {
          log.warn(log.message.differentParse(field, implicit[field], parsedAs.value));
        }
      }
    }

    for (const field of (0, _util.keys)(explicit)) {
      const parsedAs = ancestorParse.get(field);

      if (parsedAs !== undefined) {
        // Don't parse a field again if it has been parsed with the same type already.
        if (parsedAs === explicit[field]) {
          delete explicit[field];
        } else {
          log.warn(log.message.differentParse(field, explicit[field], parsedAs));
        }
      }
    }

    const parse = new _split.Split(explicit, implicit); // add the format parse from this model so that children don't parse the same field again

    ancestorParse.copyAll(parse); // copy only non-null parses

    const p = {};

    for (const key of (0, _util.keys)(parse.combine())) {
      const val = parse.get(key);

      if (val !== null) {
        p[key] = val;
      }
    }

    if ((0, _util.keys)(p).length === 0 || ancestorParse.parseNothing) {
      return null;
    }

    return new ParseNode(parent, p);
  }

  get parse() {
    return this._parse;
  }

  merge(other) {
    this._parse = Object.assign({}, this._parse, other.parse);
    other.remove();
  }
  /**
   * Assemble an object for Vega's format.parse property.
   */


  assembleFormatParse() {
    const formatParse = {};

    for (const field of (0, _util.keys)(this._parse)) {
      const p = this._parse[field];

      if ((0, _util.accessPathDepth)(field) === 1) {
        formatParse[field] = p;
      }
    }

    return formatParse;
  } // format parse depends and produces all fields in its parse


  producedFields() {
    return new Set((0, _util.keys)(this._parse));
  }

  dependentFields() {
    return new Set((0, _util.keys)(this._parse));
  }

  assembleTransforms(onlyNested = false) {
    return (0, _util.keys)(this._parse).filter(field => onlyNested ? (0, _util.accessPathDepth)(field) > 1 : true).map(field => {
      const expr = parseExpression(field, this._parse[field]);

      if (!expr) {
        return null;
      }

      const formula = {
        type: 'formula',
        expr,
        as: (0, _util.removePathFromField)(field) // Vega output is always flattened

      };
      return formula;
    }).filter(t => t !== null);
  }

}

exports.ParseNode = ParseNode;
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../aggregate":"node_modules/vega-lite/build/src/aggregate.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../data":"node_modules/vega-lite/build/src/data.js","../../datetime":"node_modules/vega-lite/build/src/datetime.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../logical":"node_modules/vega-lite/build/src/logical.js","../../mark":"node_modules/vega-lite/build/src/mark.js","../../predicate":"node_modules/vega-lite/build/src/predicate.js","../../sort":"node_modules/vega-lite/build/src/sort.js","../../util":"node_modules/vega-lite/build/src/util.js","../model":"node_modules/vega-lite/build/src/compile/model.js","../split":"node_modules/vega-lite/build/src/compile/split.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/joinaggregate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JoinAggregateTransformNode = void 0;

var _channeldef = require("../../channeldef");

var _util = require("../../util");

var _util2 = require("./../../util");

var _dataflow = require("./dataflow");

/**
 * A class for the join aggregate transform nodes.
 */
class JoinAggregateTransformNode extends _dataflow.DataFlowNode {
  constructor(parent, transform) {
    super(parent);
    this.transform = transform;
  }

  clone() {
    return new JoinAggregateTransformNode(null, (0, _util.duplicate)(this.transform));
  }

  addDimensions(fields) {
    this.transform.groupby = (0, _util2.unique)(this.transform.groupby.concat(fields), d => d);
  }

  dependentFields() {
    const out = new Set();

    if (this.transform.groupby) {
      this.transform.groupby.forEach(f => out.add(f));
    }

    this.transform.joinaggregate.map(w => w.field).filter(f => f !== undefined).forEach(f => out.add(f));
    return out;
  }

  producedFields() {
    return new Set(this.transform.joinaggregate.map(this.getDefaultName));
  }

  getDefaultName(joinAggregateFieldDef) {
    return joinAggregateFieldDef.as || (0, _channeldef.vgField)(joinAggregateFieldDef);
  }

  hash() {
    return `JoinAggregateTransform ${(0, _util.hash)(this.transform)}`;
  }

  assemble() {
    const fields = [];
    const ops = [];
    const as = [];

    for (const joinaggregate of this.transform.joinaggregate) {
      ops.push(joinaggregate.op);
      as.push(this.getDefaultName(joinaggregate));
      fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);
    }

    const groupby = this.transform.groupby;
    return Object.assign({
      type: 'joinaggregate',
      as,
      ops,
      fields
    }, groupby !== undefined ? {
      groupby
    } : {});
  }

}

exports.JoinAggregateTransformNode = JoinAggregateTransformNode;
},{"../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../util":"node_modules/vega-lite/build/src/util.js","./../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/stack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StackNode = void 0;

var _vegaUtil = require("vega-util");

var _channeldef = require("../../channeldef");

var _util = require("../../util");

var _common = require("../common");

var _dataflow = require("./dataflow");

function getStackByFields(model) {
  return model.stack.stackBy.reduce((fields, by) => {
    const fieldDef = by.fieldDef;

    const _field = (0, _channeldef.vgField)(fieldDef);

    if (_field) {
      fields.push(_field);
    }

    return fields;
  }, []);
}

function isValidAsArray(as) {
  return (0, _vegaUtil.isArray)(as) && as.every(s => (0, _vegaUtil.isString)(s)) && as.length > 1;
}

class StackNode extends _dataflow.DataFlowNode {
  clone() {
    return new StackNode(null, (0, _util.duplicate)(this._stack));
  }

  constructor(parent, stack) {
    super(parent);
    this._stack = stack;
  }

  static makeFromTransform(parent, stackTransform) {
    const {
      stack,
      groupby,
      as,
      offset = 'zero'
    } = stackTransform;
    const sortFields = [];
    const sortOrder = [];

    if (stackTransform.sort !== undefined) {
      for (const sortField of stackTransform.sort) {
        sortFields.push(sortField.field);
        sortOrder.push((0, _util.getFirstDefined)(sortField.order, 'ascending'));
      }
    }

    const sort = {
      field: sortFields,
      order: sortOrder
    };
    let normalizedAs;

    if (isValidAsArray(as)) {
      normalizedAs = as;
    } else if ((0, _vegaUtil.isString)(as)) {
      normalizedAs = [as, as + '_end'];
    } else {
      normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];
    }

    return new StackNode(parent, {
      stackField: stack,
      groupby,
      offset,
      sort,
      facetby: [],
      as: normalizedAs
    });
  }

  static makeFromEncoding(parent, model) {
    const stackProperties = model.stack;
    const {
      encoding
    } = model;

    if (!stackProperties) {
      return null;
    }

    let dimensionFieldDef;

    if (stackProperties.groupbyChannel) {
      const cDef = encoding[stackProperties.groupbyChannel];
      dimensionFieldDef = (0, _channeldef.getTypedFieldDef)(cDef);
    }

    const stackby = getStackByFields(model);
    const orderDef = model.encoding.order;
    let sort;

    if ((0, _vegaUtil.isArray)(orderDef) || (0, _channeldef.isFieldDef)(orderDef)) {
      sort = (0, _common.sortParams)(orderDef);
    } else {
      // default = descending by stackFields
      // FIXME is the default here correct for binned fields?
      sort = stackby.reduce((s, field) => {
        s.field.push(field);
        s.order.push('descending');
        return s;
      }, {
        field: [],
        order: []
      });
    }

    return new StackNode(parent, {
      dimensionFieldDef,
      stackField: model.vgField(stackProperties.fieldChannel),
      facetby: [],
      stackby,
      sort,
      offset: stackProperties.offset,
      impute: stackProperties.impute,
      as: [model.vgField(stackProperties.fieldChannel, {
        suffix: 'start',
        forAs: true
      }), model.vgField(stackProperties.fieldChannel, {
        suffix: 'end',
        forAs: true
      })]
    });
  }

  get stack() {
    return this._stack;
  }

  addDimensions(fields) {
    this._stack.facetby.push(...fields);
  }

  dependentFields() {
    const out = new Set();
    out.add(this._stack.stackField);
    this.getGroupbyFields().forEach(f => out.add(f));

    this._stack.facetby.forEach(f => out.add(f));

    this._stack.sort.field.forEach(f => out.add(f));

    return out;
  }

  producedFields() {
    return new Set(this._stack.as);
  }

  hash() {
    return `Stack ${(0, _util.hash)(this._stack)}`;
  }

  getGroupbyFields() {
    const {
      dimensionFieldDef,
      impute,
      groupby
    } = this._stack;

    if (dimensionFieldDef) {
      if (dimensionFieldDef.bin) {
        if (impute) {
          // For binned group by field with impute, we calculate bin_mid
          // as we cannot impute two fields simultaneously
          return [(0, _channeldef.vgField)(dimensionFieldDef, {
            binSuffix: 'mid'
          })];
        }

        return [// For binned group by field without impute, we need both bin (start) and bin_end
        (0, _channeldef.vgField)(dimensionFieldDef, {}), (0, _channeldef.vgField)(dimensionFieldDef, {
          binSuffix: 'end'
        })];
      }

      return [(0, _channeldef.vgField)(dimensionFieldDef)];
    }

    return groupby || [];
  }

  assemble() {
    const transform = [];
    const {
      facetby,
      dimensionFieldDef,
      stackField: field,
      stackby,
      sort,
      offset,
      impute,
      as
    } = this._stack; // Impute

    if (impute && dimensionFieldDef) {
      if (dimensionFieldDef.bin) {
        // As we can only impute one field at a time, we need to calculate
        // mid point for a binned field
        transform.push({
          type: 'formula',
          expr: '0.5*' + (0, _channeldef.vgField)(dimensionFieldDef, {
            expr: 'datum'
          }) + '+0.5*' + (0, _channeldef.vgField)(dimensionFieldDef, {
            expr: 'datum',
            binSuffix: 'end'
          }),
          as: (0, _channeldef.vgField)(dimensionFieldDef, {
            binSuffix: 'mid',
            forAs: true
          })
        });
      }

      transform.push({
        type: 'impute',
        field,
        groupby: [...stackby, ...facetby],
        key: (0, _channeldef.vgField)(dimensionFieldDef, {
          binSuffix: 'mid'
        }),
        method: 'value',
        value: 0
      });
    } // Stack


    transform.push({
      type: 'stack',
      groupby: [...this.getGroupbyFields(), ...facetby],
      field,
      sort,
      as,
      offset
    });
    return transform;
  }

}

exports.StackNode = StackNode;
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../util":"node_modules/vega-lite/build/src/util.js","../common":"node_modules/vega-lite/build/src/compile/common.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WindowTransformNode = void 0;

var _aggregate = require("../../aggregate");

var _channeldef = require("../../channeldef");

var _util = require("../../util");

var _util2 = require("./../../util");

var _dataflow = require("./dataflow");

/**
 * A class for the window transform nodes
 */
class WindowTransformNode extends _dataflow.DataFlowNode {
  constructor(parent, transform) {
    super(parent);
    this.transform = transform;
  }

  clone() {
    return new WindowTransformNode(null, (0, _util.duplicate)(this.transform));
  }

  addDimensions(fields) {
    this.transform.groupby = (0, _util2.unique)(this.transform.groupby.concat(fields), d => d);
  }

  dependentFields() {
    const out = new Set();
    (this.transform.groupby || []).forEach(f => out.add(f));
    (this.transform.sort || []).forEach(m => out.add(m.field));
    this.transform.window.map(w => w.field).filter(f => f !== undefined).forEach(f => out.add(f));
    return out;
  }

  producedFields() {
    return new Set(this.transform.window.map(this.getDefaultName));
  }

  getDefaultName(windowFieldDef) {
    return windowFieldDef.as || (0, _channeldef.vgField)(windowFieldDef);
  }

  hash() {
    return `WindowTransform ${(0, _util.hash)(this.transform)}`;
  }

  assemble() {
    const fields = [];
    const ops = [];
    const as = [];
    const params = [];

    for (const window of this.transform.window) {
      ops.push(window.op);
      as.push(this.getDefaultName(window));
      params.push(window.param === undefined ? null : window.param);
      fields.push(window.field === undefined ? null : window.field);
    }

    const frame = this.transform.frame;
    const groupby = this.transform.groupby;

    if (frame && frame[0] === null && frame[1] === null && ops.every(o => (0, _aggregate.isAggregateOp)(o))) {
      // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate
      return Object.assign({
        type: 'joinaggregate',
        as,
        ops: ops,
        fields
      }, groupby !== undefined ? {
        groupby
      } : {});
    }

    const sortFields = [];
    const sortOrder = [];

    if (this.transform.sort !== undefined) {
      for (const sortField of this.transform.sort) {
        sortFields.push(sortField.field);
        sortOrder.push(sortField.order || 'ascending');
      }
    }

    const sort = {
      field: sortFields,
      order: sortOrder
    };
    const ignorePeers = this.transform.ignorePeers;
    return Object.assign({
      type: 'window',
      params,
      as,
      ops,
      fields,
      sort
    }, ignorePeers !== undefined ? {
      ignorePeers
    } : {}, groupby !== undefined ? {
      groupby
    } : {}, frame !== undefined ? {
      frame
    } : {});
  }

}

exports.WindowTransformNode = WindowTransformNode;
},{"../../aggregate":"node_modules/vega-lite/build/src/aggregate.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../util":"node_modules/vega-lite/build/src/util.js","./../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/optimizers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.moveFacetDown = moveFacetDown;
exports.MergeOutputs = exports.MergeBins = exports.MergeAggregates = exports.MergeParse = exports.RemoveUnnecessaryNodes = exports.MergeTimeUnits = exports.RemoveDuplicateTimeUnits = exports.RemoveUnusedSubtrees = exports.MergeIdenticalNodes = exports.MoveParseUp = void 0;

var _data = require("../../data");

var _util = require("../../util");

var _aggregate = require("./aggregate");

var _bin = require("./bin");

var _dataflow = require("./dataflow");

var _facet = require("./facet");

var _filter = require("./filter");

var _formatparse = require("./formatparse");

var _joinaggregate = require("./joinaggregate");

var _optimize = require("./optimize");

var _optimizer = require("./optimizer");

var _stack = require("./stack");

var _timeunit = require("./timeunit");

var _window = require("./window");

/**
 * Move parse nodes up to forks.
 */
class MoveParseUp extends _optimizer.BottomUpOptimizer {
  run(node) {
    const parent = node.parent; // Move parse up by merging or swapping.

    if (node instanceof _formatparse.ParseNode) {
      if ((0, _optimizer.isDataSourceNode)(parent)) {
        return this.flags;
      }

      if (parent.numChildren() > 1) {
        // Don't move parse further up but continue with parent.
        this.setContinue();
        return this.flags;
      }

      if (parent instanceof _formatparse.ParseNode) {
        this.setMutated();
        parent.merge(node);
      } else {
        // Don't swap with nodes that produce something that the parse node depends on (e.g. lookup).
        if ((0, _util.fieldIntersection)(parent.producedFields(), node.dependentFields())) {
          this.setContinue();
          return this.flags;
        }

        this.setMutated();
        node.swapWithParent();
      }
    }

    this.setContinue();
    return this.flags;
  }

}
/**
 * Merge identical nodes at forks by comparing hashes.
 *
 * Does not need to iterate from leaves so we implement this with recursion as it's a bit simpler.
 */


exports.MoveParseUp = MoveParseUp;

class MergeIdenticalNodes extends _optimizer.TopDownOptimizer {
  mergeNodes(parent, nodes) {
    const mergedNode = nodes.shift();

    for (const node of nodes) {
      parent.removeChild(node);
      node.parent = mergedNode;
      node.remove();
    }
  }

  run(node) {
    const hashes = node.children.map(x => x.hash());
    const buckets = {};

    for (let i = 0; i < hashes.length; i++) {
      if (buckets[hashes[i]] === undefined) {
        buckets[hashes[i]] = [node.children[i]];
      } else {
        buckets[hashes[i]].push(node.children[i]);
      }
    }

    for (const k of (0, _util.keys)(buckets)) {
      if (buckets[k].length > 1) {
        this.setMutated();
        this.mergeNodes(node, buckets[k]);
      }
    }

    for (const child of node.children) {
      this.run(child);
    }

    return this.mutatedFlag;
  }

}
/**
 * Repeatedly remove leaf nodes that are not output or facet nodes.
 * The reason is that we don't need subtrees that don't have any output nodes.
 * Facet nodes are needed for the row or column domains.
 */


exports.MergeIdenticalNodes = MergeIdenticalNodes;

class RemoveUnusedSubtrees extends _optimizer.BottomUpOptimizer {
  run(node) {
    if (node instanceof _dataflow.OutputNode || node.numChildren() > 0 || node instanceof _facet.FacetNode) {
      // no need to continue with parent because it is output node or will have children (there was a fork)
      return this.flags;
    } else {
      this.setMutated();
      node.remove();
    }

    return this.flags;
  }

}
/**
 * Removes duplicate time unit nodes (as determined by the name of the
 * output field) that may be generated due to selections projected over
 * time units.
 */


exports.RemoveUnusedSubtrees = RemoveUnusedSubtrees;

class RemoveDuplicateTimeUnits extends _optimizer.BottomUpOptimizer {
  constructor() {
    super(...arguments);
    this.fields = new Set();
  }

  run(node) {
    this.setContinue();

    if (node instanceof _timeunit.TimeUnitNode) {
      const pfields = node.producedFields();

      if ((0, _util.hasIntersection)(pfields, this.fields)) {
        this.setMutated();
        node.remove();
      } else {
        this.fields = new Set([...this.fields, ...pfields]);
      }
    }

    return this.flags;
  }

  reset() {
    this.fields.clear();
  }

}
/**
 * Merge adjacent time unit nodes.
 */


exports.RemoveDuplicateTimeUnits = RemoveDuplicateTimeUnits;

class MergeTimeUnits extends _optimizer.BottomUpOptimizer {
  run(node) {
    this.setContinue();
    const parent = node.parent;
    const timeUnitChildren = parent.children.filter(x => x instanceof _timeunit.TimeUnitNode);
    const combination = timeUnitChildren.pop();

    for (const timeUnit of timeUnitChildren) {
      this.setMutated();
      combination.merge(timeUnit);
    }

    return this.flags;
  }

}
/**
 * Clones the subtree and ignores output nodes except for the leaves, which are renamed.
 */


exports.MergeTimeUnits = MergeTimeUnits;

function cloneSubtree(facet) {
  function clone(node) {
    if (!(node instanceof _facet.FacetNode)) {
      const copy = node.clone();

      if (copy instanceof _dataflow.OutputNode) {
        const newName = _optimize.FACET_SCALE_PREFIX + copy.getSource();
        copy.setSource(newName);
        facet.model.component.data.outputNodes[newName] = copy;
      } else if (copy instanceof _aggregate.AggregateNode || copy instanceof _stack.StackNode || copy instanceof _window.WindowTransformNode || copy instanceof _joinaggregate.JoinAggregateTransformNode) {
        copy.addDimensions(facet.fields);
      }

      (0, _util.flatten)(node.children.map(clone)).forEach(n => n.parent = copy);
      return [copy];
    }

    return (0, _util.flatten)(node.children.map(clone));
  }

  return clone;
}
/**
 * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.
 * After moving down the facet node, make a copy of the subtree and make it a child of the main output.
 */


function moveFacetDown(node) {
  if (node instanceof _facet.FacetNode) {
    if (node.numChildren() === 1 && !(node.children[0] instanceof _dataflow.OutputNode)) {
      // move down until we hit a fork or output node
      const child = node.children[0];

      if (child instanceof _aggregate.AggregateNode || child instanceof _stack.StackNode || child instanceof _window.WindowTransformNode || child instanceof _joinaggregate.JoinAggregateTransformNode) {
        child.addDimensions(node.fields);
      }

      child.swapWithParent();
      moveFacetDown(node);
    } else {
      // move main to facet
      const facetMain = node.model.component.data.main;
      moveMainDownToFacet(facetMain); // replicate the subtree and place it before the facet's main node

      const cloner = cloneSubtree(node);
      const copy = (0, _util.flatten)(node.children.map(cloner));

      for (const c of copy) {
        c.parent = facetMain;
      }
    }
  } else {
    node.children.map(moveFacetDown);
  }
}

function moveMainDownToFacet(node) {
  if (node instanceof _dataflow.OutputNode && node.type === _data.MAIN) {
    if (node.numChildren() === 1) {
      const child = node.children[0];

      if (!(child instanceof _facet.FacetNode)) {
        child.swapWithParent();
        moveMainDownToFacet(node);
      }
    }
  }
}
/**
 * Remove nodes that are not required starting from a root.
 */


class RemoveUnnecessaryNodes extends _optimizer.TopDownOptimizer {
  run(node) {
    // remove output nodes that are not required
    if (node instanceof _dataflow.OutputNode && !node.isRequired()) {
      this.setMutated();
      node.remove();
    }

    for (const child of node.children) {
      this.run(child);
    }

    return this.mutatedFlag;
  }

}
/**
 * Inserts an intermediate ParseNode containing all non-conflicting parse fields and removes the empty ParseNodes.
 *
 * We assume that dependent paths that do not have a parse node can be just merged.
 */


exports.RemoveUnnecessaryNodes = RemoveUnnecessaryNodes;

class MergeParse extends _optimizer.BottomUpOptimizer {
  run(node) {
    const parent = node.parent;
    const originalChildren = [...parent.children];
    const parseChildren = parent.children.filter(child => child instanceof _formatparse.ParseNode);

    if (parent.numChildren() > 1 && parseChildren.length >= 1) {
      const commonParse = {};
      const conflictingParse = new Set();

      for (const parseNode of parseChildren) {
        const parse = parseNode.parse;

        for (const k of (0, _util.keys)(parse)) {
          if (!(k in commonParse)) {
            commonParse[k] = parse[k];
          } else if (commonParse[k] !== parse[k]) {
            conflictingParse.add(k);
          }
        }
      }

      for (const field of conflictingParse) {
        delete commonParse[field];
      }

      if ((0, _util.keys)(commonParse).length !== 0) {
        this.setMutated();
        const mergedParseNode = new _formatparse.ParseNode(parent, commonParse);

        for (const childNode of originalChildren) {
          if (childNode instanceof _formatparse.ParseNode) {
            for (const key of (0, _util.keys)(commonParse)) {
              delete childNode.parse[key];
            }
          }

          parent.removeChild(childNode);
          childNode.parent = mergedParseNode; // remove empty parse nodes

          if (childNode instanceof _formatparse.ParseNode && (0, _util.keys)(childNode.parse).length === 0) {
            childNode.remove();
          }
        }
      }
    }

    this.setContinue();
    return this.flags;
  }

}

exports.MergeParse = MergeParse;

class MergeAggregates extends _optimizer.BottomUpOptimizer {
  run(node) {
    const parent = node.parent;
    const aggChildren = parent.children.filter(child => child instanceof _aggregate.AggregateNode); // Object which we'll use to map the fields which an aggregate is grouped by to
    // the set of aggregates with that grouping. This is useful as only aggregates
    // with the same group by can be merged

    const groupedAggregates = {}; // Build groupedAggregates

    for (const agg of aggChildren) {
      const groupBys = (0, _util.hash)(agg.groupBy);

      if (!(groupBys in groupedAggregates)) {
        groupedAggregates[groupBys] = [];
      }

      groupedAggregates[groupBys].push(agg);
    } // Merge aggregateNodes with same key in groupedAggregates


    for (const group of (0, _util.keys)(groupedAggregates)) {
      const mergeableAggs = groupedAggregates[group];

      if (mergeableAggs.length > 1) {
        const mergedAggs = mergeableAggs.pop();

        for (const agg of mergeableAggs) {
          if (mergedAggs.merge(agg)) {
            parent.removeChild(agg);
            agg.parent = mergedAggs;
            agg.remove();
            this.setMutated();
          }
        }
      }
    }

    this.setContinue();
    return this.flags;
  }

}
/**
 * Merge bin nodes and move them up through forks. Stop at filters and parse as we want them to stay before the bin node.
 */


exports.MergeAggregates = MergeAggregates;

class MergeBins extends _optimizer.BottomUpOptimizer {
  constructor(model) {
    super();
    this.model = model;
  }

  run(node) {
    const parent = node.parent;
    const moveBinsUp = !((0, _optimizer.isDataSourceNode)(parent) || parent instanceof _filter.FilterNode || parent instanceof _formatparse.ParseNode);
    const promotableBins = [];
    const remainingBins = [];

    for (const child of parent.children) {
      if (child instanceof _bin.BinNode) {
        if (moveBinsUp && !(0, _util.fieldIntersection)(parent.producedFields(), child.dependentFields())) {
          promotableBins.push(child);
        } else {
          remainingBins.push(child);
        }
      }
    }

    if (promotableBins.length > 0) {
      const promotedBin = promotableBins.pop();

      for (const bin of promotableBins) {
        promotedBin.merge(bin, this.model.renameSignal.bind(this.model));
      }

      this.setMutated();

      if (parent instanceof _bin.BinNode) {
        parent.merge(promotedBin, this.model.renameSignal.bind(this.model));
      } else {
        promotedBin.swapWithParent();
      }
    }

    if (remainingBins.length > 1) {
      const remainingBin = remainingBins.pop();

      for (const bin of remainingBins) {
        remainingBin.merge(bin, this.model.renameSignal.bind(this.model));
      }

      this.setMutated();
    }

    this.setContinue();
    return this.flags;
  }

}
/**
 * This optimizer takes output nodes that are at a fork and moves them before the fork.
 *
 * The algorithm iterates over the children and tries to find the last output node in a cahin of output nodes.
 * It then moves all output nodes before that main output node. All other children (and the children of the output nodes)
 * are inserted after the main output node.
 */


exports.MergeBins = MergeBins;

class MergeOutputs extends _optimizer.BottomUpOptimizer {
  run(node) {
    const parent = node.parent;
    const children = [...parent.children];
    const hasOutputChild = (0, _util.some)(children, child => child instanceof _dataflow.OutputNode);

    if (!hasOutputChild || parent.numChildren() <= 1) {
      this.setContinue();
      return this.flags;
    }

    const otherChildren = []; // The output node we will connect all other nodes to
    // output nodes will be added before, other nodes after

    let mainOutput;

    for (const child of children) {
      if (child instanceof _dataflow.OutputNode) {
        let lastOutput = child;

        while (lastOutput.numChildren() === 1) {
          const theChild = lastOutput.children[0];

          if (theChild instanceof _dataflow.OutputNode) {
            lastOutput = theChild;
          } else {
            break;
          }
        }

        otherChildren.push(...lastOutput.children);

        if (mainOutput) {
          // Move the output nodes before the mainOutput. We do this by setting
          // the parent of the first not to the parent of the main output and
          // the main output's parent to the last output.
          // note: the child is the first output
          parent.removeChild(child);
          child.parent = mainOutput.parent;
          mainOutput.parent.removeChild(mainOutput);
          mainOutput.parent = lastOutput;
          this.setMutated();
        } else {
          mainOutput = lastOutput;
        }
      } else {
        otherChildren.push(child);
      }
    }

    if (otherChildren.length) {
      this.setMutated();

      for (const child of otherChildren) {
        child.parent.removeChild(child);
        child.parent = mainOutput;
      }
    }

    this.setContinue();
    return this.flags;
  }

}

exports.MergeOutputs = MergeOutputs;
},{"../../data":"node_modules/vega-lite/build/src/data.js","../../util":"node_modules/vega-lite/build/src/util.js","./aggregate":"node_modules/vega-lite/build/src/compile/data/aggregate.js","./bin":"node_modules/vega-lite/build/src/compile/data/bin.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js","./facet":"node_modules/vega-lite/build/src/compile/data/facet.js","./filter":"node_modules/vega-lite/build/src/compile/data/filter.js","./formatparse":"node_modules/vega-lite/build/src/compile/data/formatparse.js","./joinaggregate":"node_modules/vega-lite/build/src/compile/data/joinaggregate.js","./optimize":"node_modules/vega-lite/build/src/compile/data/optimize.js","./optimizer":"node_modules/vega-lite/build/src/compile/data/optimizer.js","./stack":"node_modules/vega-lite/build/src/compile/data/stack.js","./timeunit":"node_modules/vega-lite/build/src/compile/data/timeunit.js","./window":"node_modules/vega-lite/build/src/compile/data/window.js"}],"node_modules/vega-lite/build/src/compile/data/optimize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isTrue = isTrue;
exports.optimizeDataflow = optimizeDataflow;
exports.MAX_OPTIMIZATION_RUNS = exports.FACET_SCALE_PREFIX = void 0;

var log = _interopRequireWildcard(require("../../log"));

var _debug = require("./debug");

var _optimizer = require("./optimizer");

var optimizers = _interopRequireWildcard(require("./optimizers"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const FACET_SCALE_PREFIX = 'scale_';
exports.FACET_SCALE_PREFIX = FACET_SCALE_PREFIX;
const MAX_OPTIMIZATION_RUNS = 5;
/**
 * Return all leaf nodes.
 */

exports.MAX_OPTIMIZATION_RUNS = MAX_OPTIMIZATION_RUNS;

function getLeaves(roots) {
  const leaves = [];

  function append(node) {
    if (node.numChildren() === 0) {
      leaves.push(node);
    } else {
      node.children.forEach(append);
    }
  }

  roots.forEach(append);
  return leaves;
}

function isTrue(x) {
  return x;
}
/**
 * Run the specified optimizer on the provided nodes.
 *
 * @param optimizer The optimizer instance to run.
 * @param nodes A set of nodes to optimize.
 * @param flag Flag that will be or'ed with return valued from optimization calls to the nodes.
 */


function runOptimizer(optimizer, nodes) {
  const flags = nodes.map(node => {
    if (optimizer instanceof _optimizer.BottomUpOptimizer) {
      const runFlags = optimizer.optimizeNextFromLeaves(node);
      optimizer.reset();
      return runFlags;
    } else {
      return optimizer.run(node);
    }
  });
  return flags.some(isTrue);
}

function optimizationDataflowHelper(dataComponent, model) {
  let roots = dataComponent.sources;
  const mutatedFlags = new Set();
  mutatedFlags.add(runOptimizer(new optimizers.RemoveUnnecessaryNodes(), roots)); // remove source nodes that don't have any children because they also don't have output nodes

  roots = roots.filter(r => r.numChildren() > 0);
  mutatedFlags.add(runOptimizer(new optimizers.RemoveUnusedSubtrees(), getLeaves(roots)));
  roots = roots.filter(r => r.numChildren() > 0);
  mutatedFlags.add(runOptimizer(new optimizers.MoveParseUp(), getLeaves(roots)));
  mutatedFlags.add(runOptimizer(new optimizers.MergeBins(model), getLeaves(roots)));
  mutatedFlags.add(runOptimizer(new optimizers.RemoveDuplicateTimeUnits(), getLeaves(roots)));
  mutatedFlags.add(runOptimizer(new optimizers.MergeParse(), getLeaves(roots)));
  mutatedFlags.add(runOptimizer(new optimizers.MergeAggregates(), getLeaves(roots)));
  mutatedFlags.add(runOptimizer(new optimizers.MergeTimeUnits(), getLeaves(roots)));
  mutatedFlags.add(runOptimizer(new optimizers.MergeIdenticalNodes(), roots));
  mutatedFlags.add(runOptimizer(new optimizers.MergeOutputs(), getLeaves(roots)));
  dataComponent.sources = roots;
  return mutatedFlags.has(true);
}
/**
 * Optimizes the dataflow of the passed in data component.
 */


function optimizeDataflow(data, model) {
  // check before optimizations
  (0, _debug.checkLinks)(data.sources);
  let firstPassCounter = 0;
  let secondPassCounter = 0;

  for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {
    if (!optimizationDataflowHelper(data, model)) {
      break;
    }

    firstPassCounter++;
  } // move facets down and make a copy of the subtree so that we can have scales at the top level


  data.sources.map(optimizers.moveFacetDown);

  for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {
    if (!optimizationDataflowHelper(data, model)) {
      break;
    }

    secondPassCounter++;
  } // check after optimizations


  (0, _debug.checkLinks)(data.sources);

  if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {
    log.warn(`Maximum optimization runs(${MAX_OPTIMIZATION_RUNS}) reached.`);
  }
}
},{"../../log":"node_modules/vega-lite/build/src/log/index.js","./debug":"node_modules/vega-lite/build/src/compile/data/debug.js","./optimizer":"node_modules/vega-lite/build/src/compile/data/optimizer.js","./optimizers":"node_modules/vega-lite/build/src/compile/data/optimizers.js"}],"node_modules/vega-lite/build/src/compile/signal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SignalRefWrapper = void 0;

/**
 * A class that behaves like a SignalRef but lazily generates the signal.
 * The provided generator function should use `Model.getSignalName` to use the correct signal name.
 */
class SignalRefWrapper {
  constructor(exprGenerator) {
    Object.defineProperty(this, 'signal', {
      enumerable: true,
      get: exprGenerator
    });
  }

  static fromName(rename, signalName) {
    return new SignalRefWrapper(() => rename(signalName));
  }

}

exports.SignalRefWrapper = SignalRefWrapper;
},{}],"node_modules/vega-lite/build/src/compile/scale/domain.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseScaleDomain = parseScaleDomain;
exports.parseDomainForChannel = parseDomainForChannel;
exports.domainSort = domainSort;
exports.canUseUnaggregatedDomain = canUseUnaggregatedDomain;
exports.mergeDomains = mergeDomains;
exports.getFieldFromDomain = getFieldFromDomain;
exports.assembleDomain = assembleDomain;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var _aggregate = require("../../aggregate");

var _bin = require("../../bin");

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _data = require("../../data");

var log = _interopRequireWildcard(require("../../log"));

var _scale = require("../../scale");

var _sort = require("../../sort");

var util = _interopRequireWildcard(require("../../util"));

var _vega = require("../../vega.schema");

var _bin2 = require("../data/bin");

var _calculate = require("../data/calculate");

var _optimize = require("../data/optimize");

var _model = require("../model");

var _selection = require("../selection");

var _signal = require("../signal");

var _split = require("../split");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function parseScaleDomain(model) {
  if ((0, _model.isUnitModel)(model)) {
    parseUnitScaleDomain(model);
  } else {
    parseNonUnitScaleDomain(model);
  }
}

function parseUnitScaleDomain(model) {
  const scales = model.specifiedScales;
  const localScaleComponents = model.component.scales;
  util.keys(localScaleComponents).forEach(channel => {
    const specifiedScale = scales[channel];
    const specifiedDomain = specifiedScale ? specifiedScale.domain : undefined;
    const domains = parseDomainForChannel(model, channel);
    const localScaleCmpt = localScaleComponents[channel];
    localScaleCmpt.setWithExplicit('domains', domains);

    if ((0, _scale.isSelectionDomain)(specifiedDomain)) {
      // As scale parsing occurs before selection parsing, we use a temporary
      // signal here and append the scale.domain definition. This is replaced
      // with the correct domainRaw signal during scale assembly.
      // For more information, see isRawSelectionDomain in selection.ts.
      // FIXME: replace this with a special property in the scaleComponent
      localScaleCmpt.set('domainRaw', {
        signal: _selection.SELECTION_DOMAIN + util.hash(specifiedDomain)
      }, true);
    }

    if (model.component.data.isFaceted) {
      // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not
      let facetParent = model;

      while (!(0, _model.isFacetModel)(facetParent) && facetParent.parent) {
        facetParent = facetParent.parent;
      }

      const resolve = facetParent.component.resolve.scale[channel];

      if (resolve === 'shared') {
        for (const domain of domains.value) {
          // Replace the scale domain with data output from a cloned subtree after the facet.
          if ((0, _vega.isDataRefDomain)(domain)) {
            // use data from cloned subtree (which is the same as data but with a prefix added once)
            domain.data = _optimize.FACET_SCALE_PREFIX + domain.data.replace(_optimize.FACET_SCALE_PREFIX, '');
          }
        }
      }
    }
  });
}

function parseNonUnitScaleDomain(model) {
  for (const child of model.children) {
    parseScaleDomain(child);
  }

  const localScaleComponents = model.component.scales;
  util.keys(localScaleComponents).forEach(channel => {
    let domains;
    let domainRaw = null;

    for (const child of model.children) {
      const childComponent = child.component.scales[channel];

      if (childComponent) {
        if (domains === undefined) {
          domains = childComponent.getWithExplicit('domains');
        } else {
          domains = (0, _split.mergeValuesWithExplicit)(domains, childComponent.getWithExplicit('domains'), 'domains', 'scale', domainsTieBreaker);
        }

        const dr = childComponent.get('domainRaw');

        if (domainRaw && dr && domainRaw.signal !== dr.signal) {
          log.warn('The same selection must be used to override scale domains in a layered view.');
        }

        domainRaw = dr;
      }
    }

    localScaleComponents[channel].setWithExplicit('domains', domains);

    if (domainRaw) {
      localScaleComponents[channel].set('domainRaw', domainRaw, true);
    }
  });
}
/**
 * Remove unaggregated domain if it is not applicable
 * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.
 */


function normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {
  if (domain === 'unaggregated') {
    const {
      valid,
      reason
    } = canUseUnaggregatedDomain(fieldDef, scaleType);

    if (!valid) {
      log.warn(reason);
      return undefined;
    }
  } else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {
    // Apply config if domain is not specified.
    const {
      valid
    } = canUseUnaggregatedDomain(fieldDef, scaleType);

    if (valid) {
      return 'unaggregated';
    }
  }

  return domain;
}

function parseDomainForChannel(model, channel) {
  const scaleType = model.getScaleComponent(channel).get('type');
  const domain = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.fieldDef(channel), scaleType, model.config.scale);

  if (domain !== model.scaleDomain(channel)) {
    model.specifiedScales[channel] = Object.assign({}, model.specifiedScales[channel], {
      domain
    });
  } // If channel is either X or Y then union them with X2 & Y2 if they exist


  if (channel === 'x' && model.channelHasField('x2')) {
    if (model.channelHasField('x')) {
      return (0, _split.mergeValuesWithExplicit)(parseSingleChannelDomain(scaleType, domain, model, 'x'), parseSingleChannelDomain(scaleType, domain, model, 'x2'), 'domain', 'scale', domainsTieBreaker);
    } else {
      return parseSingleChannelDomain(scaleType, domain, model, 'x2');
    }
  } else if (channel === 'y' && model.channelHasField('y2')) {
    if (model.channelHasField('y')) {
      return (0, _split.mergeValuesWithExplicit)(parseSingleChannelDomain(scaleType, domain, model, 'y'), parseSingleChannelDomain(scaleType, domain, model, 'y2'), 'domain', 'scale', domainsTieBreaker);
    } else {
      return parseSingleChannelDomain(scaleType, domain, model, 'y2');
    }
  }

  return parseSingleChannelDomain(scaleType, domain, model, channel);
}

function mapDomainToDataSignal(domain, type, timeUnit) {
  return domain.map(v => {
    const data = (0, _channeldef.valueExpr)(v, {
      timeUnit,
      type
    });
    return {
      signal: `{data: ${data}}`
    };
  });
}

function parseSingleChannelDomain(scaleType, domain, model, channel) {
  const fieldDef = model.fieldDef(channel);

  if (domain && domain !== 'unaggregated' && !(0, _scale.isSelectionDomain)(domain)) {
    // explicit value
    const {
      type,
      timeUnit
    } = fieldDef;

    if (type === 'temporal' || timeUnit) {
      return (0, _split.makeExplicit)(mapDomainToDataSignal(domain, type, timeUnit));
    }

    return (0, _split.makeExplicit)([domain]);
  }

  const stack = model.stack;

  if (stack && channel === stack.fieldChannel) {
    if (stack.offset === 'normalize') {
      return (0, _split.makeImplicit)([[0, 1]]);
    }

    const data = model.requestDataName(_data.MAIN);
    return (0, _split.makeImplicit)([{
      data,
      field: model.vgField(channel, {
        suffix: 'start'
      })
    }, {
      data,
      field: model.vgField(channel, {
        suffix: 'end'
      })
    }]);
  }

  const sort = (0, _channel.isScaleChannel)(channel) ? domainSort(model, channel, scaleType) : undefined;

  if (domain === 'unaggregated') {
    const data = model.requestDataName(_data.MAIN);
    const {
      field
    } = fieldDef;
    return (0, _split.makeImplicit)([{
      data,
      field: (0, _channeldef.vgField)({
        field,
        aggregate: 'min'
      })
    }, {
      data,
      field: (0, _channeldef.vgField)({
        field,
        aggregate: 'max'
      })
    }]);
  } else if ((0, _bin.isBinning)(fieldDef.bin)) {
    if ((0, _scale.hasDiscreteDomain)(scaleType)) {
      if (scaleType === 'bin-ordinal') {
        // we can omit the domain as it is inferred from the `bins` property
        return (0, _split.makeImplicit)([]);
      } // ordinal bin scale takes domain from bin_range, ordered by bin start
      // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).


      return (0, _split.makeImplicit)([{
        // If sort by aggregation of a specified sort field, we need to use RAW table,
        // so we can aggregate values for the scale independently from the main aggregation.
        data: util.isBoolean(sort) ? model.requestDataName(_data.MAIN) : model.requestDataName(_data.RAW),
        // Use range if we added it and the scale does not support computing a range as a signal.
        field: model.vgField(channel, (0, _channeldef.binRequiresRange)(fieldDef, channel) ? {
          binSuffix: 'range'
        } : {}),
        // we have to use a sort object if sort = true to make the sort correct by bin start
        sort: sort === true || !(0, _vegaUtil.isObject)(sort) ? {
          field: model.vgField(channel, {}),
          op: 'min' // min or max doesn't matter since we sort by the start of the bin range

        } : sort
      }]);
    } else {
      // continuous scales
      const {
        bin
      } = fieldDef;

      if ((0, _bin.isBinning)(bin)) {
        const binSignal = (0, _bin2.getBinSignalName)(model, fieldDef.field, bin);
        return (0, _split.makeImplicit)([new _signal.SignalRefWrapper(() => {
          const signal = model.getSignalName(binSignal);
          return `[${signal}.start, ${signal}.stop]`;
        })]);
      } else {
        return (0, _split.makeImplicit)([{
          data: model.requestDataName(_data.MAIN),
          field: model.vgField(channel, {})
        }]);
      }
    }
  } else if (sort) {
    return (0, _split.makeImplicit)([{
      // If sort by aggregation of a specified sort field, we need to use RAW table,
      // so we can aggregate values for the scale independently from the main aggregation.
      data: util.isBoolean(sort) ? model.requestDataName(_data.MAIN) : model.requestDataName(_data.RAW),
      field: model.vgField(channel),
      sort: sort
    }]);
  } else {
    return (0, _split.makeImplicit)([{
      data: model.requestDataName(_data.MAIN),
      field: model.vgField(channel)
    }]);
  }
}

function normalizeSortField(sort, isStacked) {
  const {
    op,
    field,
    order
  } = sort;
  return Object.assign({
    // Apply default op
    op: op || (isStacked ? 'sum' : _sort.DEFAULT_SORT_OP)
  }, field ? {
    field: util.replacePathInField(field)
  } : {}, order ? {
    order
  } : {});
}

function domainSort(model, channel, scaleType) {
  if (!(0, _scale.hasDiscreteDomain)(scaleType)) {
    return undefined;
  } // save to cast as the only exception is the geojson type for shape, which would not generate a scale


  const fieldDef = model.fieldDef(channel);
  const sort = fieldDef.sort; // if the sort is specified with array, use the derived sort index field

  if ((0, _sort.isSortArray)(sort)) {
    return {
      op: 'min',
      field: (0, _calculate.sortArrayIndexField)(fieldDef, channel),
      order: 'ascending'
    };
  }

  const isStacked = model.stack !== null; // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)

  if ((0, _sort.isSortField)(sort)) {
    return normalizeSortField(sort, isStacked);
  } else if ((0, _sort.isSortByEncoding)(sort)) {
    const {
      encoding,
      order
    } = sort;
    const {
      aggregate,
      field
    } = model.fieldDef(encoding);
    const sortField = {
      op: aggregate,
      field,
      order
    };
    return normalizeSortField(sortField, isStacked);
  } else if (sort === 'descending') {
    return {
      op: 'min',
      field: model.vgField(channel),
      order: 'descending'
    };
  } else if (util.contains(['ascending', undefined
  /* default =ascending*/
  ], sort)) {
    return true;
  } // sort == null


  return undefined;
}
/**
 * Determine if a scale can use unaggregated domain.
 * @return {Boolean} Returns true if all of the following conditions apply:
 * 1. `scale.domain` is `unaggregated`
 * 2. Aggregation function is not `count` or `sum`
 * 3. The scale is quantitative or time scale.
 */


function canUseUnaggregatedDomain(fieldDef, scaleType) {
  const {
    aggregate,
    type
  } = fieldDef;

  if (!aggregate) {
    return {
      valid: false,
      reason: log.message.unaggregateDomainHasNoEffectForRawField(fieldDef)
    };
  }

  if ((0, _vegaUtil.isString)(aggregate) && !_aggregate.SHARED_DOMAIN_OP_INDEX[aggregate]) {
    return {
      valid: false,
      reason: log.message.unaggregateDomainWithNonSharedDomainOp(aggregate)
    };
  }

  if (type === 'quantitative') {
    if (scaleType === 'log') {
      return {
        valid: false,
        reason: log.message.unaggregatedDomainWithLogScale(fieldDef)
      };
    }
  }

  return {
    valid: true
  };
}
/**
 * Tie breaker for mergeValuesWithExplicit for domains. We concat the specified values.
 */


function domainsTieBreaker(v1, v2, property, propertyOf) {
  if (v1.explicit && v2.explicit) {
    log.warn(log.message.mergeConflictingDomainProperty(property, propertyOf, v1.value, v2.value));
  } // If equal score, concat the domains so that we union them later.


  return {
    explicit: v1.explicit,
    value: [...v1.value, ...v2.value]
  };
}
/**
 * Converts an array of domains to a single Vega scale domain.
 */


function mergeDomains(domains) {
  const uniqueDomains = util.unique(domains.map(domain => {
    // ignore sort property when computing the unique domains
    if ((0, _vega.isDataRefDomain)(domain)) {
      const {
        sort: _s
      } = domain,
            domainWithoutSort = tslib_1.__rest(domain, ["sort"]);

      return domainWithoutSort;
    }

    return domain;
  }), util.hash);
  const sorts = util.unique(domains.map(d => {
    if ((0, _vega.isDataRefDomain)(d)) {
      const s = d.sort;

      if (s !== undefined && !util.isBoolean(s)) {
        if (s.op === 'count') {
          // let's make sure that if op is count, we don't use a field
          delete s.field;
        }

        if (s.order === 'ascending') {
          // drop order: ascending as it is the default
          delete s.order;
        }
      }

      return s;
    }

    return undefined;
  }).filter(s => s !== undefined), util.hash);

  if (uniqueDomains.length === 0) {
    return undefined;
  } else if (uniqueDomains.length === 1) {
    const domain = domains[0];

    if ((0, _vega.isDataRefDomain)(domain) && sorts.length > 0) {
      let sort = sorts[0];

      if (sorts.length > 1) {
        log.warn(log.message.MORE_THAN_ONE_SORT);
        sort = true;
      }

      return Object.assign({}, domain, {
        sort
      });
    }

    return domain;
  } // only keep simple sort properties that work with unioned domains


  const simpleSorts = util.unique(sorts.map(s => {
    if (util.isBoolean(s) || s.op === 'count') {
      return s;
    }

    log.warn(log.message.domainSortDropped(s));
    return true;
  }), util.hash);
  let sort;

  if (simpleSorts.length === 1) {
    sort = simpleSorts[0];
  } else if (simpleSorts.length > 1) {
    log.warn(log.message.MORE_THAN_ONE_SORT);
    sort = true;
  }

  const allData = util.unique(domains.map(d => {
    if ((0, _vega.isDataRefDomain)(d)) {
      return d.data;
    }

    return null;
  }), x => x);

  if (allData.length === 1 && allData[0] !== null) {
    // create a union domain of different fields with a single data source
    const domain = Object.assign({
      data: allData[0],
      fields: uniqueDomains.map(d => d.field)
    }, sort ? {
      sort
    } : {});
    return domain;
  }

  return Object.assign({
    fields: uniqueDomains
  }, sort ? {
    sort
  } : {});
}
/**
 * Return a field if a scale single field.
 * Return `undefined` otherwise.
 *
 */


function getFieldFromDomain(domain) {
  if ((0, _vega.isDataRefDomain)(domain) && (0, _vegaUtil.isString)(domain.field)) {
    return domain.field;
  } else if ((0, _vega.isDataRefUnionedDomain)(domain)) {
    let field;

    for (const nonUnionDomain of domain.fields) {
      if ((0, _vega.isDataRefDomain)(nonUnionDomain) && (0, _vegaUtil.isString)(nonUnionDomain.field)) {
        if (!field) {
          field = nonUnionDomain.field;
        } else if (field !== nonUnionDomain.field) {
          log.warn('Detected faceted independent scales that union domain of multiple fields from different data sources.  We will use the first field.  The result view size may be incorrect.');
          return field;
        }
      }
    }

    log.warn('Detected faceted independent scales that union domain of identical fields from different source detected.  We will assume that this is the same field from a different fork of the same data source.  However, if this is not case, the result view size maybe incorrect.');
    return field;
  } else if ((0, _vega.isFieldRefUnionDomain)(domain)) {
    log.warn('Detected faceted independent scales that union domain of multiple fields from the same data source.  We will use the first field.  The result view size may be incorrect.');
    const field = domain.fields[0];
    return (0, _vegaUtil.isString)(field) ? field : undefined;
  }

  return undefined;
}

function assembleDomain(model, channel) {
  const scaleComponent = model.component.scales[channel];
  const domains = scaleComponent.get('domains').map(domain => {
    // Correct references to data as the original domain's data was determined
    // in parseScale, which happens before parseData. Thus the original data
    // reference can be incorrect.
    if ((0, _vega.isDataRefDomain)(domain)) {
      domain.data = model.lookupDataSource(domain.data);
    }

    return domain;
  }); // domains is an array that has to be merged into a single vega domain

  return mergeDomains(domains);
}
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../aggregate":"node_modules/vega-lite/build/src/aggregate.js","../../bin":"node_modules/vega-lite/build/src/bin.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../data":"node_modules/vega-lite/build/src/data.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../sort":"node_modules/vega-lite/build/src/sort.js","../../util":"node_modules/vega-lite/build/src/util.js","../../vega.schema":"node_modules/vega-lite/build/src/vega.schema.js","../data/bin":"node_modules/vega-lite/build/src/compile/data/bin.js","../data/calculate":"node_modules/vega-lite/build/src/compile/data/calculate.js","../data/optimize":"node_modules/vega-lite/build/src/compile/data/optimize.js","../model":"node_modules/vega-lite/build/src/compile/model.js","../selection":"node_modules/vega-lite/build/src/compile/selection/index.js","../signal":"node_modules/vega-lite/build/src/compile/signal.js","../split":"node_modules/vega-lite/build/src/compile/split.js"}],"node_modules/vega-lite/build/src/compile/scale/assemble.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assembleScales = assembleScales;
exports.assembleScalesForModel = assembleScalesForModel;
exports.assembleScaleRange = assembleScaleRange;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _util = require("../../util");

var _vega = require("../../vega.schema");

var _model = require("../model");

var _selection = require("../selection");

var _assemble = require("../selection/assemble");

var _domain = require("./domain");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function assembleScales(model) {
  if ((0, _model.isLayerModel)(model) || (0, _model.isConcatModel)(model) || (0, _model.isRepeatModel)(model)) {
    // For concat / layer / repeat, include scales of children too
    return model.children.reduce((scales, child) => {
      return scales.concat(assembleScales(child));
    }, assembleScalesForModel(model));
  } else {
    // For facet, child scales would not be included in the parent's scope.
    // For unit, there is no child.
    return assembleScalesForModel(model);
  }
}

function assembleScalesForModel(model) {
  return (0, _util.keys)(model.component.scales).reduce((scales, channel) => {
    const scaleComponent = model.component.scales[channel];

    if (scaleComponent.merged) {
      // Skipped merged scales
      return scales;
    }

    const scale = scaleComponent.combine(); // need to separate const and non const object destruction

    let {
      domainRaw
    } = scale;

    const {
      name,
      type,
      domains: _d,
      domainRaw: _dr,
      range: _r
    } = scale,
          otherScaleProps = tslib_1.__rest(scale, ["name", "type", "domains", "domainRaw", "range"]);

    const range = assembleScaleRange(scale.range, name, channel); // As scale parsing occurs before selection parsing, a temporary signal
    // is used for domainRaw. Here, we detect if this temporary signal
    // is set, and replace it with the correct domainRaw signal.
    // For more information, see isRawSelectionDomain in selection.ts.

    if (domainRaw && (0, _selection.isRawSelectionDomain)(domainRaw)) {
      domainRaw = (0, _assemble.assembleSelectionScaleDomain)(model, domainRaw);
    }

    const domain = (0, _domain.assembleDomain)(model, channel);
    scales.push(Object.assign({
      name,
      type
    }, domain ? {
      domain
    } : {}, domainRaw ? {
      domainRaw
    } : {}, {
      range: range
    }, otherScaleProps));
    return scales;
  }, []);
}

function assembleScaleRange(scaleRange, scaleName, channel) {
  // add signals to x/y range
  if (channel === 'x' || channel === 'y') {
    if ((0, _vega.isVgRangeStep)(scaleRange)) {
      // For x/y range step, use a signal created in layout assemble instead of a constant range step.
      return {
        step: {
          signal: scaleName + '_step'
        }
      };
    }
  }

  return scaleRange;
}
},{"tslib":"node_modules/tslib/tslib.es6.js","../../util":"node_modules/vega-lite/build/src/util.js","../../vega.schema":"node_modules/vega-lite/build/src/vega.schema.js","../model":"node_modules/vega-lite/build/src/compile/model.js","../selection":"node_modules/vega-lite/build/src/compile/selection/index.js","../selection/assemble":"node_modules/vega-lite/build/src/compile/selection/assemble.js","./domain":"node_modules/vega-lite/build/src/compile/scale/domain.js"}],"node_modules/vega-lite/build/src/compile/scale/component.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScaleComponent = void 0;

var _vegaUtil = require("vega-util");

var _util = require("../../util");

var _split = require("../split");

class ScaleComponent extends _split.Split {
  constructor(name, typeWithExplicit) {
    super({}, // no initial explicit property
    {
      name // name as initial implicit property

    });
    this.merged = false;
    this.setWithExplicit('type', typeWithExplicit);
  }
  /**
   * Whether the scale definitely includes zero in the domain
   */


  domainDefinitelyIncludesZero() {
    if (this.get('zero') !== false) {
      return true;
    }

    return (0, _util.some)(this.get('domains'), d => (0, _vegaUtil.isArray)(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);
  }

}

exports.ScaleComponent = ScaleComponent;
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../util":"node_modules/vega-lite/build/src/util.js","../split":"node_modules/vega-lite/build/src/compile/split.js"}],"node_modules/vega-lite/build/src/compile/scale/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseUnitScaleRange = parseUnitScaleRange;
exports.parseRangeForChannel = parseRangeForChannel;
exports.defaultContinuousToDiscreteCount = defaultContinuousToDiscreteCount;
exports.interpolateRange = interpolateRange;
exports.MAX_SIZE_RANGE_STEP_RATIO = exports.RANGE_PROPERTIES = void 0;

var _vegaUtil = require("vega-util");

var _bin = require("../../bin");

var _channel = require("../../channel");

var log = _interopRequireWildcard(require("../../log"));

var _scale = require("../../scale");

var util = _interopRequireWildcard(require("../../util"));

var _vega = require("../../vega.schema");

var _bin2 = require("../data/bin");

var _signal = require("../signal");

var _split = require("../split");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const RANGE_PROPERTIES = ['range', 'rangeStep', 'scheme'];
exports.RANGE_PROPERTIES = RANGE_PROPERTIES;

function getSizeType(channel) {
  return channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;
}

function parseUnitScaleRange(model) {
  const localScaleComponents = model.component.scales; // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!

  _channel.SCALE_CHANNELS.forEach(channel => {
    const localScaleCmpt = localScaleComponents[channel];

    if (!localScaleCmpt) {
      return;
    }

    const mergedScaleCmpt = model.getScaleComponent(channel);
    const specifiedScale = model.specifiedScales[channel];
    const fieldDef = model.fieldDef(channel); // Read if there is a specified width/height

    const sizeType = getSizeType(channel);
    let sizeSpecified = sizeType ? !!model.component.layoutSize.get(sizeType) : undefined;
    const scaleType = mergedScaleCmpt.get('type'); // if autosize is fit, size cannot be data driven

    const rangeStep = util.contains(['point', 'band'], scaleType) || !!specifiedScale.rangeStep;

    if (sizeType && model.fit && !sizeSpecified && rangeStep) {
      log.warn(log.message.CANNOT_FIX_RANGE_STEP_WITH_FIT);
      sizeSpecified = true;
    }

    const xyRangeSteps = getXYRangeStep(model);
    const rangeWithExplicit = parseRangeForChannel(channel, model.getSignalName.bind(model), scaleType, fieldDef.type, specifiedScale, model.config, localScaleCmpt.get('zero'), model.mark, sizeSpecified, model.getName(sizeType), xyRangeSteps);
    localScaleCmpt.setWithExplicit('range', rangeWithExplicit);
  });
}

function getRangeStep(model, channel) {
  const scaleCmpt = model.getScaleComponent(channel);

  if (!scaleCmpt) {
    return undefined;
  }

  const scaleType = scaleCmpt.get('type');
  const fieldDef = model.fieldDef(channel);

  if ((0, _scale.hasDiscreteDomain)(scaleType)) {
    const range = scaleCmpt && scaleCmpt.get('range');

    if (range && (0, _vega.isVgRangeStep)(range) && (0, _vegaUtil.isNumber)(range.step)) {
      return range.step; // TODO: support the case without range step
    }
  } else if (fieldDef && fieldDef.bin && (0, _bin.isBinning)(fieldDef.bin)) {
    const binSignal = (0, _bin2.getBinSignalName)(model, fieldDef.field, fieldDef.bin); // TODO: extract this to be range step signal

    const sizeType = getSizeType(channel);
    const sizeSignal = model.getName(sizeType);
    return new _signal.SignalRefWrapper(() => {
      const updatedName = model.getSignalName(binSignal);
      const binCount = `(${updatedName}.stop - ${updatedName}.start) / ${updatedName}.step`;
      return `${model.getSignalName(sizeSignal)} / (${binCount})`;
    });
  }

  return undefined;
}

function getXYRangeStep(model) {
  const steps = [];

  for (const channel of _channel.POSITION_SCALE_CHANNELS) {
    const step = getRangeStep(model, channel);

    if (step !== undefined) {
      steps.push(step);
    }
  }

  return steps;
}
/**
 * Return mixins that includes one of the range properties (range, rangeStep, scheme).
 */


function parseRangeForChannel(channel, getSignalName, scaleType, type, specifiedScale, config, zero, mark, sizeSpecified, sizeSignal, xyRangeSteps) {
  const noRangeStep = sizeSpecified || specifiedScale.rangeStep === null; // Check if any of the range properties is specified.
  // If so, check if it is compatible and make sure that we only output one of the properties

  for (const property of RANGE_PROPERTIES) {
    if (specifiedScale[property] !== undefined) {
      const supportedByScaleType = (0, _scale.scaleTypeSupportProperty)(scaleType, property);
      const channelIncompatability = (0, _scale.channelScalePropertyIncompatability)(channel, property);

      if (!supportedByScaleType) {
        log.warn(log.message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));
      } else if (channelIncompatability) {
        // channel
        log.warn(channelIncompatability);
      } else {
        switch (property) {
          case 'range':
            return (0, _split.makeExplicit)(specifiedScale[property]);

          case 'scheme':
            return (0, _split.makeExplicit)(parseScheme(specifiedScale[property]));

          case 'rangeStep':
            {
              const rangeStep = specifiedScale[property];

              if (rangeStep !== null) {
                if (!sizeSpecified) {
                  return (0, _split.makeExplicit)({
                    step: rangeStep
                  });
                } else {
                  // If top-level size is specified, we ignore specified rangeStep.
                  log.warn(log.message.rangeStepDropped(channel));
                }
              }
            }
        }
      }
    }
  }

  return (0, _split.makeImplicit)(defaultRange(channel, getSignalName, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep, specifiedScale.domain));
}

function parseScheme(scheme) {
  if ((0, _scale.isExtendedScheme)(scheme)) {
    return Object.assign({
      scheme: scheme.name
    }, util.omit(scheme, ['name']));
  }

  return {
    scheme: scheme
  };
}

function defaultRange(channel, getSignalName, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep, domain) {
  switch (channel) {
    case _channel.X:
    case _channel.Y:
      if (util.contains(['point', 'band'], scaleType) && !noRangeStep) {
        if (channel === _channel.X && mark === 'text') {
          if (config.scale.textXRangeStep) {
            return {
              step: config.scale.textXRangeStep
            };
          }
        } else {
          if (config.scale.rangeStep) {
            return {
              step: config.scale.rangeStep
            };
          }
        }
      } // If range step is null, use zero to width or height.
      // Note that these range signals are temporary
      // as they can be merged and renamed.
      // (We do not have the right size signal here since parseLayoutSize() happens after parseScale().)
      // We will later replace these temporary names with
      // the final name in assembleScaleRange()


      if (channel === _channel.Y && (0, _scale.hasContinuousDomain)(scaleType)) {
        // For y continuous scale, we have to start from the height as the bottom part has the max value.
        return [_signal.SignalRefWrapper.fromName(getSignalName, sizeSignal), 0];
      } else {
        return [0, _signal.SignalRefWrapper.fromName(getSignalName, sizeSignal)];
      }

    case _channel.SIZE:
      {
        // TODO: support custom rangeMin, rangeMax
        const rangeMin = sizeRangeMin(mark, zero, config);
        const rangeMax = sizeRangeMax(mark, xyRangeSteps, config);

        if ((0, _scale.isContinuousToDiscrete)(scaleType)) {
          return interpolateRange(rangeMin, rangeMax, defaultContinuousToDiscreteCount(scaleType, config, domain, channel));
        } else {
          return [rangeMin, rangeMax];
        }
      }

    case _channel.STROKEWIDTH:
      // TODO: support custom rangeMin, rangeMax
      return [config.scale.minStrokeWidth, config.scale.maxStrokeWidth];

    case _channel.SHAPE:
      return 'symbol';

    case _channel.COLOR:
    case _channel.FILL:
    case _channel.STROKE:
      if (scaleType === 'ordinal') {
        // Only nominal data uses ordinal scale by default
        return type === 'nominal' ? 'category' : 'ordinal';
      } else {
        return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';
      }

    case _channel.OPACITY:
    case _channel.FILLOPACITY:
    case _channel.STROKEOPACITY:
      // TODO: support custom rangeMin, rangeMax
      return [config.scale.minOpacity, config.scale.maxOpacity];
  }
  /* istanbul ignore next: should never reach here */


  throw new Error(`Scale range undefined for channel ${channel}`);
}

function defaultContinuousToDiscreteCount(scaleType, config, domain, channel) {
  switch (scaleType) {
    case 'quantile':
      return config.scale.quantileCount;

    case 'quantize':
      return config.scale.quantizeCount;

    case 'threshold':
      if (domain !== undefined && (0, _vegaUtil.isArray)(domain)) {
        return domain.length + 1;
      } else {
        log.warn(log.message.domainRequiredForThresholdScale(channel)); // default threshold boundaries for threshold scale since domain has cardinality of 2

        return 3;
      }

  }
}
/**
 * Returns the linear interpolation of the range according to the cardinality
 *
 * @param rangeMin start of the range
 * @param rangeMax end of the range
 * @param cardinality number of values in the output range
 */


function interpolateRange(rangeMin, rangeMax, cardinality) {
  // always return a signal since it's better to compute the sequence in Vega later
  const f = () => {
    const rMax = (0, _vega.isSignalRef)(rangeMax) ? rangeMax.signal : rangeMax;
    const step = `(${rMax} - ${rangeMin}) / (${cardinality} - 1)`;
    return `sequence(${rangeMin}, ${rangeMax} + ${step}, ${step})`;
  };

  if ((0, _vega.isSignalRef)(rangeMax)) {
    return new _signal.SignalRefWrapper(f);
  } else {
    return {
      signal: f()
    };
  }
}

function sizeRangeMin(mark, zero, config) {
  if (zero) {
    return 0;
  }

  switch (mark) {
    case 'bar':
    case 'tick':
      return config.scale.minBandSize;

    case 'line':
    case 'trail':
    case 'rule':
      return config.scale.minStrokeWidth;

    case 'text':
      return config.scale.minFontSize;

    case 'point':
    case 'square':
    case 'circle':
      return config.scale.minSize;
  }
  /* istanbul ignore next: should never reach here */
  // sizeRangeMin not implemented for the mark


  throw new Error(log.message.incompatibleChannel('size', mark));
}

const MAX_SIZE_RANGE_STEP_RATIO = 0.95;
exports.MAX_SIZE_RANGE_STEP_RATIO = MAX_SIZE_RANGE_STEP_RATIO;

function sizeRangeMax(mark, xyRangeSteps, config) {
  const scaleConfig = config.scale;

  switch (mark) {
    case 'bar':
    case 'tick':
      {
        if (config.scale.maxBandSize !== undefined) {
          return config.scale.maxBandSize;
        }

        const min = minXYRangeStep(xyRangeSteps, config.scale);

        if ((0, _vegaUtil.isNumber)(min)) {
          return min - 1;
        } else {
          return new _signal.SignalRefWrapper(() => `${min.signal} - 1`);
        }
      }

    case 'line':
    case 'trail':
    case 'rule':
      return config.scale.maxStrokeWidth;

    case 'text':
      return config.scale.maxFontSize;

    case 'point':
    case 'square':
    case 'circle':
      {
        if (config.scale.maxSize) {
          return config.scale.maxSize;
        }

        const pointStep = minXYRangeStep(xyRangeSteps, scaleConfig);

        if ((0, _vegaUtil.isNumber)(pointStep)) {
          return Math.pow(MAX_SIZE_RANGE_STEP_RATIO * pointStep, 2);
        } else {
          return new _signal.SignalRefWrapper(() => `pow(${MAX_SIZE_RANGE_STEP_RATIO} * ${pointStep.signal}, 2)`);
        }
      }
  }
  /* istanbul ignore next: should never reach here */
  // sizeRangeMax not implemented for the mark


  throw new Error(log.message.incompatibleChannel('size', mark));
}
/**
 * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.
 */


function minXYRangeStep(xyRangeSteps, scaleConfig) {
  if (xyRangeSteps.length > 0) {
    let min = Infinity;

    for (const step of xyRangeSteps) {
      if ((0, _vega.isSignalRef)(step)) {
        min = undefined;
      } else {
        if (min !== undefined && step < min) {
          min = step;
        }
      }
    }

    return min !== undefined ? min : new _signal.SignalRefWrapper(() => {
      const exprs = xyRangeSteps.map(e => (0, _vega.isSignalRef)(e) ? e.signal : e);
      return `min(${exprs.join(', ')})`;
    });
  }

  if (scaleConfig.rangeStep) {
    return scaleConfig.rangeStep;
  }

  return 21; // FIXME: re-evaluate the default value here.
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../bin":"node_modules/vega-lite/build/src/bin.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../util":"node_modules/vega-lite/build/src/util.js","../../vega.schema":"node_modules/vega-lite/build/src/vega.schema.js","../data/bin":"node_modules/vega-lite/build/src/compile/data/bin.js","../signal":"node_modules/vega-lite/build/src/compile/signal.js","../split":"node_modules/vega-lite/build/src/compile/split.js"}],"node_modules/vega-lite/build/src/compile/scale/properties.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseScaleProperty = parseScaleProperty;
exports.getDefaultValue = getDefaultValue;
exports.parseScaleRange = parseScaleRange;
exports.parseNonUnitScaleProperty = parseNonUnitScaleProperty;
exports.bins = bins;
exports.interpolate = interpolate;
exports.nice = nice;
exports.padding = padding;
exports.paddingInner = paddingInner;
exports.paddingOuter = paddingOuter;
exports.reverse = reverse;
exports.zero = zero;

var _vegaUtil = require("vega-util");

var _bin = require("../../bin");

var _channel = require("../../channel");

var log = _interopRequireWildcard(require("../../log"));

var _scale = require("../../scale");

var util = _interopRequireWildcard(require("../../util"));

var _bin2 = require("../data/bin");

var _model = require("../model");

var _split = require("../split");

var _signal = require("./../signal");

var _range = require("./range");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function parseScaleProperty(model, property) {
  if ((0, _model.isUnitModel)(model)) {
    parseUnitScaleProperty(model, property);
  } else {
    parseNonUnitScaleProperty(model, property);
  }
}

function parseUnitScaleProperty(model, property) {
  const localScaleComponents = model.component.scales;
  (0, util.keys)(localScaleComponents).forEach(channel => {
    const specifiedScale = model.specifiedScales[channel];
    const localScaleCmpt = localScaleComponents[channel];
    const mergedScaleCmpt = model.getScaleComponent(channel);
    const fieldDef = model.fieldDef(channel);
    const config = model.config;
    const specifiedValue = specifiedScale[property];
    const sType = mergedScaleCmpt.get('type');
    const supportedByScaleType = (0, _scale.scaleTypeSupportProperty)(sType, property);
    const channelIncompatability = (0, _scale.channelScalePropertyIncompatability)(channel, property);

    if (specifiedValue !== undefined) {
      // If there is a specified value, check if it is compatible with scale type and channel
      if (!supportedByScaleType) {
        log.warn(log.message.scalePropertyNotWorkWithScaleType(sType, property, channel));
      } else if (channelIncompatability) {
        // channel
        log.warn(channelIncompatability);
      }
    }

    if (supportedByScaleType && channelIncompatability === undefined) {
      if (specifiedValue !== undefined) {
        // copyKeyFromObject ensures type safety
        localScaleCmpt.copyKeyFromObject(property, specifiedScale);
      } else {
        const value = getDefaultValue(property, model, channel, fieldDef, mergedScaleCmpt.get('type'), mergedScaleCmpt.get('padding'), mergedScaleCmpt.get('paddingInner'), specifiedScale.domain, model.markDef, config);

        if (value !== undefined) {
          localScaleCmpt.set(property, value, false);
        }
      }
    }
  });
} // Note: This method is used in Voyager.


function getDefaultValue(property, model, channel, fieldDef, scaleType, scalePadding, scalePaddingInner, specifiedDomain, markDef, config) {
  const scaleConfig = config.scale;
  const {
    type,
    sort
  } = fieldDef; // If we have default rule-base, determine default value first

  switch (property) {
    case 'bins':
      return bins(model, fieldDef);

    case 'interpolate':
      return interpolate(channel, type);

    case 'nice':
      return nice(scaleType, channel, fieldDef);

    case 'padding':
      return padding(channel, scaleType, scaleConfig, fieldDef, markDef, config.bar);

    case 'paddingInner':
      return paddingInner(scalePadding, channel, markDef.type, scaleConfig);

    case 'paddingOuter':
      return paddingOuter(scalePadding, channel, scaleType, markDef.type, scalePaddingInner, scaleConfig);

    case 'reverse':
      return reverse(scaleType, sort);

    case 'zero':
      return zero(channel, fieldDef, specifiedDomain, markDef, scaleType);
  } // Otherwise, use scale config


  return scaleConfig[property];
} // This method is here rather than in range.ts to avoid circular dependency.


function parseScaleRange(model) {
  if ((0, _model.isUnitModel)(model)) {
    (0, _range.parseUnitScaleRange)(model);
  } else {
    parseNonUnitScaleProperty(model, 'range');
  }
}

function parseNonUnitScaleProperty(model, property) {
  const localScaleComponents = model.component.scales;

  for (const child of model.children) {
    if (property === 'range') {
      parseScaleRange(child);
    } else {
      parseScaleProperty(child, property);
    }
  }

  (0, util.keys)(localScaleComponents).forEach(channel => {
    let valueWithExplicit;

    for (const child of model.children) {
      const childComponent = child.component.scales[channel];

      if (childComponent) {
        const childValueWithExplicit = childComponent.getWithExplicit(property);
        valueWithExplicit = (0, _split.mergeValuesWithExplicit)(valueWithExplicit, childValueWithExplicit, property, 'scale', (0, _split.tieBreakByComparing)((v1, v2) => {
          switch (property) {
            case 'range':
              // For range step, prefer larger step
              if (v1.step && v2.step) {
                return v1.step - v2.step;
              }

              return 0;
            // TODO: precedence rule for other properties
          }

          return 0;
        }));
      }
    }

    localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);
  });
}

function bins(model, fieldDef) {
  const bin = fieldDef.bin;

  if ((0, _bin.isBinning)(bin)) {
    const binSignal = (0, _bin2.getBinSignalName)(model, fieldDef.field, bin);
    return new _signal.SignalRefWrapper(() => {
      return model.getSignalName(binSignal);
    });
  } else if ((0, _bin.isBinned)(bin) && (0, _bin.isBinParams)(bin) && bin.step !== undefined) {
    // start and stop will be determined from the scale domain
    return {
      step: bin.step
    };
  }

  return undefined;
}

function interpolate(channel, type) {
  if ((0, util.contains)([_channel.COLOR, _channel.FILL, _channel.STROKE], channel) && type !== 'nominal') {
    return 'hcl';
  }

  return undefined;
}

function nice(scaleType, channel, fieldDef) {
  if (fieldDef.bin || util.contains([_scale.ScaleType.TIME, _scale.ScaleType.UTC], scaleType)) {
    return undefined;
  }

  return util.contains([_channel.X, _channel.Y], channel) ? true : undefined;
}

function padding(channel, scaleType, scaleConfig, fieldDef, markDef, barConfig) {
  if (util.contains([_channel.X, _channel.Y], channel)) {
    if ((0, _scale.isContinuousToContinuous)(scaleType)) {
      if (scaleConfig.continuousPadding !== undefined) {
        return scaleConfig.continuousPadding;
      }

      const {
        type,
        orient
      } = markDef;

      if (type === 'bar' && !fieldDef.bin) {
        if (orient === 'vertical' && channel === 'x' || orient === 'horizontal' && channel === 'y') {
          return barConfig.continuousBandSize;
        }
      }
    }

    if (scaleType === _scale.ScaleType.POINT) {
      return scaleConfig.pointPadding;
    }
  }

  return undefined;
}

function paddingInner(paddingValue, channel, mark, scaleConfig) {
  if (paddingValue !== undefined) {
    // If user has already manually specified "padding", no need to add default paddingInner.
    return undefined;
  }

  if (util.contains([_channel.X, _channel.Y], channel)) {
    // Padding is only set for X and Y by default.
    // Basically it doesn't make sense to add padding for color and size.
    // paddingOuter would only be called if it's a band scale, just return the default for bandScale.
    const {
      bandPaddingInner,
      barBandPaddingInner,
      rectBandPaddingInner
    } = scaleConfig;
    return (0, util.getFirstDefined)(bandPaddingInner, mark === 'bar' ? barBandPaddingInner : rectBandPaddingInner);
  }

  return undefined;
}

function paddingOuter(paddingValue, channel, scaleType, mark, paddingInnerValue, scaleConfig) {
  if (paddingValue !== undefined) {
    // If user has already manually specified "padding", no need to add default paddingOuter.
    return undefined;
  }

  if (util.contains([_channel.X, _channel.Y], channel)) {
    // Padding is only set for X and Y by default.
    // Basically it doesn't make sense to add padding for color and size.
    if (scaleType === _scale.ScaleType.BAND) {
      const {
        bandPaddingOuter,
        barBandPaddingOuter,
        rectBandPaddingOuter
      } = scaleConfig;
      return (0, util.getFirstDefined)(bandPaddingOuter, mark === 'bar' ? barBandPaddingOuter : rectBandPaddingOuter,
      /* By default, paddingOuter is paddingInner / 2. The reason is that
        size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).
        and we want the width/height to be integer by default.
        Note that step (by default) and cardinality are integers.) */
      paddingInnerValue / 2);
    }
  }

  return undefined;
}

function reverse(scaleType, sort) {
  if ((0, _scale.hasContinuousDomain)(scaleType) && sort === 'descending') {
    // For continuous domain scales, Vega does not support domain sort.
    // Thus, we reverse range instead if sort is descending
    return true;
  }

  return undefined;
}

function zero(channel, fieldDef, specifiedDomain, markDef, scaleType) {
  // If users explicitly provide a domain range, we should not augment zero as that will be unexpected.
  const hasCustomDomain = !!specifiedDomain && specifiedDomain !== 'unaggregated';

  if (hasCustomDomain) {
    if ((0, _scale.hasContinuousDomain)(scaleType)) {
      if ((0, _vegaUtil.isArray)(specifiedDomain)) {
        const first = specifiedDomain[0];
        const last = specifiedDomain[specifiedDomain.length - 1];

        if (first <= 0 && last >= 0) {
          // if the domain includes zero, make zero remains true
          return true;
        }
      }

      return false;
    }
  } // If there is no custom domain, return true only for the following cases:
  // 1) using quantitative field with size
  // While this can be either ratio or interval fields, our assumption is that
  // ratio are more common. However, if the scaleType is discretizing scale, we want to return
  // false so that range doesn't start at zero


  if (channel === 'size' && fieldDef.type === 'quantitative' && !(0, _scale.isContinuousToDiscrete)(scaleType)) {
    return true;
  } // 2) non-binned, quantitative x-scale or y-scale
  // (For binning, we should not include zero by default because binning are calculated without zero.)


  if (!fieldDef.bin && util.contains([_channel.X, _channel.Y], channel)) {
    const {
      orient,
      type
    } = markDef;

    if ((0, util.contains)(['bar', 'area', 'line', 'trail'], type)) {
      if (orient === 'horizontal' && channel === 'y' || orient === 'vertical' && channel === 'x') {
        return false;
      }
    }

    return true;
  }

  return false;
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../bin":"node_modules/vega-lite/build/src/bin.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../util":"node_modules/vega-lite/build/src/util.js","../data/bin":"node_modules/vega-lite/build/src/compile/data/bin.js","../model":"node_modules/vega-lite/build/src/compile/model.js","../split":"node_modules/vega-lite/build/src/compile/split.js","./../signal":"node_modules/vega-lite/build/src/compile/signal.js","./range":"node_modules/vega-lite/build/src/compile/scale/range.js"}],"node_modules/vega-lite/build/src/compile/scale/type.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scaleType = scaleType;

var _bin = require("../../bin");

var _channel = require("../../channel");

var log = _interopRequireWildcard(require("../../log"));

var _scale = require("../../scale");

var util = _interopRequireWildcard(require("../../util"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * Determine if there is a specified scale type and if it is appropriate,
 * or determine default type if type is unspecified or inappropriate.
 */
// NOTE: CompassQL uses this method.
function scaleType(specifiedScale, channel, fieldDef, mark) {
  const defaultScaleType = defaultType(channel, fieldDef, mark);
  const {
    type
  } = specifiedScale;

  if (!(0, _channel.isScaleChannel)(channel)) {
    // There is no scale for these channels
    return null;
  }

  if (type !== undefined) {
    // Check if explicitly specified scale type is supported by the channel
    if (!(0, _scale.channelSupportScaleType)(channel, type)) {
      log.warn(log.message.scaleTypeNotWorkWithChannel(channel, type, defaultScaleType));
      return defaultScaleType;
    } // Check if explicitly specified scale type is supported by the data type


    if (!(0, _scale.scaleTypeSupportDataType)(type, fieldDef.type)) {
      log.warn(log.message.scaleTypeNotWorkWithFieldDef(type, defaultScaleType));
      return defaultScaleType;
    }

    return type;
  }

  return defaultScaleType;
}
/**
 * Determine appropriate default scale type.
 */
// NOTE: Voyager uses this method.


function defaultType(channel, fieldDef, mark) {
  switch (fieldDef.type) {
    case 'nominal':
    case 'ordinal':
      if ((0, _channel.isColorChannel)(channel) || (0, _channel.rangeType)(channel) === 'discrete') {
        if (channel === 'shape' && fieldDef.type === 'ordinal') {
          log.warn(log.message.discreteChannelCannotEncode(channel, 'ordinal'));
        }

        return 'ordinal';
      }

      if (util.contains(['x', 'y'], channel)) {
        if (util.contains(['rect', 'bar', 'rule'], mark)) {
          // The rect/bar mark should fit into a band.
          // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429
          return 'band';
        }

        if (mark === 'bar') {
          return 'band';
        }
      } // Otherwise, use ordinal point scale so we can easily get center positions of the marks.


      return 'point';

    case 'temporal':
      if ((0, _channel.isColorChannel)(channel)) {
        return 'time';
      } else if ((0, _channel.rangeType)(channel) === 'discrete') {
        log.warn(log.message.discreteChannelCannotEncode(channel, 'temporal')); // TODO: consider using quantize (equivalent to binning) once we have it

        return 'ordinal';
      }

      return 'time';

    case 'quantitative':
      if ((0, _channel.isColorChannel)(channel)) {
        if ((0, _bin.isBinning)(fieldDef.bin)) {
          return 'bin-ordinal';
        }

        return 'linear';
      } else if ((0, _channel.rangeType)(channel) === 'discrete') {
        log.warn(log.message.discreteChannelCannotEncode(channel, 'quantitative')); // TODO: consider using quantize (equivalent to binning) once we have it

        return 'ordinal';
      }

      return 'linear';

    case 'geojson':
      return undefined;
  }
  /* istanbul ignore next: should never reach this */


  throw new Error(log.message.invalidFieldType(fieldDef.type));
}
},{"../../bin":"node_modules/vega-lite/build/src/bin.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../util":"node_modules/vega-lite/build/src/util.js"}],"node_modules/vega-lite/build/src/compile/scale/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseScales = parseScales;
exports.parseScaleCore = parseScaleCore;

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _mark = require("../../mark");

var _scale = require("../../scale");

var _type = require("../../type");

var _util = require("../../util");

var _model = require("../model");

var _resolve = require("../resolve");

var _split = require("../split");

var _component = require("./component");

var _domain = require("./domain");

var _properties = require("./properties");

var _type2 = require("./type");

function parseScales(model) {
  parseScaleCore(model);
  (0, _domain.parseScaleDomain)(model);

  for (const prop of _scale.NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES) {
    (0, _properties.parseScaleProperty)(model, prop);
  } // range depends on zero


  (0, _properties.parseScaleRange)(model);
}

function parseScaleCore(model) {
  if ((0, _model.isUnitModel)(model)) {
    model.component.scales = parseUnitScaleCore(model);
  } else {
    model.component.scales = parseNonUnitScaleCore(model);
  }
}
/**
 * Parse scales for all channels of a model.
 */


function parseUnitScaleCore(model) {
  const {
    encoding,
    mark
  } = model;
  return _channel.SCALE_CHANNELS.reduce((scaleComponents, channel) => {
    let fieldDef;
    let specifiedScale;
    const channelDef = encoding[channel]; // Don't generate scale for shape of geoshape

    if ((0, _channeldef.isFieldDef)(channelDef) && mark === _mark.GEOSHAPE && channel === _channel.SHAPE && channelDef.type === _type.GEOJSON) {
      return scaleComponents;
    }

    if ((0, _channeldef.isFieldDef)(channelDef)) {
      fieldDef = channelDef;
      specifiedScale = channelDef.scale;
    } else if ((0, _channeldef.hasConditionalFieldDef)(channelDef)) {
      // Need to specify generic for hasConditionalFieldDef as the value type can vary across channels
      fieldDef = channelDef.condition;
      specifiedScale = channelDef.condition['scale']; // We use ['scale'] since we know that channel here has scale for sure
    }

    if (fieldDef && specifiedScale !== null && specifiedScale !== false) {
      specifiedScale = specifiedScale || {};
      const sType = (0, _type2.scaleType)(specifiedScale, channel, fieldDef, mark);
      scaleComponents[channel] = new _component.ScaleComponent(model.scaleName(channel + '', true), {
        value: sType,
        explicit: specifiedScale.type === sType
      });
    }

    return scaleComponents;
  }, {});
}

const scaleTypeTieBreaker = (0, _split.tieBreakByComparing)((st1, st2) => (0, _scale.scaleTypePrecedence)(st1) - (0, _scale.scaleTypePrecedence)(st2));

function parseNonUnitScaleCore(model) {
  const scaleComponents = model.component.scales = {};
  const scaleTypeWithExplicitIndex = {};
  const resolve = model.component.resolve; // Parse each child scale and determine if a particular channel can be merged.

  for (const child of model.children) {
    parseScaleCore(child); // Instead of always merging right away -- check if it is compatible to merge first!

    (0, _util.keys)(child.component.scales).forEach(channel => {
      // if resolve is undefined, set default first
      resolve.scale[channel] = resolve.scale[channel] || (0, _resolve.defaultScaleResolve)(channel, model);

      if (resolve.scale[channel] === 'shared') {
        const explicitScaleType = scaleTypeWithExplicitIndex[channel];
        const childScaleType = child.component.scales[channel].getWithExplicit('type');

        if (explicitScaleType) {
          if ((0, _scale.scaleCompatible)(explicitScaleType.value, childScaleType.value)) {
            // merge scale component if type are compatible
            scaleTypeWithExplicitIndex[channel] = (0, _split.mergeValuesWithExplicit)(explicitScaleType, childScaleType, 'type', 'scale', scaleTypeTieBreaker);
          } else {
            // Otherwise, update conflicting channel to be independent
            resolve.scale[channel] = 'independent'; // Remove from the index so they don't get merged

            delete scaleTypeWithExplicitIndex[channel];
          }
        } else {
          scaleTypeWithExplicitIndex[channel] = childScaleType;
        }
      }
    });
  } // Merge each channel listed in the index


  (0, _util.keys)(scaleTypeWithExplicitIndex).forEach(channel => {
    // Create new merged scale component
    const name = model.scaleName(channel, true);
    const typeWithExplicit = scaleTypeWithExplicitIndex[channel];
    scaleComponents[channel] = new _component.ScaleComponent(name, typeWithExplicit); // rename each child and mark them as merged

    for (const child of model.children) {
      const childScale = child.component.scales[channel];

      if (childScale) {
        child.renameScale(childScale.get('name'), name);
        childScale.merged = true;
      }
    }
  });
  return scaleComponents;
}
},{"../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../mark":"node_modules/vega-lite/build/src/mark.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../type":"node_modules/vega-lite/build/src/type.js","../../util":"node_modules/vega-lite/build/src/util.js","../model":"node_modules/vega-lite/build/src/compile/model.js","../resolve":"node_modules/vega-lite/build/src/compile/resolve.js","../split":"node_modules/vega-lite/build/src/compile/split.js","./component":"node_modules/vega-lite/build/src/compile/scale/component.js","./domain":"node_modules/vega-lite/build/src/compile/scale/domain.js","./properties":"node_modules/vega-lite/build/src/compile/scale/properties.js","./type":"node_modules/vega-lite/build/src/compile/scale/type.js"}],"node_modules/vega-lite/build/src/compile/model.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isUnitModel = isUnitModel;
exports.isFacetModel = isFacetModel;
exports.isRepeatModel = isRepeatModel;
exports.isConcatModel = isConcatModel;
exports.isLayerModel = isLayerModel;
exports.ModelWithField = exports.Model = exports.NameMap = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var _channel = require("../channel");

var _channeldef = require("../channeldef");

var _encoding = require("../encoding");

var log = _interopRequireWildcard(require("../log"));

var _scale = require("../scale");

var _spec = require("../spec");

var _base = require("../spec/base");

var _title = require("../title");

var _transform = require("../transform");

var _util = require("../util");

var _vega = require("../vega.schema");

var _assemble = require("./axis/assemble");

var _assemble2 = require("./header/assemble");

var _component = require("./header/component");

var _assemble3 = require("./layoutsize/assemble");

var _assemble4 = require("./legend/assemble");

var _parse = require("./legend/parse");

var _assemble5 = require("./projection/assemble");

var _parse2 = require("./projection/parse");

var _assemble6 = require("./scale/assemble");

var _domain = require("./scale/domain");

var _parse3 = require("./scale/parse");

var _split = require("./split");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class NameMap {
  constructor() {
    this.nameMap = {};
  }

  rename(oldName, newName) {
    this.nameMap[oldName] = newName;
  }

  has(name) {
    return this.nameMap[name] !== undefined;
  }

  get(name) {
    // If the name appears in the _nameMap, we need to read its new name.
    // We have to loop over the dict just in case the new name also gets renamed.
    while (this.nameMap[name] && name !== this.nameMap[name]) {
      name = this.nameMap[name];
    }

    return name;
  }

}
/*
  We use type guards instead of `instanceof` as `instanceof` makes
  different parts of the compiler depend on the actual implementation of
  the model classes, which in turn depend on different parts of the compiler.
  Thus, `instanceof` leads to circular dependency problems.

  On the other hand, type guards only make different parts of the compiler
  depend on the type of the model classes, but not the actual implementation.
*/


exports.NameMap = NameMap;

function isUnitModel(model) {
  return model && model.type === 'unit';
}

function isFacetModel(model) {
  return model && model.type === 'facet';
}

function isRepeatModel(model) {
  return model && model.type === 'repeat';
}

function isConcatModel(model) {
  return model && model.type === 'concat';
}

function isLayerModel(model) {
  return model && model.type === 'layer';
}

class Model {
  constructor(spec, type, parent, parentGivenName, config, repeater, resolve, view) {
    this.type = type;
    this.parent = parent;
    this.config = config;
    this.repeater = repeater;
    this.view = view;
    this.children = [];
    /**
     * Corrects the data references in marks after assemble.
     */

    this.correctDataNames = mark => {
      // TODO: make this correct
      // for normal data references
      if (mark.from && mark.from.data) {
        mark.from.data = this.lookupDataSource(mark.from.data);
      } // for access to facet data


      if (mark.from && mark.from.facet && mark.from.facet.data) {
        mark.from.facet.data = this.lookupDataSource(mark.from.facet.data);
      }

      return mark;
    };

    this.parent = parent;
    this.config = config;
    this.repeater = repeater; // If name is not provided, always use parent's givenName to avoid name conflicts.

    this.name = spec.name || parentGivenName;
    this.title = (0, _vegaUtil.isString)(spec.title) ? {
      text: spec.title
    } : spec.title; // Shared name maps

    this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();
    this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();
    this.signalNameMap = parent ? parent.signalNameMap : new NameMap();
    this.data = spec.data;
    this.description = spec.description;
    this.transforms = (0, _transform.normalizeTransform)(spec.transform || []);
    this.layout = (0, _spec.isUnitSpec)(spec) || (0, _spec.isLayerSpec)(spec) ? {} : (0, _base.extractCompositionLayout)(spec, type, config);
    this.component = {
      data: {
        sources: parent ? parent.component.data.sources : [],
        outputNodes: parent ? parent.component.data.outputNodes : {},
        outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},
        // data is faceted if the spec is a facet spec or the parent has faceted data and data is undefined
        isFaceted: (0, _spec.isFacetSpec)(spec) || parent && parent.component.data.isFaceted && spec.data === undefined
      },
      layoutSize: new _split.Split(),
      layoutHeaders: {
        row: {},
        column: {},
        facet: {}
      },
      mark: null,
      resolve: Object.assign({
        scale: {},
        axis: {},
        legend: {}
      }, resolve ? (0, _util.duplicate)(resolve) : {}),
      selection: null,
      scales: null,
      projection: null,
      axes: {},
      legends: {}
    };
  }

  get width() {
    return this.getSizeSignalRef('width');
  }

  get height() {
    return this.getSizeSignalRef('height');
  }

  initSize(size) {
    const {
      width,
      height
    } = size;

    if (width) {
      this.component.layoutSize.set('width', width, true);
    }

    if (height) {
      this.component.layoutSize.set('height', height, true);
    }
  }

  parse() {
    this.parseScale();
    this.parseLayoutSize(); // depends on scale

    this.renameTopLevelLayoutSizeSignal();
    this.parseSelections();
    this.parseProjection();
    this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.

    this.parseAxesAndHeaders(); // depends on scale and layout size

    this.parseLegends(); // depends on scale, markDef

    this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.
  }

  parseScale() {
    (0, _parse3.parseScales)(this);
  }

  parseProjection() {
    (0, _parse2.parseProjection)(this);
  }
  /**
   * Rename top-level spec's size to be just width / height, ignoring model name.
   * This essentially merges the top-level spec's width/height signals with the width/height signals
   * to help us reduce redundant signals declaration.
   */


  renameTopLevelLayoutSizeSignal() {
    if (this.getName('width') !== 'width') {
      this.renameSignal(this.getName('width'), 'width');
    }

    if (this.getName('height') !== 'height') {
      this.renameSignal(this.getName('height'), 'height');
    }
  }

  parseLegends() {
    (0, _parse.parseLegend)(this);
  }

  assembleGroupStyle() {
    if (this.type === 'unit' || this.type === 'layer') {
      return this.view && this.view.style || 'cell';
    }

    return undefined;
  }

  assembleEncodeFromView(view) {
    // Exclude "style"
    const {
      style: _
    } = view,
          baseView = tslib_1.__rest(view, ["style"]);

    const e = {};

    for (const property in baseView) {
      if (baseView.hasOwnProperty(property)) {
        const value = baseView[property];

        if (value !== undefined) {
          e[property] = {
            value
          };
        }
      }
    }

    return e;
  }

  assembleGroupEncodeEntry(isTopLevel) {
    let encodeEntry = undefined;

    if (this.view) {
      encodeEntry = this.assembleEncodeFromView(this.view);
    }

    if (!isTopLevel) {
      // For top-level spec, we can set the global width and height signal to adjust the group size.
      // For other child specs, we have to manually set width and height in the encode entry.
      if (this.type === 'unit' || this.type === 'layer') {
        return Object.assign({
          width: this.getSizeSignalRef('width'),
          height: this.getSizeSignalRef('height')
        }, encodeEntry || {});
      }
    }

    return encodeEntry;
  }

  assembleLayout() {
    if (!this.layout) {
      return undefined;
    }

    const _a = this.layout,
          {
      spacing
    } = _a,
          layout = tslib_1.__rest(_a, ["spacing"]);

    const {
      component,
      config
    } = this;
    const titleBand = (0, _assemble2.assembleLayoutTitleBand)(component.layoutHeaders, config);
    return Object.assign({
      padding: spacing
    }, this.assembleDefaultLayout(), layout, titleBand ? {
      titleBand
    } : {});
  }

  assembleDefaultLayout() {
    return {};
  }

  assembleHeaderMarks() {
    const {
      layoutHeaders
    } = this.component;
    let headerMarks = [];

    for (const channel of _channel.FACET_CHANNELS) {
      if (layoutHeaders[channel].title) {
        headerMarks.push((0, _assemble2.assembleTitleGroup)(this, channel));
      }
    }

    for (const channel of _component.HEADER_CHANNELS) {
      headerMarks = headerMarks.concat((0, _assemble2.assembleHeaderGroups)(this, channel));
    }

    return headerMarks;
  }

  assembleAxes() {
    return (0, _assemble.assembleAxes)(this.component.axes, this.config);
  }

  assembleLegends() {
    return (0, _assemble4.assembleLegends)(this);
  }

  assembleProjections() {
    return (0, _assemble5.assembleProjections)(this);
  }

  assembleTitle() {
    const _a = this.title || {},
          {
      encoding
    } = _a,
          titleNoEncoding = tslib_1.__rest(_a, ["encoding"]);

    const title = Object.assign({}, (0, _title.extractTitleConfig)(this.config.title).nonMark, titleNoEncoding, encoding ? {
      encode: {
        update: encoding
      }
    } : {});

    if (title.text) {
      if ((0, _util.contains)(['unit', 'layer'], this.type)) {
        // Unit/Layer
        if ((0, _util.contains)(['middle', undefined], title.anchor)) {
          title.frame = title.frame || 'group';
        }
      } else {
        // composition with Vega layout
        // Set title = "start" by default for composition as "middle" does not look nice
        // https://github.com/vega/vega/issues/960#issuecomment-471360328
        title.anchor = title.anchor || 'start';
      }

      return (0, _util.keys)(title).length > 0 ? title : undefined;
    }

    return undefined;
  }
  /**
   * Assemble the mark group for this model.  We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.
   */


  assembleGroup(signals = []) {
    const group = {};
    signals = signals.concat(this.assembleSignals());

    if (signals.length > 0) {
      group.signals = signals;
    }

    const layout = this.assembleLayout();

    if (layout) {
      group.layout = layout;
    }

    group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks()); // Only include scales if this spec is top-level or if parent is facet.
    // (Otherwise, it will be merged with upper-level's scope.)

    const scales = !this.parent || isFacetModel(this.parent) ? (0, _assemble6.assembleScales)(this) : [];

    if (scales.length > 0) {
      group.scales = scales;
    }

    const axes = this.assembleAxes();

    if (axes.length > 0) {
      group.axes = axes;
    }

    const legends = this.assembleLegends();

    if (legends.length > 0) {
      group.legends = legends;
    }

    return group;
  }

  hasDescendantWithFieldOnChannel(channel) {
    for (const child of this.children) {
      if (isUnitModel(child)) {
        if (child.channelHasField(channel)) {
          return true;
        }
      } else {
        if (child.hasDescendantWithFieldOnChannel(channel)) {
          return true;
        }
      }
    }

    return false;
  }

  getName(text) {
    return (0, _util.varName)((this.name ? this.name + '_' : '') + text);
  }
  /**
   * Request a data source name for the given data source type and mark that data source as required.
   * This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().
   * You can lookup the correct dataset name in assemble with `lookupDataSource`.
   */


  requestDataName(name) {
    const fullName = this.getName(name); // Increase ref count. This is critical because otherwise we won't create a data source.
    // We also increase the ref counts on OutputNode.getSource() calls.

    const refCounts = this.component.data.outputNodeRefCounts;
    refCounts[fullName] = (refCounts[fullName] || 0) + 1;
    return fullName;
  }

  getSizeSignalRef(sizeType) {
    if (isFacetModel(this.parent)) {
      const channel = sizeType === 'width' ? 'x' : 'y';
      const scaleComponent = this.component.scales[channel];

      if (scaleComponent && !scaleComponent.merged) {
        // independent scale
        const type = scaleComponent.get('type');
        const range = scaleComponent.get('range');

        if ((0, _scale.hasDiscreteDomain)(type) && (0, _vega.isVgRangeStep)(range)) {
          const scaleName = scaleComponent.get('name');
          const domain = (0, _domain.assembleDomain)(this, channel);
          const field = (0, _domain.getFieldFromDomain)(domain);

          if (field) {
            const fieldRef = (0, _channeldef.vgField)({
              aggregate: 'distinct',
              field
            }, {
              expr: 'datum'
            });
            return {
              signal: (0, _assemble3.sizeExpr)(scaleName, scaleComponent, fieldRef)
            };
          } else {
            log.warn('Unknown field for ${channel}.  Cannot calculate view size.');
            return null;
          }
        }
      }
    }

    return {
      signal: this.signalNameMap.get(this.getName(sizeType))
    };
  }
  /**
   * Lookup the name of the datasource for an output node. You probably want to call this in assemble.
   */


  lookupDataSource(name) {
    const node = this.component.data.outputNodes[name];

    if (!node) {
      // Name not found in map so let's just return what we got.
      // This can happen if we already have the correct name.
      return name;
    }

    return node.getSource();
  }

  getSignalName(oldSignalName) {
    return this.signalNameMap.get(oldSignalName);
  }

  renameSignal(oldName, newName) {
    this.signalNameMap.rename(oldName, newName);
  }

  renameScale(oldName, newName) {
    this.scaleNameMap.rename(oldName, newName);
  }

  renameProjection(oldName, newName) {
    this.projectionNameMap.rename(oldName, newName);
  }
  /**
   * @return scale name for a given channel after the scale has been parsed and named.
   */


  scaleName(originalScaleName, parse) {
    if (parse) {
      // During the parse phase always return a value
      // No need to refer to rename map because a scale can't be renamed
      // before it has the original name.
      return this.getName(originalScaleName);
    } // If there is a scale for the channel, it should either
    // be in the scale component or exist in the name map


    if ( // If there is a scale for the channel, there should be a local scale component for it
    (0, _channel.isChannel)(originalScaleName) && (0, _channel.isScaleChannel)(originalScaleName) && this.component.scales[originalScaleName] || // in the scale name map (the scale get merged by its parent)
    this.scaleNameMap.has(this.getName(originalScaleName))) {
      return this.scaleNameMap.get(this.getName(originalScaleName));
    }

    return undefined;
  }
  /**
   * @return projection name after the projection has been parsed and named.
   */


  projectionName(parse) {
    if (parse) {
      // During the parse phase always return a value
      // No need to refer to rename map because a projection can't be renamed
      // before it has the original name.
      return this.getName('projection');
    }

    if (this.component.projection && !this.component.projection.merged || this.projectionNameMap.has(this.getName('projection'))) {
      return this.projectionNameMap.get(this.getName('projection'));
    }

    return undefined;
  }
  /**
   * Traverse a model's hierarchy to get the scale component for a particular channel.
   */


  getScaleComponent(channel) {
    /* istanbul ignore next: This is warning for debugging test */
    if (!this.component.scales) {
      throw new Error('getScaleComponent cannot be called before parseScale().  Make sure you have called parseScale or use parseUnitModelWithScale().');
    }

    const localScaleComponent = this.component.scales[channel];

    if (localScaleComponent && !localScaleComponent.merged) {
      return localScaleComponent;
    }

    return this.parent ? this.parent.getScaleComponent(channel) : undefined;
  }
  /**
   * Traverse a model's hierarchy to get a particular selection component.
   */


  getSelectionComponent(variableName, origName) {
    let sel = this.component.selection[variableName];

    if (!sel && this.parent) {
      sel = this.parent.getSelectionComponent(variableName, origName);
    }

    if (!sel) {
      throw new Error(log.message.selectionNotFound(origName));
    }

    return sel;
  }

}
/** Abstract class for UnitModel and FacetModel.  Both of which can contain fieldDefs as a part of its own specification. */


exports.Model = Model;

class ModelWithField extends Model {
  /** Get "field" reference for Vega */
  vgField(channel, opt = {}) {
    const fieldDef = this.fieldDef(channel);

    if (!fieldDef) {
      return undefined;
    }

    return (0, _channeldef.vgField)(fieldDef, opt);
  }

  reduceFieldDef(f, init, t) {
    return (0, _encoding.reduce)(this.getMapping(), (acc, cd, c) => {
      const fieldDef = (0, _channeldef.getFieldDef)(cd);

      if (fieldDef) {
        return f(acc, fieldDef, c);
      }

      return acc;
    }, init, t);
  }

  forEachFieldDef(f, t) {
    (0, _encoding.forEach)(this.getMapping(), (cd, c) => {
      const fieldDef = (0, _channeldef.getFieldDef)(cd);

      if (fieldDef) {
        f(fieldDef, c);
      }
    }, t);
  }

}

exports.ModelWithField = ModelWithField;
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../channel":"node_modules/vega-lite/build/src/channel.js","../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../encoding":"node_modules/vega-lite/build/src/encoding.js","../log":"node_modules/vega-lite/build/src/log/index.js","../scale":"node_modules/vega-lite/build/src/scale.js","../spec":"node_modules/vega-lite/build/src/spec/index.js","../spec/base":"node_modules/vega-lite/build/src/spec/base.js","../title":"node_modules/vega-lite/build/src/title.js","../transform":"node_modules/vega-lite/build/src/transform.js","../util":"node_modules/vega-lite/build/src/util.js","../vega.schema":"node_modules/vega-lite/build/src/vega.schema.js","./axis/assemble":"node_modules/vega-lite/build/src/compile/axis/assemble.js","./header/assemble":"node_modules/vega-lite/build/src/compile/header/assemble.js","./header/component":"node_modules/vega-lite/build/src/compile/header/component.js","./layoutsize/assemble":"node_modules/vega-lite/build/src/compile/layoutsize/assemble.js","./legend/assemble":"node_modules/vega-lite/build/src/compile/legend/assemble.js","./legend/parse":"node_modules/vega-lite/build/src/compile/legend/parse.js","./projection/assemble":"node_modules/vega-lite/build/src/compile/projection/assemble.js","./projection/parse":"node_modules/vega-lite/build/src/compile/projection/parse.js","./scale/assemble":"node_modules/vega-lite/build/src/compile/scale/assemble.js","./scale/domain":"node_modules/vega-lite/build/src/compile/scale/domain.js","./scale/parse":"node_modules/vega-lite/build/src/compile/scale/parse.js","./split":"node_modules/vega-lite/build/src/compile/split.js"}],"node_modules/vega-lite/build/src/compile/data/filterinvalid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterInvalidNode = void 0;

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _mark = require("../../mark");

var _scale = require("../../scale");

var _util = require("../../util");

var _dataflow = require("./dataflow");

class FilterInvalidNode extends _dataflow.DataFlowNode {
  constructor(parent, filter) {
    super(parent);
    this.filter = filter;
  }

  clone() {
    return new FilterInvalidNode(null, Object.assign({}, this.filter));
  }

  static make(parent, model) {
    const {
      config,
      mark
    } = model;

    if (config.invalidValues !== 'filter') {
      return null;
    }

    const filter = model.reduceFieldDef((aggregator, fieldDef, channel) => {
      const scaleComponent = (0, _channel.isScaleChannel)(channel) && model.getScaleComponent(channel);

      if (scaleComponent) {
        const scaleType = scaleComponent.get('type'); // While discrete domain scales can handle invalid values, continuous scales can't.
        // Thus, for non-path marks, we have to filter null for scales with continuous domains.
        // (For path marks, we will use "defined" property and skip these values instead.)

        if ((0, _scale.hasContinuousDomain)(scaleType) && !fieldDef.aggregate && !(0, _mark.isPathMark)(mark)) {
          aggregator[fieldDef.field] = fieldDef;
        }
      }

      return aggregator;
    }, {});

    if (!(0, _util.keys)(filter).length) {
      return null;
    }

    return new FilterInvalidNode(parent, filter);
  }

  dependentFields() {
    return new Set((0, _util.keys)(this.filter));
  } // create the VgTransforms for each of the filtered fields


  assemble() {
    const filters = (0, _util.keys)(this.filter).reduce((vegaFilters, field) => {
      const fieldDef = this.filter[field];
      const ref = (0, _channeldef.vgField)(fieldDef, {
        expr: 'datum'
      });

      if (fieldDef !== null) {
        vegaFilters.push(`${ref} !== null`);
        vegaFilters.push(`!isNaN(${ref})`);
      }

      return vegaFilters;
    }, []);
    return filters.length > 0 ? {
      type: 'filter',
      expr: filters.join(' && ')
    } : null;
  }

}

exports.FilterInvalidNode = FilterInvalidNode;
},{"../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../mark":"node_modules/vega-lite/build/src/mark.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/flatten.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FlattenTransformNode = void 0;

var _util = require("../../util");

var _dataflow = require("./dataflow");

/**
 * A class for flatten transform nodes
 */
class FlattenTransformNode extends _dataflow.DataFlowNode {
  constructor(parent, transform) {
    super(parent);
    this.transform = transform;
    this.transform = (0, _util.duplicate)(transform); // duplicate to prevent side effects

    const {
      flatten,
      as = []
    } = this.transform;
    this.transform.as = flatten.map((f, i) => as[i] || f);
  }

  clone() {
    return new FlattenTransformNode(this.parent, (0, _util.duplicate)(this.transform));
  }

  producedFields() {
    return new Set(this.transform.as);
  }

  hash() {
    return `FlattenTransform ${(0, _util.hash)(this.transform)}`;
  }

  assemble() {
    const {
      flatten: fields,
      as
    } = this.transform;
    const result = {
      type: 'flatten',
      fields,
      as
    };
    return result;
  }

}

exports.FlattenTransformNode = FlattenTransformNode;
},{"../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/fold.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FoldTransformNode = void 0;

var _util = require("../../util");

var _dataflow = require("./dataflow");

/**
 * A class for flatten transform nodes
 */
class FoldTransformNode extends _dataflow.DataFlowNode {
  constructor(parent, transform) {
    super(parent);
    this.transform = transform;
    this.transform = (0, _util.duplicate)(transform); // duplicate to prevent side effects

    const specifiedAs = this.transform.as || [undefined, undefined];
    this.transform.as = [specifiedAs[0] || 'key', specifiedAs[1] || 'value'];
  }

  clone() {
    return new FoldTransformNode(null, (0, _util.duplicate)(this.transform));
  }

  producedFields() {
    return new Set(this.transform.as);
  }

  hash() {
    return `FoldTransform ${(0, _util.hash)(this.transform)}`;
  }

  assemble() {
    const {
      fold,
      as
    } = this.transform;
    const result = {
      type: 'fold',
      fields: fold,
      as
    };
    return result;
  }

}

exports.FoldTransformNode = FoldTransformNode;
},{"../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/geojson.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GeoJSONNode = void 0;

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _type = require("../../type");

var _util = require("../../util");

var _dataflow = require("./dataflow");

class GeoJSONNode extends _dataflow.DataFlowNode {
  constructor(parent, fields, geojson, signal) {
    super(parent);
    this.fields = fields;
    this.geojson = geojson;
    this.signal = signal;
  }

  clone() {
    return new GeoJSONNode(null, (0, _util.duplicate)(this.fields), this.geojson, this.signal);
  }

  static parseAll(parent, model) {
    if (model.component.projection && !model.component.projection.isFit) {
      return parent;
    }

    let geoJsonCounter = 0;
    [[_channel.LONGITUDE, _channel.LATITUDE], [_channel.LONGITUDE2, _channel.LATITUDE2]].forEach(coordinates => {
      const pair = coordinates.map(channel => model.channelHasField(channel) ? model.fieldDef(channel).field : (0, _channeldef.isValueDef)(model.encoding[channel]) ? {
        expr: model.encoding[channel].value + ''
      } : undefined);

      if (pair[0] || pair[1]) {
        parent = new GeoJSONNode(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));
      }
    });

    if (model.channelHasField(_channel.SHAPE)) {
      const fieldDef = model.fieldDef(_channel.SHAPE);

      if (fieldDef.type === _type.GEOJSON) {
        parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));
      }
    }

    return parent;
  }

  assemble() {
    return Object.assign({
      type: 'geojson'
    }, this.fields ? {
      fields: this.fields
    } : {}, this.geojson ? {
      geojson: this.geojson
    } : {}, {
      signal: this.signal
    });
  }

}

exports.GeoJSONNode = GeoJSONNode;
},{"../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../type":"node_modules/vega-lite/build/src/type.js","../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/geopoint.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GeoPointNode = void 0;

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _util = require("../../util");

var _dataflow = require("./dataflow");

class GeoPointNode extends _dataflow.DataFlowNode {
  constructor(parent, projection, fields, as) {
    super(parent);
    this.projection = projection;
    this.fields = fields;
    this.as = as;
  }

  clone() {
    return new GeoPointNode(null, this.projection, (0, _util.duplicate)(this.fields), (0, _util.duplicate)(this.as));
  }

  static parseAll(parent, model) {
    if (!model.projectionName()) {
      return parent;
    }

    [[_channel.LONGITUDE, _channel.LATITUDE], [_channel.LONGITUDE2, _channel.LATITUDE2]].forEach(coordinates => {
      const pair = coordinates.map(channel => model.channelHasField(channel) ? model.fieldDef(channel).field : (0, _channeldef.isValueDef)(model.encoding[channel]) ? {
        expr: model.encoding[channel].value + ''
      } : undefined);
      const suffix = coordinates[0] === _channel.LONGITUDE2 ? '2' : '';

      if (pair[0] || pair[1]) {
        parent = new GeoPointNode(parent, model.projectionName(), pair, [model.getName('x' + suffix), model.getName('y' + suffix)]);
      }
    });
    return parent;
  }

  assemble() {
    return {
      type: 'geopoint',
      projection: this.projection,
      fields: this.fields,
      as: this.as
    };
  }

}

exports.GeoPointNode = GeoPointNode;
},{"../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/identifier.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IdentifierNode = void 0;

var _selection = require("../../selection");

var _dataflow = require("./dataflow");

class IdentifierNode extends _dataflow.DataFlowNode {
  clone() {
    return new IdentifierNode(null);
  }

  constructor(parent) {
    super(parent);
  }

  producedFields() {
    return new Set([_selection.SELECTION_ID]);
  }

  hash() {
    return 'Identifier';
  }

  assemble() {
    return {
      type: 'identifier',
      as: _selection.SELECTION_ID
    };
  }

}

exports.IdentifierNode = IdentifierNode;
},{"../../selection":"node_modules/vega-lite/build/src/selection.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/impute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImputeNode = void 0;

var _channeldef = require("../../channeldef");

var _encoding = require("../../encoding");

var _transform = require("../../transform");

var _util = require("../../util");

var _dataflow = require("./dataflow");

class ImputeNode extends _dataflow.DataFlowNode {
  constructor(parent, transform) {
    super(parent);
    this.transform = transform;
  }

  clone() {
    return new ImputeNode(null, (0, _util.duplicate)(this.transform));
  }

  producedFields() {
    return new Set([this.transform.impute]);
  }

  processSequence(keyvals) {
    const {
      start = 0,
      stop,
      step
    } = keyvals;
    const result = [start, stop, ...(step ? [step] : [])].join(',');
    return {
      signal: `sequence(${result})`
    };
  }

  static makeFromTransform(parent, imputeTransform) {
    return new ImputeNode(parent, imputeTransform);
  }

  static makeFromEncoding(parent, model) {
    const encoding = model.encoding;
    const xDef = encoding.x;
    const yDef = encoding.y;

    if ((0, _channeldef.isFieldDef)(xDef) && (0, _channeldef.isFieldDef)(yDef)) {
      const imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : undefined;

      if (imputedChannel === undefined) {
        return undefined;
      }

      const keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : undefined;
      const {
        method,
        value,
        frame,
        keyvals
      } = imputedChannel.impute;
      const groupbyFields = (0, _encoding.pathGroupingFields)(model.mark, encoding);
      return new ImputeNode(parent, Object.assign({
        impute: imputedChannel.field,
        key: keyChannel.field
      }, method ? {
        method
      } : {}, value !== undefined ? {
        value
      } : {}, frame ? {
        frame
      } : {}, keyvals !== undefined ? {
        keyvals
      } : {}, groupbyFields.length ? {
        groupby: groupbyFields
      } : {}));
    }

    return null;
  }

  hash() {
    return `Impute ${(0, _util.hash)(this.transform)}`;
  }

  assemble() {
    const {
      impute,
      key,
      keyvals,
      method,
      groupby,
      value,
      frame = [null, null]
    } = this.transform;
    const initialImpute = Object.assign({
      type: 'impute',
      field: impute,
      key
    }, keyvals ? {
      keyvals: (0, _transform.isImputeSequence)(keyvals) ? this.processSequence(keyvals) : keyvals
    } : {}, {
      method: 'value'
    }, groupby ? {
      groupby
    } : {}, {
      value: null
    });
    let setImputedField;

    if (method && method !== 'value') {
      const deriveNewField = Object.assign({
        type: 'window',
        as: [`imputed_${impute}_value`],
        ops: [method],
        fields: [impute],
        frame,
        ignorePeers: false
      }, groupby ? {
        groupby
      } : {});
      const replaceOriginal = {
        type: 'formula',
        expr: `datum.${impute} === null ? datum.imputed_${impute}_value : datum.${impute}`,
        as: impute
      };
      setImputedField = [deriveNewField, replaceOriginal];
    } else {
      const replaceWithValue = {
        type: 'formula',
        expr: `datum.${impute} === null ? ${value} : datum.${impute}`,
        as: impute
      };
      setImputedField = [replaceWithValue];
    }

    return [initialImpute, ...setImputedField];
  }

}

exports.ImputeNode = ImputeNode;
},{"../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../encoding":"node_modules/vega-lite/build/src/encoding.js","../../transform":"node_modules/vega-lite/build/src/transform.js","../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AncestorParse = void 0;

var _split = require("../split");

/**
 * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)
 * about how fields have been parsed or whether they have been derived in a transform. We use this to not parse the
 * same field again (or differently).
 */
class AncestorParse extends _split.Split {
  constructor(explicit = {}, implicit = {}, parseNothing = false) {
    super(explicit, implicit);
    this.explicit = explicit;
    this.implicit = implicit;
    this.parseNothing = parseNothing;
  }

  clone() {
    const clone = super.clone();
    clone.parseNothing = this.parseNothing;
    return clone;
  }

}

exports.AncestorParse = AncestorParse;
},{"../split":"node_modules/vega-lite/build/src/compile/split.js"}],"node_modules/vega-lite/build/src/compile/data/lookup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LookupNode = void 0;

var _vegaUtil = require("vega-util");

var log = _interopRequireWildcard(require("../../log"));

var _util = require("../../util");

var _dataflow = require("./dataflow");

var _parse = require("./parse");

var _source = require("./source");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class LookupNode extends _dataflow.DataFlowNode {
  constructor(parent, transform, secondary) {
    super(parent);
    this.transform = transform;
    this.secondary = secondary;
  }

  clone() {
    return new LookupNode(null, (0, _util.duplicate)(this.transform), this.secondary);
  }

  static make(parent, model, transform, counter) {
    const sources = model.component.data.sources;
    let fromSource = (0, _parse.findSource)(transform.from.data, sources);

    if (!fromSource) {
      fromSource = new _source.SourceNode(transform.from.data);
      sources.push(fromSource);
    }

    const fromOutputName = model.getName(`lookup_${counter}`);
    const fromOutputNode = new _dataflow.OutputNode(fromSource, fromOutputName, 'lookup', model.component.data.outputNodeRefCounts);
    model.component.data.outputNodes[fromOutputName] = fromOutputNode;
    return new LookupNode(parent, transform, fromOutputNode.getSource());
  }

  producedFields() {
    return new Set(this.transform.from.fields || (this.transform.as instanceof Array ? this.transform.as : [this.transform.as]));
  }

  hash() {
    return `Lookup ${(0, _util.hash)({
      transform: this.transform,
      secondary: this.secondary
    })}`;
  }

  assemble() {
    let foreign;

    if (this.transform.from.fields) {
      // lookup a few fields and add create a flat output
      foreign = Object.assign({
        values: this.transform.from.fields
      }, this.transform.as ? {
        as: this.transform.as instanceof Array ? this.transform.as : [this.transform.as]
      } : {});
    } else {
      // lookup full record and nest it
      let asName = this.transform.as;

      if (!(0, _vegaUtil.isString)(asName)) {
        log.warn(log.message.NO_FIELDS_NEEDS_AS);
        asName = '_lookup';
      }

      foreign = {
        as: [asName]
      };
    }

    return Object.assign({
      type: 'lookup',
      from: this.secondary,
      key: this.transform.from.key,
      fields: [this.transform.lookup]
    }, foreign, this.transform.default ? {
      default: this.transform.default
    } : {});
  }

}

exports.LookupNode = LookupNode;
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js","./parse":"node_modules/vega-lite/build/src/compile/data/parse.js","./source":"node_modules/vega-lite/build/src/compile/data/source.js"}],"node_modules/vega-lite/build/src/compile/data/sample.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SampleTransformNode = void 0;

var _util = require("../../util");

var _dataflow = require("./dataflow");

/**
 * A class for the sample transform nodes
 */
class SampleTransformNode extends _dataflow.DataFlowNode {
  constructor(parent, transform) {
    super(parent);
    this.transform = transform;
  }

  clone() {
    return new SampleTransformNode(null, (0, _util.duplicate)(this.transform));
  }

  hash() {
    return `SampleTransform ${(0, _util.hash)(this.transform)}`;
  }

  assemble() {
    return {
      type: 'sample',
      size: this.transform.sample
    };
  }

}

exports.SampleTransformNode = SampleTransformNode;
},{"../../util":"node_modules/vega-lite/build/src/util.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"node_modules/vega-lite/build/src/compile/data/assemble.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assembleFacetData = assembleFacetData;
exports.assembleRootData = assembleRootData;

var _data = require("../../data");

var _aggregate = require("./aggregate");

var _bin = require("./bin");

var _calculate = require("./calculate");

var _dataflow = require("./dataflow");

var _facet = require("./facet");

var _filter = require("./filter");

var _filterinvalid = require("./filterinvalid");

var _flatten = require("./flatten");

var _fold = require("./fold");

var _formatparse = require("./formatparse");

var _geojson = require("./geojson");

var _geopoint = require("./geopoint");

var _graticule = require("./graticule");

var _identifier = require("./identifier");

var _impute = require("./impute");

var _joinaggregate = require("./joinaggregate");

var _lookup = require("./lookup");

var _sample = require("./sample");

var _sequence = require("./sequence");

var _source = require("./source");

var _stack = require("./stack");

var _timeunit = require("./timeunit");

var _window = require("./window");

function makeWalkTree(data) {
  // to name datasources
  let datasetIndex = 0;
  /**
   * Recursively walk down the tree.
   */

  function walkTree(node, dataSource) {
    if (node instanceof _source.SourceNode) {
      // If the source is a named data source or a data source with values, we need
      // to put it in a different data source. Otherwise, Vega may override the data.
      if (!node.isGenerator && !(0, _data.isUrlData)(node.data)) {
        data.push(dataSource);
        const newData = {
          name: null,
          source: dataSource.name,
          transform: []
        };
        dataSource = newData;
      }
    }

    if (node instanceof _formatparse.ParseNode) {
      if (node.parent instanceof _source.SourceNode && !dataSource.source) {
        // If node's parent is a root source and the data source does not refer to another data source, use normal format parse
        dataSource.format = Object.assign({}, dataSource.format || {}, {
          parse: node.assembleFormatParse()
        }); // add calculates for all nested fields

        dataSource.transform.push(...node.assembleTransforms(true));
      } else {
        // Otherwise use Vega expression to parse
        dataSource.transform.push(...node.assembleTransforms());
      }
    }

    if (node instanceof _facet.FacetNode) {
      if (!dataSource.name) {
        dataSource.name = `data_${datasetIndex++}`;
      }

      if (!dataSource.source || dataSource.transform.length > 0) {
        data.push(dataSource);
        node.data = dataSource.name;
      } else {
        node.data = dataSource.source;
      }

      node.assemble().forEach(d => data.push(d)); // break here because the rest of the tree has to be taken care of by the facet.

      return;
    }

    if (node instanceof _graticule.GraticuleNode || node instanceof _sequence.SequenceNode || node instanceof _filterinvalid.FilterInvalidNode || node instanceof _filter.FilterNode || node instanceof _calculate.CalculateNode || node instanceof _geopoint.GeoPointNode || node instanceof _geojson.GeoJSONNode || node instanceof _aggregate.AggregateNode || node instanceof _lookup.LookupNode || node instanceof _window.WindowTransformNode || node instanceof _joinaggregate.JoinAggregateTransformNode || node instanceof _fold.FoldTransformNode || node instanceof _flatten.FlattenTransformNode || node instanceof _identifier.IdentifierNode || node instanceof _sample.SampleTransformNode) {
      dataSource.transform.push(node.assemble());
    }

    if (node instanceof _bin.BinNode || node instanceof _timeunit.TimeUnitNode || node instanceof _impute.ImputeNode || node instanceof _stack.StackNode) {
      dataSource.transform.push(...node.assemble());
    }

    if (node instanceof _dataflow.OutputNode) {
      if (dataSource.source && dataSource.transform.length === 0) {
        node.setSource(dataSource.source);
      } else if (node.parent instanceof _dataflow.OutputNode) {
        // Note that an output node may be required but we still do not assemble a
        // separate data source for it.
        node.setSource(dataSource.name);
      } else {
        if (!dataSource.name) {
          dataSource.name = `data_${datasetIndex++}`;
        } // Here we set the name of the datasource we generated. From now on
        // other assemblers can use it.


        node.setSource(dataSource.name); // if this node has more than one child, we will add a datasource automatically

        if (node.numChildren() === 1) {
          data.push(dataSource);
          const newData = {
            name: null,
            source: dataSource.name,
            transform: []
          };
          dataSource = newData;
        }
      }
    }

    switch (node.numChildren()) {
      case 0:
        // done
        if (node instanceof _dataflow.OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {
          // do not push empty datasources that are simply references
          data.push(dataSource);
        }

        break;

      case 1:
        walkTree(node.children[0], dataSource);
        break;

      default:
        {
          if (!dataSource.name) {
            dataSource.name = `data_${datasetIndex++}`;
          }

          let source = dataSource.name;

          if (!dataSource.source || dataSource.transform.length > 0) {
            data.push(dataSource);
          } else {
            source = dataSource.source;
          }

          node.children.forEach(child => {
            const newData = {
              name: null,
              source: source,
              transform: []
            };
            walkTree(child, newData);
          });
          break;
        }
    }
  }

  return walkTree;
}
/**
 * Assemble data sources that are derived from faceted data.
 */


function assembleFacetData(root) {
  const data = [];
  const walkTree = makeWalkTree(data);
  root.children.forEach(child => walkTree(child, {
    source: root.name,
    name: null,
    transform: []
  }));
  return data;
}
/**
 * Create Vega Data array from a given compiled model and append all of them to the given array
 *
 * @param  model
 * @param  data array
 * @return modified data array
 */


function assembleRootData(dataComponent, datasets) {
  const data = []; // dataComponent.sources.forEach(debug);
  // draw(dataComponent.sources);

  const walkTree = makeWalkTree(data);
  let sourceIndex = 0;
  dataComponent.sources.forEach(root => {
    // assign a name if the source does not have a name yet
    if (!root.hasName()) {
      root.dataName = `source_${sourceIndex++}`;
    }

    const newData = root.assemble();
    walkTree(root, newData);
  }); // remove empty transform arrays for cleaner output

  data.forEach(d => {
    if (d.transform.length === 0) {
      delete d.transform;
    }
  }); // move sources without transforms (the ones that are potentially used in lookups) to the beginning

  let whereTo = 0;

  for (const [i, d] of data.entries()) {
    if ((d.transform || []).length === 0 && !d.source) {
      data.splice(whereTo++, 0, data.splice(i, 1)[0]);
    }
  } // now fix the from references in lookup transforms


  for (const d of data) {
    for (const t of d.transform || []) {
      if (t.type === 'lookup') {
        t.from = dataComponent.outputNodes[t.from].getSource();
      }
    }
  } // inline values for datasets that are in the datastore


  for (const d of data) {
    if (d.name in datasets) {
      d.values = datasets[d.name];
    }
  }

  return data;
}
},{"../../data":"node_modules/vega-lite/build/src/data.js","./aggregate":"node_modules/vega-lite/build/src/compile/data/aggregate.js","./bin":"node_modules/vega-lite/build/src/compile/data/bin.js","./calculate":"node_modules/vega-lite/build/src/compile/data/calculate.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js","./facet":"node_modules/vega-lite/build/src/compile/data/facet.js","./filter":"node_modules/vega-lite/build/src/compile/data/filter.js","./filterinvalid":"node_modules/vega-lite/build/src/compile/data/filterinvalid.js","./flatten":"node_modules/vega-lite/build/src/compile/data/flatten.js","./fold":"node_modules/vega-lite/build/src/compile/data/fold.js","./formatparse":"node_modules/vega-lite/build/src/compile/data/formatparse.js","./geojson":"node_modules/vega-lite/build/src/compile/data/geojson.js","./geopoint":"node_modules/vega-lite/build/src/compile/data/geopoint.js","./graticule":"node_modules/vega-lite/build/src/compile/data/graticule.js","./identifier":"node_modules/vega-lite/build/src/compile/data/identifier.js","./impute":"node_modules/vega-lite/build/src/compile/data/impute.js","./joinaggregate":"node_modules/vega-lite/build/src/compile/data/joinaggregate.js","./lookup":"node_modules/vega-lite/build/src/compile/data/lookup.js","./sample":"node_modules/vega-lite/build/src/compile/data/sample.js","./sequence":"node_modules/vega-lite/build/src/compile/data/sequence.js","./source":"node_modules/vega-lite/build/src/compile/data/source.js","./stack":"node_modules/vega-lite/build/src/compile/data/stack.js","./timeunit":"node_modules/vega-lite/build/src/compile/data/timeunit.js","./window":"node_modules/vega-lite/build/src/compile/data/window.js"}],"node_modules/vega-lite/build/src/compile/header/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHeaderType = getHeaderType;
exports.parseFacetHeaders = parseFacetHeaders;

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _util = require("../../util");

var _assemble = require("../axis/assemble");

var _resolve = require("../resolve");

var _common = require("./common");

function getHeaderType(orient) {
  if (orient === 'top' || orient === 'left') {
    return 'header';
  }

  return 'footer';
}

function parseFacetHeaders(model) {
  for (const channel of _channel.FACET_CHANNELS) {
    parseFacetHeader(model, channel);
  }

  mergeChildAxis(model, 'x');
  mergeChildAxis(model, 'y');
}

function parseFacetHeader(model, channel) {
  if (model.channelHasField(channel)) {
    const fieldDef = model.facet[channel];
    const titleConfig = (0, _common.getHeaderProperty)('title', null, model.config, channel);
    let title = (0, _channeldef.title)(fieldDef, model.config, {
      allowDisabling: true,
      includeDefault: titleConfig === undefined || !!titleConfig
    });

    if (model.child.component.layoutHeaders[channel].title) {
      // merge title with child to produce "Title / Subtitle / Sub-subtitle"
      title += ' / ' + model.child.component.layoutHeaders[channel].title;
      model.child.component.layoutHeaders[channel].title = null;
    }

    const labelOrient = (0, _common.getHeaderProperty)('labelOrient', fieldDef, model.config, channel);
    const header = fieldDef.header || {};
    const labels = (0, _util.getFirstDefined)(header.labels, true);
    const headerType = (0, _util.contains)(['bottom', 'right'], labelOrient) ? 'footer' : 'header';
    model.component.layoutHeaders[channel] = {
      title,
      facetFieldDef: fieldDef,
      [headerType]: channel === 'facet' ? [] : [makeHeaderComponent(model, channel, labels)]
    };
  }
}

function makeHeaderComponent(model, channel, labels) {
  const sizeType = channel === 'row' ? 'height' : 'width';
  return {
    labels,
    sizeSignal: model.child.component.layoutSize.get(sizeType) ? model.child.getSizeSignalRef(sizeType) : undefined,
    axes: []
  };
}

function mergeChildAxis(model, channel) {
  const {
    child
  } = model;

  if (child.component.axes[channel]) {
    const {
      layoutHeaders,
      resolve
    } = model.component;
    resolve.axis[channel] = (0, _resolve.parseGuideResolve)(resolve, channel);

    if (resolve.axis[channel] === 'shared') {
      // For shared axis, move the axes to facet's header or footer
      const headerChannel = channel === 'x' ? 'column' : 'row';
      const layoutHeader = layoutHeaders[headerChannel];

      for (const axisComponent of child.component.axes[channel]) {
        const headerType = getHeaderType(axisComponent.get('orient'));
        layoutHeader[headerType] = layoutHeader[headerType] || [makeHeaderComponent(model, headerChannel, false)]; // FIXME: assemble shouldn't be called here, but we do it this way so we only extract the main part of the axes

        const mainAxis = (0, _assemble.assembleAxis)(axisComponent, 'main', model.config, {
          header: true
        }); // LayoutHeader no longer keep track of property precedence, thus let's combine.

        layoutHeader[headerType][0].axes.push(mainAxis);
        axisComponent.mainExtracted = true;
      }
    } else {// Otherwise do nothing for independent axes
    }
  }
}
},{"../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../util":"node_modules/vega-lite/build/src/util.js","../axis/assemble":"node_modules/vega-lite/build/src/compile/axis/assemble.js","../resolve":"node_modules/vega-lite/build/src/compile/resolve.js","./common":"node_modules/vega-lite/build/src/compile/header/common.js"}],"node_modules/vega-lite/build/src/compile/layoutsize/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseLayerLayoutSize = parseLayerLayoutSize;
exports.parseConcatLayoutSize = parseConcatLayoutSize;
exports.parseChildrenLayoutSize = parseChildrenLayoutSize;
exports.parseUnitLayoutSize = parseUnitLayoutSize;
exports.parseRepeatLayoutSize = void 0;

var _scale = require("../../scale");

var _vega = require("../../vega.schema");

var _split = require("../split");

function parseLayerLayoutSize(model) {
  parseChildrenLayoutSize(model);
  const layoutSizeCmpt = model.component.layoutSize;
  layoutSizeCmpt.setWithExplicit('width', parseNonUnitLayoutSizeForChannel(model, 'width'));
  layoutSizeCmpt.setWithExplicit('height', parseNonUnitLayoutSizeForChannel(model, 'height'));
}

const parseRepeatLayoutSize = parseLayerLayoutSize;
exports.parseRepeatLayoutSize = parseRepeatLayoutSize;
const SIZE_TYPE_TO_MERGE = {
  vconcat: 'width',
  hconcat: 'height'
};

function parseConcatLayoutSize(model) {
  parseChildrenLayoutSize(model);
  const layoutSizeCmpt = model.component.layoutSize;
  const sizeTypeToMerge = SIZE_TYPE_TO_MERGE[model.concatType];

  if (sizeTypeToMerge) {
    layoutSizeCmpt.setWithExplicit(sizeTypeToMerge, parseNonUnitLayoutSizeForChannel(model, sizeTypeToMerge));
  }
}

function parseChildrenLayoutSize(model) {
  for (const child of model.children) {
    child.parseLayoutSize();
  }
}

function parseNonUnitLayoutSizeForChannel(model, sizeType) {
  const channel = sizeType === 'width' ? 'x' : 'y';
  const resolve = model.component.resolve;
  let mergedSize; // Try to merge layout size

  for (const child of model.children) {
    const childSize = child.component.layoutSize.getWithExplicit(sizeType);
    const scaleResolve = resolve.scale[channel];

    if (scaleResolve === 'independent' && childSize.value === 'range-step') {
      // Do not merge independent scales with range-step as their size depends
      // on the scale domains, which can be different between scales.
      mergedSize = undefined;
      break;
    }

    if (mergedSize) {
      if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {
        // For independent scale, only merge if all the sizes are the same.
        // If the values are different, abandon the merge!
        mergedSize = undefined;
        break;
      }

      mergedSize = (0, _split.mergeValuesWithExplicit)(mergedSize, childSize, sizeType, '');
    } else {
      mergedSize = childSize;
    }
  }

  if (mergedSize) {
    // If merged, rename size and set size of all children.
    for (const child of model.children) {
      model.renameSignal(child.getName(sizeType), model.getName(sizeType));
      child.component.layoutSize.set(sizeType, 'merged', false);
    }

    return mergedSize;
  } else {
    // Otherwise, there is no merged size.
    return {
      explicit: false,
      value: undefined
    };
  }
}

function parseUnitLayoutSize(model) {
  const layoutSizeComponent = model.component.layoutSize;

  if (!layoutSizeComponent.explicit.width) {
    const width = defaultUnitSize(model, 'width');
    layoutSizeComponent.set('width', width, false);
  }

  if (!layoutSizeComponent.explicit.height) {
    const height = defaultUnitSize(model, 'height');
    layoutSizeComponent.set('height', height, false);
  }
}

function defaultUnitSize(model, sizeType) {
  const channel = sizeType === 'width' ? 'x' : 'y';
  const config = model.config;
  const scaleComponent = model.getScaleComponent(channel);

  if (scaleComponent) {
    const scaleType = scaleComponent.get('type');
    const range = scaleComponent.get('range');

    if ((0, _scale.hasDiscreteDomain)(scaleType) && (0, _vega.isVgRangeStep)(range)) {
      // For discrete domain with range.step, use dynamic width/height
      return 'range-step';
    } else {
      return config.view[sizeType];
    }
  } else if (model.hasProjection) {
    return config.view[sizeType];
  } else {
    // No scale - set default size
    if (sizeType === 'width' && model.mark === 'text') {
      // width for text mark without x-field is a bit wider than typical range step
      return config.scale.textXRangeStep;
    } // Set width/height equal to rangeStep config or if rangeStep is null, use value from default scale config.


    return config.scale.rangeStep || _scale.defaultScaleConfig.rangeStep;
  }
}
},{"../../scale":"node_modules/vega-lite/build/src/scale.js","../../vega.schema":"node_modules/vega-lite/build/src/vega.schema.js","../split":"node_modules/vega-lite/build/src/compile/split.js"}],"node_modules/vega-lite/build/src/compile/repeater.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceRepeaterInFacet = replaceRepeaterInFacet;
exports.replaceRepeaterInEncoding = replaceRepeaterInEncoding;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaUtil = require("vega-util");

var _channeldef = require("../channeldef");

var log = _interopRequireWildcard(require("../log"));

var _sort = require("../sort");

var _facet = require("../spec/facet");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function replaceRepeaterInFacet(facet, repeater) {
  if ((0, _facet.isFacetMapping)(facet)) {
    return replaceRepeater(facet, repeater);
  }

  return replaceRepeaterInFieldDef(facet, repeater);
}

function replaceRepeaterInEncoding(encoding, repeater) {
  return replaceRepeater(encoding, repeater);
}
/**
 * Replaces repeated value and returns if the repeated value is valid.
 */


function replaceRepeat(o, repeater) {
  if ((0, _channeldef.isRepeatRef)(o.field)) {
    if (o.field.repeat in repeater) {
      // any needed to calm down ts compiler
      return Object.assign({}, o, {
        field: repeater[o.field.repeat]
      });
    } else {
      log.warn(log.message.noSuchRepeatedValue(o.field.repeat));
      return undefined;
    }
  }

  return o;
}
/**
 * Replace repeater values in a field def with the concrete field name.
 */


function replaceRepeaterInFieldDef(fieldDef, repeater) {
  fieldDef = replaceRepeat(fieldDef, repeater);

  if (fieldDef === undefined) {
    // the field def should be ignored
    return undefined;
  } else if (fieldDef === null) {
    return null;
  }

  if ((0, _channeldef.isSortableFieldDef)(fieldDef) && (0, _sort.isSortField)(fieldDef.sort)) {
    const sort = replaceRepeat(fieldDef.sort, repeater);
    fieldDef = Object.assign({}, fieldDef, sort ? {
      sort
    } : {});
  }

  return fieldDef;
}

function replaceRepeaterInChannelDef(channelDef, repeater) {
  if ((0, _channeldef.isFieldDef)(channelDef)) {
    const fd = replaceRepeaterInFieldDef(channelDef, repeater);

    if (fd) {
      return fd;
    } else if ((0, _channeldef.isConditionalDef)(channelDef)) {
      return {
        condition: channelDef.condition
      };
    }
  } else {
    if ((0, _channeldef.hasConditionalFieldDef)(channelDef)) {
      const fd = replaceRepeaterInFieldDef(channelDef.condition, repeater);

      if (fd) {
        return Object.assign({}, channelDef, {
          condition: fd
        });
      } else {
        const {
          condition
        } = channelDef,
              channelDefWithoutCondition = tslib_1.__rest(channelDef, ["condition"]);

        return channelDefWithoutCondition;
      }
    }

    return channelDef;
  }

  return undefined;
}

function replaceRepeater(mapping, repeater) {
  const out = {};

  for (const channel in mapping) {
    if (mapping.hasOwnProperty(channel)) {
      const channelDef = mapping[channel];

      if ((0, _vegaUtil.isArray)(channelDef)) {
        // array cannot have condition
        out[channel] = channelDef.map(cd => replaceRepeaterInChannelDef(cd, repeater)).filter(cd => cd);
      } else {
        const cd = replaceRepeaterInChannelDef(channelDef, repeater);

        if (cd !== undefined) {
          out[channel] = cd;
        }
      }
    }
  }

  return out;
}
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../log":"node_modules/vega-lite/build/src/log/index.js","../sort":"node_modules/vega-lite/build/src/sort.js","../spec/facet":"node_modules/vega-lite/build/src/spec/facet.js"}],"node_modules/vega-lite/build/src/compile/facet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.facetSortFieldName = facetSortFieldName;
exports.FacetModel = void 0;

var _vegaUtil = require("vega-util");

var _bin = require("../bin");

var _channel = require("../channel");

var _channeldef = require("../channeldef");

var _encoding = require("../encoding");

var log = _interopRequireWildcard(require("../log"));

var _scale = require("../scale");

var _sort = require("../sort");

var _facet = require("../spec/facet");

var _util = require("../util");

var _vega = require("../vega.schema");

var _buildmodel = require("./buildmodel");

var _assemble = require("./data/assemble");

var _calculate = require("./data/calculate");

var _parse = require("./data/parse");

var _assemble2 = require("./header/assemble");

var _common = require("./header/common");

var _component = require("./header/component");

var _parse2 = require("./header/parse");

var _parse3 = require("./layoutsize/parse");

var _model = require("./model");

var _repeater = require("./repeater");

var _domain = require("./scale/domain");

var _assemble3 = require("./selection/assemble");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function facetSortFieldName(fieldDef, sort, opt) {
  return (0, _channeldef.vgField)(sort, Object.assign({
    suffix: `by_${(0, _channeldef.vgField)(fieldDef)}`
  }, opt || {}));
}

class FacetModel extends _model.ModelWithField {
  constructor(spec, parent, parentGivenName, repeater, config) {
    super(spec, 'facet', parent, parentGivenName, config, repeater, spec.resolve);
    this.child = (0, _buildmodel.buildModel)(spec.spec, this, this.getName('child'), undefined, repeater, config, false);
    this.children = [this.child];
    const facet = (0, _repeater.replaceRepeaterInFacet)(spec.facet, repeater);
    this.facet = this.initFacet(facet);
  }

  initFacet(facet) {
    // clone to prevent side effect to the original spec
    if (!(0, _facet.isFacetMapping)(facet)) {
      return {
        facet: (0, _channeldef.normalize)(facet, 'facet')
      };
    }

    return (0, _encoding.reduce)(facet, (normalizedFacet, fieldDef, channel) => {
      if (!(0, _util.contains)([_channel.ROW, _channel.COLUMN], channel)) {
        // Drop unsupported channel
        log.warn(log.message.incompatibleChannel(channel, 'facet'));
        return normalizedFacet;
      }

      if (fieldDef.field === undefined) {
        log.warn(log.message.emptyFieldDef(fieldDef, channel));
        return normalizedFacet;
      } // Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.


      normalizedFacet[channel] = (0, _channeldef.normalize)(fieldDef, channel);
      return normalizedFacet;
    }, {});
  }

  channelHasField(channel) {
    return !!this.facet[channel];
  }

  fieldDef(channel) {
    return this.facet[channel];
  }

  parseData() {
    this.component.data = (0, _parse.parseData)(this);
    this.child.parseData();
  }

  parseLayoutSize() {
    (0, _parse3.parseChildrenLayoutSize)(this);
  }

  parseSelections() {
    // As a facet has a single child, the selection components are the same.
    // The child maintains its selections to assemble signals, which remain
    // within its unit.
    this.child.parseSelections();
    this.component.selection = this.child.component.selection;
  }

  parseMarkGroup() {
    this.child.parseMarkGroup();
  }

  parseAxesAndHeaders() {
    this.child.parseAxesAndHeaders();
    (0, _parse2.parseFacetHeaders)(this);
  }

  assembleSelectionTopLevelSignals(signals) {
    return this.child.assembleSelectionTopLevelSignals(signals);
  }

  assembleSignals() {
    this.child.assembleSignals();
    return [];
  }

  assembleSelectionData(data) {
    return this.child.assembleSelectionData(data);
  }

  getHeaderLayoutMixins() {
    const layoutMixins = {};

    for (const channel of _channel.FACET_CHANNELS) {
      for (const headerType of _component.HEADER_TYPES) {
        const layoutHeaderComponent = this.component.layoutHeaders[channel];
        const headerComponent = layoutHeaderComponent[headerType];
        const {
          facetFieldDef
        } = layoutHeaderComponent;

        if (facetFieldDef) {
          const titleOrient = (0, _common.getHeaderProperty)('titleOrient', facetFieldDef, this.config, channel);

          if ((0, _util.contains)(['right', 'bottom'], titleOrient)) {
            const headerChannel = (0, _common.getHeaderChannel)(channel, titleOrient);
            layoutMixins.titleAnchor = layoutMixins.titleAnchor || {};
            layoutMixins.titleAnchor[headerChannel] = 'end';
          }
        }

        if (headerComponent && headerComponent[0]) {
          // set header/footerBand
          const sizeType = channel === 'row' ? 'height' : 'width';
          const bandType = headerType === 'header' ? 'headerBand' : 'footerBand';

          if (channel !== 'facet' && !this.child.component.layoutSize.get(sizeType)) {
            // If facet child does not have size signal, then apply headerBand
            layoutMixins[bandType] = layoutMixins[bandType] || {};
            layoutMixins[bandType][channel] = 0.5;
          }

          if (layoutHeaderComponent.title) {
            layoutMixins.offset = layoutMixins.offset || {};
            layoutMixins.offset[channel === 'row' ? 'rowTitle' : 'columnTitle'] = 10;
          }
        }
      }
    }

    return layoutMixins;
  }

  assembleDefaultLayout() {
    const {
      column,
      row
    } = this.facet;
    const columns = column ? this.columnDistinctSignal() : row ? 1 : undefined;
    let align = 'all'; // Do not align the cells if the scale corresponding to the direction is indepent.
    // We always align when we facet into both row and column.

    if (!row && this.component.resolve.scale.x === 'independent') {
      align = 'none';
    } else if (!column && this.component.resolve.scale.y === 'independent') {
      align = 'none';
    }

    return Object.assign({}, this.getHeaderLayoutMixins(), columns ? {
      columns
    } : {}, {
      bounds: 'full',
      align
    });
  }

  assembleLayoutSignals() {
    // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.
    return this.child.assembleLayoutSignals();
  }

  columnDistinctSignal() {
    if (this.parent && this.parent instanceof FacetModel) {
      // For nested facet, we will add columns to group mark instead
      // See discussion in https://github.com/vega/vega/issues/952
      // and https://github.com/vega/vega-view/releases/tag/v1.2.6
      return undefined;
    } else {
      // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.
      const facetLayoutDataName = this.getName('column_domain');
      return {
        signal: `length(data('${facetLayoutDataName}'))`
      };
    }
  }

  assembleGroup(signals) {
    if (this.parent && this.parent instanceof FacetModel) {
      // Provide number of columns for layout.
      // See discussion in https://github.com/vega/vega/issues/952
      // and https://github.com/vega/vega-view/releases/tag/v1.2.6
      return Object.assign({}, this.channelHasField('column') ? {
        encode: {
          update: {
            // TODO(https://github.com/vega/vega-lite/issues/2759):
            // Correct the signal for facet of concat of facet_column
            columns: {
              field: (0, _channeldef.vgField)(this.facet.column, {
                prefix: 'distinct'
              })
            }
          }
        }
      } : {}, super.assembleGroup(signals));
    }

    return super.assembleGroup(signals);
  }
  /**
   * Aggregate cardinality for calculating size
   */


  getCardinalityAggregateForChild() {
    const fields = [];
    const ops = [];
    const as = [];

    if (this.child instanceof FacetModel) {
      if (this.child.channelHasField('column')) {
        const field = (0, _channeldef.vgField)(this.child.facet.column);
        fields.push(field);
        ops.push('distinct');
        as.push(`distinct_${field}`);
      }
    } else {
      for (const channel of ['x', 'y']) {
        const childScaleComponent = this.child.component.scales[channel];

        if (childScaleComponent && !childScaleComponent.merged) {
          const type = childScaleComponent.get('type');
          const range = childScaleComponent.get('range');

          if ((0, _scale.hasDiscreteDomain)(type) && (0, _vega.isVgRangeStep)(range)) {
            const domain = (0, _domain.assembleDomain)(this.child, channel);
            const field = (0, _domain.getFieldFromDomain)(domain);

            if (field) {
              fields.push(field);
              ops.push('distinct');
              as.push(`distinct_${field}`);
            } else {
              log.warn('Unknown field for ${channel}.  Cannot calculate view size.');
            }
          }
        }
      }
    }

    return {
      fields,
      ops,
      as
    };
  }

  assembleFacet() {
    const {
      name,
      data
    } = this.component.data.facetRoot;
    const {
      row,
      column
    } = this.facet;
    const {
      fields,
      ops,
      as
    } = this.getCardinalityAggregateForChild();
    const groupby = [];

    for (const channel of _channel.FACET_CHANNELS) {
      const fieldDef = this.facet[channel];

      if (fieldDef) {
        groupby.push((0, _channeldef.vgField)(fieldDef));
        const {
          bin,
          sort
        } = fieldDef;

        if ((0, _bin.isBinning)(bin)) {
          groupby.push((0, _channeldef.vgField)(fieldDef, {
            binSuffix: 'end'
          }));
        }

        if ((0, _sort.isSortField)(sort)) {
          const {
            field,
            op = _sort.DEFAULT_SORT_OP
          } = sort;
          const outputName = facetSortFieldName(fieldDef, sort);

          if (row && column) {
            // For crossed facet, use pre-calculate field as it requires a different groupby
            // For each calculated field, apply max and assign them to the same name as
            // all values of the same group should be the same anyway.
            fields.push(outputName);
            ops.push('max');
            as.push(outputName);
          } else {
            fields.push(field);
            ops.push(op);
            as.push(outputName);
          }
        } else if ((0, _vegaUtil.isArray)(sort)) {
          const outputName = (0, _calculate.sortArrayIndexField)(fieldDef, channel);
          fields.push(outputName);
          ops.push('max');
          as.push(outputName);
        }
      }
    }

    const cross = !!row && !!column;
    return Object.assign({
      name,
      data,
      groupby
    }, cross || fields.length ? {
      aggregate: Object.assign({}, cross ? {
        cross
      } : {}, fields.length ? {
        fields,
        ops,
        as
      } : {})
    } : {});
  }

  facetSortFields(channel) {
    const {
      facet
    } = this;
    const fieldDef = facet[channel];

    if (fieldDef) {
      if ((0, _sort.isSortField)(fieldDef.sort)) {
        return [facetSortFieldName(fieldDef, fieldDef.sort, {
          expr: 'datum'
        })];
      } else if ((0, _vegaUtil.isArray)(fieldDef.sort)) {
        return [(0, _calculate.sortArrayIndexField)(fieldDef, channel, {
          expr: 'datum'
        })];
      }

      return [(0, _channeldef.vgField)(fieldDef, {
        expr: 'datum'
      })];
    }

    return [];
  }

  facetSortOrder(channel) {
    const {
      facet
    } = this;
    const fieldDef = facet[channel];

    if (fieldDef) {
      const {
        sort
      } = fieldDef;
      const order = ((0, _sort.isSortField)(sort) ? sort.order : !(0, _vegaUtil.isArray)(sort) && sort) || 'ascending';
      return [order];
    }

    return [];
  }

  assembleLabelTitle() {
    const {
      facet,
      config
    } = this;

    if (facet.facet) {
      // Facet always uses title to display labels
      return (0, _assemble2.assembleLabelTitle)(facet.facet, 'facet', config);
    }

    const ORTHOGONAL_ORIENT = {
      row: ['top', 'bottom'],
      column: ['left', 'right']
    };

    for (const channel of _component.HEADER_CHANNELS) {
      if (facet[channel]) {
        const labelOrient = (0, _common.getHeaderProperty)('labelOrient', facet[channel], config, channel);

        if ((0, _util.contains)(ORTHOGONAL_ORIENT[channel], labelOrient)) {
          // Row/Column with orthogonal labelOrient must use title to display labels
          return (0, _assemble2.assembleLabelTitle)(facet[channel], channel, config);
        }
      }
    }

    return undefined;
  }

  assembleMarks() {
    const {
      child
    } = this; // If we facet by two dimensions, we need to add a cross operator to the aggregation
    // so that we create all groups

    const facetRoot = this.component.data.facetRoot;
    const data = (0, _assemble.assembleFacetData)(facetRoot);
    const encodeEntry = child.assembleGroupEncodeEntry(false);
    const title = this.assembleLabelTitle() || child.assembleTitle();
    const style = child.assembleGroupStyle();
    const markGroup = Object.assign({
      name: this.getName('cell'),
      type: 'group'
    }, title ? {
      title
    } : {}, style ? {
      style
    } : {}, {
      from: {
        facet: this.assembleFacet()
      },
      // TODO: move this to after data
      sort: {
        field: (0, _util.flatten)(_channel.FACET_CHANNELS.map(c => this.facetSortFields(c))),
        order: (0, _util.flatten)(_channel.FACET_CHANNELS.map(c => this.facetSortOrder(c)))
      }
    }, data.length > 0 ? {
      data: data
    } : {}, encodeEntry ? {
      encode: {
        update: encodeEntry
      }
    } : {}, child.assembleGroup((0, _assemble3.assembleFacetSignals)(this, [])));
    return [markGroup];
  }

  getMapping() {
    return this.facet;
  }

}

exports.FacetModel = FacetModel;
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../bin":"node_modules/vega-lite/build/src/bin.js","../channel":"node_modules/vega-lite/build/src/channel.js","../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../encoding":"node_modules/vega-lite/build/src/encoding.js","../log":"node_modules/vega-lite/build/src/log/index.js","../scale":"node_modules/vega-lite/build/src/scale.js","../sort":"node_modules/vega-lite/build/src/sort.js","../spec/facet":"node_modules/vega-lite/build/src/spec/facet.js","../util":"node_modules/vega-lite/build/src/util.js","../vega.schema":"node_modules/vega-lite/build/src/vega.schema.js","./buildmodel":"node_modules/vega-lite/build/src/compile/buildmodel.js","./data/assemble":"node_modules/vega-lite/build/src/compile/data/assemble.js","./data/calculate":"node_modules/vega-lite/build/src/compile/data/calculate.js","./data/parse":"node_modules/vega-lite/build/src/compile/data/parse.js","./header/assemble":"node_modules/vega-lite/build/src/compile/header/assemble.js","./header/common":"node_modules/vega-lite/build/src/compile/header/common.js","./header/component":"node_modules/vega-lite/build/src/compile/header/component.js","./header/parse":"node_modules/vega-lite/build/src/compile/header/parse.js","./layoutsize/parse":"node_modules/vega-lite/build/src/compile/layoutsize/parse.js","./model":"node_modules/vega-lite/build/src/compile/model.js","./repeater":"node_modules/vega-lite/build/src/compile/repeater.js","./scale/domain":"node_modules/vega-lite/build/src/compile/scale/domain.js","./selection/assemble":"node_modules/vega-lite/build/src/compile/selection/assemble.js"}],"node_modules/vega-lite/build/src/compile/data/joinaggregatefacet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeJoinAggregateFromFacet = makeJoinAggregateFromFacet;

var _channeldef = require("../../channeldef");

var _sort = require("../../sort");

var _facet = require("../facet");

var _joinaggregate = require("./joinaggregate");

function makeJoinAggregateFromFacet(parent, facet) {
  const {
    row,
    column
  } = facet;

  if (row && column) {
    let newParent = null; // only need to make one for crossed facet

    for (const fieldDef of [row, column]) {
      if ((0, _sort.isSortField)(fieldDef.sort)) {
        const {
          field,
          op = _sort.DEFAULT_SORT_OP
        } = fieldDef.sort;
        parent = newParent = new _joinaggregate.JoinAggregateTransformNode(parent, {
          joinaggregate: [{
            op,
            field,
            as: (0, _facet.facetSortFieldName)(fieldDef, fieldDef.sort, {
              forAs: true
            })
          }],
          groupby: [(0, _channeldef.vgField)(fieldDef)]
        });
      }
    }

    return newParent;
  }

  return null;
}
},{"../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../sort":"node_modules/vega-lite/build/src/sort.js","../facet":"node_modules/vega-lite/build/src/compile/facet.js","./joinaggregate":"node_modules/vega-lite/build/src/compile/data/joinaggregate.js"}],"node_modules/vega-lite/build/src/compile/data/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findSource = findSource;
exports.parseTransformArray = parseTransformArray;
exports.parseData = parseData;

var _data = require("../../data");

var log = _interopRequireWildcard(require("../../log"));

var _transform = require("../../transform");

var _util = require("../../util");

var _model = require("../model");

var _selection = require("../selection");

var _aggregate = require("./aggregate");

var _bin = require("./bin");

var _calculate = require("./calculate");

var _dataflow = require("./dataflow");

var _facet = require("./facet");

var _filter = require("./filter");

var _filterinvalid = require("./filterinvalid");

var _flatten = require("./flatten");

var _fold = require("./fold");

var _formatparse = require("./formatparse");

var _geojson = require("./geojson");

var _geopoint = require("./geopoint");

var _graticule = require("./graticule");

var _identifier = require("./identifier");

var _impute = require("./impute");

var _index = require("./index");

var _joinaggregate = require("./joinaggregate");

var _joinaggregatefacet = require("./joinaggregatefacet");

var _lookup = require("./lookup");

var _sample = require("./sample");

var _sequence = require("./sequence");

var _source = require("./source");

var _stack = require("./stack");

var _timeunit = require("./timeunit");

var _window = require("./window");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function findSource(data, sources) {
  for (const other of sources) {
    const otherData = other.data; // if both datasets have a name defined, we cannot merge

    if (data.name && other.hasName() && data.name !== other.dataName) {
      continue;
    } // feature and mesh are mutually exclusive


    if (data['format'] && data['format'].mesh && otherData.format && otherData.format.feature) {
      continue;
    }

    if ((0, _data.isInlineData)(data) && (0, _data.isInlineData)(otherData)) {
      if ((0, _util.deepEqual)(data.values, otherData.values)) {
        return other;
      }
    } else if ((0, _data.isUrlData)(data) && (0, _data.isUrlData)(otherData)) {
      if (data.url === otherData.url) {
        return other;
      }
    } else if ((0, _data.isNamedData)(data)) {
      if (data.name === other.dataName) {
        return other;
      }
    }
  }

  return null;
}

function parseRoot(model, sources) {
  if (model.data !== undefined || !model.parent) {
    // if the model defines a data source or is the root, create a source node
    if (model.data === null) {
      // data: null means we should ignore the parent's data so we just create a new data source
      const source = new _source.SourceNode([]);
      sources.push(source);
      return source;
    }

    const existingSource = findSource(model.data, sources);

    if (existingSource) {
      if (!(0, _data.isGenerator)(model.data)) {
        existingSource.data.format = (0, _util.mergeDeep)({}, model.data.format, existingSource.data.format);
      } // if the new source has a name but the existing one does not, we can set it


      if (!existingSource.hasName() && model.data.name) {
        existingSource.dataName = model.data.name;
      }

      return existingSource;
    } else {
      const source = new _source.SourceNode(model.data);
      sources.push(source);
      return source;
    }
  } else {
    // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.
    return model.parent.component.data.facetRoot ? model.parent.component.data.facetRoot : model.parent.component.data.main;
  }
}
/**
 * Parses a transform array into a chain of connected dataflow nodes.
 */


function parseTransformArray(head, model, ancestorParse) {
  let lookupCounter = 0;

  for (const t of model.transforms) {
    let derivedType = undefined;
    let transformNode;

    if ((0, _transform.isCalculate)(t)) {
      transformNode = head = new _calculate.CalculateNode(head, t);
      derivedType = 'derived';
    } else if ((0, _transform.isFilter)(t)) {
      transformNode = head = _formatparse.ParseNode.makeImplicitFromFilterTransform(head, t, ancestorParse) || head;
      head = new _filter.FilterNode(head, model, t.filter);
    } else if ((0, _transform.isBin)(t)) {
      transformNode = head = _bin.BinNode.makeFromTransform(head, t, model);
      derivedType = 'number';
    } else if ((0, _transform.isTimeUnit)(t)) {
      derivedType = 'date';
      const parsedAs = ancestorParse.getWithExplicit(t.field); // Create parse node because the input to time unit is always date.

      if (parsedAs.value === undefined) {
        head = new _formatparse.ParseNode(head, {
          [t.field]: derivedType
        });
        ancestorParse.set(t.field, derivedType, false);
      }

      transformNode = head = _timeunit.TimeUnitNode.makeFromTransform(head, t);
    } else if ((0, _transform.isAggregate)(t)) {
      transformNode = head = _aggregate.AggregateNode.makeFromTransform(head, t);
      derivedType = 'number';

      if ((0, _selection.requiresSelectionId)(model)) {
        head = new _identifier.IdentifierNode(head);
      }
    } else if ((0, _transform.isLookup)(t)) {
      transformNode = head = _lookup.LookupNode.make(head, model, t, lookupCounter++);
      derivedType = 'derived';
    } else if ((0, _transform.isWindow)(t)) {
      transformNode = head = new _window.WindowTransformNode(head, t);
      derivedType = 'number';
    } else if ((0, _transform.isJoinAggregate)(t)) {
      transformNode = head = new _joinaggregate.JoinAggregateTransformNode(head, t);
      derivedType = 'number';
    } else if ((0, _transform.isStack)(t)) {
      transformNode = head = _stack.StackNode.makeFromTransform(head, t);
      derivedType = 'derived';
    } else if ((0, _transform.isFold)(t)) {
      transformNode = head = new _fold.FoldTransformNode(head, t);
      derivedType = 'derived';
    } else if ((0, _transform.isFlatten)(t)) {
      transformNode = head = new _flatten.FlattenTransformNode(head, t);
      derivedType = 'derived';
    } else if ((0, _transform.isSample)(t)) {
      head = new _sample.SampleTransformNode(head, t);
    } else if ((0, _transform.isImpute)(t)) {
      transformNode = head = _impute.ImputeNode.makeFromTransform(head, t);
      derivedType = 'derived';
    } else {
      log.warn(log.message.invalidTransformIgnored(t));
      continue;
    }

    if (transformNode && derivedType !== undefined) {
      for (const field of transformNode.producedFields()) {
        ancestorParse.set(field, derivedType, false);
      }
    }
  }

  return head;
}
/*
Description of the dataflow (http://asciiflow.com/):
     +--------+
     | Source |
     +---+----+
         |
         v
     FormatParse
     (explicit)
         |
         v
     Transforms
(Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)
         |
         v
     FormatParse
     (implicit)
         |
         v
 Binning (in `encoding`)
         |
         v
 Timeunit (in `encoding`)
         |
         v
Formula From Sort Array
         |
         v
      +--+--+
      | Raw |
      +-----+
         |
         v
  Aggregate (in `encoding`)
         |
         v
  Stack (in `encoding`)
         |
         v
  Invalid Filter
         |
         v
   +----------+
   |   Main   |
   +----------+
         |
         v
     +-------+
     | Facet |----> "column", "column-layout", and "row"
     +-------+
         |
         v
  ...Child data...
*/


function parseData(model) {
  let head = parseRoot(model, model.component.data.sources);
  const {
    outputNodes,
    outputNodeRefCounts
  } = model.component.data;
  const ancestorParse = model.parent ? model.parent.component.data.ancestorParse.clone() : new _index.AncestorParse();
  const data = model.data;

  if ((0, _data.isGenerator)(data)) {
    // insert generator transform
    if ((0, _data.isSequenceGenerator)(data)) {
      head = new _sequence.SequenceNode(head, data.sequence);
    } else if ((0, _data.isGraticuleGenerator)(data)) {
      head = new _graticule.GraticuleNode(head, data.graticule);
    } // no parsing necessary for generator


    ancestorParse.parseNothing = true;
  } else if (data && data.format && data.format.parse === null) {
    // format.parse: null means disable parsing
    ancestorParse.parseNothing = true;
  }

  head = _formatparse.ParseNode.makeExplicit(head, model, ancestorParse) || head; // Default discrete selections require an identifier transform to
  // uniquely identify data points as the _id field is volatile. Add
  // this transform at the head of our pipeline such that the identifier
  // field is available for all subsequent datasets. Additional identifier
  // transforms will be necessary when new tuples are constructed
  // (e.g., post-aggregation).

  if ((0, _selection.requiresSelectionId)(model) && // only add identifier to unit/layer models that do not have layer parents to avoid redundant identifier transforms
  ((0, _model.isUnitModel)(model) || (0, _model.isLayerModel)(model)) && (!model.parent || !(0, _model.isLayerModel)(model.parent))) {
    head = new _identifier.IdentifierNode(head);
  } // HACK: This is equivalent for merging bin extent for union scale.
  // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale


  const parentIsLayer = model.parent && (0, _model.isLayerModel)(model.parent);

  if ((0, _model.isUnitModel)(model) || (0, _model.isFacetModel)(model)) {
    if (parentIsLayer) {
      head = _bin.BinNode.makeFromEncoding(head, model) || head;
    }
  }

  if (model.transforms.length > 0) {
    head = parseTransformArray(head, model, ancestorParse);
  }

  head = _formatparse.ParseNode.makeImplicitFromEncoding(head, model, ancestorParse) || head;

  if ((0, _model.isUnitModel)(model)) {
    head = _geojson.GeoJSONNode.parseAll(head, model);
    head = _geopoint.GeoPointNode.parseAll(head, model);
  }

  if ((0, _model.isUnitModel)(model) || (0, _model.isFacetModel)(model)) {
    if (!parentIsLayer) {
      head = _bin.BinNode.makeFromEncoding(head, model) || head;
    }

    head = _timeunit.TimeUnitNode.makeFromEncoding(head, model) || head;
    head = _calculate.CalculateNode.parseAllForSortIndex(head, model);
  } // add an output node pre aggregation


  const rawName = model.getName(_data.RAW);
  const raw = new _dataflow.OutputNode(head, rawName, _data.RAW, outputNodeRefCounts);
  outputNodes[rawName] = raw;
  head = raw;

  if ((0, _model.isUnitModel)(model)) {
    const agg = _aggregate.AggregateNode.makeFromEncoding(head, model);

    if (agg) {
      head = agg;

      if ((0, _selection.requiresSelectionId)(model)) {
        head = new _identifier.IdentifierNode(head);
      }
    }

    head = _impute.ImputeNode.makeFromEncoding(head, model) || head;
    head = _stack.StackNode.makeFromEncoding(head, model) || head;
  }

  if ((0, _model.isUnitModel)(model)) {
    head = _filterinvalid.FilterInvalidNode.make(head, model) || head;
  } // output node for marks


  const mainName = model.getName(_data.MAIN);
  const main = new _dataflow.OutputNode(head, mainName, _data.MAIN, outputNodeRefCounts);
  outputNodes[mainName] = main;
  head = main; // add facet marker

  let facetRoot = null;

  if ((0, _model.isFacetModel)(model)) {
    const facetName = model.getName('facet'); // Derive new sort index field for facet's sort array

    head = _calculate.CalculateNode.parseAllForSortIndex(head, model); // Derive new aggregate for facet's sort field
    // augment data source with new fields for crossed facet

    head = (0, _joinaggregatefacet.makeJoinAggregateFromFacet)(head, model.facet) || head;
    facetRoot = new _facet.FacetNode(head, model, facetName, main.getSource());
    outputNodes[facetName] = facetRoot;
    head = facetRoot;
  }

  return Object.assign({}, model.component.data, {
    outputNodes,
    outputNodeRefCounts,
    raw,
    main,
    facetRoot,
    ancestorParse
  });
}
},{"../../data":"node_modules/vega-lite/build/src/data.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../transform":"node_modules/vega-lite/build/src/transform.js","../../util":"node_modules/vega-lite/build/src/util.js","../model":"node_modules/vega-lite/build/src/compile/model.js","../selection":"node_modules/vega-lite/build/src/compile/selection/index.js","./aggregate":"node_modules/vega-lite/build/src/compile/data/aggregate.js","./bin":"node_modules/vega-lite/build/src/compile/data/bin.js","./calculate":"node_modules/vega-lite/build/src/compile/data/calculate.js","./dataflow":"node_modules/vega-lite/build/src/compile/data/dataflow.js","./facet":"node_modules/vega-lite/build/src/compile/data/facet.js","./filter":"node_modules/vega-lite/build/src/compile/data/filter.js","./filterinvalid":"node_modules/vega-lite/build/src/compile/data/filterinvalid.js","./flatten":"node_modules/vega-lite/build/src/compile/data/flatten.js","./fold":"node_modules/vega-lite/build/src/compile/data/fold.js","./formatparse":"node_modules/vega-lite/build/src/compile/data/formatparse.js","./geojson":"node_modules/vega-lite/build/src/compile/data/geojson.js","./geopoint":"node_modules/vega-lite/build/src/compile/data/geopoint.js","./graticule":"node_modules/vega-lite/build/src/compile/data/graticule.js","./identifier":"node_modules/vega-lite/build/src/compile/data/identifier.js","./impute":"node_modules/vega-lite/build/src/compile/data/impute.js","./index":"node_modules/vega-lite/build/src/compile/data/index.js","./joinaggregate":"node_modules/vega-lite/build/src/compile/data/joinaggregate.js","./joinaggregatefacet":"node_modules/vega-lite/build/src/compile/data/joinaggregatefacet.js","./lookup":"node_modules/vega-lite/build/src/compile/data/lookup.js","./sample":"node_modules/vega-lite/build/src/compile/data/sample.js","./sequence":"node_modules/vega-lite/build/src/compile/data/sequence.js","./source":"node_modules/vega-lite/build/src/compile/data/source.js","./stack":"node_modules/vega-lite/build/src/compile/data/stack.js","./timeunit":"node_modules/vega-lite/build/src/compile/data/timeunit.js","./window":"node_modules/vega-lite/build/src/compile/data/window.js"}],"node_modules/vega-lite/build/src/compile/baseconcat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseConcatModel = void 0;

var _util = require("../util");

var _parse = require("./data/parse");

var _assemble = require("./layoutsize/assemble");

var _model = require("./model");

class BaseConcatModel extends _model.Model {
  constructor(spec, specType, parent, parentGivenName, config, repeater, resolve) {
    super(spec, specType, parent, parentGivenName, config, repeater, resolve);
  }

  parseData() {
    this.component.data = (0, _parse.parseData)(this);
    this.children.forEach(child => {
      child.parseData();
    });
  }

  parseSelections() {
    // Merge selections up the hierarchy so that they may be referenced
    // across unit specs. Persist their definitions within each child
    // to assemble signals which remain within output Vega unit groups.
    this.component.selection = {};

    for (const child of this.children) {
      child.parseSelections();
      (0, _util.keys)(child.component.selection).forEach(key => {
        this.component.selection[key] = child.component.selection[key];
      });
    }
  }

  parseMarkGroup() {
    for (const child of this.children) {
      child.parseMarkGroup();
    }
  }

  parseAxesAndHeaders() {
    for (const child of this.children) {
      child.parseAxesAndHeaders();
    } // TODO(#2415): support shared axes

  }

  assembleSelectionTopLevelSignals(signals) {
    return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);
  }

  assembleSignals() {
    this.children.forEach(child => child.assembleSignals());
    return [];
  }

  assembleLayoutSignals() {
    return this.children.reduce((signals, child) => {
      return [...signals, ...child.assembleLayoutSignals()];
    }, (0, _assemble.assembleLayoutSignals)(this));
  }

  assembleSelectionData(data) {
    return this.children.reduce((db, child) => child.assembleSelectionData(db), data);
  }

  assembleMarks() {
    // only children have marks
    return this.children.map(child => {
      const title = child.assembleTitle();
      const style = child.assembleGroupStyle();
      const encodeEntry = child.assembleGroupEncodeEntry(false);
      return Object.assign({
        type: 'group',
        name: child.getName('group')
      }, title ? {
        title
      } : {}, style ? {
        style
      } : {}, encodeEntry ? {
        encode: {
          update: encodeEntry
        }
      } : {}, child.assembleGroup());
    });
  }

}

exports.BaseConcatModel = BaseConcatModel;
},{"../util":"node_modules/vega-lite/build/src/util.js","./data/parse":"node_modules/vega-lite/build/src/compile/data/parse.js","./layoutsize/assemble":"node_modules/vega-lite/build/src/compile/layoutsize/assemble.js","./model":"node_modules/vega-lite/build/src/compile/model.js"}],"node_modules/vega-lite/build/src/compile/concat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConcatModel = void 0;

var log = _interopRequireWildcard(require("../log"));

var _spec = require("../spec");

var _baseconcat = require("./baseconcat");

var _buildmodel = require("./buildmodel");

var _parse = require("./layoutsize/parse");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class ConcatModel extends _baseconcat.BaseConcatModel {
  constructor(spec, parent, parentGivenName, repeater, config) {
    super(spec, 'concat', parent, parentGivenName, config, repeater, spec.resolve);

    if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {
      log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);
    }

    this.concatType = (0, _spec.isVConcatSpec)(spec) ? 'vconcat' : (0, _spec.isHConcatSpec)(spec) ? 'hconcat' : 'concat';
    this.children = this.getChildren(spec).map((child, i) => {
      return (0, _buildmodel.buildModel)(child, this, this.getName('concat_' + i), undefined, repeater, config, false);
    });
  }

  getChildren(spec) {
    if ((0, _spec.isVConcatSpec)(spec)) {
      return spec.vconcat;
    } else if ((0, _spec.isHConcatSpec)(spec)) {
      return spec.hconcat;
    }

    return spec.concat;
  }

  parseLayoutSize() {
    (0, _parse.parseConcatLayoutSize)(this);
  }

  parseAxisGroup() {
    return null;
  }

  assembleDefaultLayout() {
    return Object.assign({}, this.concatType === 'vconcat' ? {
      columns: 1
    } : {}, {
      bounds: 'full',
      // Use align each so it can work with multiple plots with different size
      align: 'each'
    });
  }

}

exports.ConcatModel = ConcatModel;
},{"../log":"node_modules/vega-lite/build/src/log/index.js","../spec":"node_modules/vega-lite/build/src/spec/index.js","./baseconcat":"node_modules/vega-lite/build/src/compile/baseconcat.js","./buildmodel":"node_modules/vega-lite/build/src/compile/buildmodel.js","./layoutsize/parse":"node_modules/vega-lite/build/src/compile/layoutsize/parse.js"}],"node_modules/vega-lite/build/src/compile/axis/component.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AxisComponent = void 0;

var _util = require("../../util");

var _split = require("../split");

function isFalseOrNull(v) {
  return v === false || v === null;
}

class AxisComponent extends _split.Split {
  constructor(explicit = {}, implicit = {}, mainExtracted = false) {
    super();
    this.explicit = explicit;
    this.implicit = implicit;
    this.mainExtracted = mainExtracted;
  }

  clone() {
    return new AxisComponent((0, _util.duplicate)(this.explicit), (0, _util.duplicate)(this.implicit), this.mainExtracted);
  }

  hasAxisPart(part) {
    // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.
    if (part === 'axis') {
      // always has the axis container part
      return true;
    }

    if (part === 'grid' || part === 'title') {
      return !!this.get(part);
    } // Other parts are enabled by default, so they should not be false or null.


    return !isFalseOrNull(this.get(part));
  }

}

exports.AxisComponent = AxisComponent;
},{"../../util":"node_modules/vega-lite/build/src/util.js","../split":"node_modules/vega-lite/build/src/compile/split.js"}],"node_modules/vega-lite/build/src/compile/axis/encode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.labels = labels;

var _channeldef = require("../../channeldef");

var _scale = require("../../scale");

var _util = require("../../util");

var _common = require("../common");

function labels(model, channel, specifiedLabelsSpec) {
  const fieldDef = model.fieldDef(channel) || (channel === 'x' ? model.fieldDef('x2') : channel === 'y' ? model.fieldDef('y2') : undefined);
  const axis = model.axis(channel);
  const config = model.config;
  let labelsSpec = {}; // We use a label encoding instead of setting the `format` property because Vega does not let us determine how the format should be interpreted.

  if ((0, _channeldef.isTimeFormatFieldDef)(fieldDef)) {
    const isUTCScale = model.getScaleComponent(channel).get('type') === _scale.ScaleType.UTC;

    const expr = (0, _common.timeFormatExpression)('datum.value', fieldDef.timeUnit, axis.format, config.axis.shortTimeLabels, null, isUTCScale);

    if (expr) {
      labelsSpec.text = {
        signal: expr
      };
    }
  }

  labelsSpec = Object.assign({}, labelsSpec, specifiedLabelsSpec);
  return (0, _util.keys)(labelsSpec).length === 0 ? undefined : labelsSpec;
}
},{"../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../util":"node_modules/vega-lite/build/src/util.js","../common":"node_modules/vega-lite/build/src/compile/common.js"}],"node_modules/vega-lite/build/src/compile/axis/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseUnitAxes = parseUnitAxes;
exports.parseLayerAxes = parseLayerAxes;

var _axis = require("../../axis");

var _bin = require("../../bin");

var _channel = require("../../channel");

var _channeldef = require("../../channeldef");

var _util = require("../../util");

var _common = require("../common");

var _guide = require("../guide");

var _resolve = require("../resolve");

var _split = require("../split");

var _component = require("./component");

var _config = require("./config");

var encode = _interopRequireWildcard(require("./encode"));

var properties = _interopRequireWildcard(require("./properties"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function parseUnitAxes(model) {
  return _channel.POSITION_SCALE_CHANNELS.reduce((axis, channel) => {
    if (model.component.scales[channel] && model.axis(channel)) {
      axis[channel] = [parseAxis(channel, model)];
    }

    return axis;
  }, {});
}

const OPPOSITE_ORIENT = {
  bottom: 'top',
  top: 'bottom',
  left: 'right',
  right: 'left'
};

function parseLayerAxes(model) {
  const {
    axes,
    resolve
  } = model.component;
  const axisCount = {
    top: 0,
    bottom: 0,
    right: 0,
    left: 0
  };

  for (const child of model.children) {
    child.parseAxesAndHeaders();

    for (const channel of (0, _util.keys)(child.component.axes)) {
      resolve.axis[channel] = (0, _resolve.parseGuideResolve)(model.component.resolve, channel);

      if (resolve.axis[channel] === 'shared') {
        // If the resolve says shared (and has not been overridden)
        // We will try to merge and see if there is a conflict
        axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);

        if (!axes[channel]) {
          // If merge returns nothing, there is a conflict so we cannot make the axis shared.
          // Thus, mark axis as independent and remove the axis component.
          resolve.axis[channel] = 'independent';
          delete axes[channel];
        }
      }
    }
  } // Move axes to layer's axis component and merge shared axes


  for (const channel of [_channel.X, _channel.Y]) {
    for (const child of model.children) {
      if (!child.component.axes[channel]) {
        // skip if the child does not have a particular axis
        continue;
      }

      if (resolve.axis[channel] === 'independent') {
        // If axes are independent, concat the axisComponent array.
        axes[channel] = (axes[channel] || []).concat(child.component.axes[channel]); // Automatically adjust orient

        for (const axisComponent of child.component.axes[channel]) {
          const {
            value: orient,
            explicit
          } = axisComponent.getWithExplicit('orient');

          if (axisCount[orient] > 0 && !explicit) {
            // Change axis orient if the number do not match
            const oppositeOrient = OPPOSITE_ORIENT[orient];

            if (axisCount[orient] > axisCount[oppositeOrient]) {
              axisComponent.set('orient', oppositeOrient, false);
            }
          }

          axisCount[orient]++; // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?
        }
      } // After merging, make sure to remove axes from child


      delete child.component.axes[channel];
    } // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)


    if (resolve.axis[channel] === 'independent' && axes[channel] && axes[channel].length > 1) {
      for (const axisCmpt of axes[channel]) {
        if (!!axisCmpt.get('grid') && !axisCmpt.explicit.grid) {
          axisCmpt.implicit.grid = false;
        }
      }
    }
  }
}

function mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {
  if (mergedAxisCmpts) {
    // FIXME: this is a bit wrong once we support multiple axes
    if (mergedAxisCmpts.length !== childAxisCmpts.length) {
      return undefined; // Cannot merge axis component with different number of axes.
    }

    const length = mergedAxisCmpts.length;

    for (let i = 0; i < length; i++) {
      const merged = mergedAxisCmpts[i];
      const child = childAxisCmpts[i];

      if (!!merged !== !!child) {
        return undefined;
      } else if (merged && child) {
        const mergedOrient = merged.getWithExplicit('orient');
        const childOrient = child.getWithExplicit('orient');

        if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
          // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
          // Cannot merge due to inconsistent orient
          return undefined;
        } else {
          mergedAxisCmpts[i] = mergeAxisComponent(merged, child);
        }
      }
    }
  } else {
    // For first one, return a copy of the child
    return childAxisCmpts.map(axisComponent => axisComponent.clone());
  }

  return mergedAxisCmpts;
}

function mergeAxisComponent(merged, child) {
  for (const prop of _axis.VG_AXIS_PROPERTIES) {
    const mergedValueWithExplicit = (0, _split.mergeValuesWithExplicit)(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', // Tie breaker function
    (v1, v2) => {
      switch (prop) {
        case 'title':
          return (0, _common.mergeTitleComponent)(v1, v2);

        case 'gridScale':
          return {
            explicit: v1.explicit,
            value: (0, _util.getFirstDefined)(v1.value, v2.value)
          };
      }

      return (0, _split.defaultTieBreaker)(v1, v2, prop, 'axis');
    });
    merged.setWithExplicit(prop, mergedValueWithExplicit);
  }

  return merged;
}

function getFieldDefTitle(model, channel) {
  const channel2 = channel === 'x' ? 'x2' : 'y2';
  const fieldDef = model.fieldDef(channel);
  const fieldDef2 = model.fieldDef(channel2);
  const title1 = fieldDef ? fieldDef.title : undefined;
  const title2 = fieldDef2 ? fieldDef2.title : undefined;

  if (title1 && title2) {
    return (0, _common.mergeTitle)(title1, title2);
  } else if (title1) {
    return title1;
  } else if (title2) {
    return title2;
  } else if (title1 !== undefined) {
    // falsy value to disable config
    return title1;
  } else if (title2 !== undefined) {
    // falsy value to disable config
    return title2;
  }

  return undefined;
}

function isExplicit(value, property, axis, model, channel) {
  switch (property) {
    case 'titleAngle':
    case 'labelAngle':
      return value === (0, _util.normalizeAngle)(axis[property]);

    case 'values':
      return !!axis.values;
    // specified axis.values is already respected, but may get transformed.

    case 'encode':
      // both VL axis.encoding and axis.labelAngle affect VG axis.encode
      return !!axis.encoding || !!axis.labelAngle;

    case 'title':
      // title can be explicit if fieldDef.title is set
      if (value === getFieldDefTitle(model, channel)) {
        return true;
      }

  } // Otherwise, things are explicit if the returned value matches the specified property


  return value === axis[property];
}

function parseAxis(channel, model) {
  const axis = model.axis(channel);
  const axisComponent = new _component.AxisComponent(); // 1.2. Add properties

  _axis.VG_AXIS_PROPERTIES.forEach(property => {
    const value = getProperty(property, axis, channel, model);

    if (value !== undefined) {
      const explicit = isExplicit(value, property, axis, model, channel);
      const configValue = (0, _config.getAxisConfig)(property, model.config, channel, axisComponent.get('orient'), model.getScaleComponent(channel).get('type')); // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)

      if (explicit || configValue === undefined) {
        // Do not apply implicit rule if there is a config value
        axisComponent.set(property, value, explicit);
      } else if ((0, _util.contains)(['grid', 'orient'], property) && configValue) {
        // - Grid is an exception because we need to set grid = true to generate another grid axis
        // - Orient is not an axis config in Vega, so we need to set too.
        axisComponent.set(property, configValue, false);
      }
    }
  }); // 2) Add guide encode definition groups


  const axisEncoding = axis.encoding || {};

  const axisEncode = _axis.AXIS_PARTS.reduce((e, part) => {
    if (!axisComponent.hasAxisPart(part)) {
      // No need to create encode for a disabled part.
      return e;
    }

    const axisEncodingPart = (0, _guide.guideEncodeEntry)(axisEncoding[part] || {}, model);
    const value = part === 'labels' ? encode.labels(model, channel, axisEncodingPart) : axisEncodingPart;

    if (value !== undefined && (0, _util.keys)(value).length > 0) {
      e[part] = {
        update: value
      };
    }

    return e;
  }, {}); // FIXME: By having encode as one property, we won't have fine grained encode merging.


  if ((0, _util.keys)(axisEncode).length > 0) {
    axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);
  }

  return axisComponent;
}

function getProperty(property, specifiedAxis, channel, model) {
  const fieldDef = model.fieldDef(channel); // Some properties depend on labelAngle so we have to declare it here.
  // Also, we don't use `getFirstDefined` for labelAngle
  // as we want to normalize specified value to be within [0,360)

  const labelAngle = properties.labelAngle(model, specifiedAxis, channel, fieldDef);
  const orient = (0, _util.getFirstDefined)(specifiedAxis.orient, properties.orient(channel));

  switch (property) {
    case 'scale':
      return model.scaleName(channel);

    case 'gridScale':
      return properties.gridScale(model, channel);

    case 'format':
      // We don't include temporal field here as we apply format in encode block
      if ((0, _channeldef.isTimeFormatFieldDef)(fieldDef)) {
        return undefined;
      }

      return (0, _common.numberFormat)(fieldDef, specifiedAxis.format, model.config);

    case 'formatType':
      // Same as format, We don't include temporal field here as we apply format in encode block
      if ((0, _channeldef.isTimeFormatFieldDef)(fieldDef)) {
        return undefined;
      }

      return specifiedAxis.formatType;

    case 'grid':
      {
        if ((0, _bin.isBinned)(model.fieldDef(channel).bin)) {
          return false;
        } else {
          const scaleType = model.getScaleComponent(channel).get('type');
          return (0, _util.getFirstDefined)(specifiedAxis.grid, properties.defaultGrid(scaleType, fieldDef));
        }
      }

    case 'labelAlign':
      return (0, _util.getFirstDefined)(specifiedAxis.labelAlign, properties.defaultLabelAlign(labelAngle, orient));

    case 'labelAngle':
      return labelAngle;

    case 'labelBaseline':
      return (0, _util.getFirstDefined)(specifiedAxis.labelBaseline, properties.defaultLabelBaseline(labelAngle, orient));

    case 'labelFlush':
      return (0, _util.getFirstDefined)(specifiedAxis.labelFlush, properties.defaultLabelFlush(fieldDef, channel));

    case 'labelOverlap':
      {
        const scaleType = model.getScaleComponent(channel).get('type');
        return (0, _util.getFirstDefined)(specifiedAxis.labelOverlap, properties.defaultLabelOverlap(fieldDef, scaleType));
      }

    case 'orient':
      return orient;

    case 'tickCount':
      {
        const scaleType = model.getScaleComponent(channel).get('type');
        const sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;
        const size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;
        return (0, _util.getFirstDefined)(specifiedAxis.tickCount, properties.defaultTickCount({
          fieldDef,
          scaleType,
          size
        }));
      }

    case 'title':
      {
        const channel2 = channel === 'x' ? 'x2' : 'y2';
        const fieldDef2 = model.fieldDef(channel2); // Keep undefined so we use default if title is unspecified.
        // For other falsy value, keep them so we will hide the title.

        return (0, _util.getFirstDefined)(specifiedAxis.title, getFieldDefTitle(model, channel), // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)
        (0, _common.mergeTitleFieldDefs)([(0, _channeldef.toFieldDefBase)(fieldDef)], fieldDef2 ? [(0, _channeldef.toFieldDefBase)(fieldDef2)] : []));
      }

    case 'values':
      return properties.values(specifiedAxis, model, fieldDef);
  } // Otherwise, return specified property.


  return (0, _axis.isAxisProperty)(property) ? specifiedAxis[property] : undefined;
}
},{"../../axis":"node_modules/vega-lite/build/src/axis.js","../../bin":"node_modules/vega-lite/build/src/bin.js","../../channel":"node_modules/vega-lite/build/src/channel.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../util":"node_modules/vega-lite/build/src/util.js","../common":"node_modules/vega-lite/build/src/compile/common.js","../guide":"node_modules/vega-lite/build/src/compile/guide.js","../resolve":"node_modules/vega-lite/build/src/compile/resolve.js","../split":"node_modules/vega-lite/build/src/compile/split.js","./component":"node_modules/vega-lite/build/src/compile/axis/component.js","./config":"node_modules/vega-lite/build/src/compile/axis/config.js","./encode":"node_modules/vega-lite/build/src/compile/axis/encode.js","./properties":"node_modules/vega-lite/build/src/compile/axis/properties.js"}],"node_modules/vega-lite/build/src/compile/mark/init.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeMarkDef = normalizeMarkDef;

var _bin = require("../../bin");

var _channeldef = require("../../channeldef");

var _encoding = require("../../encoding");

var log = _interopRequireWildcard(require("../../log"));

var _mark = require("../../mark");

var _type = require("../../type");

var _util = require("../../util");

var _common = require("../common");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function normalizeMarkDef(mark, encoding, config) {
  const markDef = (0, _mark.isMarkDef)(mark) ? Object.assign({}, mark) : {
    type: mark
  }; // set orient, which can be overridden by rules as sometimes the specified orient is invalid.

  const specifiedOrient = markDef.orient || (0, _common.getMarkConfig)('orient', markDef, config);
  markDef.orient = orient(markDef.type, encoding, specifiedOrient);

  if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {
    log.warn(log.message.orientOverridden(markDef.orient, specifiedOrient));
  } // set opacity and filled if not specified in mark config


  const specifiedOpacity = (0, _util.getFirstDefined)(markDef.opacity, (0, _common.getMarkConfig)('opacity', markDef, config));

  if (specifiedOpacity === undefined) {
    markDef.opacity = opacity(markDef.type, encoding);
  }

  const specifiedFilled = markDef.filled;

  if (specifiedFilled === undefined) {
    markDef.filled = filled(markDef, config);
  } // set cursor, which should be pointer if href channel is present unless otherwise specified


  const specifiedCursor = markDef.cursor || (0, _common.getMarkConfig)('cursor', markDef, config);

  if (specifiedCursor === undefined) {
    markDef.cursor = cursor(markDef, encoding, config);
  }

  return markDef;
}

function cursor(markDef, encoding, config) {
  if (encoding.href || markDef.href || (0, _common.getMarkConfig)('href', markDef, config)) {
    return 'pointer';
  }

  return markDef.cursor;
}

function opacity(mark, encoding) {
  if ((0, _util.contains)([_mark.POINT, _mark.TICK, _mark.CIRCLE, _mark.SQUARE], mark)) {
    // point-based marks
    if (!(0, _encoding.isAggregate)(encoding)) {
      return 0.7;
    }
  }

  return undefined;
}

function filled(markDef, config) {
  const filledConfig = (0, _common.getMarkConfig)('filled', markDef, config);
  const mark = markDef.type;
  return (0, _util.getFirstDefined)(filledConfig, mark !== _mark.POINT && mark !== _mark.LINE && mark !== _mark.RULE);
}

function orient(mark, encoding, specifiedOrient) {
  switch (mark) {
    case _mark.POINT:
    case _mark.CIRCLE:
    case _mark.SQUARE:
    case _mark.TEXT:
    case _mark.RECT:
      // orient is meaningless for these marks.
      return undefined;
  }

  const {
    x,
    y,
    x2,
    y2
  } = encoding;

  switch (mark) {
    case _mark.BAR:
      if ((0, _channeldef.isFieldDef)(x) && (0, _bin.isBinned)(x.bin)) {
        return 'vertical';
      }

      if ((0, _channeldef.isFieldDef)(y) && (0, _bin.isBinned)(y.bin)) {
        return 'horizontal';
      }

      if (y2 || x2) {
        // Ranged bar does not always have clear orientation, so we allow overriding
        if (specifiedOrient) {
          return specifiedOrient;
        } // If y is range and x is non-range, non-bin Q, y is likely a prebinned field


        if (!x2 && (0, _channeldef.isFieldDef)(x) && x.type === _type.QUANTITATIVE && !(0, _bin.isBinning)(x.bin)) {
          return 'horizontal';
        } // If x is range and y is non-range, non-bin Q, x is likely a prebinned field


        if (!y2 && (0, _channeldef.isFieldDef)(y) && y.type === _type.QUANTITATIVE && !(0, _bin.isBinning)(y.bin)) {
          return 'vertical';
        }
      }

    // falls through

    case _mark.RULE:
      // return undefined for line segment rule and bar with both axis ranged
      if (x2 && y2) {
        return undefined;
      }

    // falls through

    case _mark.AREA:
      // If there are range for both x and y, y (vertical) has higher precedence.
      if (y2) {
        if ((0, _channeldef.isFieldDef)(y) && (0, _bin.isBinned)(y.bin)) {
          return 'horizontal';
        } else {
          return 'vertical';
        }
      } else if (x2) {
        if ((0, _channeldef.isFieldDef)(x) && (0, _bin.isBinned)(x.bin)) {
          return 'vertical';
        } else {
          return 'horizontal';
        }
      } else if (mark === _mark.RULE) {
        if (encoding.x && !encoding.y) {
          return 'vertical';
        } else if (encoding.y && !encoding.x) {
          return 'horizontal';
        }
      }

    // falls through

    case _mark.LINE:
    case _mark.TICK:
      {
        // Tick is opposite to bar, line, area and never have ranged mark.
        const xIsContinuous = (0, _channeldef.isFieldDef)(encoding.x) && (0, _channeldef.isContinuous)(encoding.x);
        const yIsContinuous = (0, _channeldef.isFieldDef)(encoding.y) && (0, _channeldef.isContinuous)(encoding.y);

        if (xIsContinuous && !yIsContinuous) {
          return mark !== 'tick' ? 'horizontal' : 'vertical';
        } else if (!xIsContinuous && yIsContinuous) {
          return mark !== 'tick' ? 'vertical' : 'horizontal';
        } else if (xIsContinuous && yIsContinuous) {
          const xDef = encoding.x; // we can cast here since they are surely fieldDef

          const yDef = encoding.y;
          const xIsTemporal = xDef.type === _type.TEMPORAL;
          const yIsTemporal = yDef.type === _type.TEMPORAL; // temporal without timeUnit is considered continuous, but better serves as dimension

          if (xIsTemporal && !yIsTemporal) {
            return mark !== 'tick' ? 'vertical' : 'horizontal';
          } else if (!xIsTemporal && yIsTemporal) {
            return mark !== 'tick' ? 'horizontal' : 'vertical';
          }

          if (!xDef.aggregate && yDef.aggregate) {
            return mark !== 'tick' ? 'vertical' : 'horizontal';
          } else if (xDef.aggregate && !yDef.aggregate) {
            return mark !== 'tick' ? 'horizontal' : 'vertical';
          }

          if (specifiedOrient) {
            // When ambiguous, use user specified one.
            return specifiedOrient;
          }

          return 'vertical';
        } else {
          // Discrete x Discrete case
          if (specifiedOrient) {
            // When ambiguous, use user specified one.
            return specifiedOrient;
          }

          return undefined;
        }
      }
  }

  return 'vertical';
}
},{"../../bin":"node_modules/vega-lite/build/src/bin.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../encoding":"node_modules/vega-lite/build/src/encoding.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../mark":"node_modules/vega-lite/build/src/mark.js","../../type":"node_modules/vega-lite/build/src/type.js","../../util":"node_modules/vega-lite/build/src/util.js","../common":"node_modules/vega-lite/build/src/compile/common.js"}],"node_modules/vega-lite/build/src/compile/mark/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.area = void 0;

var mixins = _interopRequireWildcard(require("./mixins"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const area = {
  vgMark: 'area',
  encodeEntry: model => {
    return Object.assign({}, mixins.baseEncodeEntry(model, {
      size: 'ignore',
      orient: 'include'
    }), mixins.pointPosition('x', model, 'zeroOrMin'), mixins.pointPosition('y', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin', model.markDef.orient === 'horizontal' ? 'x2' : 'y2'), mixins.defined(model));
  }
};
exports.area = area;
},{"./mixins":"node_modules/vega-lite/build/src/compile/mark/mixins.js"}],"node_modules/vega-lite/build/src/compile/mark/rect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rectPosition = rectPosition;
exports.rect = void 0;

var _vegaUtil = require("vega-util");

var _bin = require("../../bin");

var _channeldef = require("../../channeldef");

var log = _interopRequireWildcard(require("../../log"));

var _scale = require("../../scale");

var _util = require("../../util");

var _vega = require("../../vega.schema");

var _common = require("../common");

var mixins = _interopRequireWildcard(require("./mixins"));

var ref = _interopRequireWildcard(require("./valueref"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const rect = {
  vgMark: 'rect',
  encodeEntry: model => {
    return Object.assign({}, mixins.baseEncodeEntry(model, {
      size: 'ignore',
      orient: 'ignore'
    }), rectPosition(model, 'x', 'rect'), rectPosition(model, 'y', 'rect'));
  }
};
exports.rect = rect;

function rectPosition(model, channel, mark) {
  const {
    config,
    encoding,
    markDef
  } = model;
  const channel2 = channel === 'x' ? 'x2' : 'y2';
  const sizeChannel = channel === 'x' ? 'width' : 'height';
  const fieldDef = encoding[channel];
  const fieldDef2 = encoding[channel2];
  const scale = model.getScaleComponent(channel);
  const scaleType = scale ? scale.get('type') : undefined;
  const scaleName = model.scaleName(channel);
  const orient = markDef.orient;
  const hasSizeDef = encoding[sizeChannel] || encoding.size || markDef[sizeChannel] || markDef.size || (0, _common.getMarkConfig)('size', markDef, config, {
    vgChannel: sizeChannel
  });
  const isBarBand = channel === 'x' ? orient === 'vertical' : orient === 'horizontal'; // x, x2, and width -- we must specify two of these in all conditions

  if ((0, _channeldef.isFieldDef)(fieldDef) && ((0, _bin.isBinning)(fieldDef.bin) || (0, _bin.isBinned)(fieldDef.bin)) && !hasSizeDef && !(0, _scale.hasDiscreteDomain)(scaleType)) {
    return mixins.binPosition({
      fieldDef,
      fieldDef2,
      channel,
      mark,
      scaleName,
      spacing: (0, _util.getFirstDefined)(markDef.binSpacing, config[mark].binSpacing),
      reverse: scale.get('reverse')
    });
  } else if (((0, _channeldef.isFieldDef)(fieldDef) && (0, _scale.hasDiscreteDomain)(scaleType) || isBarBand) && !fieldDef2) {
    // vertical
    if ((0, _channeldef.isFieldDef)(fieldDef) && scaleType === _scale.ScaleType.BAND) {
      return mixins.bandPosition(fieldDef, channel, model, defaultSizeRef(mark, markDef, sizeChannel, scaleName, scale, config));
    } // sized bin, normal point-ordinal axis, quantitative x-axis, or no x


    return mixins.centeredPointPositionWithSize(channel, model, ref.mid(model[sizeChannel]), defaultSizeRef(mark, markDef, sizeChannel, scaleName, scale, config));
  } else {
    return Object.assign({}, mixins.pointPosition(channel, model, 'zeroOrMax'), mixins.pointPosition2(model, 'zeroOrMin', channel2));
  }
}

function defaultSizeRef(mark, markDef, sizeChannel, scaleName, scale, config) {
  const markPropOrConfig = (0, _util.getFirstDefined)(markDef[sizeChannel], markDef.size, // TODO: deal with sizeChannel config
  (0, _common.getMarkConfig)('size', markDef, config, {
    vgChannel: sizeChannel
  }));

  if (markPropOrConfig !== undefined) {
    return {
      value: markPropOrConfig
    };
  }

  if (scale) {
    const scaleType = scale.get('type');

    if (scaleType === 'point' || scaleType === 'band') {
      if (config[mark].discreteBandSize !== undefined) {
        return {
          value: config[mark].discreteBandSize
        };
      }

      if (scaleType === _scale.ScaleType.POINT) {
        const scaleRange = scale.get('range');

        if ((0, _vega.isVgRangeStep)(scaleRange) && (0, _vegaUtil.isNumber)(scaleRange.step)) {
          return {
            value: scaleRange.step - 1
          };
        }

        log.warn(log.message.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL);
      } else {
        // BAND
        return ref.bandRef(scaleName);
      }
    } else {
      // continuous scale
      return {
        value: config[mark].continuousBandSize
      };
    }
  } // No Scale


  const value = (0, _util.getFirstDefined)( // No scale is like discrete bar (with one item)
  config[mark].discreteBandSize, config.scale.rangeStep ? config.scale.rangeStep - 1 : undefined, // If somehow default rangeStep is set to null or undefined, use 20 as back up
  20);
  return {
    value
  };
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../bin":"node_modules/vega-lite/build/src/bin.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../log":"node_modules/vega-lite/build/src/log/index.js","../../scale":"node_modules/vega-lite/build/src/scale.js","../../util":"node_modules/vega-lite/build/src/util.js","../../vega.schema":"node_modules/vega-lite/build/src/vega.schema.js","../common":"node_modules/vega-lite/build/src/compile/common.js","./mixins":"node_modules/vega-lite/build/src/compile/mark/mixins.js","./valueref":"node_modules/vega-lite/build/src/compile/mark/valueref.js"}],"node_modules/vega-lite/build/src/compile/mark/bar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bar = void 0;

var mixins = _interopRequireWildcard(require("./mixins"));

var _rect = require("./rect");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const bar = {
  vgMark: 'rect',
  encodeEntry: model => {
    return Object.assign({}, mixins.baseEncodeEntry(model, {
      size: 'ignore',
      orient: 'ignore'
    }), (0, _rect.rectPosition)(model, 'x', 'bar'), (0, _rect.rectPosition)(model, 'y', 'bar'));
  }
};
exports.bar = bar;
},{"./mixins":"node_modules/vega-lite/build/src/compile/mark/mixins.js","./rect":"node_modules/vega-lite/build/src/compile/mark/rect.js"}],"node_modules/vega-lite/build/src/compile/mark/geoshape.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.geoshape = void 0;

var _channeldef = require("../../channeldef");

var _type = require("../../type");

var mixins = _interopRequireWildcard(require("./mixins"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const geoshape = {
  vgMark: 'shape',
  encodeEntry: model => {
    return Object.assign({}, mixins.baseEncodeEntry(model, {
      size: 'ignore',
      orient: 'ignore'
    }));
  },
  postEncodingTransform: model => {
    const {
      encoding
    } = model;
    const shapeDef = encoding.shape;
    const transform = Object.assign({
      type: 'geoshape',
      projection: model.projectionName()
    }, shapeDef && (0, _channeldef.isFieldDef)(shapeDef) && shapeDef.type === _type.GEOJSON ? {
      field: (0, _channeldef.vgField)(shapeDef, {
        expr: 'datum'
      })
    } : {});
    return [transform];
  }
};
exports.geoshape = geoshape;
},{"../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../type":"node_modules/vega-lite/build/src/type.js","./mixins":"node_modules/vega-lite/build/src/compile/mark/mixins.js"}],"node_modules/vega-lite/build/src/compile/mark/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trail = exports.line = void 0;

var mixins = _interopRequireWildcard(require("./mixins"));

var ref = _interopRequireWildcard(require("./valueref"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const line = {
  vgMark: 'line',
  encodeEntry: model => {
    const {
      width,
      height
    } = model;
    return Object.assign({}, mixins.baseEncodeEntry(model, {
      size: 'ignore',
      orient: 'ignore'
    }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model, {
      vgChannel: 'strokeWidth' // VL's line size is strokeWidth

    }), mixins.defined(model));
  }
};
exports.line = line;
const trail = {
  vgMark: 'trail',
  encodeEntry: model => {
    const {
      width,
      height
    } = model;
    return Object.assign({}, mixins.baseEncodeEntry(model, {
      size: 'include',
      orient: 'ignore'
    }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model), mixins.defined(model));
  }
};
exports.trail = trail;
},{"./mixins":"node_modules/vega-lite/build/src/compile/mark/mixins.js","./valueref":"node_modules/vega-lite/build/src/compile/mark/valueref.js"}],"node_modules/vega-lite/build/src/compile/mark/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shapeMixins = shapeMixins;
exports.square = exports.circle = exports.point = void 0;

var mixins = _interopRequireWildcard(require("./mixins"));

var ref = _interopRequireWildcard(require("./valueref"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function encodeEntry(model, fixedShape) {
  const {
    config,
    width,
    height
  } = model;
  return Object.assign({}, mixins.baseEncodeEntry(model, {
    size: 'include',
    orient: 'ignore'
  }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model), shapeMixins(model, config, fixedShape));
}

function shapeMixins(model, config, fixedShape) {
  if (fixedShape) {
    return {
      shape: {
        value: fixedShape
      }
    };
  }

  return mixins.nonPosition('shape', model);
}

const point = {
  vgMark: 'symbol',
  encodeEntry: model => {
    return encodeEntry(model);
  }
};
exports.point = point;
const circle = {
  vgMark: 'symbol',
  encodeEntry: model => {
    return encodeEntry(model, 'circle');
  }
};
exports.circle = circle;
const square = {
  vgMark: 'symbol',
  encodeEntry: model => {
    return encodeEntry(model, 'square');
  }
};
exports.square = square;
},{"./mixins":"node_modules/vega-lite/build/src/compile/mark/mixins.js","./valueref":"node_modules/vega-lite/build/src/compile/mark/valueref.js"}],"node_modules/vega-lite/build/src/compile/mark/rule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rule = void 0;

var mixins = _interopRequireWildcard(require("./mixins"));

var ref = _interopRequireWildcard(require("./valueref"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const rule = {
  vgMark: 'rule',
  encodeEntry: model => {
    const {
      markDef,
      width,
      height
    } = model;
    const orient = markDef.orient;

    if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {
      // Show nothing if we have none of x, y, lat, and long.
      return {};
    }

    return Object.assign({}, mixins.baseEncodeEntry(model, {
      size: 'ignore',
      orient: 'ignore'
    }), mixins.pointPosition('x', model, orient === 'horizontal' ? 'zeroOrMin' : ref.mid(width)), mixins.pointPosition('y', model, orient === 'vertical' ? 'zeroOrMin' : ref.mid(height)), orient !== 'vertical' ? mixins.pointPosition2(model, 'zeroOrMax', 'x2') : {}, orient !== 'horizontal' ? mixins.pointPosition2(model, 'zeroOrMax', 'y2') : {}, mixins.nonPosition('size', model, {
      vgChannel: 'strokeWidth' // VL's rule size is strokeWidth

    }));
  }
};
exports.rule = rule;
},{"./mixins":"node_modules/vega-lite/build/src/compile/mark/mixins.js","./valueref":"node_modules/vega-lite/build/src/compile/mark/valueref.js"}],"node_modules/vega-lite/build/src/compile/mark/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.text = void 0;

var _common = require("../common");

var mixins = _interopRequireWildcard(require("./mixins"));

var ref = _interopRequireWildcard(require("./valueref"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const text = {
  vgMark: 'text',
  encodeEntry: model => {
    const {
      config,
      encoding,
      width,
      height
    } = model;
    return Object.assign({}, mixins.baseEncodeEntry(model, {
      size: 'ignore',
      orient: 'ignore'
    }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.text(model), mixins.nonPosition('size', model, {
      vgChannel: 'fontSize' // VL's text size is fontSize

    }), mixins.valueIfDefined('align', align(model.markDef, encoding, config)), mixins.valueIfDefined('baseline', baseline(model.markDef, encoding, config)));
  }
};
exports.text = text;

function align(markDef, encoding, config) {
  const a = markDef.align || (0, _common.getMarkConfig)('align', markDef, config);

  if (a === undefined) {
    return 'center';
  } // If there is a config, Vega-parser will process this already.


  return undefined;
}

function baseline(markDef, encoding, config) {
  const b = markDef.baseline || (0, _common.getMarkConfig)('baseline', markDef, config);

  if (b === undefined) {
    return 'middle';
  } // If there is a config, Vega-parser will process this already.


  return undefined;
}
},{"../common":"node_modules/vega-lite/build/src/compile/common.js","./mixins":"node_modules/vega-lite/build/src/compile/mark/mixins.js","./valueref":"node_modules/vega-lite/build/src/compile/mark/valueref.js"}],"node_modules/vega-lite/build/src/compile/mark/tick.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tick = void 0;

var _util = require("../../util");

var _vega = require("../../vega.schema");

var _common = require("../common");

var mixins = _interopRequireWildcard(require("./mixins"));

var ref = _interopRequireWildcard(require("./valueref"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const tick = {
  vgMark: 'rect',
  encodeEntry: model => {
    const {
      config,
      markDef,
      width,
      height
    } = model;
    const orient = markDef.orient;
    const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';
    const vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';
    return Object.assign({}, mixins.baseEncodeEntry(model, {
      size: 'ignore',
      orient: 'ignore'
    }), mixins.pointPosition('x', model, ref.mid(width), 'xc'), mixins.pointPosition('y', model, ref.mid(height), 'yc'), mixins.nonPosition('size', model, {
      defaultValue: defaultSize(model),
      vgChannel: vgSizeChannel
    }), {
      [vgThicknessChannel]: {
        value: (0, _util.getFirstDefined)(markDef.thickness, config.tick.thickness)
      }
    });
  }
};
exports.tick = tick;

function defaultSize(model) {
  const {
    config,
    markDef
  } = model;
  const {
    orient
  } = markDef;
  const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';
  const scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');
  const markPropOrConfig = (0, _util.getFirstDefined)(markDef[vgSizeChannel], markDef.size, (0, _common.getMarkConfig)('size', markDef, config, {
    vgChannel: vgSizeChannel
  }), config.tick.bandSize);

  if (markPropOrConfig !== undefined) {
    return markPropOrConfig;
  } else {
    const scaleRange = scale ? scale.get('range') : undefined;
    const rangeStep = scaleRange && (0, _vega.isVgRangeStep)(scaleRange) ? scaleRange.step : config.scale.rangeStep;

    if (typeof rangeStep !== 'number') {
      // FIXME consolidate this log
      throw new Error('Function does not handle non-numeric rangeStep');
    }

    return rangeStep * 3 / 4;
  }
}
},{"../../util":"node_modules/vega-lite/build/src/util.js","../../vega.schema":"node_modules/vega-lite/build/src/vega.schema.js","../common":"node_modules/vega-lite/build/src/compile/common.js","./mixins":"node_modules/vega-lite/build/src/compile/mark/mixins.js","./valueref":"node_modules/vega-lite/build/src/compile/mark/valueref.js"}],"node_modules/vega-lite/build/src/compile/mark/mark.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseMarkGroups = parseMarkGroups;
exports.getSort = getSort;

var _vegaUtil = require("vega-util");

var _channeldef = require("../../channeldef");

var _data = require("../../data");

var _encoding = require("../../encoding");

var _mark = require("../../mark");

var _sort = require("../../sort");

var _util = require("../../util");

var _common = require("../common");

var _area = require("./area");

var _bar = require("./bar");

var _geoshape = require("./geoshape");

var _line = require("./line");

var _point = require("./point");

var _rect = require("./rect");

var _rule = require("./rule");

var _text = require("./text");

var _tick = require("./tick");

const markCompiler = {
  area: _area.area,
  bar: _bar.bar,
  circle: _point.circle,
  geoshape: _geoshape.geoshape,
  line: _line.line,
  point: _point.point,
  rect: _rect.rect,
  rule: _rule.rule,
  square: _point.square,
  text: _text.text,
  tick: _tick.tick,
  trail: _line.trail
};

function parseMarkGroups(model) {
  if ((0, _util.contains)([_mark.LINE, _mark.AREA, _mark.TRAIL], model.mark)) {
    return parsePathMark(model);
  } else {
    return getMarkGroups(model);
  }
}

const FACETED_PATH_PREFIX = 'faceted_path_';

function parsePathMark(model) {
  const details = (0, _encoding.pathGroupingFields)(model.mark, model.encoding);
  const pathMarks = getMarkGroups(model, {
    // If has subfacet for line/area group, need to use faceted data from below.
    fromPrefix: details.length > 0 ? FACETED_PATH_PREFIX : ''
  });

  if (details.length > 0) {
    // have level of details - need to facet line into subgroups
    // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)
    return [{
      name: model.getName('pathgroup'),
      type: 'group',
      from: {
        facet: {
          name: FACETED_PATH_PREFIX + model.requestDataName(_data.MAIN),
          data: model.requestDataName(_data.MAIN),
          groupby: details
        }
      },
      encode: {
        update: {
          width: {
            field: {
              group: 'width'
            }
          },
          height: {
            field: {
              group: 'height'
            }
          }
        }
      },
      marks: pathMarks
    }];
  } else {
    return pathMarks;
  }
}

function getSort(model) {
  const {
    encoding,
    stack,
    mark,
    markDef,
    config
  } = model;
  const order = encoding.order;

  if (!(0, _vegaUtil.isArray)(order) && (0, _channeldef.isValueDef)(order) && (0, _util.isNullOrFalse)(order.value) || !order && (0, _util.isNullOrFalse)(markDef.order) || (0, _util.isNullOrFalse)((0, _common.getMarkConfig)('order', markDef, config))) {
    return undefined;
  } else if (((0, _vegaUtil.isArray)(order) || (0, _channeldef.isFieldDef)(order)) && !stack) {
    // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)
    return (0, _common.sortParams)(order, {
      expr: 'datum'
    });
  } else if ((0, _mark.isPathMark)(mark)) {
    // For both line and area, we sort values based on dimension by default
    const dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';
    const dimensionChannelDef = encoding[dimensionChannel];

    if ((0, _channeldef.isFieldDef)(dimensionChannelDef)) {
      const s = dimensionChannelDef.sort;

      if ((0, _vegaUtil.isArray)(s)) {
        return {
          field: (0, _channeldef.vgField)(dimensionChannelDef, {
            prefix: dimensionChannel,
            suffix: 'sort_index',
            expr: 'datum'
          })
        };
      } else if ((0, _sort.isSortField)(s)) {
        return {
          field: (0, _channeldef.vgField)({
            // FIXME: this op might not already exist?
            // FIXME: what if dimensionChannel (x or y) contains custom domain?
            aggregate: (0, _encoding.isAggregate)(model.encoding) ? s.op : undefined,
            field: s.field
          }, {
            expr: 'datum'
          })
        };
      } else {
        return {
          field: (0, _channeldef.vgField)(dimensionChannelDef, {
            // For stack with imputation, we only have bin_mid
            binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,
            expr: 'datum'
          })
        };
      }
    }

    return undefined;
  }

  return undefined;
}

function getMarkGroups(model, opt = {
  fromPrefix: ''
}) {
  const mark = model.mark;
  const clip = (0, _util.getFirstDefined)(model.markDef.clip, scaleClip(model), projectionClip(model));
  const style = (0, _common.getStyles)(model.markDef);
  const key = model.encoding.key;
  const sort = getSort(model);
  const postEncodingTransform = markCompiler[mark].postEncodingTransform ? markCompiler[mark].postEncodingTransform(model) : null;
  return [Object.assign({
    name: model.getName('marks'),
    type: markCompiler[mark].vgMark
  }, clip ? {
    clip: true
  } : {}, style ? {
    style
  } : {}, key ? {
    key: {
      field: key.field
    }
  } : {}, sort ? {
    sort
  } : {}, {
    from: {
      data: opt.fromPrefix + model.requestDataName(_data.MAIN)
    },
    encode: {
      update: markCompiler[mark].encodeEntry(model)
    }
  }, postEncodingTransform ? {
    transform: postEncodingTransform
  } : {})];
}
/**
 * If scales are bound to interval selections, we want to automatically clip
 * marks to account for panning/zooming interactions. We identify bound scales
 * by the domainRaw property, which gets added during scale parsing.
 */


function scaleClip(model) {
  const xScale = model.getScaleComponent('x');
  const yScale = model.getScaleComponent('y');
  return xScale && xScale.get('domainRaw') || yScale && yScale.get('domainRaw') ? true : undefined;
}
/**
 * If we use a custom projection with auto-fitting to the geodata extent,
 * we need to clip to ensure the chart size doesn't explode.
 */


function projectionClip(model) {
  const projection = model.component.projection;
  return projection && !projection.isFit ? true : undefined;
}
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../../data":"node_modules/vega-lite/build/src/data.js","../../encoding":"node_modules/vega-lite/build/src/encoding.js","../../mark":"node_modules/vega-lite/build/src/mark.js","../../sort":"node_modules/vega-lite/build/src/sort.js","../../util":"node_modules/vega-lite/build/src/util.js","../common":"node_modules/vega-lite/build/src/compile/common.js","./area":"node_modules/vega-lite/build/src/compile/mark/area.js","./bar":"node_modules/vega-lite/build/src/compile/mark/bar.js","./geoshape":"node_modules/vega-lite/build/src/compile/mark/geoshape.js","./line":"node_modules/vega-lite/build/src/compile/mark/line.js","./point":"node_modules/vega-lite/build/src/compile/mark/point.js","./rect":"node_modules/vega-lite/build/src/compile/mark/rect.js","./rule":"node_modules/vega-lite/build/src/compile/mark/rule.js","./text":"node_modules/vega-lite/build/src/compile/mark/text.js","./tick":"node_modules/vega-lite/build/src/compile/mark/tick.js"}],"node_modules/vega-lite/build/src/compile/selection/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseUnitSelection = parseUnitSelection;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _vegaEventSelector = require("vega-event-selector");

var _vegaUtil = require("vega-util");

var _util = require("../../util");

var _transforms = require("./transforms/transforms");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function parseUnitSelection(model, selDefs) {
  const selCmpts = {};
  const selectionConfig = model.config.selection;

  if (selDefs) {
    selDefs = (0, _util.duplicate)(selDefs); // duplicate to avoid side effects to original spec
  }

  for (let name in selDefs) {
    if (!selDefs.hasOwnProperty(name)) {
      continue;
    }

    const selDef = selDefs[name];

    const _a = selectionConfig[selDef.type],
          {
      fields,
      encodings
    } = _a,
          cfg = tslib_1.__rest(_a, ["fields", "encodings"]); // Project transform applies its defaults.
    // Set default values from config if a property hasn't been specified,
    // or if it is true. E.g., "translate": true should use the default
    // event handlers for translate. However, true may be a valid value for
    // a property (e.g., "nearest": true).


    for (const key in cfg) {
      // A selection should contain either `encodings` or `fields`, only use
      // default values for these two values if neither of them is specified.
      if (key === 'encodings' && selDef.fields || key === 'fields' && selDef.encodings) {
        continue;
      }

      if (key === 'mark') {
        selDef[key] = Object.assign({}, cfg[key], selDef[key]);
      }

      if (selDef[key] === undefined || selDef[key] === true) {
        selDef[key] = cfg[key] || selDef[key];
      }
    }

    name = (0, _util.varName)(name);
    const selCmpt = selCmpts[name] = Object.assign({}, selDef, {
      name: name,
      events: (0, _vegaUtil.isString)(selDef.on) ? (0, _vegaEventSelector.selector)(selDef.on, 'scope') : selDef.on
    });
    (0, _transforms.forEachTransform)(selCmpt, txCompiler => {
      if (txCompiler.parse) {
        txCompiler.parse(model, selDef, selCmpt);
      }
    });
  }

  return selCmpts;
}
},{"tslib":"node_modules/tslib/tslib.es6.js","vega-event-selector":"node_modules/vega-event-selector/index.js","vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../../util":"node_modules/vega-lite/build/src/util.js","./transforms/transforms":"node_modules/vega-lite/build/src/compile/selection/transforms/transforms.js"}],"node_modules/vega-lite/build/src/compile/unit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnitModel = void 0;

var _channel = require("../channel");

var _channeldef = require("../channeldef");

var vlEncoding = _interopRequireWildcard(require("../encoding"));

var _mark = require("../mark");

var _stack = require("../stack");

var _assemble = require("./axis/assemble");

var _parse = require("./axis/parse");

var _parse2 = require("./data/parse");

var _assemble2 = require("./layoutsize/assemble");

var _parse3 = require("./layoutsize/parse");

var _init = require("./mark/init");

var _mark2 = require("./mark/mark");

var _model = require("./model");

var _repeater = require("./repeater");

var _assemble3 = require("./selection/assemble");

var _parse4 = require("./selection/parse");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * Internal model of Vega-Lite specification for the compiler.
 */
class UnitModel extends _model.ModelWithField {
  constructor(spec, parent, parentGivenName, parentGivenSize = {}, repeater, config, fit) {
    super(spec, 'unit', parent, parentGivenName, config, repeater, undefined, spec.view);
    this.fit = fit;
    this.specifiedScales = {};
    this.specifiedAxes = {};
    this.specifiedLegends = {};
    this.specifiedProjection = {};
    this.selection = {};
    this.children = [];
    this.initSize(Object.assign({}, parentGivenSize, spec.width ? {
      width: spec.width
    } : {}, spec.height ? {
      height: spec.height
    } : {}));
    const mark = (0, _mark.isMarkDef)(spec.mark) ? spec.mark.type : spec.mark;
    const encoding = this.encoding = (0, vlEncoding.normalizeEncoding)((0, _repeater.replaceRepeaterInEncoding)(spec.encoding || {}, repeater), mark);
    this.markDef = (0, _init.normalizeMarkDef)(spec.mark, encoding, config); // calculate stack properties

    this.stack = (0, _stack.stack)(mark, encoding, this.config.stack);
    this.specifiedScales = this.initScales(mark, encoding);
    this.specifiedAxes = this.initAxes(encoding);
    this.specifiedLegends = this.initLegend(encoding);
    this.specifiedProjection = spec.projection; // Selections will be initialized upon parse.

    this.selection = spec.selection;
  }

  get hasProjection() {
    const {
      encoding
    } = this;
    const isGeoShapeMark = this.mark === _mark.GEOSHAPE;

    const hasGeoPosition = encoding && _channel.GEOPOSITION_CHANNELS.some(channel => (0, _channeldef.isFieldDef)(encoding[channel]));

    return isGeoShapeMark || hasGeoPosition;
  }
  /**
   * Return specified Vega-lite scale domain for a particular channel
   * @param channel
   */


  scaleDomain(channel) {
    const scale = this.specifiedScales[channel];
    return scale ? scale.domain : undefined;
  }

  axis(channel) {
    return this.specifiedAxes[channel];
  }

  legend(channel) {
    return this.specifiedLegends[channel];
  }

  initScales(mark, encoding) {
    return _channel.SCALE_CHANNELS.reduce((scales, channel) => {
      let fieldDef;
      let specifiedScale;
      const channelDef = encoding[channel];

      if ((0, _channeldef.isFieldDef)(channelDef)) {
        fieldDef = channelDef;
        specifiedScale = channelDef.scale;
      } else if ((0, _channeldef.hasConditionalFieldDef)(channelDef)) {
        // Need to specify generic for hasConditionalFieldDef as the value type can vary across channels
        fieldDef = channelDef.condition;
        specifiedScale = channelDef.condition['scale'];
      }

      if (fieldDef) {
        scales[channel] = specifiedScale || {};
      }

      return scales;
    }, {});
  }

  initAxes(encoding) {
    return [_channel.X, _channel.Y].reduce((_axis, channel) => {
      // Position Axis
      // TODO: handle ConditionFieldDef
      const channelDef = encoding[channel];

      if ((0, _channeldef.isFieldDef)(channelDef) || channel === _channel.X && (0, _channeldef.isFieldDef)(encoding.x2) || channel === _channel.Y && (0, _channeldef.isFieldDef)(encoding.y2)) {
        const axisSpec = (0, _channeldef.isFieldDef)(channelDef) ? channelDef.axis : null;

        if (axisSpec !== null) {
          _axis[channel] = Object.assign({}, axisSpec);
        }
      }

      return _axis;
    }, {});
  }

  initLegend(encoding) {
    return _channel.NONPOSITION_SCALE_CHANNELS.reduce((_legend, channel) => {
      const channelDef = encoding[channel];

      if (channelDef) {
        const legend = (0, _channeldef.isFieldDef)(channelDef) ? channelDef.legend : (0, _channeldef.hasConditionalFieldDef)(channelDef) // Need to specify generic for hasConditionalFieldDef as the value type can vary across channels
        ? channelDef.condition['legend'] : null;

        if (legend !== null && legend !== false && (0, _channel.supportLegend)(channel)) {
          _legend[channel] = Object.assign({}, legend);
        }
      }

      return _legend;
    }, {});
  }

  parseData() {
    this.component.data = (0, _parse2.parseData)(this);
  }

  parseLayoutSize() {
    (0, _parse3.parseUnitLayoutSize)(this);
  }

  parseSelections() {
    this.component.selection = (0, _parse4.parseUnitSelection)(this, this.selection);
  }

  parseMarkGroup() {
    this.component.mark = (0, _mark2.parseMarkGroups)(this);
  }

  parseAxesAndHeaders() {
    this.component.axes = (0, _parse.parseUnitAxes)(this);
  }

  assembleSelectionTopLevelSignals(signals) {
    return (0, _assemble3.assembleTopLevelSignals)(this, signals);
  }

  assembleSignals() {
    return [...(0, _assemble.assembleAxisSignals)(this), ...(0, _assemble3.assembleUnitSelectionSignals)(this, [])];
  }

  assembleSelectionData(data) {
    return (0, _assemble3.assembleUnitSelectionData)(this, data);
  }

  assembleLayout() {
    return null;
  }

  assembleLayoutSignals() {
    return (0, _assemble2.assembleLayoutSignals)(this);
  }

  assembleMarks() {
    let marks = this.component.mark || []; // If this unit is part of a layer, selections should augment
    // all in concert rather than each unit individually. This
    // ensures correct interleaving of clipping and brushed marks.

    if (!this.parent || !(0, _model.isLayerModel)(this.parent)) {
      marks = (0, _assemble3.assembleUnitSelectionMarks)(this, marks);
    }

    return marks.map(this.correctDataNames);
  }

  getMapping() {
    return this.encoding;
  }

  get mark() {
    return this.markDef.type;
  }

  channelHasField(channel) {
    return vlEncoding.channelHasField(this.encoding, channel);
  }

  fieldDef(channel) {
    const channelDef = this.encoding[channel];
    return (0, _channeldef.getTypedFieldDef)(channelDef);
  }

}

exports.UnitModel = UnitModel;
},{"../channel":"node_modules/vega-lite/build/src/channel.js","../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../encoding":"node_modules/vega-lite/build/src/encoding.js","../mark":"node_modules/vega-lite/build/src/mark.js","../stack":"node_modules/vega-lite/build/src/stack.js","./axis/assemble":"node_modules/vega-lite/build/src/compile/axis/assemble.js","./axis/parse":"node_modules/vega-lite/build/src/compile/axis/parse.js","./data/parse":"node_modules/vega-lite/build/src/compile/data/parse.js","./layoutsize/assemble":"node_modules/vega-lite/build/src/compile/layoutsize/assemble.js","./layoutsize/parse":"node_modules/vega-lite/build/src/compile/layoutsize/parse.js","./mark/init":"node_modules/vega-lite/build/src/compile/mark/init.js","./mark/mark":"node_modules/vega-lite/build/src/compile/mark/mark.js","./model":"node_modules/vega-lite/build/src/compile/model.js","./repeater":"node_modules/vega-lite/build/src/compile/repeater.js","./selection/assemble":"node_modules/vega-lite/build/src/compile/selection/assemble.js","./selection/parse":"node_modules/vega-lite/build/src/compile/selection/parse.js"}],"node_modules/vega-lite/build/src/compile/layer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LayerModel = void 0;

var log = _interopRequireWildcard(require("../log"));

var _spec = require("../spec");

var _util = require("../util");

var _assemble = require("./axis/assemble");

var _parse = require("./axis/parse");

var _parse2 = require("./data/parse");

var _assemble2 = require("./layoutsize/assemble");

var _parse3 = require("./layoutsize/parse");

var _assemble3 = require("./legend/assemble");

var _model = require("./model");

var _assemble4 = require("./selection/assemble");

var _unit = require("./unit");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class LayerModel extends _model.Model {
  constructor(spec, parent, parentGivenName, parentGivenSize, repeater, config, fit) {
    super(spec, 'layer', parent, parentGivenName, config, repeater, spec.resolve, spec.view);
    const layoutSize = Object.assign({}, parentGivenSize, spec.width ? {
      width: spec.width
    } : {}, spec.height ? {
      height: spec.height
    } : {});
    this.initSize(layoutSize);
    this.children = spec.layer.map((layer, i) => {
      if ((0, _spec.isLayerSpec)(layer)) {
        return new LayerModel(layer, this, this.getName('layer_' + i), layoutSize, repeater, config, fit);
      }

      if ((0, _spec.isUnitSpec)(layer)) {
        return new _unit.UnitModel(layer, this, this.getName('layer_' + i), layoutSize, repeater, config, fit);
      }

      throw new Error(log.message.INVALID_SPEC);
    });
  }

  parseData() {
    this.component.data = (0, _parse2.parseData)(this);

    for (const child of this.children) {
      child.parseData();
    }
  }

  parseLayoutSize() {
    (0, _parse3.parseLayerLayoutSize)(this);
  }

  parseSelections() {
    // Merge selections up the hierarchy so that they may be referenced
    // across unit specs. Persist their definitions within each child
    // to assemble signals which remain within output Vega unit groups.
    this.component.selection = {};

    for (const child of this.children) {
      child.parseSelections();
      (0, _util.keys)(child.component.selection).forEach(key => {
        this.component.selection[key] = child.component.selection[key];
      });
    }
  }

  parseMarkGroup() {
    for (const child of this.children) {
      child.parseMarkGroup();
    }
  }

  parseAxesAndHeaders() {
    (0, _parse.parseLayerAxes)(this);
  }

  assembleSelectionTopLevelSignals(signals) {
    return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);
  } // TODO: Support same named selections across children.


  assembleSignals() {
    return this.children.reduce((signals, child) => {
      return signals.concat(child.assembleSignals());
    }, (0, _assemble.assembleAxisSignals)(this));
  }

  assembleLayoutSignals() {
    return this.children.reduce((signals, child) => {
      return signals.concat(child.assembleLayoutSignals());
    }, (0, _assemble2.assembleLayoutSignals)(this));
  }

  assembleSelectionData(data) {
    return this.children.reduce((db, child) => child.assembleSelectionData(db), data);
  }

  assembleTitle() {
    let title = super.assembleTitle();

    if (title) {
      return title;
    } // If title does not provide layer, look into children


    for (const child of this.children) {
      title = child.assembleTitle();

      if (title) {
        return title;
      }
    }

    return undefined;
  }

  assembleLayout() {
    return null;
  }

  assembleMarks() {
    return (0, _assemble4.assembleLayerSelectionMarks)(this, (0, _util.flatten)(this.children.map(child => {
      return child.assembleMarks();
    })));
  }

  assembleLegends() {
    return this.children.reduce((legends, child) => {
      return legends.concat(child.assembleLegends());
    }, (0, _assemble3.assembleLegends)(this));
  }

}

exports.LayerModel = LayerModel;
},{"../log":"node_modules/vega-lite/build/src/log/index.js","../spec":"node_modules/vega-lite/build/src/spec/index.js","../util":"node_modules/vega-lite/build/src/util.js","./axis/assemble":"node_modules/vega-lite/build/src/compile/axis/assemble.js","./axis/parse":"node_modules/vega-lite/build/src/compile/axis/parse.js","./data/parse":"node_modules/vega-lite/build/src/compile/data/parse.js","./layoutsize/assemble":"node_modules/vega-lite/build/src/compile/layoutsize/assemble.js","./layoutsize/parse":"node_modules/vega-lite/build/src/compile/layoutsize/parse.js","./legend/assemble":"node_modules/vega-lite/build/src/compile/legend/assemble.js","./model":"node_modules/vega-lite/build/src/compile/model.js","./selection/assemble":"node_modules/vega-lite/build/src/compile/selection/assemble.js","./unit":"node_modules/vega-lite/build/src/compile/unit.js"}],"node_modules/vega-lite/build/src/compile/repeat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RepeatModel = void 0;

var _vegaUtil = require("vega-util");

var log = _interopRequireWildcard(require("../log"));

var _baseconcat = require("./baseconcat");

var _buildmodel = require("./buildmodel");

var _parse = require("./layoutsize/parse");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class RepeatModel extends _baseconcat.BaseConcatModel {
  constructor(spec, parent, parentGivenName, repeatValues, config) {
    super(spec, 'repeat', parent, parentGivenName, config, repeatValues, spec.resolve);

    if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {
      log.warn(log.message.REPEAT_CANNOT_SHARE_AXIS);
    }

    this.repeat = spec.repeat;
    this.children = this._initChildren(spec, this.repeat, repeatValues, config);
  }

  _initChildren(spec, repeat, repeater, config) {
    const children = [];
    const row = !(0, _vegaUtil.isArray)(repeat) && repeat.row || [repeater ? repeater.row : null];
    const column = !(0, _vegaUtil.isArray)(repeat) && repeat.column || [repeater ? repeater.column : null];
    const repeatValues = (0, _vegaUtil.isArray)(repeat) && repeat || [repeater ? repeater.repeat : null]; // cross product

    for (const repeatValue of repeatValues) {
      for (const rowValue of row) {
        for (const columnValue of column) {
          const name = (repeatValue ? `__repeat_repeat_${repeatValue}` : '') + (rowValue ? `__repeat_row_${rowValue}` : '') + (columnValue ? `__repeat_column_${columnValue}` : '');
          const childRepeat = {
            repeat: repeatValue,
            row: rowValue,
            column: columnValue
          };
          children.push((0, _buildmodel.buildModel)(spec.spec, this, this.getName('child' + name), undefined, childRepeat, config, false));
        }
      }
    }

    return children;
  }

  parseLayoutSize() {
    (0, _parse.parseRepeatLayoutSize)(this);
  }

  assembleDefaultLayout() {
    const {
      repeat
    } = this;
    const columns = (0, _vegaUtil.isArray)(repeat) ? undefined : repeat.column ? repeat.column.length : 1;
    return Object.assign({}, columns ? {
      columns
    } : {}, {
      bounds: 'full',
      align: 'all'
    });
  }

}

exports.RepeatModel = RepeatModel;
},{"vega-util":"node_modules/vega-lite/node_modules/vega-util/index.js","../log":"node_modules/vega-lite/build/src/log/index.js","./baseconcat":"node_modules/vega-lite/build/src/compile/baseconcat.js","./buildmodel":"node_modules/vega-lite/build/src/compile/buildmodel.js","./layoutsize/parse":"node_modules/vega-lite/build/src/compile/layoutsize/parse.js"}],"node_modules/vega-lite/build/src/compile/buildmodel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildModel = buildModel;

var log = _interopRequireWildcard(require("../log"));

var _spec = require("../spec");

var _concat = require("./concat");

var _facet = require("./facet");

var _layer = require("./layer");

var _repeat = require("./repeat");

var _unit = require("./unit");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function buildModel(spec, parent, parentGivenName, unitSize, repeater, config, fit) {
  if ((0, _spec.isFacetSpec)(spec)) {
    return new _facet.FacetModel(spec, parent, parentGivenName, repeater, config);
  }

  if ((0, _spec.isLayerSpec)(spec)) {
    return new _layer.LayerModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);
  }

  if ((0, _spec.isUnitSpec)(spec)) {
    return new _unit.UnitModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);
  }

  if ((0, _spec.isRepeatSpec)(spec)) {
    return new _repeat.RepeatModel(spec, parent, parentGivenName, repeater, config);
  }

  if ((0, _spec.isAnyConcatSpec)(spec)) {
    return new _concat.ConcatModel(spec, parent, parentGivenName, repeater, config);
  }

  throw new Error(log.message.INVALID_SPEC);
}
},{"../log":"node_modules/vega-lite/build/src/log/index.js","../spec":"node_modules/vega-lite/build/src/spec/index.js","./concat":"node_modules/vega-lite/build/src/compile/concat.js","./facet":"node_modules/vega-lite/build/src/compile/facet.js","./layer":"node_modules/vega-lite/build/src/compile/layer.js","./repeat":"node_modules/vega-lite/build/src/compile/repeat.js","./unit":"node_modules/vega-lite/build/src/compile/unit.js"}],"node_modules/vega-lite/build/src/compile/compile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compile = compile;

var vlFieldDef = _interopRequireWildcard(require("../channeldef"));

var _config = require("../config");

var log = _interopRequireWildcard(require("../log"));

var _index = require("../normalize/index");

var _spec = require("../spec");

var _toplevel = require("../spec/toplevel");

var _util = require("../util");

var _buildmodel = require("./buildmodel");

var _assemble = require("./data/assemble");

var _optimize = require("./data/optimize");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// import {draw} from './data/debug';

/**
 * Vega-Lite's main function, for compiling Vega-lite spec into Vega spec.
 *
 * At a high-level, we make the following transformations in different phases:
 *
 * Input spec
 *     |
 *     |  (Normalization)
 *     v
 * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)
 *     |
 *     |  (Build Model)
 *     v
 * A model tree of the spec
 *     |
 *     |  (Parse)
 *     v
 * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)
 *     |
 *     | (Optimize)
 *     v
 * A model tree with parsed components with the data component optimized
 *     |
 *     | (Assemble)
 *     v
 * Vega spec
 */
function compile(inputSpec, opt = {}) {
  // 0. Augment opt with default opts
  if (opt.logger) {
    // set the singleton logger to the provided logger
    log.set(opt.logger);
  }

  if (opt.fieldTitle) {
    // set the singleton field title formatter
    vlFieldDef.setTitleFormatter(opt.fieldTitle);
  }

  try {
    // 1. Initialize config by deep merging default config with the config provided via option and the input spec.
    const config = (0, _config.initConfig)((0, _util.mergeDeep)({}, opt.config, inputSpec.config)); // 2. Normalize: Convert input spec -> normalized spec
    // - Decompose all extended unit specs into composition of unit spec.  For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.

    const spec = (0, _index.normalize)(inputSpec, config); // - Normalize autosize to be a autosize properties object.

    const autosize = (0, _toplevel.normalizeAutoSize)(inputSpec.autosize, config.autosize, (0, _spec.isLayerSpec)(spec) || (0, _spec.isUnitSpec)(spec)); // 3. Build Model: normalized spec -> Model (a tree structure)
    // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.
    // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, RepeatModel, ConcatModel) for different types of models.

    const model = (0, _buildmodel.buildModel)(spec, null, '', undefined, undefined, config, autosize.type === 'fit'); // 4 Parse: Model --> Model with components
    // Note that components = intermediate representations that are equivalent to Vega specs.
    // We need these intermediate representation because we need to merge many visualization "components" like projections, scales, axes, and legends.
    // We will later convert these components into actual Vega specs in the assemble phase.
    // In this phase, we do a bottom-up traversal over the whole tree to
    // parse for each type of components once (e.g., data, layout, mark, scale).
    // By doing bottom-up traversal, we start parsing components of unit specs and
    // then merge child components of parent composite specs.
    //
    // Please see inside model.parse() for order of different components parsed.

    model.parse(); // draw(model.component.data.sources);
    // 5. Optimize the dataflow.  This will modify the data component of the model.

    (0, _optimize.optimizeDataflow)(model.component.data, model); // 6. Assemble: convert model components --> Vega Spec.

    return assembleTopLevelModel(model, getTopLevelProperties(inputSpec, config, autosize), inputSpec.datasets, inputSpec.usermeta);
  } finally {
    // Reset the singleton logger if a logger is provided
    if (opt.logger) {
      log.reset();
    } // Reset the singleton field title formatter if provided


    if (opt.fieldTitle) {
      vlFieldDef.resetTitleFormatter();
    }
  }
}

function getTopLevelProperties(topLevelSpec, config, autosize) {
  return Object.assign({
    autosize: (0, _util.keys)(autosize).length === 1 && autosize.type ? autosize.type : autosize
  }, (0, _toplevel.extractTopLevelProperties)(config), (0, _toplevel.extractTopLevelProperties)(topLevelSpec));
}
/*
 * Assemble the top-level model.
 *
 * Note: this couldn't be `model.assemble()` since the top-level model
 * needs some special treatment to generate top-level properties.
 */


function assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {
  // Config with Vega-Lite only config removed.
  const vgConfig = model.config ? (0, _config.stripAndRedirectConfig)(model.config) : undefined;
  const data = [].concat(model.assembleSelectionData([]), // only assemble data in the root
  (0, _assemble.assembleRootData)(model.component.data, datasets));
  const projections = model.assembleProjections();
  const title = model.assembleTitle();
  const style = model.assembleGroupStyle();
  const encodeEntry = model.assembleGroupEncodeEntry(true);
  let layoutSignals = model.assembleLayoutSignals(); // move width and height signals with values to top level

  layoutSignals = layoutSignals.filter(signal => {
    if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {
      topLevelProperties[signal.name] = +signal.value;
      return false;
    }

    return true;
  });
  const output = Object.assign({
    $schema: 'https://vega.github.io/schema/vega/v5.json'
  }, model.description ? {
    description: model.description
  } : {}, topLevelProperties, title ? {
    title
  } : {}, style ? {
    style
  } : {}, encodeEntry ? {
    encode: {
      update: encodeEntry
    }
  } : {}, {
    data
  }, projections.length > 0 ? {
    projections: projections
  } : {}, model.assembleGroup([...layoutSignals, ...model.assembleSelectionTopLevelSignals([])]), vgConfig ? {
    config: vgConfig
  } : {}, usermeta ? {
    usermeta
  } : {});
  return {
    spec: output // TODO: add warning / errors here

  };
}
},{"../channeldef":"node_modules/vega-lite/build/src/channeldef.js","../config":"node_modules/vega-lite/build/src/config.js","../log":"node_modules/vega-lite/build/src/log/index.js","../normalize/index":"node_modules/vega-lite/build/src/normalize/index.js","../spec":"node_modules/vega-lite/build/src/spec/index.js","../spec/toplevel":"node_modules/vega-lite/build/src/spec/toplevel.js","../util":"node_modules/vega-lite/build/src/util.js","./buildmodel":"node_modules/vega-lite/build/src/compile/buildmodel.js","./data/assemble":"node_modules/vega-lite/build/src/compile/data/assemble.js","./data/optimize":"node_modules/vega-lite/build/src/compile/data/optimize.js"}],"node_modules/vega-lite/build/src/transformextract.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractTransforms = extractTransforms;

var _encoding = require("./encoding");

var _map = require("./spec/map");

class TransformExtractMapper extends _map.SpecMapper {
  mapUnit(spec, {
    config
  }) {
    if (spec.encoding) {
      const {
        encoding: oldEncoding,
        transform: oldTransforms
      } = spec;
      const {
        bins,
        timeUnits,
        aggregate,
        groupby,
        encoding
      } = (0, _encoding.extractTransformsFromEncoding)(oldEncoding, config);
      const transform = [...(oldTransforms ? oldTransforms : []), ...bins, ...timeUnits, ...(!aggregate.length ? [] : [{
        aggregate,
        groupby
      }])];
      return Object.assign({}, spec, transform.length > 0 ? {
        transform
      } : {}, {
        encoding
      });
    } else {
      return spec;
    }
  }

}

const extractor = new TransformExtractMapper();
/**
 * Modifies spec extracting transformations from encoding and moving them to the transforms array
 */

function extractTransforms(spec, config) {
  return extractor.map(spec, {
    config
  });
}
},{"./encoding":"node_modules/vega-lite/build/src/encoding.js","./spec/map":"node_modules/vega-lite/build/src/spec/map.js"}],"node_modules/vega-lite/build/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "normalize", {
  enumerable: true,
  get: function () {
    return _normalize.normalize;
  }
});
Object.defineProperty(exports, "compile", {
  enumerable: true,
  get: function () {
    return _compile.compile;
  }
});
Object.defineProperty(exports, "extractTransforms", {
  enumerable: true,
  get: function () {
    return _transformextract.extractTransforms;
  }
});
exports.version = void 0;

var _package = _interopRequireDefault(require("../package.json"));

var _normalize = require("./normalize");

var _compile = require("./compile/compile");

var _transformextract = require("./transformextract");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const version = _package.default.version;
exports.version = version;
},{"../package.json":"node_modules/vega-lite/build/package.json","./normalize":"node_modules/vega-lite/build/src/normalize/index.js","./compile/compile":"node_modules/vega-lite/build/src/compile/compile.js","./transformextract":"node_modules/vega-lite/build/src/transformextract.js"}],"node_modules/vega-schema-url-parser/index.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Parse a vega schema url into library and version.
 */
function default_1(url) {
    var regex = /\/schema\/([\w-]+)\/([\w\.\-]+)\.json$/g;
    var _a = regex.exec(url).slice(1, 3), library = _a[0], version = _a[1];
    return { library: library, version: version };
}
exports.default = default_1;

},{}],"node_modules/vega-themes/build/package.json":[function(require,module,exports) {
module.exports = {
    "name": "vega-themes",
    "version": "2.4.0",
    "description": "Themes for stylized Vega and Vega-Lite visualizations.",
    "keywords": [
        "vega",
        "vega-lite",
        "themes",
        "style"
    ],
    "license": "BSD-3-Clause",
    "author": {
        "name": "UW Interactive Data Lab",
        "url": "https://idl.cs.washington.edu"
    },
    "contributors": [
        {
            "name": "Emily Gu",
            "url": "https://github.com/emilygu"
        },
        {
            "name": "Arvind Satyanarayan",
            "url": "http://arvindsatya.com"
        },
        {
            "name": "Jeffrey Heer",
            "url": "http://idl.cs.washington.edu"
        },
        {
            "name": "Dominik Moritz",
            "url": "https://www.domoritz.de"
        }
    ],
    "main": "build/vega-themes.js",
    "module": "build/src/index.js",
    "unpkg": "build/vega-themes.min.js",
    "jsdelivr": "build/vega-themes.min.js",
    "typings": "build/src/index.d.ts",
    "repository": {
        "type": "git",
        "url": "https://github.com/vega/vega-themes.git"
    },
    "scripts": {
        "prepare": "beemo create-config --silent",
        "clean": "rm -rf build examples/build",
        "prettierbase": "beemo prettier 'examples/*.{html,scss,css}'",
        "eslintbase": "beemo eslint 'src/**/*.ts'",
        "format": "yarn eslintbase --fix && yarn prettierbase --write",
        "lint": "yarn eslintbase && yarn prettierbase --check",
        "prebuild": "mkdir -p build",
        "build": "tsc && rollup -c",
        "postbuild": "terser build/vega-themes.js -cm > build/vega-themes.min.js",
        "deploy:gh": "yarn build && mkdir -p examples/build && rsync -r build/* examples/build && gh-pages -d examples",
        "prepublishOnly": "yarn clean && yarn build",
        "preversion": "yarn lint",
        "serve": "browser-sync start -s -f build examples --serveStatic examples",
        "start": "yarn build && concurrently --kill-others -n Server,Typescript,Rollup 'yarn serve' 'tsc -w' 'rollup -c -w'"
    },
    "devDependencies": {
        "browser-sync": "^2.26.7",
        "concurrently": "^4.1.2",
        "gh-pages": "^2.1.1",
        "rollup": "^1.20.3",
        "rollup-plugin-json": "^4.0.0",
        "terser": "^4.2.1",
        "typescript": "~3.5.3",
        "vega": "^5.5.2",
        "vega-lite": "^4.0.0-beta.1",
        "vega-lite-dev-config": "^0.2.5"
    },
    "peerDependencies": {
        "vega": "*",
        "vega-lite": "*"
    },
    "beemo": {
        "module": "vega-lite-dev-config",
        "drivers": [
            "prettier",
            "eslint"
        ]
    }
}
;
},{}],"node_modules/vega-themes/build/src/theme-dark.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const lightColor = '#fff';
const medColor = '#888';
const darkTheme = {
  background: '#333',
  title: {
    color: lightColor
  },
  style: {
    'guide-label': {
      fill: lightColor
    },
    'guide-title': {
      fill: lightColor
    }
  },
  axis: {
    domainColor: lightColor,
    gridColor: medColor,
    tickColor: lightColor
  }
};
var _default = darkTheme;
exports.default = _default;
},{}],"node_modules/vega-themes/build/src/theme-excel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const markColor = '#4572a7';
const excelTheme = {
  background: '#fff',
  arc: {
    fill: markColor
  },
  area: {
    fill: markColor
  },
  line: {
    stroke: markColor,
    strokeWidth: 2
  },
  path: {
    stroke: markColor
  },
  rect: {
    fill: markColor
  },
  shape: {
    stroke: markColor
  },
  symbol: {
    fill: markColor,
    strokeWidth: 1.5,
    size: 50
  },
  axis: {
    bandPosition: 0.5,
    grid: true,
    gridColor: '#000000',
    gridOpacity: 1,
    gridWidth: 0.5,
    labelPadding: 10,
    tickSize: 5,
    tickWidth: 0.5
  },
  axisBand: {
    grid: false,
    tickExtra: true
  },
  legend: {
    labelBaseline: 'middle',
    labelFontSize: 11,
    symbolSize: 50,
    symbolType: 'square'
  },
  range: {
    category: ['#4572a7', '#aa4643', '#8aa453', '#71598e', '#4598ae', '#d98445', '#94aace', '#d09393', '#b9cc98', '#a99cbc']
  }
};
var _default = excelTheme;
exports.default = _default;
},{}],"node_modules/vega-themes/build/src/theme-fivethirtyeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const markColor = '#30a2da';
const axisColor = '#cbcbcb';
const guideLabelColor = '#999';
const guideTitleColor = '#333';
const backgroundColor = '#f0f0f0';
const blackTitle = '#333';
const fiveThirtyEightTheme = {
  arc: {
    fill: markColor
  },
  area: {
    fill: markColor
  },
  axis: {
    domainColor: axisColor,
    grid: true,
    gridColor: axisColor,
    gridWidth: 1,
    labelColor: guideLabelColor,
    labelFontSize: 10,
    titleColor: guideTitleColor,
    tickColor: axisColor,
    tickSize: 10,
    titleFontSize: 14,
    titlePadding: 10,
    labelPadding: 4
  },
  axisBand: {
    grid: false
  },
  background: backgroundColor,
  group: {
    fill: backgroundColor
  },
  legend: {
    labelColor: blackTitle,
    labelFontSize: 11,
    padding: 1,
    symbolSize: 30,
    symbolType: 'square',
    titleColor: blackTitle,
    titleFontSize: 14,
    titlePadding: 10
  },
  line: {
    stroke: markColor,
    strokeWidth: 2
  },
  path: {
    stroke: markColor,
    strokeWidth: 0.5
  },
  rect: {
    fill: markColor
  },
  range: {
    category: ['#30a2da', '#fc4f30', '#e5ae38', '#6d904f', '#8b8b8b', '#b96db8', '#ff9e27', '#56cc60', '#52d2ca', '#52689e', '#545454', '#9fe4f8'],
    diverging: ['#cc0020', '#e77866', '#f6e7e1', '#d6e8ed', '#91bfd9', '#1d78b5'],
    heatmap: ['#d6e8ed', '#cee0e5', '#91bfd9', '#549cc6', '#1d78b5']
  },
  point: {
    filled: true,
    shape: 'circle'
  },
  shape: {
    stroke: markColor
  },
  style: {
    bar: {
      binSpacing: 2,
      fill: markColor,
      stroke: null
    }
  },
  title: {
    anchor: 'start',
    fontSize: 24,
    fontWeight: 600,
    offset: 20
  }
};
var _default = fiveThirtyEightTheme;
exports.default = _default;
},{}],"node_modules/vega-themes/build/src/theme-ggplot2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const markColor = '#000';
const ggplot2Theme = {
  group: {
    fill: '#e5e5e5'
  },
  arc: {
    fill: markColor
  },
  area: {
    fill: markColor
  },
  line: {
    stroke: markColor
  },
  path: {
    stroke: markColor
  },
  rect: {
    fill: markColor
  },
  shape: {
    stroke: markColor
  },
  symbol: {
    fill: markColor,
    size: 40
  },
  axis: {
    domain: false,
    grid: true,
    gridColor: '#FFFFFF',
    gridOpacity: 1,
    labelColor: '#7F7F7F',
    labelPadding: 4,
    tickColor: '#7F7F7F',
    tickSize: 5.67,
    titleFontSize: 16,
    titleFontWeight: 'normal'
  },
  legend: {
    labelBaseline: 'middle',
    labelFontSize: 11,
    symbolSize: 40
  },
  range: {
    category: ['#000000', '#7F7F7F', '#1A1A1A', '#999999', '#333333', '#B0B0B0', '#4D4D4D', '#C9C9C9', '#666666', '#DCDCDC']
  }
};
var _default = ggplot2Theme;
exports.default = _default;
},{}],"node_modules/vega-themes/build/src/theme-latimes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const headlineFontSize = 22;
const headlineFontWeight = 'normal';
const labelFont = 'Benton Gothic, sans-serif';
const labelFontSize = 11.5;
const labelFontWeight = 'normal';
const markColor = '#82c6df'; // const markHighlight = '#006d8f';
// const markDemocrat = '#5789b8';
// const markRepublican = '#d94f54';

const titleFont = 'Benton Gothic Bold, sans-serif';
const titleFontWeight = 'normal';
const titleFontSize = 13;
const colorSchemes = {
  'category-6': ['#ec8431', '#829eb1', '#c89d29', '#3580b1', '#adc839', '#ab7fb4'],
  'fire-7': ['#fbf2c7', '#f9e39c', '#f8d36e', '#f4bb6a', '#e68a4f', '#d15a40', '#ab4232'],
  'fireandice-6': ['#e68a4f', '#f4bb6a', '#f9e39c', '#dadfe2', '#a6b7c6', '#849eae'],
  'ice-7': ['#edefee', '#dadfe2', '#c4ccd2', '#a6b7c6', '#849eae', '#607785', '#47525d']
};
const latimesTheme = {
  background: '#ffffff',
  title: {
    anchor: 'start',
    color: '#000000',
    font: titleFont,
    fontSize: headlineFontSize,
    fontWeight: headlineFontWeight
  },
  arc: {
    fill: markColor
  },
  area: {
    fill: markColor
  },
  line: {
    stroke: markColor,
    strokeWidth: 2
  },
  path: {
    stroke: markColor
  },
  rect: {
    fill: markColor
  },
  shape: {
    stroke: markColor
  },
  symbol: {
    fill: markColor,
    size: 30
  },
  axis: {
    labelFont,
    labelFontSize,
    labelFontWeight,
    titleFont,
    titleFontSize,
    titleFontWeight
  },
  axisX: {
    labelAngle: 0,
    labelPadding: 4,
    tickSize: 3
  },
  axisY: {
    labelBaseline: 'middle',
    maxExtent: 45,
    minExtent: 45,
    tickSize: 2,
    titleAlign: 'left',
    titleAngle: 0,
    titleX: -45,
    titleY: -11
  },
  legend: {
    labelFont,
    labelFontSize,
    symbolType: 'square',
    titleFont,
    titleFontSize,
    titleFontWeight
  },
  range: {
    category: colorSchemes['category-6'],
    diverging: colorSchemes['fireandice-6'],
    heatmap: colorSchemes['fire-7'],
    ordinal: colorSchemes['fire-7'],
    ramp: colorSchemes['fire-7']
  }
};
var _default = latimesTheme;
exports.default = _default;
},{}],"node_modules/vega-themes/build/src/theme-quartz.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const markColor = '#ab5787';
const axisColor = '#979797';
const quartzTheme = {
  background: '#f9f9f9',
  arc: {
    fill: markColor
  },
  area: {
    fill: markColor
  },
  line: {
    stroke: markColor
  },
  path: {
    stroke: markColor
  },
  rect: {
    fill: markColor
  },
  shape: {
    stroke: markColor
  },
  symbol: {
    fill: markColor,
    size: 30
  },
  axis: {
    domainColor: axisColor,
    domainWidth: 0.5,
    gridWidth: 0.2,
    labelColor: axisColor,
    tickColor: axisColor,
    tickWidth: 0.2,
    titleColor: axisColor
  },
  axisBand: {
    grid: false
  },
  axisX: {
    grid: true,
    tickSize: 10
  },
  axisY: {
    domain: false,
    grid: true,
    tickSize: 0
  },
  legend: {
    labelFontSize: 11,
    padding: 1,
    symbolSize: 30,
    symbolType: 'square'
  },
  range: {
    category: ['#ab5787', '#51b2e5', '#703c5c', '#168dd9', '#d190b6', '#00609f', '#d365ba', '#154866', '#666666', '#c4c4c4']
  }
};
var _default = quartzTheme;
exports.default = _default;
},{}],"node_modules/vega-themes/build/src/theme-vox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const markColor = '#3e5c69';
const voxTheme = {
  background: '#fff',
  arc: {
    fill: markColor
  },
  area: {
    fill: markColor
  },
  line: {
    stroke: markColor
  },
  path: {
    stroke: markColor
  },
  rect: {
    fill: markColor
  },
  shape: {
    stroke: markColor
  },
  symbol: {
    fill: markColor
  },
  axis: {
    domainWidth: 0.5,
    grid: true,
    labelPadding: 2,
    tickSize: 5,
    tickWidth: 0.5,
    titleFontWeight: 'normal'
  },
  axisBand: {
    grid: false
  },
  axisX: {
    gridWidth: 0.2
  },
  axisY: {
    gridDash: [3],
    gridWidth: 0.4
  },
  legend: {
    labelFontSize: 11,
    padding: 1,
    symbolType: 'square'
  },
  range: {
    category: ['#3e5c69', '#6793a6', '#182429', '#0570b0', '#3690c0', '#74a9cf', '#a6bddb', '#e2ddf2']
  }
};
var _default = voxTheme;
exports.default = _default;
},{}],"node_modules/vega-themes/build/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dark", {
  enumerable: true,
  get: function () {
    return _themeDark.default;
  }
});
Object.defineProperty(exports, "excel", {
  enumerable: true,
  get: function () {
    return _themeExcel.default;
  }
});
Object.defineProperty(exports, "fivethirtyeight", {
  enumerable: true,
  get: function () {
    return _themeFivethirtyeight.default;
  }
});
Object.defineProperty(exports, "ggplot2", {
  enumerable: true,
  get: function () {
    return _themeGgplot.default;
  }
});
Object.defineProperty(exports, "latimes", {
  enumerable: true,
  get: function () {
    return _themeLatimes.default;
  }
});
Object.defineProperty(exports, "quartz", {
  enumerable: true,
  get: function () {
    return _themeQuartz.default;
  }
});
Object.defineProperty(exports, "vox", {
  enumerable: true,
  get: function () {
    return _themeVox.default;
  }
});
exports.version = void 0;

var _package = _interopRequireDefault(require("../package.json"));

var _themeDark = _interopRequireDefault(require("./theme-dark"));

var _themeExcel = _interopRequireDefault(require("./theme-excel"));

var _themeFivethirtyeight = _interopRequireDefault(require("./theme-fivethirtyeight"));

var _themeGgplot = _interopRequireDefault(require("./theme-ggplot2"));

var _themeLatimes = _interopRequireDefault(require("./theme-latimes"));

var _themeQuartz = _interopRequireDefault(require("./theme-quartz"));

var _themeVox = _interopRequireDefault(require("./theme-vox"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const version = _package.default.version;
exports.version = version;
},{"../package.json":"node_modules/vega-themes/build/package.json","./theme-dark":"node_modules/vega-themes/build/src/theme-dark.js","./theme-excel":"node_modules/vega-themes/build/src/theme-excel.js","./theme-fivethirtyeight":"node_modules/vega-themes/build/src/theme-fivethirtyeight.js","./theme-ggplot2":"node_modules/vega-themes/build/src/theme-ggplot2.js","./theme-latimes":"node_modules/vega-themes/build/src/theme-latimes.js","./theme-quartz":"node_modules/vega-themes/build/src/theme-quartz.js","./theme-vox":"node_modules/vega-themes/build/src/theme-vox.js"}],"node_modules/vega-tooltip/build/package.json":[function(require,module,exports) {
module.exports = {
    "name": "vega-tooltip",
    "version": "0.19.1",
    "description": "A tooltip plugin for Vega-Lite and Vega visualizations.",
    "main": "build/vega-tooltip.js",
    "module": "build/src/index.js",
    "unpkg": "build/vega-tooltip.min.js",
    "jsdelivr": "build/vega-tooltip.min.js",
    "typings": "build/src/index.d.ts",
    "repository": {
        "type": "git",
        "url": "https://github.com/vega/vega-tooltip.git"
    },
    "keywords": [
        "vega-lite",
        "vega",
        "tooltip"
    ],
    "author": {
        "name": "UW Interactive Data Lab",
        "url": "https://idl.cs.washington.edu"
    },
    "collaborators": [
        "Dominik Moritz",
        "Sira Horradarn",
        "Zening Qu",
        "Kanit Wongsuphasawat",
        "Yuri Astrakhan",
        "Jeffrey Heer"
    ],
    "license": "BSD-3-Clause",
    "bugs": {
        "url": "https://github.com/vega/vega-tooltip/issues"
    },
    "homepage": "https://github.com/vega/vega-tooltip#readme",
    "scripts": {
        "prepare": "beemo create-config --silent",
        "tsc:src": "tsc -b tsconfig.src.json",
        "build": "yarn tsc:src && rollup -c",
        "clean": "rm -rf build examples/data && rm -f src/style.ts",
        "copy:data": "rsync -r node_modules/vega-datasets/data/* examples/data",
        "copy:build": "rsync -r build/* examples/build",
        "deploy:gh": "yarn build && yarn copy:build && gh-pages -d examples && yarn clean",
        "prettierbase": "beemo prettier 'examples/*.{html,scss,css}'",
        "eslintbase": "beemo eslint '{src,test,types}/**/*.ts'",
        "format": "yarn eslintbase --fix && yarn prettierbase --write",
        "lint": "yarn eslintbase && yarn prettierbase --check",
        "postbuild": "terser build/vega-tooltip.js -c -m -o build/vega-tooltip.min.js",
        "prebuild": "mkdir -p build && yarn copy:data && ./build-style.sh",
        "prepublishOnly": "yarn clean && yarn build",
        "preversion": "yarn lint",
        "start": "yarn build && concurrently --kill-others -n Server,Typescript,Rollup 'browser-sync start -s -f build examples --serveStatic examples' 'yarn tsc:src -w' 'rollup -c -w'",
        "pretest": "./build-style.sh",
        "test": "jest"
    },
    "devDependencies": {
        "@types/jest": "^24.0.18",
        "browser-sync": "^2.26.7",
        "concurrently": "^4.1.2",
        "gh-pages": "^2.1.1",
        "jest": "^24.9.0",
        "node-sass": "^4.12.0",
        "path": "^0.12.7",
        "rollup": "^1.20.3",
        "rollup-plugin-commonjs": "^10.1.0",
        "rollup-plugin-json": "^4.0.0",
        "rollup-plugin-node-resolve": "^5.2.0",
        "terser": "^4.2.1",
        "ts-jest": "^24.0.2",
        "typescript": "^3.6.2",
        "vega-datasets": "^1.25.0",
        "vega-lite-dev-config": "^0.2.5",
        "vega-typings": "^0.8.1"
    },
    "dependencies": {
        "vega-util": "^1.11.1"
    },
    "beemo": {
        "module": "vega-lite-dev-config",
        "drivers": [
            "prettier",
            "eslint"
        ]
    },
    "jest": {
        "testURL": "http://localhost/",
        "transform": {
            "^.+\\.tsx?$": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",
        "moduleFileExtensions": [
            "ts",
            "tsx",
            "js",
            "jsx",
            "json",
            "node"
        ],
        "testPathIgnorePatterns": [
            "node_modules",
            "<rootDir>/build",
            "src"
        ]
    }
}
;
},{}],"node_modules/vega-tooltip/build/src/style.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// generated with build-style.sh
var _default = `#vg-tooltip-element {
  visibility: hidden;
  padding: 8px;
  position: fixed;
  z-index: 1000;
  font-family: sans-serif;
  font-size: 11px;
  border-radius: 3px;
  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
  /* The default theme is the light theme. */
  background-color: rgba(255, 255, 255, 0.95);
  border: 1px solid #d9d9d9;
  color: black; }
  #vg-tooltip-element.visible {
    visibility: visible; }
  #vg-tooltip-element h2 {
    margin-top: 0;
    margin-bottom: 10px;
    font-size: 13px; }
  #vg-tooltip-element table {
    border-spacing: 0; }
    #vg-tooltip-element table tr {
      border: none; }
      #vg-tooltip-element table tr td {
        overflow: hidden;
        text-overflow: ellipsis;
        padding-top: 2px;
        padding-bottom: 2px; }
        #vg-tooltip-element table tr td.key {
          color: #808080;
          max-width: 150px;
          text-align: right;
          padding-right: 4px; }
        #vg-tooltip-element table tr td.value {
          display: block;
          max-width: 300px;
          max-height: 7em;
          text-align: left; }
  #vg-tooltip-element.dark-theme {
    background-color: rgba(32, 32, 32, 0.9);
    border: 1px solid #f5f5f5;
    color: white; }
    #vg-tooltip-element.dark-theme td.key {
      color: #bfbfbf; }
`;
exports.default = _default;
},{}],"node_modules/vega-tooltip/build/src/defaults.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.escapeHTML = escapeHTML;
exports.createDefaultStyle = createDefaultStyle;
exports.DEFAULT_OPTIONS = void 0;

var _style = _interopRequireDefault(require("./style"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const EL_ID = 'vg-tooltip-element';
const DEFAULT_OPTIONS = {
  /**
   * X offset.
   */
  offsetX: 10,

  /**
   * Y offset.
   */
  offsetY: 10,

  /**
   * ID of the tooltip element.
   */
  id: EL_ID,

  /**
   * ID of the tooltip CSS style.
   */
  styleId: 'vega-tooltip-style',

  /**
   * The name of the theme. You can use the CSS class called [THEME]-theme to style the tooltips.
   *
   * There are two predefined themes: "light" (default) and "dark".
   */
  theme: 'light',

  /**
   * Do not use the default styles provided by Vega Tooltip. If you enable this option, you need to use your own styles. It is not necessary to disable the default style when using a custom theme.
   */
  disableDefaultStyle: false,

  /**
   * HTML sanitizer function that removes dangerous HTML to prevent XSS.
   *
   * This should be a function from string to string. You may replace it with a formatter such as a markdown formatter.
   */
  sanitize: escapeHTML,

  /**
   * The maximum recursion depth when printing objects in the tooltip.
   */
  maxDepth: 2
};
/**
 * Escape special HTML characters.
 *
 * @param value A value to convert to string and HTML-escape.
 */

exports.DEFAULT_OPTIONS = DEFAULT_OPTIONS;

function escapeHTML(value) {
  return String(value).replace(/&/g, '&amp;').replace(/</g, '&lt;');
}

function createDefaultStyle(id) {
  // Just in case this id comes from a user, ensure these is no security issues
  if (!/^[A-Za-z]+[-:.\w]*$/.test(id)) {
    throw new Error('Invalid HTML ID');
  }

  return _style.default.toString().replace(EL_ID, id);
}
},{"./style":"node_modules/vega-tooltip/build/src/style.js"}],"node_modules/vega-tooltip/build/src/formatValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatValue = formatValue;
exports.replacer = replacer;
exports.stringify = stringify;

var _vegaUtil = require("vega-util");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

/**
 * Format the value to be shown in the toolip.
 *
 * @param value The value to show in the tooltip.
 * @param valueToHtml Function to convert a single cell value to an HTML string
 */
function formatValue(value, valueToHtml, maxDepth) {
  if ((0, _vegaUtil.isArray)(value)) {
    return `[${value.map(v => valueToHtml((0, _vegaUtil.isString)(v) ? v : stringify(v, maxDepth))).join(', ')}]`;
  }

  if ((0, _vegaUtil.isObject)(value)) {
    let content = '';

    const _a = value,
          {
      title
    } = _a,
          rest = __rest(_a, ["title"]);

    if (title) {
      content += `<h2>${valueToHtml(title)}</h2>`;
    }

    const keys = Object.keys(rest);

    if (keys.length > 0) {
      content += '<table>';

      for (const key of keys) {
        let val = rest[key]; // ignore undefined properties

        if (val === undefined) {
          continue;
        }

        if ((0, _vegaUtil.isObject)(val)) {
          val = stringify(val, maxDepth);
        }

        content += `<tr><td class="key">${valueToHtml(key)}:</td><td class="value">${valueToHtml(val)}</td></tr>`;
      }

      content += `</table>`;
    }

    return content || '{}'; // show empty object if there are no properties
  }

  return valueToHtml(value);
}

function replacer(maxDepth) {
  const stack = [];
  return function (key, value) {
    if (typeof value !== 'object' || value === null) {
      return value;
    }

    const pos = stack.indexOf(this) + 1;
    stack.length = pos;

    if (stack.length > maxDepth) {
      return '[Object]';
    }

    if (stack.indexOf(value) >= 0) {
      return '[Circular]';
    }

    stack.push(value);
    return value;
  };
}
/**
 * Stringify any JS object to valid JSON
 */


function stringify(obj, maxDepth) {
  return JSON.stringify(obj, replacer(maxDepth));
}
},{"vega-util":"node_modules/vega-util/index.js"}],"node_modules/vega-tooltip/build/src/position.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculatePosition = calculatePosition;

/**
 * Position the tooltip
 *
 * @param event The mouse event.
 * @param tooltipBox
 * @param offsetX Horizontal offset.
 * @param offsetY Vertical offset.
 */
function calculatePosition(event, tooltipBox, offsetX, offsetY) {
  let x = event.clientX + offsetX;

  if (x + tooltipBox.width > window.innerWidth) {
    x = +event.clientX - offsetX - tooltipBox.width;
  }

  let y = event.clientY + offsetY;

  if (y + tooltipBox.height > window.innerHeight) {
    y = +event.clientY - offsetY - tooltipBox.height;
  }

  return {
    x,
    y
  };
}
},{}],"node_modules/vega-tooltip/build/src/Handler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Handler = void 0;

var _defaults = require("./defaults");

var _formatValue = require("./formatValue");

var _position = require("./position");

/**
 * The tooltip handler class.
 */
class Handler {
  /**
   * Create the tooltip handler and initialize the element and style.
   *
   * @param options Tooltip Options
   */
  constructor(options) {
    this.options = Object.assign(Object.assign({}, _defaults.DEFAULT_OPTIONS), options);
    const elementId = this.options.id; // bind this to call

    this.call = this.tooltipHandler.bind(this); // prepend a default stylesheet for tooltips to the head

    if (!this.options.disableDefaultStyle && !document.getElementById(this.options.styleId)) {
      const style = document.createElement('style');
      style.setAttribute('id', this.options.styleId);
      style.innerHTML = (0, _defaults.createDefaultStyle)(elementId);
      const head = document.head;

      if (head.childNodes.length > 0) {
        head.insertBefore(style, head.childNodes[0]);
      } else {
        head.appendChild(style);
      }
    } // append a div element that we use as a tooltip unless it already exists
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion


    this.el = document.getElementById(elementId);

    if (!this.el) {
      this.el = document.createElement('div');
      this.el.setAttribute('id', elementId);
      this.el.classList.add('vg-tooltip');
      document.body.appendChild(this.el);
    }
  }
  /**
   * The tooltip handler function.
   */


  tooltipHandler(handler, event, item, value) {
    // console.log(handler, event, item, value);
    // hide tooltip for null, undefined, or empty string values
    if (value == null || value === '') {
      this.el.classList.remove('visible', `${this.options.theme}-theme`);
      return;
    } // set the tooltip content


    this.el.innerHTML = (0, _formatValue.formatValue)(value, this.options.sanitize, this.options.maxDepth); // make the tooltip visible

    this.el.classList.add('visible', `${this.options.theme}-theme`);
    const {
      x,
      y
    } = (0, _position.calculatePosition)(event, this.el.getBoundingClientRect(), this.options.offsetX, this.options.offsetY);
    this.el.setAttribute('style', `top: ${y}px; left: ${x}px`);
  }

}

exports.Handler = Handler;
},{"./defaults":"node_modules/vega-tooltip/build/src/defaults.js","./formatValue":"node_modules/vega-tooltip/build/src/formatValue.js","./position":"node_modules/vega-tooltip/build/src/position.js"}],"node_modules/vega-tooltip/build/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  version: true
};
exports.default = _default;
exports.version = void 0;

var _package = _interopRequireDefault(require("../package.json"));

var _Handler = require("./Handler");

Object.keys(_Handler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Handler[key];
    }
  });
});

var _defaults = require("./defaults");

Object.keys(_defaults).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _defaults[key];
    }
  });
});

var _formatValue = require("./formatValue");

Object.keys(_formatValue).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _formatValue[key];
    }
  });
});

var _position = require("./position");

Object.keys(_position).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _position[key];
    }
  });
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const version = _package.default.version;
exports.version = version;

/**
 * Create a tooltip handler and register it with the provided view.
 *
 * @param view The Vega view.
 * @param opt Tooltip options.
 */
function _default(view, opt) {
  const handler = new _Handler.Handler(opt);
  view.tooltip(handler.call).run();
  return handler;
}
},{"../package.json":"node_modules/vega-tooltip/build/package.json","./Handler":"node_modules/vega-tooltip/build/src/Handler.js","./defaults":"node_modules/vega-tooltip/build/src/defaults.js","./formatValue":"node_modules/vega-tooltip/build/src/formatValue.js","./position":"node_modules/vega-tooltip/build/src/position.js"}],"node_modules/vega-embed/build/src/post.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Open editor url in a new window, and pass a message.
 */
function _default(window, url, data) {
  const editor = window.open(url);
  const wait = 10000;
  const step = 250; // eslint-disable-next-line no-bitwise

  let count = ~~(wait / step);

  function listen(evt) {
    if (evt.source === editor) {
      count = 0;
      window.removeEventListener('message', listen, false);
    }
  }

  window.addEventListener('message', listen, false); // send message
  // periodically resend until ack received or timeout

  function send() {
    if (count <= 0) {
      return;
    }

    editor.postMessage(data, '*');
    setTimeout(send, step);
    count -= 1;
  }

  setTimeout(send, step);
}
},{}],"node_modules/vega-embed/build/src/style.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// generated with build-style.sh
var _default = `.vega-embed {
  position: relative;
  display: inline-block;
  padding-right: 38px; }
  .vega-embed details:not([open]) > :not(summary) {
    display: none !important; }
  .vega-embed summary {
    list-style: none;
    position: absolute;
    top: 0;
    right: 0;
    padding: 6px;
    z-index: 1000;
    background: white;
    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);
    color: #1b1e23;
    border: 1px solid #aaa;
    border-radius: 999px;
    opacity: 0.2;
    transition: opacity 0.4s ease-in;
    outline: none;
    cursor: pointer;
    line-height: 0px; }
    .vega-embed summary::-webkit-details-marker {
      display: none; }
    .vega-embed summary:active {
      box-shadow: #aaa 0px 0px 0px 1px inset; }
    .vega-embed summary svg {
      width: 14px;
      height: 14px; }
  .vega-embed details[open] summary {
    opacity: 0.7; }
  .vega-embed:hover summary,
  .vega-embed:focus summary {
    opacity: 1 !important;
    transition: opacity 0.2s ease; }
  .vega-embed .vega-actions {
    position: absolute;
    top: 35px;
    right: -9px;
    display: flex;
    flex-direction: column;
    padding-bottom: 8px;
    padding-top: 8px;
    border-radius: 4px;
    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.2);
    border: 1px solid #d9d9d9;
    background: white;
    animation-duration: 0.15s;
    animation-name: scale-in;
    animation-timing-function: cubic-bezier(0.2, 0, 0.13, 1.5); }
    .vega-embed .vega-actions a {
      padding: 8px 16px;
      font-family: sans-serif;
      font-size: 14px;
      font-weight: 600;
      white-space: nowrap;
      color: #434a56;
      text-decoration: none; }
      .vega-embed .vega-actions a:hover {
        background-color: #f7f7f9;
        color: black; }
    .vega-embed .vega-actions::before, .vega-embed .vega-actions::after {
      content: "";
      display: inline-block;
      position: absolute; }
    .vega-embed .vega-actions::before {
      left: auto;
      right: 14px;
      top: -16px;
      border: 8px solid #0000;
      border-bottom-color: #d9d9d9; }
    .vega-embed .vega-actions::after {
      left: auto;
      right: 15px;
      top: -14px;
      border: 7px solid #0000;
      border-bottom-color: #fff; }

.vega-embed-wrapper {
  max-width: 100%;
  overflow: scroll;
  padding-right: 14px; }

@keyframes scale-in {
  from {
    opacity: 0;
    transform: scale(0.6); }
  to {
    opacity: 1;
    transform: scale(1); } }
`;
exports.default = _default;
},{}],"node_modules/vega-embed/build/src/embed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.guessMode = guessMode;
exports.default = embed;
exports.vegaLite = exports.vega = void 0;

var _tslib = require("tslib");

var d3 = _interopRequireWildcard(require("d3-selection"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _jsonStringifyPrettyCompact = _interopRequireDefault(require("json-stringify-pretty-compact"));

var _semver = require("semver");

var vegaImport = _interopRequireWildcard(require("vega"));

var vegaLiteImport = _interopRequireWildcard(require("vega-lite"));

var _vegaSchemaUrlParser = _interopRequireDefault(require("vega-schema-url-parser"));

var themes = _interopRequireWildcard(require("vega-themes"));

var _vegaTooltip = require("vega-tooltip");

var _post = _interopRequireDefault(require("./post"));

var _style = _interopRequireDefault(require("./style"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const vega = vegaImport;
exports.vega = vega;
let vegaLite = vegaLiteImport; // For backwards compatibility with Vega-Lite before v4.

exports.vegaLite = vegaLite;
const w = window;

if (vegaLite === undefined && w['vl'] && w['vl'].compile) {
  exports.vegaLite = vegaLite = w['vl'];
}

const I18N = {
  CLICK_TO_VIEW_ACTIONS: 'Click to view actions',
  COMPILED_ACTION: 'View Compiled Vega',
  EDITOR_ACTION: 'Open in Vega Editor',
  PNG_ACTION: 'Save as PNG',
  SOURCE_ACTION: 'View Source',
  SVG_ACTION: 'Save as SVG'
};
const NAMES = {
  vega: 'Vega',
  'vega-lite': 'Vega-Lite'
};
const VERSION = {
  vega: vega.version,
  'vega-lite': vegaLite ? vegaLite.version : 'not available'
};
const PREPROCESSOR = {
  vega: vgSpec => vgSpec,
  'vega-lite': (vlSpec, config) => vegaLite.compile(vlSpec, {
    config: config
  }).spec
};
const SVG_CIRCLES = `
<svg viewBox="0 0 16 16" fill="currentColor" stroke="none" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
  <circle r="2" cy="8" cx="2"></circle>
  <circle r="2" cy="8" cx="8"></circle>
  <circle r="2" cy="8" cx="14"></circle>
</svg>`;

function isTooltipHandler(h) {
  return typeof h === 'function';
}

function viewSource(source, sourceHeader, sourceFooter, mode) {
  const header = `<html><head>${sourceHeader}</head><body><pre><code class="json">`;
  const footer = `</code></pre>${sourceFooter}</body></html>`;
  const win = window.open('');
  win.document.write(header + source + footer);
  win.document.title = `${NAMES[mode]} JSON Source`;
}
/**
 * Try to guess the type of spec.
 *
 * @param spec Vega or Vega-Lite spec.
 */


function guessMode(spec, providedMode) {
  // Decide mode
  if (spec.$schema) {
    const parsed = (0, _vegaSchemaUrlParser.default)(spec.$schema);

    if (providedMode && providedMode !== parsed.library) {
      console.warn(`The given visualization spec is written in ${NAMES[parsed.library]}, but mode argument sets ${NAMES[providedMode] || providedMode}.`);
    }

    const mode = parsed.library;

    if (!(0, _semver.satisfies)(VERSION[mode], `^${parsed.version.slice(1)}`)) {
      console.warn(`The input spec uses ${NAMES[mode]} ${parsed.version}, but the current version of ${NAMES[mode]} is v${VERSION[mode]}.`);
    }

    return mode;
  } // try to guess from the provided spec


  if ('mark' in spec || 'encoding' in spec || 'layer' in spec || 'hconcat' in spec || 'vconcat' in spec || 'facet' in spec || 'repeat' in spec) {
    return 'vega-lite';
  }

  if ('marks' in spec || 'signals' in spec || 'scales' in spec || 'axes' in spec) {
    return 'vega';
  }

  return providedMode || 'vega';
}

function isLoader(o) {
  return !!(o && 'load' in o);
}
/**
 * Embed a Vega visualization component in a web page. This function returns a promise.
 *
 * @param el        DOM element in which to place component (DOM node or CSS selector).
 * @param spec      String : A URL string from which to load the Vega specification.
 *                  Object : The Vega/Vega-Lite specification as a parsed JSON object.
 * @param opt       A JavaScript object containing options for embedding.
 */


function embed(el, spec, opt = {}) {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
    const loader = isLoader(opt.loader) ? opt.loader : vega.loader(opt.loader); // Load the visualization specification.

    if (vega.isString(spec)) {
      const data = yield loader.load(spec);
      return embed(el, JSON.parse(data), opt);
    }

    opt = (0, _deepmerge.default)(opt, spec.usermeta && spec.usermeta['embedOptions'] || {}); // Load Vega theme/configuration.

    let config = opt.config || {};

    if (vega.isString(config)) {
      const data = yield loader.load(config);
      return embed(el, spec, Object.assign(Object.assign({}, opt), {
        config: JSON.parse(data)
      }));
    }

    const actions = (0, vegaImport.isBoolean)(opt.actions) ? opt.actions : (0, _deepmerge.default)({
      export: {
        svg: true,
        png: true
      },
      source: true,
      compiled: true,
      editor: true
    }, opt.actions || {});
    const i18n = Object.assign(Object.assign({}, I18N), opt.i18n);
    const renderer = opt.renderer || 'canvas';
    const logLevel = opt.logLevel || vega.Warn;
    const downloadFileName = opt.downloadFileName || 'visualization';

    if (opt.defaultStyle !== false) {
      // Add a default stylesheet to the head of the document.
      const ID = 'vega-embed-style';

      if (!document.getElementById(ID)) {
        const style = document.createElement('style');
        style.id = ID;
        style.innerText = opt.defaultStyle === undefined || opt.defaultStyle === true ? (_style.default || '').toString() : opt.defaultStyle;
        document.head.appendChild(style);
      }
    }

    if (opt.theme) {
      config = (0, _deepmerge.default)(themes[opt.theme], config);
    }

    const mode = guessMode(spec, opt.mode);
    let vgSpec = PREPROCESSOR[mode](spec, config);

    if (mode === 'vega-lite') {
      if (vgSpec.$schema) {
        const parsed = (0, _vegaSchemaUrlParser.default)(vgSpec.$schema);

        if (!(0, _semver.satisfies)(VERSION.vega, `^${parsed.version.slice(1)}`)) {
          console.warn(`The compiled spec uses Vega ${parsed.version}, but current version is v${VERSION.vega}.`);
        }
      }
    } // ensure container div has class 'vega-embed'


    const div = d3.select(el) // d3.select supports elements and strings
    .classed('vega-embed', true).html(''); // clear container

    const patch = opt.patch;

    if (patch) {
      if (patch instanceof Function) {
        vgSpec = patch(vgSpec);
      } else if (vega.isString(patch)) {
        const patchString = yield loader.load(patch); // eslint-disable-next-line require-atomic-updates

        vgSpec = (0, _deepmerge.default)(vgSpec, JSON.parse(patchString));
      } else {
        vgSpec = (0, _deepmerge.default)(vgSpec, patch);
      }
    } // Do not apply the config to Vega when we have already applied it to Vega-Lite.
    // This call may throw an Error if parsing fails.


    const runtime = vega.parse(vgSpec, mode === 'vega-lite' ? {} : config);
    const view = new vega.View(runtime, {
      loader,
      logLevel,
      renderer
    });

    if (opt.tooltip !== false) {
      let handler;

      if (isTooltipHandler(opt.tooltip)) {
        handler = opt.tooltip;
      } else {
        // user provided boolean true or tooltip options
        handler = new _vegaTooltip.Handler(opt.tooltip === true ? {} : opt.tooltip).call;
      }

      view.tooltip(handler);
    }

    let {
      hover
    } = opt;

    if (hover === undefined) {
      hover = mode === 'vega';
    }

    if (hover) {
      const {
        hoverSet,
        updateSet
      } = typeof hover === 'boolean' ? {} : hover;
      view.hover(hoverSet, updateSet);
    }

    if (opt) {
      if (opt.width) {
        view.width(opt.width);
      }

      if (opt.height) {
        view.height(opt.height);
      }

      if (opt.padding) {
        view.padding(opt.padding);
      }
    }

    yield view.initialize(el).runAsync();

    if (actions !== false) {
      let wrapper = div;

      if (opt.defaultStyle !== false) {
        const details = div.append('details').attr('title', i18n.CLICK_TO_VIEW_ACTIONS);
        wrapper = details;
        const summary = details.insert('summary');
        summary.html(SVG_CIRCLES);
        const dn = details.node();
        document.addEventListener('click', evt => {
          if (!dn.contains(evt.target)) {
            dn.removeAttribute('open');
          }
        });
      }

      const ctrl = wrapper.insert('div').attr('class', 'vega-actions'); // add 'Export' action

      if (actions === true || actions.export !== false) {
        for (const ext of ['svg', 'png']) {
          if (actions === true || actions.export === true || actions.export[ext]) {
            const i18nExportAction = i18n[`${ext.toUpperCase()}_ACTION`];
            ctrl.append('a').text(i18nExportAction).attr('href', '#').attr('target', '_blank').attr('download', `${downloadFileName}.${ext}`) // eslint-disable-next-line func-names
            .on('mousedown', function () {
              view.toImageURL(ext, opt.scaleFactor).then(url => {
                this.href = url;
              }).catch(error => {
                throw error;
              });
              d3.event.preventDefault();
            });
          }
        }
      } // add 'View Source' action


      if (actions === true || actions.source !== false) {
        ctrl.append('a').text(i18n.SOURCE_ACTION).attr('href', '#').on('mousedown', () => {
          viewSource((0, _jsonStringifyPrettyCompact.default)(spec), opt.sourceHeader || '', opt.sourceFooter || '', mode);
          d3.event.preventDefault();
        });
      } // add 'View Compiled' action


      if (mode === 'vega-lite' && (actions === true || actions.compiled !== false)) {
        ctrl.append('a').text(i18n.COMPILED_ACTION).attr('href', '#').on('mousedown', () => {
          viewSource((0, _jsonStringifyPrettyCompact.default)(vgSpec), opt.sourceHeader || '', opt.sourceFooter || '', 'vega');
          d3.event.preventDefault();
        });
      } // add 'Open in Vega Editor' action


      if (actions === true || actions.editor !== false) {
        const editorUrl = opt.editorUrl || 'https://vega.github.io/editor/';
        ctrl.append('a').text(i18n.EDITOR_ACTION).attr('href', '#').on('mousedown', () => {
          (0, _post.default)(window, editorUrl, {
            config: config,
            mode,
            renderer,
            spec: (0, _jsonStringifyPrettyCompact.default)(spec)
          });
          d3.event.preventDefault();
        });
      }
    }

    return {
      view,
      spec,
      vgSpec
    };
  });
}
},{"tslib":"node_modules/tslib/tslib.es6.js","d3-selection":"node_modules/d3-selection/src/index.js","deepmerge":"node_modules/deepmerge/dist/cjs.js","json-stringify-pretty-compact":"node_modules/json-stringify-pretty-compact/index.js","semver":"node_modules/semver/semver.js","vega":"node_modules/vega/index.js","vega-lite":"node_modules/vega-lite/build/src/index.js","vega-schema-url-parser":"node_modules/vega-schema-url-parser/index.js","vega-themes":"node_modules/vega-themes/build/src/index.js","vega-tooltip":"node_modules/vega-tooltip/build/src/index.js","./post":"node_modules/vega-embed/build/src/post.js","./style":"node_modules/vega-embed/build/src/style.js"}],"typescript/Filter.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Filter =
/** @class */
function () {
  function Filter() {}

  Filter.filter = function (data, config) {
    console.log('Pre Filtering', data); // filter xs 

    data = this.filterX(data, config); // filter ys

    data = this.filterY(data, config); // remove x points without y points

    data.xData = data.xData.filter(function (layer) {
      return layer.group.length > 0;
    });
    this.setLifeCycles(data, config);
    console.log('Post Filtering', data);
    return data;
  }; // todo test this


  Filter.isInRange = function (p, range) {
    return range ? (range[0] ? p >= range[0] : true) && (range[1] ? p <= range[1] : true) : true;
  };

  Filter.filterX = function (data, config) {
    var _this = this;

    var yData = new Map();
    var xData = data.xData.filter(function (xLayer) {
      var contains = true; // todo initialise this before loop

      if (config.mustContain && config.mustContain.length) {
        contains = config.mustContain.every(function (query) {
          return xLayer.group.includes(query);
        });
      }

      if (!_this.isInRange(xLayer.group.length, config.filterGroupSize) || !_this.isInRange(xLayer.xValue, config.filterXValue) || xLayer.group.length == 0 || !contains || !config.filterCustomX(xLayer)) {
        xLayer.isHidden = true;
        return false;
      } else {
        xLayer.group.forEach(function (y) {
          var yVal = data.yData.get(y);
          yData.set(y, yVal);
        });
        return true;
      }
    });
    return {
      xData: xData,
      yData: yData
    };
  };

  Filter.filterY = function (data, config) {
    var _this = this;

    Array.from(data.yData).forEach(function (yMap) {
      var yVal = yMap[1];
      var activeLayers = yVal.layers ? yVal.layers.filter(function (l) {
        return !l.isHidden;
      }) : [];

      if ( // check if y value has an xValue lifetime in the allowed range
      !_this.isInRange(activeLayers[activeLayers.length - 1].xValue - activeLayers[0].xValue, config.filterXValueLifeTime) || // check if y value has an amount of non-hidden groups in the allowed range
      !_this.isInRange(activeLayers.length, config.filterGroupAmt) || yVal.isHidden || !config.filterCustomY(yVal)) {
        yVal.isHidden = true;
        yVal.layers.forEach(function (l) {
          l.group = l.group.filter(function (a) {
            return a != yVal.yID;
          });
          l.hiddenYs.push(yVal.yID);
        });
      }
    });
    return data;
  };

  Filter.setLifeCycles = function (data, config) {
    data.xData.forEach(function (xLayer, i) {
      if (!xLayer.isHidden) xLayer.index = i;
    });
    Array.from(data.yData).forEach(function (yMap) {
      var y = yMap[1];
      var activeLayers = y.layers ? y.layers.filter(function (l) {
        return !l.isHidden;
      }) : [];

      if (!y.isHidden) {
        // check where to add the y-point
        if (config.continuousStart) {
          data.xData[0].add.push(y.yID);
        } else {
          data.xData[activeLayers[0].index].add.push(y.yID);
        }

        if (config.continuousEnd) {
          data.xData[data.xData.length - 1].remove.push(y.yID);
        } else {
          data.xData[activeLayers[activeLayers.length - 1].index].remove.push(y.yID);
        }
      }
    });
  };

  return Filter;
}();

exports.Filter = Filter;
},{}],"typescript/Visitor.ts":[function(require,module,exports) {
"use strict";

var __spreadArrays = this && this.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Optimizer_1 = require("./Optimizer");

var Visitor =
/** @class */
function () {
  function Visitor() {}

  Visitor.visit = function (data, yEntryPoints) {
    var _this = this;

    var visitor = [];
    yEntryPoints = yEntryPoints ? yEntryPoints : new Map();
    var prevIndex = 0;
    return [data.xData.reduce(function (acc, x, i) {
      // todo remove this as it is redundant check if this x layer is hidden
      if (!x.isHidden) {
        // calculate the center
        var center_1 = _this.getCenter(x.group, visitor);

        if (i != 0) data.xData[prevIndex].remove.forEach(function (a) {
          return visitor = _this.remove(a, visitor);
        });
        x.add.forEach(function (y) {
          var yVal = data.yData.get(y);

          if (!yVal.isHidden) {
            var entryPoint = yEntryPoints.get(y);

            if (!entryPoint) {
              var entryPoint_1 = Optimizer_1.Optimizer.getRandomGene();
              yEntryPoints.set(y, entryPoint_1);
            }

            _this.add(y, center_1, entryPoint, visitor);
          }
        });
        x.switch = _this.group(x.group, visitor);
        x.state = __spreadArrays(visitor);
        prevIndex = i;
        acc.push(x);
      }

      return acc;
    }, []), yEntryPoints];
  };

  Visitor.add = function (a, center, gene, visitor) {
    // add the new object at the distance from the center indicated by the entryPoint
    var pos = 0;

    if (visitor.length) {
      if (gene > 0) {
        pos = Math.round((visitor.length - center) * gene);
      } else {
        pos = Math.round(center * gene);
      }
    }

    return visitor.splice(pos, 0, a);
  };

  Visitor.switchP = function (switchY, visitor) {
    // move the yObj to the group and shift all the others
    var temp = visitor.splice(switchY.prev, 1);
    visitor.splice.apply(visitor, __spreadArrays([switchY.target, 0], temp));
  };

  Visitor.remove = function (a, visitor) {
    // a contains the yObj
    return visitor.filter(function (p) {
      return p != a;
    });
  };

  Visitor.group = function (group, visitor) {
    var _this = this; // calculate the center


    var center = this.getCenter(group, visitor); // calculate the distance from the mass center

    var dists = this.getDistances(group, center, visitor); // array containing the switch operations

    var switches = []; // array describing the outer boundary of the already-adiacent group elements

    var edges = [center, center]; // looping strategies for backward and forward searching

    var strategies = new Map(); // first element is the descending edge, the second one the ascending

    strategies.set(1, {
      'init': 1,
      'comp': function comp(i) {
        return i < visitor.length;
      }
    });
    strategies.set(-1, {
      'init': 0,
      'comp': function comp(i) {
        return i >= 0;
      }
    }); // Check for every y that has to be grouped if it is adjacent, else switch

    dists.forEach(function (p) {
      var direction = -Math.sign(p.distance);

      if (direction != 0) {
        var strategy = strategies.get(direction);
        var index = visitor.indexOf(p.p);

        var _loop_1 = function _loop_1(i) {
          if (index >= edges[0] && index <= edges[1] || edges[1] === 0 && direction === 1 || edges[0] === visitor.length - 1 && direction === -1) {
            return "break";
          } else if (!dists.some(function (a) {
            return a.p === visitor[i];
          })) {
            // if the visited y is a non-grouped element, then switch it 
            // with the current element p
            var switchY = {
              target: i,
              prev: index
            };
            switches.push(switchY);

            _this.switchP(switchY, visitor);

            return "break";
          } else {
            // extend adjacent edges
            edges[strategy.init] += direction;
          }
        };

        for (var i = edges[strategy.init]; strategy.comp(i); i += direction) {
          var state_1 = _loop_1(i);

          if (state_1 === "break") break;
        }
      }
    });
    return switches;
  };

  Visitor.getCenter = function (group, visitor) {
    return Math.round(visitor.reduce(function (count, y, i) {
      return group.includes(y) ? count + i : count;
    }, 0) / group.length);
  };

  Visitor.getDistances = function (group, center, visitor) {
    return group.map(function (p) {
      var i = visitor.indexOf(p);
      var distance = center - i;
      return {
        p: p,
        distance: distance
      };
    }).sort(function (a, b) {
      return Math.abs(a.distance) - Math.abs(b.distance);
    });
  };

  return Visitor;
}();

exports.Visitor = Visitor;
},{"./Optimizer":"typescript/Optimizer.ts"}],"typescript/Optimizer.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Visitor_1 = require("./Visitor");

var Optimizer =
/** @class */
function () {
  function Optimizer() {}

  Optimizer.fit = function (data, config) {
    var best, population, newGenes;

    for (var i = 0; i < config.generationAmt; i++) {
      population = this.getGeneration(data, newGenes, config);

      if (!best || population[0].loss < best.loss) {
        best = population[0];
        console.log(best);
      }

      var parents = this.select(population, config);
      newGenes = this.mate(parents, config);
      newGenes = this.mutate(data, newGenes, config);
    }

    return {
      xData: best.x,
      yData: data.yData
    };
  };

  Optimizer.getGeneration = function (data, yEntryPoints, config) {
    var population = []; // Compute new generation

    for (var i = 0; i < config.populationSize; i++) {
      var entryPoints = yEntryPoints ? yEntryPoints[i] : undefined;
      var result = Visitor_1.Visitor.visit(data, entryPoints);
      var loss = this.getLoss(result, config);
      var child = {
        loss: loss,
        gene: result[1],
        x: result[0]
      };
      population.push(child);
    }

    return population.sort(function (a, b) {
      return a.loss - b.loss;
    });
  };

  Optimizer.select = function (population, config) {
    var parents = [];
    var length = population.length * config.selectionRate;

    for (var i = 0; i < length; i++) {
      var index = Math.floor(Math.pow(Math.random(), 8) * population.length);
      var parent = population[index];
      population.splice(index, 1);
      parents.push(parent);
    }

    return parents;
  };

  Optimizer.mate = function (parents, config) {
    var genes = [];

    var _loop_1 = function _loop_1(i) {
      var parent1 = void 0,
          parent2 = void 0,
          index = void 0;

      while (parent1 === parent2) {
        index = Math.floor(Math.pow(Math.random(), 5) * parents.length);
        parent1 = parents[index];
        index = Math.floor(Math.pow(Math.random(), 5) * parents.length);
        parent2 = parents[index];
      }

      var gene1 = Array.from(parent1.gene);
      var gene2 = Array.from(parent2.gene);
      var newGene = gene1.reduce(function (map, gene, i) {
        if (Math.random() < 0.5) {
          gene = gene2[i];
        }

        return map.set(gene[0], gene[1]);
      }, new Map());
      genes.push(newGene);
    };

    for (var i = 0; i < parents.length / config.selectionRate; i++) {
      _loop_1(i);
    }

    return genes;
  };

  Optimizer.mutate = function (data, genes, config) {
    var _this = this;

    genes.forEach(function (_, i) {
      data.xData.forEach(function (x) {
        if (!x.isHidden) {
          x.add.forEach(function (y) {
            if (Math.random() < config.mutationProbability) {
              var newY = _this.getRandomGene();

              genes[i].set(y, newY);
            }
          });
        }
      });
    });
    return genes;
  };

  Optimizer.getLoss = function (child, config) {
    var acc = 0;

    var _loop_2 = function _loop_2(i) {
      var center = child[0][i].state.length / 2; // Penalty for adding ys in the middle

      acc += child[0][i].add.reduce(function (a, s) {
        return a + Math.abs(child[1].get(s) - center);
      }, 0) * config.centeredAddLoss; // Penalty for removing ys in the middle

      acc += child[0][i].remove.reduce(function (a, s) {
        return a + Math.abs(child[1].get(s) - center);
      }, 0) * config.centeredRemoveLoss; // Penalty for the amount of switches

      acc += child[0][i].switch.reduce(function (a, s) {
        if (!child[0][i].add.includes(child[0][i].state[s.prev])) a++;
        return a;
      }, 0) * config.amtLoss; // Penalty for the size of the switches

      acc += child[0][i].switch.reduce(function (a, s) {
        if (!child[0][i].add.includes(child[0][i].state[s.prev])) a + Math.abs(s.target - s.prev);
        return a;
      }, 0) * config.lengthLoss;
    };

    for (var i = 0; i < child[0].length; i++) {
      _loop_2(i);
    }

    return acc;
  };

  Optimizer.getRandomGene = function () {
    return Math.pow(Math.random(), 1) * 2 - 1;
  };

  return Optimizer;
}();

exports.Optimizer = Optimizer;
},{"./Visitor":"typescript/Visitor.ts"}],"typescript/Types.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var XLayer =
/** @class */
function () {
  function XLayer(xValue, data) {
    this.xValue = xValue;
    this.data = data;
    this.isHidden = false;
    this.add = [];
    this.remove = [];
    this.group = [];
    this.state = [];
    this.hiddenYs = [];
  }

  return XLayer;
}();

exports.XLayer = XLayer;

var YLayer =
/** @class */
function () {
  function YLayer(yID, data) {
    this.yID = yID;
    this.data = data;
    this.isHidden = false;
    this.layers = [];
  }

  return YLayer;
}();

exports.YLayer = YLayer;

var RenderedPoint =
/** @class */
function () {
  function RenderedPoint(x, y, z, isGrouped, strokeWidth, xVal, xDescription) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.isGrouped = isGrouped;
    this.strokeWidth = strokeWidth;
    this.xVal = xVal;
    this.xDescription = xDescription;
  }

  return RenderedPoint;
}();

exports.RenderedPoint = RenderedPoint;
},{}],"typescript/DrawSpec.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Types_1 = require("./Types");

var DrawSpec =
/** @class */
function () {
  function DrawSpec() {}
  /**
   * After pasting a new Chart Spec do the following:
  * set the height, width
  * set all line and tick sizes
  * set the adaptive tick length
  */
  // todo normalize coordinates


  DrawSpec.draw = function (data, config) {
    var result = [];
    var maxYLen = data.xData.reduce(function (max, layer) {
      return Math.max(max, layer.state.length);
    }, 0);
    var xLen = data.xData.length;
    var scaling = config.xValueScaling;
    data.xData.forEach(function (xLayer, xIndex) {
      var offset = xLayer.state.length % 2 === 0 ? -0.5 : 0;
      xLayer.state.forEach(function (yID, yIndex) {
        var yLayer = data.yData.get(yID);
        console.log(yLayer, xLayer, yIndex, data.xData[yIndex], data.xData[yIndex].group.some(function (a) {
          return a === yID;
        }));
        var isGrouped = xLayer.group.some(function (a) {
          return a === yID;
        });
        var yDrawn = config.centered ? (xLayer.state.length - 1) / 2 - yIndex : yIndex;
        yDrawn += offset;
        var strokeWidth = config.strokeWidth(xLayer);
        var xVal = xLayer.xValue;
        var xDrawn = scaling * xVal + (1 - scaling) * xIndex;
        var xDescription = config.xDescription(xLayer);
        var point = new Types_1.RenderedPoint(xDrawn, yDrawn, yID, isGrouped, strokeWidth, xVal, xDescription);
        result.push(point);
      });
    }); // console.log(visitor)
    // console.log(result)
    // todo this is ugly and inefficient

    var points = new Map();
    result.forEach(function (r) {
      var arr = points.get(r.z) ? points.get(r.z) : [];
      arr.push({
        'x': r.x,
        'y': r.y,
        'bool': r.isGrouped,
        'strokeWidth': r.strokeWidth
      });
      points.set(r.z, arr);
    });
    result.map(function (r) {
      var point = points.get(r.z);
      r.pointsX = point.map(function (g) {
        return g.x;
      });
      r.pointsY = point.map(function (g) {
        return g.y;
      });
      r.pointsBool = point.map(function (g) {
        return g.bool;
      });
      r.pointsSize = point.map(function (g) {
        return g.strokeWidth;
      });
      return r;
    });
    return [result, maxYLen, xLen];
  };

  DrawSpec.getSpecNew = function (data, config) {
    return {};
  };

  DrawSpec.getSpecOld = function (data, config) {
    return {
      "config": {
        "view": {
          "width": 400,
          "height": 300,
          "strokeWidth": 0
        },
        "mark": {
          "tooltip": null
        },
        "axis": {
          "domainOpacity": 0,
          "grid": false,
          "labelOpacity": 0,
          "tickOpacity": 0,
          "title": null
        }
      },
      "layer": [{
        "mark": {
          "type": "line",
          "interpolate": "monotone",
          "size": config.lineSize,
          "strokeCap": "round"
        },
        "encoding": {
          "color": {
            "type": "nominal",
            "field": "z",
            "legend": null
          },
          "opacity": {
            "value": 0.2
          },
          "x": {
            "type": "quantitative",
            "field": "value"
          },
          "y": {
            "type": "quantitative",
            "field": "y"
          }
        },
        "transform": [{
          "calculate": "datum.x - 0.2",
          "as": "xPre"
        }, {
          "calculate": "datum.x + 0.2",
          "as": "xPost"
        }, {
          "fold": ["x", "xPre", "xPost"]
        }]
      }, {
        "mark": {
          "type": "tick",
          "size": config.yPadding * 1.1,
          "thickness": config.lineSize
        },
        "encoding": {
          "color": {
            "value": "black"
          },
          "opacity": {
            "condition": {
              "value": 0.2,
              "test": "datum.isGrouped"
            },
            "value": 0
          },
          "x": {
            "type": "quantitative",
            "field": "value"
          },
          "y": {
            "type": "quantitative",
            "field": "y"
          }
        },
        "transform": [{
          "calculate": "datum.x - 0.2",
          "as": "xPre"
        }, {
          "calculate": "datum.x + 0.2",
          "as": "xPost"
        }, {
          "fold": ["x", "xPre", "xPost"]
        }, {
          "filter": "floor(datum.value) == datum.value"
        }]
      }, {
        "mark": "point",
        "encoding": {
          "opacity": {
            "value": 0
          },
          "x": {
            "type": "quantitative",
            "field": "value"
          }
        },
        "selection": {
          "selector049": {
            "type": "single",
            "on": "mouseover",
            "empty": "none",
            "fields": ["x"],
            "nearest": true,
            "init": {
              "x": 0
            }
          }
        },
        "transform": [{
          "calculate": "datum.x - 0.2",
          "as": "xPre"
        }, {
          "calculate": "datum.x + 0.2",
          "as": "xPost"
        }, {
          "fold": ["x", "xPre", "xPost"]
        }, {
          "filter": "datum.isGrouped"
        }]
      }, {
        "mark": {
          "type": "line",
          "interpolate": "monotone",
          "size": config.lineSize,
          "strokeCap": "round",
          "opacity": 0.8
        },
        "encoding": {
          "color": {
            "type": "nominal",
            "field": "z",
            "legend": null
          },
          "order": {
            "type": "quantitative",
            "field": "value"
          },
          "x": {
            "type": "quantitative",
            "field": "value"
          },
          "y": {
            "type": "quantitative",
            "field": "pointY"
          }
        },
        "transform": [{
          "calculate": "datum.x - 0.2",
          "as": "xPre"
        }, {
          "calculate": "datum.x + 0.2",
          "as": "xPost"
        }, {
          "fold": ["x", "xPre", "xPost"]
        }, {
          "filter": {
            "selection": "selector049"
          }
        }, {
          "filter": "datum.isGrouped"
        }, {
          "flatten": ["pointsX", "pointsY", "pointsBool", "pointsSize"],
          "as": ["pointX", "pointY", "pointBool", "pointSize"]
        }, {
          "calculate": "datum.pointX - 0.2",
          "as": "pointXPre"
        }, {
          "calculate": "datum.pointX + 0.2",
          "as": "pointXPost"
        }, {
          "fold": ["pointX", "pointXPre", "pointXPost"]
        }]
      }, {
        "mark": {
          "type": "tick",
          "size": config.yPadding * 1.1,
          "thickness": config.lineSize
        },
        "encoding": {
          "color": {
            "value": "black"
          },
          "opacity": {
            "condition": {
              "value": 0.25,
              "test": "datum.pointBool"
            },
            "value": 0
          },
          "x": {
            "type": "quantitative",
            "field": "pointX"
          },
          "y": {
            "type": "quantitative",
            "field": "pointY"
          }
        },
        "transform": [{
          "calculate": "datum.x - 0.2",
          "as": "xPre"
        }, {
          "calculate": "datum.x + 0.2",
          "as": "xPost"
        }, {
          "fold": ["x", "xPre", "xPost"]
        }, {
          "filter": {
            "selection": "selector049"
          }
        }, {
          "filter": "datum.isGrouped"
        }, {
          "flatten": ["pointsX", "pointsY", "pointsBool"],
          "as": ["pointX", "pointY", "pointBool"]
        }]
      }, {
        "mark": {
          "type": "rule",
          "size": 3
        },
        "encoding": {
          "opacity": {
            "condition": {
              "value": 0.7,
              "selection": "selector049"
            },
            "value": 0
          },
          "x": {
            "type": "quantitative",
            "field": "value"
          }
        },
        "transform": [{
          "calculate": "datum.x - 0.2",
          "as": "xPre"
        }, {
          "calculate": "datum.x + 0.2",
          "as": "xPost"
        }, {
          "fold": ["x", "xPre", "xPost"]
        }, {
          "filter": "datum.isGrouped"
        }, {
          "filter": "floor(datum.value) == datum.value"
        }]
      }, {
        "mark": {
          "type": "text",
          "align": "left",
          "dx": 10,
          "dy": -260,
          "fontSize": 20
        },
        "encoding": {
          "text": {
            "type": "ordinal",
            "field": "xDescription"
          },
          "x": {
            "type": "quantitative",
            "field": "value"
          }
        },
        "transform": [{
          "calculate": "datum.x - 0.2",
          "as": "xPre"
        }, {
          "calculate": "datum.x + 0.2",
          "as": "xPost"
        }, {
          "fold": ["x", "xPre", "xPost"]
        }, {
          "filter": "datum.isGrouped"
        }, {
          "filter": {
            "selection": "selector049"
          }
        }, {
          "filter": "floor(datum.value) == datum.value"
        }]
      }, {
        "mark": "rect",
        "encoding": {
          "fill": {
            "value": "black"
          },
          "opacity": {
            "value": 0.7
          },
          "stroke": {
            "value": "white"
          },
          "x": {
            "type": "quantitative",
            "field": "value"
          },
          "x2": {
            "field": "x2"
          },
          "y": {
            "type": "quantitative",
            "field": "yLo"
          },
          "y2": {
            "field": "yHi"
          }
        },
        "transform": [{
          "calculate": "datum.x - 0.2",
          "as": "xPre"
        }, {
          "calculate": "datum.x + 0.2",
          "as": "xPost"
        }, {
          "fold": ["x", "xPre", "xPost"]
        }, {
          "calculate": "datum.x + 2.5",
          "as": "x2"
        }, {
          "calculate": "datum.y - 0.3",
          "as": "yLo"
        }, {
          "calculate": "datum.y + 0.3",
          "as": "yHi"
        }, {
          "filter": {
            "selection": "selector049"
          }
        }, {
          "filter": "datum.isGrouped"
        }, {
          "filter": "floor(datum.value) == datum.value"
        }]
      }, {
        "mark": {
          "type": "text",
          "align": "left",
          "dx": 10,
          "dy": 1,
          "limit": 115
        },
        "encoding": {
          "color": {
            "value": "white"
          },
          "href": {
            "type": "nominal",
            "field": "url"
          },
          "text": {
            "type": "nominal",
            "field": "z"
          },
          "x": {
            "type": "quantitative",
            "field": "value"
          },
          "y": {
            "type": "quantitative",
            "field": "y"
          }
        },
        "transform": [{
          "calculate": "datum.x - 0.2",
          "as": "xPre"
        }, {
          "calculate": "datum.x + 0.2",
          "as": "xPost"
        }, {
          "fold": ["x", "xPre", "xPost"]
        }, {
          "calculate": "((('https://www.google.ch/search?q=' + datum.xDescription) + ' ') + datum.z)",
          "as": "url"
        }, {
          "filter": {
            "selection": "selector049"
          }
        }, {
          "filter": "datum.isGrouped"
        }, {
          "filter": "floor(datum.value) == datum.value"
        }]
      }],
      "data": {
        "name": "data-31a3ca55662c252b94e9791f188d05fe"
      },
      "datasets": {
        "data-31a3ca55662c252b94e9791f188d05fe": data[0]
      },
      "height": config.yPadding * data[1],
      "width": config.xPadding * data[2],
      "$schema": "https://vega.github.io/schema/vega-lite/v3.4.0.json"
    };
  };

  return DrawSpec;
}();

exports.DrawSpec = DrawSpec;
},{"./Types":"typescript/Types.ts"}],"typescript/KnotDiagram.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Filter_1 = require("./Filter");

var Optimizer_1 = require("./Optimizer");

var DrawSpec_1 = require("./DrawSpec");

var KnotDiagram =
/** @class */
function () {
  function KnotDiagram(data, config) {
    this.data = data;
    this.config = config;
    this.checkDefaultConfig();
    this.processedData = Filter_1.Filter.filter(this.data, config);
    this.processedData = Optimizer_1.Optimizer.fit(this.processedData, config);
    this.renderedGrid = DrawSpec_1.DrawSpec.draw(this.processedData, config);
    console.log(this.renderedGrid);
    this.spec = DrawSpec_1.DrawSpec.getSpecOld(this.renderedGrid, config);
  }
  /**
   * If undefined, set default values for the config object
   */


  KnotDiagram.prototype.checkDefaultConfig = function () {
    if (!this.config.yPadding) this.config.yPadding = 40;
    if (!this.config.xPadding) this.config.xPadding = 60;
    if (!this.config.lineSize) this.config.lineSize = 12;
    if (!this.config.xValueScaling) this.config.xValueScaling = 0;
    if (!this.config.generationAmt) this.config.generationAmt = 100;
    if (!this.config.populationSize) this.config.populationSize = 80;
    if (!this.config.selectionRate) this.config.selectionRate = 0.125;
    if (!this.config.mutationProbability) this.config.mutationProbability = 0.05;
    if (this.config.continuousStart == null) this.config.continuousStart = true;
    if (this.config.continuousEnd == null) this.config.continuousEnd = true;
    if (this.config.centered == null) this.config.centered = true;
    if (this.config.strokeWidth == null) this.config.strokeWidth = function (d) {
      return null;
    };
    if (!this.config.mustContain) this.config.mustContain = [];
    if (!this.config.interactedWith) this.config.interactedWith = [[], 0];
    if (!this.config.filterXValue) this.config.filterXValue = [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER];
    if (!this.config.filterGroupSize) this.config.filterGroupSize = [0, Number.MAX_SAFE_INTEGER];
    if (!this.config.filterCustomX) this.config.filterCustomX = function (xLayer) {
      return true;
    };
    if (!this.config.filterXValueLifeTime) this.config.filterXValueLifeTime = [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER];
    if (!this.config.filterIndexLifeTime) this.config.filterIndexLifeTime = [0, Number.MAX_SAFE_INTEGER];
    if (!this.config.filterGroupAmt) this.config.filterGroupAmt = [0, Number.MAX_SAFE_INTEGER];
    if (!this.config.filterCustomY) this.config.filterCustomY = function (yLayer) {
      return true;
    };
    if (!this.config.amtLoss) this.config.amtLoss = 80;
    if (!this.config.lengthLoss) this.config.lengthLoss = 4;
    if (!this.config.centeredAddLoss) this.config.centeredAddLoss = 0;
    if (!this.config.centeredRemoveLoss) this.config.centeredRemoveLoss = 0;
  };

  return KnotDiagram;
}();

exports.KnotDiagram = KnotDiagram;
},{"./Filter":"typescript/Filter.ts","./Optimizer":"typescript/Optimizer.ts","./DrawSpec":"typescript/DrawSpec.ts"}],"typescript/DummyData.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var DummyData =
/** @class */
function () {
  function DummyData() {}

  DummyData.testData = function () {
    return [{
      'a': 'bf',
      'b': 'gf',
      'c': 'kf',
      'id': 0
    }, {
      'a': 'ff',
      'b': 'ef',
      'c': 'af',
      'd': 'zf',
      'id': 1
    }, {
      'a': 'ff',
      'b': 'gf',
      'id': 2
    }, {
      'a': 'ff',
      'b': 'ef',
      'c': 'cf',
      'd': 'pf',
      'id': 3
    }, {
      'a': 'zf',
      'b': 'lf',
      'c': 'bf',
      'id': 4
    }, {
      'a': 'gf',
      'b': 'ef',
      'c': 'af',
      'd': 'pf',
      'id': 5
    }, {
      'a': 'bf',
      'b': 'gf',
      'c': 'kf',
      'id': 6
    }, {
      'a': 'pf',
      'b': 'ff',
      'id': 7
    }, {
      'a': 'ff',
      'b': 'gf',
      'c': 'cf',
      'd': 'af',
      'id': 8
    }, {
      'a': 'ef',
      'b': 'gf',
      'c': 'zf',
      'id': 9
    }];
  };

  DummyData.dataFBlues = function () {
    return [{
      'id': 0,
      '0': 'F',
      '1': 'A',
      '2': 'C'
    }, {
      'id': 1,
      '0': 'Bb',
      '1': 'D',
      '2': 'F'
    }, {
      'id': 2,
      '0': 'F',
      '1': 'A',
      '2': 'C'
    }, {
      'id': 2,
      '0': 'C',
      '1': 'E',
      '2': 'G'
    }, {
      'id': 2,
      '0': 'Bb',
      '1': 'D',
      '2': 'F'
    }, {
      'id': 2,
      '0': 'F',
      '1': 'A',
      '2': 'C'
    }, {
      'id': 2,
      '0': 'C',
      '1': 'E',
      '2': 'G'
    }];
  };

  DummyData.dataGiIpTriads = function () {
    return [// a part
    {
      'id': 0,
      '0': 'F',
      '1': 'A',
      '2': 'C'
    }, {
      'id': 1,
      '0': 'G',
      '1': 'B',
      '2': 'D'
    }, {
      'id': 2,
      '0': 'G',
      '1': 'Bb',
      '2': 'D'
    }, {
      'id': 3,
      '0': 'Gb',
      '1': 'Bb',
      '2': 'Db'
    }, {
      'id': 4,
      '0': 'F',
      '1': 'A',
      '2': 'C'
    }, {
      'id': 5,
      '0': 'Gb',
      '1': 'Bb',
      '2': 'C'
    }, // b part
    {
      'id': 6,
      '0': 'Gb',
      '1': 'Bb',
      '2': 'Db'
    }, {
      'id': 7,
      '0': 'B',
      '1': 'Eb',
      '2': 'Gb'
    }, {
      'id': 8,
      '0': 'Gb',
      '1': 'A',
      '2': 'Db'
    }, {
      'id': 9,
      '0': 'D',
      '1': 'Gb',
      '2': 'A'
    }, {
      'id': 10,
      '0': 'G',
      '1': 'Bb',
      '2': 'D'
    }, {
      'id': 11,
      '0': 'Eb',
      '1': 'G',
      '2': 'Bb'
    }, {
      'id': 12,
      '0': 'A',
      '1': 'C',
      '2': 'E'
    }, {
      'id': 13,
      '0': 'D',
      '1': 'Gb',
      '2': 'A'
    }, {
      'id': 14,
      '0': 'G',
      '1': 'Bb',
      '2': 'D'
    }, {
      'id': 15,
      '0': 'C',
      '1': 'E',
      '2': 'G'
    }];
  };

  DummyData.bundesraete = function () {
    return [{
      "Name": "Jonas Furrer",
      "Kanton": "Zürich",
      "Partei": "freis.",
      "Amtsantritt": 1848,
      "Amtsende": 1861.0,
      "Geburtsjahr": 1805,
      "Todesjahr": 1861.0,
      "Lebensdauer": 56.0,
      "Amtsdauer": 13.0
    }, {
      "Name": "Ulrich Ochsenbein",
      "Kanton": "Bern",
      "Partei": "freis.",
      "Amtsantritt": 1848,
      "Amtsende": 1854.0,
      "Geburtsjahr": 1811,
      "Todesjahr": 1890.0,
      "Lebensdauer": 79.0,
      "Amtsdauer": 6.0
    }, {
      "Name": "Henri Druey",
      "Kanton": "Waadt",
      "Partei": "freis.",
      "Amtsantritt": 1848,
      "Amtsende": 1855.0,
      "Geburtsjahr": 1799,
      "Todesjahr": 1855.0,
      "Lebensdauer": 56.0,
      "Amtsdauer": 7.0
    }, {
      "Name": "Josef Munzinger",
      "Kanton": "Solothurn",
      "Partei": "freis.",
      "Amtsantritt": 1848,
      "Amtsende": 1855.0,
      "Geburtsjahr": 1791,
      "Todesjahr": 1855.0,
      "Lebensdauer": 64.0,
      "Amtsdauer": 7.0
    }, {
      "Name": "Stefano Franscini",
      "Kanton": "Tessin",
      "Partei": "freis.",
      "Amtsantritt": 1848,
      "Amtsende": 1857.0,
      "Geburtsjahr": 1796,
      "Todesjahr": 1857.0,
      "Lebensdauer": 61.0,
      "Amtsdauer": 9.0
    }, {
      "Name": "Friedrich Frey-Herosé",
      "Kanton": "Aargau",
      "Partei": "freis.",
      "Amtsantritt": 1848,
      "Amtsende": 1866.0,
      "Geburtsjahr": 1801,
      "Todesjahr": 1873.0,
      "Lebensdauer": 72.0,
      "Amtsdauer": 18.0
    }, {
      "Name": "Wilhelm Matthias Naeff",
      "Kanton": "St. Gallen",
      "Partei": "freis.",
      "Amtsantritt": 1848,
      "Amtsende": 1875.0,
      "Geburtsjahr": 1802,
      "Todesjahr": 1881.0,
      "Lebensdauer": 79.0,
      "Amtsdauer": 27.0
    }, {
      "Name": "Jakob Stämpfli",
      "Kanton": "Bern",
      "Partei": "freis.",
      "Amtsantritt": 1855,
      "Amtsende": 1863.0,
      "Geburtsjahr": 1820,
      "Todesjahr": 1879.0,
      "Lebensdauer": 59.0,
      "Amtsdauer": 8.0
    }, {
      "Name": "Constant Fornerod",
      "Kanton": "Waadt",
      "Partei": "freis.",
      "Amtsantritt": 1855,
      "Amtsende": 1867.0,
      "Geburtsjahr": 1819,
      "Todesjahr": 1899.0,
      "Lebensdauer": 80.0,
      "Amtsdauer": 12.0
    }, {
      "Name": "Josef Martin Knüsel",
      "Kanton": "Luzern",
      "Partei": "freis.",
      "Amtsantritt": 1855,
      "Amtsende": 1875.0,
      "Geburtsjahr": 1813,
      "Todesjahr": 1889.0,
      "Lebensdauer": 76.0,
      "Amtsdauer": 20.0
    }, {
      "Name": "Giovanni Battista Pioda",
      "Kanton": "Tessin",
      "Partei": "freis.",
      "Amtsantritt": 1857,
      "Amtsende": 1864.0,
      "Geburtsjahr": 1808,
      "Todesjahr": 1882.0,
      "Lebensdauer": 74.0,
      "Amtsdauer": 7.0
    }, {
      "Name": "Jakob Dubs",
      "Kanton": "Zürich",
      "Partei": "freis.",
      "Amtsantritt": 1861,
      "Amtsende": 1872.0,
      "Geburtsjahr": 1822,
      "Todesjahr": 1879.0,
      "Lebensdauer": 57.0,
      "Amtsdauer": 11.0
    }, {
      "Name": "Karl Schenk",
      "Kanton": "Bern",
      "Partei": "freis.",
      "Amtsantritt": 1864,
      "Amtsende": 1895.0,
      "Geburtsjahr": 1823,
      "Todesjahr": 1895.0,
      "Lebensdauer": 72.0,
      "Amtsdauer": 31.0
    }, {
      "Name": "Jean-Jacques Challet-Venel",
      "Kanton": "Genf",
      "Partei": "freis.",
      "Amtsantritt": 1864,
      "Amtsende": 1872.0,
      "Geburtsjahr": 1811,
      "Todesjahr": 1893.0,
      "Lebensdauer": 82.0,
      "Amtsdauer": 8.0
    }, {
      "Name": "Emil Welti",
      "Kanton": "Aargau",
      "Partei": "freis.",
      "Amtsantritt": 1867,
      "Amtsende": 1891.0,
      "Geburtsjahr": 1825,
      "Todesjahr": 1899.0,
      "Lebensdauer": 74.0,
      "Amtsdauer": 24.0
    }, {
      "Name": "Victor Ruffy",
      "Kanton": "Waadt",
      "Partei": "freis.",
      "Amtsantritt": 1867,
      "Amtsende": 1869.0,
      "Geburtsjahr": 1823,
      "Todesjahr": 1869.0,
      "Lebensdauer": 46.0,
      "Amtsdauer": 2.0
    }, {
      "Name": "Paul Cérésole",
      "Kanton": "Waadt",
      "Partei": "freis.",
      "Amtsantritt": 1870,
      "Amtsende": 1875.0,
      "Geburtsjahr": 1832,
      "Todesjahr": 1905.0,
      "Lebensdauer": 73.0,
      "Amtsdauer": 5.0
    }, {
      "Name": "Johann Jakob Scherer",
      "Kanton": "Zürich",
      "Partei": "freis.",
      "Amtsantritt": 1872,
      "Amtsende": 1878.0,
      "Geburtsjahr": 1825,
      "Todesjahr": 1878.0,
      "Lebensdauer": 53.0,
      "Amtsdauer": 6.0
    }, {
      "Name": "Eugène Borel",
      "Kanton": "Neuenburg",
      "Partei": "freis.",
      "Amtsantritt": 1873,
      "Amtsende": 1875.0,
      "Geburtsjahr": 1835,
      "Todesjahr": 1892.0,
      "Lebensdauer": 57.0,
      "Amtsdauer": 2.0
    }, {
      "Name": "Joachim Heer",
      "Kanton": "Glarus",
      "Partei": "freis.",
      "Amtsantritt": 1876,
      "Amtsende": 1878.0,
      "Geburtsjahr": 1825,
      "Todesjahr": 1879.0,
      "Lebensdauer": 54.0,
      "Amtsdauer": 2.0
    }, {
      "Name": "Fridolin Anderwert",
      "Kanton": "Thurgau",
      "Partei": "freis.",
      "Amtsantritt": 1876,
      "Amtsende": 1880.0,
      "Geburtsjahr": 1828,
      "Todesjahr": 1880.0,
      "Lebensdauer": 52.0,
      "Amtsdauer": 4.0
    }, {
      "Name": "Bernhard Hammer",
      "Kanton": "Solothurn",
      "Partei": "freis.",
      "Amtsantritt": 1876,
      "Amtsende": 1890.0,
      "Geburtsjahr": 1822,
      "Todesjahr": 1907.0,
      "Lebensdauer": 85.0,
      "Amtsdauer": 14.0
    }, {
      "Name": "Numa Droz",
      "Kanton": "Neuenburg",
      "Partei": "freis.",
      "Amtsantritt": 1876,
      "Amtsende": 1892.0,
      "Geburtsjahr": 1844,
      "Todesjahr": 1899.0,
      "Lebensdauer": 55.0,
      "Amtsdauer": 16.0
    }, {
      "Name": "Simeon Bavier",
      "Kanton": "Graubünden",
      "Partei": "freis.",
      "Amtsantritt": 1879,
      "Amtsende": 1883.0,
      "Geburtsjahr": 1825,
      "Todesjahr": 1896.0,
      "Lebensdauer": 71.0,
      "Amtsdauer": 4.0
    }, {
      "Name": "Wilhelm Hertenstein",
      "Kanton": "Zürich",
      "Partei": "freis.",
      "Amtsantritt": 1879,
      "Amtsende": 1888.0,
      "Geburtsjahr": 1825,
      "Todesjahr": 1888.0,
      "Lebensdauer": 63.0,
      "Amtsdauer": 9.0
    }, {
      "Name": "Louis Ruchonnet",
      "Kanton": "Waadt",
      "Partei": "freis.",
      "Amtsantritt": 1881,
      "Amtsende": 1893.0,
      "Geburtsjahr": 1834,
      "Todesjahr": 1893.0,
      "Lebensdauer": 59.0,
      "Amtsdauer": 12.0
    }, {
      "Name": "Adolf Deucher",
      "Kanton": "Thurgau",
      "Partei": "FDP",
      "Amtsantritt": 1883,
      "Amtsende": 1912.0,
      "Geburtsjahr": 1831,
      "Todesjahr": 1912.0,
      "Lebensdauer": 81.0,
      "Amtsdauer": 29.0
    }, {
      "Name": "Walter Hauser",
      "Kanton": "Zürich",
      "Partei": "FDP",
      "Amtsantritt": 1889,
      "Amtsende": 1902.0,
      "Geburtsjahr": 1837,
      "Todesjahr": 1902.0,
      "Lebensdauer": 65.0,
      "Amtsdauer": 13.0
    }, {
      "Name": "Emil Frey",
      "Kanton": "Basel-Landschaft",
      "Partei": "FDP",
      "Amtsantritt": 1891,
      "Amtsende": 1897.0,
      "Geburtsjahr": 1838,
      "Todesjahr": 1922.0,
      "Lebensdauer": 84.0,
      "Amtsdauer": 6.0
    }, {
      "Name": "Josef Zemp",
      "Kanton": "Luzern",
      "Partei": "kath.-kons.",
      "Amtsantritt": 1892,
      "Amtsende": 1908.0,
      "Geburtsjahr": 1834,
      "Todesjahr": 1908.0,
      "Lebensdauer": 74.0,
      "Amtsdauer": 16.0
    }, {
      "Name": "Adrien Lachenal",
      "Kanton": "Genf",
      "Partei": "FDP",
      "Amtsantritt": 1893,
      "Amtsende": 1899.0,
      "Geburtsjahr": 1849,
      "Todesjahr": 1918.0,
      "Lebensdauer": 69.0,
      "Amtsdauer": 6.0
    }, {
      "Name": "Eugène Ruffy",
      "Kanton": "Waadt",
      "Partei": "FDP",
      "Amtsantritt": 1894,
      "Amtsende": 1899.0,
      "Geburtsjahr": 1854,
      "Todesjahr": 1919.0,
      "Lebensdauer": 65.0,
      "Amtsdauer": 5.0
    }, {
      "Name": "Eduard Müller",
      "Kanton": "Bern",
      "Partei": "FDP",
      "Amtsantritt": 1895,
      "Amtsende": 1919.0,
      "Geburtsjahr": 1848,
      "Todesjahr": 1919.0,
      "Lebensdauer": 71.0,
      "Amtsdauer": 24.0
    }, {
      "Name": "Ernst Brenner",
      "Kanton": "Basel-Stadt",
      "Partei": "FDP",
      "Amtsantritt": 1897,
      "Amtsende": 1911.0,
      "Geburtsjahr": 1856,
      "Todesjahr": 1911.0,
      "Lebensdauer": 55.0,
      "Amtsdauer": 14.0
    }, {
      "Name": "Robert Comtesse",
      "Kanton": "Neuenburg",
      "Partei": "FDP",
      "Amtsantritt": 1900,
      "Amtsende": 1912.0,
      "Geburtsjahr": 1847,
      "Todesjahr": 1922.0,
      "Lebensdauer": 75.0,
      "Amtsdauer": 12.0
    }, {
      "Name": "Marc Ruchet",
      "Kanton": "Waadt",
      "Partei": "FDP",
      "Amtsantritt": 1900,
      "Amtsende": 1912.0,
      "Geburtsjahr": 1853,
      "Todesjahr": 1912.0,
      "Lebensdauer": 59.0,
      "Amtsdauer": 12.0
    }, {
      "Name": "Ludwig Forrer",
      "Kanton": "Zürich",
      "Partei": "FDP",
      "Amtsantritt": 1903,
      "Amtsende": 1917.0,
      "Geburtsjahr": 1845,
      "Todesjahr": 1921.0,
      "Lebensdauer": 76.0,
      "Amtsdauer": 14.0
    }, {
      "Name": "Josef Anton Schobinger",
      "Kanton": "Luzern",
      "Partei": "kath.-kons.",
      "Amtsantritt": 1908,
      "Amtsende": 1911.0,
      "Geburtsjahr": 1849,
      "Todesjahr": 1911.0,
      "Lebensdauer": 62.0,
      "Amtsdauer": 3.0
    }, {
      "Name": "Arthur Hoffmann",
      "Kanton": "St. Gallen",
      "Partei": "FDP",
      "Amtsantritt": 1911,
      "Amtsende": 1917.0,
      "Geburtsjahr": 1857,
      "Todesjahr": 1927.0,
      "Lebensdauer": 70.0,
      "Amtsdauer": 6.0
    }, {
      "Name": "Giuseppe Motta",
      "Kanton": "Tessin",
      "Partei": "SKVP",
      "Amtsantritt": 1912,
      "Amtsende": 1940.0,
      "Geburtsjahr": 1871,
      "Todesjahr": 1940.0,
      "Lebensdauer": 69.0,
      "Amtsdauer": 28.0
    }, {
      "Name": "Louis Perrier",
      "Kanton": "Neuenburg",
      "Partei": "FDP",
      "Amtsantritt": 1912,
      "Amtsende": 1913.0,
      "Geburtsjahr": 1849,
      "Todesjahr": 1913.0,
      "Lebensdauer": 64.0,
      "Amtsdauer": 1.0
    }, {
      "Name": "Camille Decoppet",
      "Kanton": "Waadt",
      "Partei": "FDP",
      "Amtsantritt": 1912,
      "Amtsende": 1919.0,
      "Geburtsjahr": 1862,
      "Todesjahr": 1925.0,
      "Lebensdauer": 63.0,
      "Amtsdauer": 7.0
    }, {
      "Name": "Edmund Schulthess",
      "Kanton": "Aargau",
      "Partei": "FDP",
      "Amtsantritt": 1912,
      "Amtsende": 1935.0,
      "Geburtsjahr": 1868,
      "Todesjahr": 1944.0,
      "Lebensdauer": 76.0,
      "Amtsdauer": 23.0
    }, {
      "Name": "Felix Calonder",
      "Kanton": "Graubünden",
      "Partei": "FDP",
      "Amtsantritt": 1913,
      "Amtsende": 1920.0,
      "Geburtsjahr": 1863,
      "Todesjahr": 1952.0,
      "Lebensdauer": 89.0,
      "Amtsdauer": 7.0
    }, {
      "Name": "Gustave Ador",
      "Kanton": "Genf",
      "Partei": "LP",
      "Amtsantritt": 1917,
      "Amtsende": 1919.0,
      "Geburtsjahr": 1845,
      "Todesjahr": 1928.0,
      "Lebensdauer": 83.0,
      "Amtsdauer": 2.0
    }, {
      "Name": "Robert Haab",
      "Kanton": "Zürich",
      "Partei": "FDP",
      "Amtsantritt": 1918,
      "Amtsende": 1929.0,
      "Geburtsjahr": 1865,
      "Todesjahr": 1939.0,
      "Lebensdauer": 74.0,
      "Amtsdauer": 11.0
    }, {
      "Name": "Karl Scheurer",
      "Kanton": "Bern",
      "Partei": "FDP",
      "Amtsantritt": 1920,
      "Amtsende": 1929.0,
      "Geburtsjahr": 1872,
      "Todesjahr": 1929.0,
      "Lebensdauer": 57.0,
      "Amtsdauer": 9.0
    }, {
      "Name": "Ernest Chuard",
      "Kanton": "Waadt",
      "Partei": "FDP",
      "Amtsantritt": 1920,
      "Amtsende": 1928.0,
      "Geburtsjahr": 1857,
      "Todesjahr": 1942.0,
      "Lebensdauer": 85.0,
      "Amtsdauer": 8.0
    }, {
      "Name": "Jean-Marie Musy",
      "Kanton": "Freiburg",
      "Partei": "SKVP",
      "Amtsantritt": 1920,
      "Amtsende": 1934.0,
      "Geburtsjahr": 1876,
      "Todesjahr": 1952.0,
      "Lebensdauer": 76.0,
      "Amtsdauer": 14.0
    }, {
      "Name": "Heinrich Häberlin",
      "Kanton": "Thurgau",
      "Partei": "FDP",
      "Amtsantritt": 1920,
      "Amtsende": 1934.0,
      "Geburtsjahr": 1868,
      "Todesjahr": 1947.0,
      "Lebensdauer": 79.0,
      "Amtsdauer": 14.0
    }, {
      "Name": "Marcel Pilet-Golaz",
      "Kanton": "Waadt",
      "Partei": "FDP",
      "Amtsantritt": 1929,
      "Amtsende": 1944.0,
      "Geburtsjahr": 1889,
      "Todesjahr": 1958.0,
      "Lebensdauer": 69.0,
      "Amtsdauer": 15.0
    }, {
      "Name": "Rudolf Minger",
      "Kanton": "Bern",
      "Partei": "BGB",
      "Amtsantritt": 1930,
      "Amtsende": 1940.0,
      "Geburtsjahr": 1881,
      "Todesjahr": 1955.0,
      "Lebensdauer": 74.0,
      "Amtsdauer": 10.0
    }, {
      "Name": "Albert Meyer",
      "Kanton": "Zürich",
      "Partei": "FDP",
      "Amtsantritt": 1930,
      "Amtsende": 1938.0,
      "Geburtsjahr": 1870,
      "Todesjahr": 1953.0,
      "Lebensdauer": 83.0,
      "Amtsdauer": 8.0
    }, {
      "Name": "Johannes Baumann",
      "Kanton": "Appenzell Ausserrhoden",
      "Partei": "FDP",
      "Amtsantritt": 1934,
      "Amtsende": 1940.0,
      "Geburtsjahr": 1874,
      "Todesjahr": 1953.0,
      "Lebensdauer": 79.0,
      "Amtsdauer": 6.0
    }, {
      "Name": "Philipp Etter",
      "Kanton": "Zug",
      "Partei": "SKVP",
      "Amtsantritt": 1934,
      "Amtsende": 1959.0,
      "Geburtsjahr": 1891,
      "Todesjahr": 1977.0,
      "Lebensdauer": 86.0,
      "Amtsdauer": 25.0
    }, {
      "Name": "Hermann Obrecht",
      "Kanton": "Solothurn",
      "Partei": "FDP",
      "Amtsantritt": 1935,
      "Amtsende": 1940.0,
      "Geburtsjahr": 1882,
      "Todesjahr": 1940.0,
      "Lebensdauer": 58.0,
      "Amtsdauer": 5.0
    }, {
      "Name": "Ernst Wetter",
      "Kanton": "Zürich",
      "Partei": "FDP",
      "Amtsantritt": 1939,
      "Amtsende": 1943.0,
      "Geburtsjahr": 1877,
      "Todesjahr": 1963.0,
      "Lebensdauer": 86.0,
      "Amtsdauer": 4.0
    }, {
      "Name": "Enrico Celio",
      "Kanton": "Tessin",
      "Partei": "SKVP",
      "Amtsantritt": 1940,
      "Amtsende": 1950.0,
      "Geburtsjahr": 1889,
      "Todesjahr": 1980.0,
      "Lebensdauer": 91.0,
      "Amtsdauer": 10.0
    }, {
      "Name": "Walther Stampfli",
      "Kanton": "Solothurn",
      "Partei": "FDP",
      "Amtsantritt": 1940,
      "Amtsende": 1947.0,
      "Geburtsjahr": 1884,
      "Todesjahr": 1965.0,
      "Lebensdauer": 81.0,
      "Amtsdauer": 7.0
    }, {
      "Name": "Eduard von Steiger",
      "Kanton": "Bern",
      "Partei": "BGB",
      "Amtsantritt": 1941,
      "Amtsende": 1951.0,
      "Geburtsjahr": 1881,
      "Todesjahr": 1962.0,
      "Lebensdauer": 81.0,
      "Amtsdauer": 10.0
    }, {
      "Name": "Karl Kobelt",
      "Kanton": "St. Gallen",
      "Partei": "FDP",
      "Amtsantritt": 1941,
      "Amtsende": 1954.0,
      "Geburtsjahr": 1891,
      "Todesjahr": 1968.0,
      "Lebensdauer": 77.0,
      "Amtsdauer": 13.0
    }, {
      "Name": "Ernst Nobs",
      "Kanton": "Zürich",
      "Partei": "SP",
      "Amtsantritt": 1944,
      "Amtsende": 1951.0,
      "Geburtsjahr": 1886,
      "Todesjahr": 1957.0,
      "Lebensdauer": 71.0,
      "Amtsdauer": 7.0
    }, {
      "Name": "Max Petitpierre",
      "Kanton": "Neuenburg",
      "Partei": "FDP",
      "Amtsantritt": 1945,
      "Amtsende": 1961.0,
      "Geburtsjahr": 1899,
      "Todesjahr": 1994.0,
      "Lebensdauer": 95.0,
      "Amtsdauer": 16.0
    }, {
      "Name": "Rodolphe Rubattel",
      "Kanton": "Waadt",
      "Partei": "FDP",
      "Amtsantritt": 1948,
      "Amtsende": 1954.0,
      "Geburtsjahr": 1896,
      "Todesjahr": 1961.0,
      "Lebensdauer": 65.0,
      "Amtsdauer": 6.0
    }, {
      "Name": "Josef Escher",
      "Kanton": "Wallis",
      "Partei": "SKVP",
      "Amtsantritt": 1950,
      "Amtsende": 1954.0,
      "Geburtsjahr": 1885,
      "Todesjahr": 1954.0,
      "Lebensdauer": 69.0,
      "Amtsdauer": 4.0
    }, {
      "Name": "Markus Feldmann",
      "Kanton": "Bern",
      "Partei": "BGB",
      "Amtsantritt": 1952,
      "Amtsende": 1958.0,
      "Geburtsjahr": 1897,
      "Todesjahr": 1958.0,
      "Lebensdauer": 61.0,
      "Amtsdauer": 6.0
    }, {
      "Name": "Max Weber",
      "Kanton": "Zürich",
      "Partei": "SP",
      "Amtsantritt": 1952,
      "Amtsende": 1954.0,
      "Geburtsjahr": 1897,
      "Todesjahr": 1974.0,
      "Lebensdauer": 77.0,
      "Amtsdauer": 2.0
    }, {
      "Name": "Hans Streuli",
      "Kanton": "Zürich",
      "Partei": "FDP",
      "Amtsantritt": 1954,
      "Amtsende": 1959.0,
      "Geburtsjahr": 1892,
      "Todesjahr": 1970.0,
      "Lebensdauer": 78.0,
      "Amtsdauer": 5.0
    }, {
      "Name": "Thomas Holenstein",
      "Kanton": "St. Gallen",
      "Partei": "KCVP",
      "Amtsantritt": 1955,
      "Amtsende": 1959.0,
      "Geburtsjahr": 1896,
      "Todesjahr": 1962.0,
      "Lebensdauer": 66.0,
      "Amtsdauer": 4.0
    }, {
      "Name": "Paul Chaudet",
      "Kanton": "Waadt",
      "Partei": "FDP",
      "Amtsantritt": 1955,
      "Amtsende": 1966.0,
      "Geburtsjahr": 1904,
      "Todesjahr": 1977.0,
      "Lebensdauer": 73.0,
      "Amtsdauer": 11.0
    }, {
      "Name": "Giuseppe Lepori",
      "Kanton": "Tessin",
      "Partei": "KCVP",
      "Amtsantritt": 1955,
      "Amtsende": 1959.0,
      "Geburtsjahr": 1902,
      "Todesjahr": 1968.0,
      "Lebensdauer": 66.0,
      "Amtsdauer": 4.0
    }, {
      "Name": "Friedrich Traugott Wahlen",
      "Kanton": "Bern",
      "Partei": "BGB",
      "Amtsantritt": 1959,
      "Amtsende": 1965.0,
      "Geburtsjahr": 1899,
      "Todesjahr": 1985.0,
      "Lebensdauer": 86.0,
      "Amtsdauer": 6.0
    }, {
      "Name": "Jean Bourgknecht",
      "Kanton": "Freiburg",
      "Partei": "KCVP",
      "Amtsantritt": 1960,
      "Amtsende": 1962.0,
      "Geburtsjahr": 1902,
      "Todesjahr": 1964.0,
      "Lebensdauer": 62.0,
      "Amtsdauer": 2.0
    }, {
      "Name": "Willy Spühler",
      "Kanton": "Zürich",
      "Partei": "SP",
      "Amtsantritt": 1960,
      "Amtsende": 1970.0,
      "Geburtsjahr": 1902,
      "Todesjahr": 1990.0,
      "Lebensdauer": 88.0,
      "Amtsdauer": 10.0
    }, {
      "Name": "Ludwig von Moos",
      "Kanton": "Obwalden",
      "Partei": "CVP",
      "Amtsantritt": 1960,
      "Amtsende": 1971.0,
      "Geburtsjahr": 1910,
      "Todesjahr": 1990.0,
      "Lebensdauer": 80.0,
      "Amtsdauer": 11.0
    }, {
      "Name": "Hans-Peter Tschudi",
      "Kanton": "Basel-Stadt",
      "Partei": "SP",
      "Amtsantritt": 1960,
      "Amtsende": 1973.0,
      "Geburtsjahr": 1913,
      "Todesjahr": 2002.0,
      "Lebensdauer": 89.0,
      "Amtsdauer": 13.0
    }, {
      "Name": "Hans Schaffner",
      "Kanton": "Aargau",
      "Partei": "FDP",
      "Amtsantritt": 1961,
      "Amtsende": 1969.0,
      "Geburtsjahr": 1908,
      "Todesjahr": 2004.0,
      "Lebensdauer": 96.0,
      "Amtsdauer": 8.0
    }, {
      "Name": "Roger Bonvin",
      "Kanton": "Wallis",
      "Partei": "CVP",
      "Amtsantritt": 1962,
      "Amtsende": 1973.0,
      "Geburtsjahr": 1907,
      "Todesjahr": 1982.0,
      "Lebensdauer": 75.0,
      "Amtsdauer": 11.0
    }, {
      "Name": "Rudolf Gnägi",
      "Kanton": "Bern",
      "Partei": "SVP",
      "Amtsantritt": 1966,
      "Amtsende": 1979.0,
      "Geburtsjahr": 1917,
      "Todesjahr": 1985.0,
      "Lebensdauer": 68.0,
      "Amtsdauer": 13.0
    }, {
      "Name": "Nello Celio",
      "Kanton": "Tessin",
      "Partei": "FDP",
      "Amtsantritt": 1967,
      "Amtsende": 1973.0,
      "Geburtsjahr": 1914,
      "Todesjahr": 1995.0,
      "Lebensdauer": 81.0,
      "Amtsdauer": 6.0
    }, {
      "Name": "Ernst Brugger",
      "Kanton": "Zürich",
      "Partei": "FDP",
      "Amtsantritt": 1970,
      "Amtsende": 1978.0,
      "Geburtsjahr": 1914,
      "Todesjahr": 1998.0,
      "Lebensdauer": 84.0,
      "Amtsdauer": 8.0
    }, {
      "Name": "Pierre Graber",
      "Kanton": "Neuenburg",
      "Partei": "SP",
      "Amtsantritt": 1970,
      "Amtsende": 1978.0,
      "Geburtsjahr": 1908,
      "Todesjahr": 2003.0,
      "Lebensdauer": 95.0,
      "Amtsdauer": 8.0
    }, {
      "Name": "Kurt Furgler",
      "Kanton": "St. Gallen",
      "Partei": "CVP",
      "Amtsantritt": 1972,
      "Amtsende": 1986.0,
      "Geburtsjahr": 1924,
      "Todesjahr": 2008.0,
      "Lebensdauer": 84.0,
      "Amtsdauer": 14.0
    }, {
      "Name": "Willi Ritschard",
      "Kanton": "Solothurn",
      "Partei": "SP",
      "Amtsantritt": 1974,
      "Amtsende": 1983.0,
      "Geburtsjahr": 1918,
      "Todesjahr": 1983.0,
      "Lebensdauer": 65.0,
      "Amtsdauer": 9.0
    }, {
      "Name": "Hans Hürlimann",
      "Kanton": "Zug",
      "Partei": "CVP",
      "Amtsantritt": 1974,
      "Amtsende": 1982.0,
      "Geburtsjahr": 1918,
      "Todesjahr": 1994.0,
      "Lebensdauer": 76.0,
      "Amtsdauer": 8.0
    }, {
      "Name": "Georges-André Chevallaz",
      "Kanton": "Waadt",
      "Partei": "FDP",
      "Amtsantritt": 1974,
      "Amtsende": 1983.0,
      "Geburtsjahr": 1915,
      "Todesjahr": 2002.0,
      "Lebensdauer": 87.0,
      "Amtsdauer": 9.0
    }, {
      "Name": "Fritz Honegger",
      "Kanton": "Zürich",
      "Partei": "FDP",
      "Amtsantritt": 1978,
      "Amtsende": 1982.0,
      "Geburtsjahr": 1917,
      "Todesjahr": 1999.0,
      "Lebensdauer": 82.0,
      "Amtsdauer": 4.0
    }, {
      "Name": "Pierre Aubert",
      "Kanton": "Neuenburg",
      "Partei": "SP",
      "Amtsantritt": 1978,
      "Amtsende": 1987.0,
      "Geburtsjahr": 1927,
      "Todesjahr": 2016.0,
      "Lebensdauer": 89.0,
      "Amtsdauer": 9.0
    }, {
      "Name": "Leon Schlumpf",
      "Kanton": "Graubünden",
      "Partei": "SVP",
      "Amtsantritt": 1980,
      "Amtsende": 1987.0,
      "Geburtsjahr": 1925,
      "Todesjahr": 2012.0,
      "Lebensdauer": 87.0,
      "Amtsdauer": 7.0
    }, {
      "Name": "Alphons Egli",
      "Kanton": "Luzern",
      "Partei": "CVP",
      "Amtsantritt": 1983,
      "Amtsende": 1986.0,
      "Geburtsjahr": 1924,
      "Todesjahr": 2016.0,
      "Lebensdauer": 92.0,
      "Amtsdauer": 3.0
    }, {
      "Name": "Rudolf Friedrich",
      "Kanton": "Zürich",
      "Partei": "FDP",
      "Amtsantritt": 1983,
      "Amtsende": 1984.0,
      "Geburtsjahr": 1923,
      "Todesjahr": 2013.0,
      "Lebensdauer": 90.0,
      "Amtsdauer": 1.0
    }, {
      "Name": "Otto Stich",
      "Kanton": "Solothurn",
      "Partei": "SP",
      "Amtsantritt": 1984,
      "Amtsende": 1995.0,
      "Geburtsjahr": 1927,
      "Todesjahr": 2012.0,
      "Lebensdauer": 85.0,
      "Amtsdauer": 11.0
    }, {
      "Name": "Jean-Pascal Delamuraz",
      "Kanton": "Waadt",
      "Partei": "FDP",
      "Amtsantritt": 1984,
      "Amtsende": 1998.0,
      "Geburtsjahr": 1936,
      "Todesjahr": 1998.0,
      "Lebensdauer": 62.0,
      "Amtsdauer": 14.0
    }, {
      "Name": "Elisabeth Kopp",
      "Kanton": "Zürich",
      "Partei": "FDP",
      "Amtsantritt": 1984,
      "Amtsende": 1989.0,
      "Geburtsjahr": 1936,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 5.0
    }, {
      "Name": "Arnold Koller",
      "Kanton": "Appenzell Innerrhoden",
      "Partei": "CVP",
      "Amtsantritt": 1987,
      "Amtsende": 1999.0,
      "Geburtsjahr": 1933,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 12.0
    }, {
      "Name": "Flavio Cotti",
      "Kanton": "Tessin",
      "Partei": "CVP",
      "Amtsantritt": 1987,
      "Amtsende": 1999.0,
      "Geburtsjahr": 1939,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 12.0
    }, {
      "Name": "René Felber",
      "Kanton": "Neuenburg",
      "Partei": "SP",
      "Amtsantritt": 1988,
      "Amtsende": 1993.0,
      "Geburtsjahr": 1933,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 5.0
    }, {
      "Name": "Adolf Ogi",
      "Kanton": "Bern",
      "Partei": "SVP",
      "Amtsantritt": 1988,
      "Amtsende": 2000.0,
      "Geburtsjahr": 1942,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 12.0
    }, {
      "Name": "Kaspar Villiger",
      "Kanton": "Luzern",
      "Partei": "FDP",
      "Amtsantritt": 1989,
      "Amtsende": 2003.0,
      "Geburtsjahr": 1941,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 14.0
    }, {
      "Name": "Ruth Dreifuss",
      "Kanton": "Genf",
      "Partei": "SP",
      "Amtsantritt": 1993,
      "Amtsende": 2002.0,
      "Geburtsjahr": 1940,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 9.0
    }, {
      "Name": "Moritz Leuenberger",
      "Kanton": "Zürich",
      "Partei": "SP",
      "Amtsantritt": 1995,
      "Amtsende": 2010.0,
      "Geburtsjahr": 1946,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 15.0
    }, {
      "Name": "Pascal Couchepin",
      "Kanton": "Wallis",
      "Partei": "FDP",
      "Amtsantritt": 1998,
      "Amtsende": 2009.0,
      "Geburtsjahr": 1942,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 11.0
    }, {
      "Name": "Ruth Metzler-Arnold",
      "Kanton": "Appenzell Innerrhoden",
      "Partei": "CVP",
      "Amtsantritt": 1999,
      "Amtsende": 2003.0,
      "Geburtsjahr": 1964,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 4.0
    }, {
      "Name": "Joseph Deiss",
      "Kanton": "Freiburg",
      "Partei": "CVP",
      "Amtsantritt": 1999,
      "Amtsende": 2006.0,
      "Geburtsjahr": 1946,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 7.0
    }, {
      "Name": "Samuel Schmid",
      "Kanton": "Bern",
      "Partei": "BDP",
      "Amtsantritt": 2001,
      "Amtsende": 2008.0,
      "Geburtsjahr": 1947,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 7.0
    }, {
      "Name": "Micheline Calmy-Rey",
      "Kanton": "Genf",
      "Partei": "SP",
      "Amtsantritt": 2003,
      "Amtsende": 2011.0,
      "Geburtsjahr": 1945,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 8.0
    }, {
      "Name": "Christoph Blocher",
      "Kanton": "Zürich",
      "Partei": "SVP",
      "Amtsantritt": 2004,
      "Amtsende": 2007.0,
      "Geburtsjahr": 1940,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 3.0
    }, {
      "Name": "Hans-Rudolf Merz",
      "Kanton": "Appenzell Ausserrhoden",
      "Partei": "FDP",
      "Amtsantritt": 2004,
      "Amtsende": 2010.0,
      "Geburtsjahr": 1942,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 6.0
    }, {
      "Name": "Doris Leuthard",
      "Kanton": "Aargau",
      "Partei": "CVP",
      "Amtsantritt": 2006,
      "Amtsende": 2018.0,
      "Geburtsjahr": 1963,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 12.0
    }, {
      "Name": "Eveline Widmer-Schlumpf",
      "Kanton": "Graubünden",
      "Partei": "BDP",
      "Amtsantritt": 2008,
      "Amtsende": 2015.0,
      "Geburtsjahr": 1956,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 7.0
    }, {
      "Name": "Ueli Maurer",
      "Kanton": "Zürich",
      "Partei": "SVP",
      "Amtsantritt": 2009,
      "Amtsende": null,
      "Geburtsjahr": 1950,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": null
    }, {
      "Name": "Didier Burkhalter",
      "Kanton": "Neuenburg",
      "Partei": "FDP",
      "Amtsantritt": 2009,
      "Amtsende": 2017.0,
      "Geburtsjahr": 1960,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 8.0
    }, {
      "Name": "Simonetta Sommaruga",
      "Kanton": "Bern",
      "Partei": "SP",
      "Amtsantritt": 2010,
      "Amtsende": null,
      "Geburtsjahr": 1960,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": null
    }, {
      "Name": "Johann Schneider-Ammann",
      "Kanton": "Bern",
      "Partei": "FDP",
      "Amtsantritt": 2010,
      "Amtsende": 2018.0,
      "Geburtsjahr": 1952,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": 8.0
    }, {
      "Name": "Alain Berset",
      "Kanton": "Freiburg",
      "Partei": "SP",
      "Amtsantritt": 2012,
      "Amtsende": null,
      "Geburtsjahr": 1972,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": null
    }, {
      "Name": "Guy Parmelin",
      "Kanton": "Waadt",
      "Partei": "SVP",
      "Amtsantritt": 2016,
      "Amtsende": null,
      "Geburtsjahr": 1959,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": null
    }, {
      "Name": "Ignazio Cassis",
      "Kanton": "Tessin",
      "Partei": "FDP",
      "Amtsantritt": 2017,
      "Amtsende": null,
      "Geburtsjahr": 1961,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": null
    }, {
      "Name": "Viola Amherd",
      "Kanton": "Wallis",
      "Partei": "CVP",
      "Amtsantritt": 2019,
      "Amtsende": null,
      "Geburtsjahr": 1962,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": null
    }, {
      "Name": "Karin Keller-Sutter",
      "Kanton": "St. Gallen",
      "Partei": "FDP",
      "Amtsantritt": 2019,
      "Amtsende": null,
      "Geburtsjahr": 1963,
      "Todesjahr": null,
      "Lebensdauer": null,
      "Amtsdauer": null
    }];
  };

  DummyData.warData = function () {
    return [{
      "ID": 134,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "Fretilin",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "East Timor",
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 187142400000,
      "StartPrec": 1,
      "StartDate2": 187142400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "Fretilin"],
      "TXT": "IndonesiaFretilinnannan"
    }, {
      "ID": 134,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "Fretilin",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "East Timor",
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 187142400000,
      "StartPrec": 1,
      "StartDate2": 187142400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "Fretilin"],
      "TXT": "IndonesiaFretilinnannan"
    }, {
      "ID": 134,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "Fretilin",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "East Timor",
      "YEAR": 1988,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 187142400000,
      "StartPrec": 1,
      "StartDate2": 187142400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "Fretilin"],
      "TXT": "IndonesiaFretilinnannan"
    }, {
      "ID": 134,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "Fretilin",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "East Timor",
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 187142400000,
      "StartPrec": 1,
      "StartDate2": 187142400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 631065600000,
      "EpEndPrec": -99.0,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "Fretilin"],
      "TXT": "IndonesiaFretilinnannan"
    }, {
      "ID": 134,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "Fretilin",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "East Timor",
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 187142400000,
      "StartPrec": 1,
      "StartDate2": 724377600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 725760000000,
      "EpEndPrec": -99.0,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "Fretilin"],
      "TXT": "IndonesiaFretilinnannan"
    }, {
      "ID": 134,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "Fretilin",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "East Timor",
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 187142400000,
      "StartPrec": 1,
      "StartDate2": 865036800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "Fretilin"],
      "TXT": "IndonesiaFretilinnannan"
    }, {
      "ID": 134,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "Fretilin",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "East Timor",
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 187142400000,
      "StartPrec": 1,
      "StartDate2": 865036800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 915062400000,
      "EpEndPrec": -99.0,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "Fretilin"],
      "TXT": "IndonesiaFretilinnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1975,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": "Algeria",
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1976,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": 615,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO", "Algeria"],
      "TXT": "MoroccoPOLISARIOnanAlgeria"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1977,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1978,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1979,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1980,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1981,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1982,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1983,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1984,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1985,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1988,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 135,
      "Location": "Morocco",
      "SideA": "Morocco",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 178761600000,
      "StartPrec": 4,
      "StartDate2": 178761600000,
      "Startprec2": 4,
      "EpEnd": 1,
      "EpEndDate": 631065600000,
      "EpEndPrec": -99.0,
      "GWNOA": 600,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 600,
      "Region": 4,
      "Version": null,
      "Array": ["Morocco", "POLISARIO"],
      "TXT": "MoroccoPOLISARIOnannan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": null,
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1977,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo"],
      "TXT": "MozambiqueRenamonannan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": null,
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1978,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo"],
      "TXT": "MozambiqueRenamonannan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": null,
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1979,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo"],
      "TXT": "MozambiqueRenamonannan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": null,
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1980,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo"],
      "TXT": "MozambiqueRenamonannan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": null,
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1981,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo"],
      "TXT": "MozambiqueRenamonannan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": null,
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1982,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo"],
      "TXT": "MozambiqueRenamonannan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": null,
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1983,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo"],
      "TXT": "MozambiqueRenamonannan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": null,
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1984,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo"],
      "TXT": "MozambiqueRenamonannan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": "Zimbabwe (Rhodesia)",
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1985,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": 552,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo", "Zimbabwe (Rhodesia)"],
      "TXT": "MozambiqueRenamoZimbabwe (Rhodesia)nan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": "Zimbabwe (Rhodesia)",
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1986,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": 552,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo", "Zimbabwe (Rhodesia)"],
      "TXT": "MozambiqueRenamoZimbabwe (Rhodesia)nan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": "Zimbabwe (Rhodesia)",
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1987,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": 552,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo", "Zimbabwe (Rhodesia)"],
      "TXT": "MozambiqueRenamoZimbabwe (Rhodesia)nan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": "Zimbabwe (Rhodesia)",
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1988,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": 552,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo", "Zimbabwe (Rhodesia)"],
      "TXT": "MozambiqueRenamoZimbabwe (Rhodesia)nan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": "Zimbabwe (Rhodesia)",
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1989,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": 552,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo", "Zimbabwe (Rhodesia)"],
      "TXT": "MozambiqueRenamoZimbabwe (Rhodesia)nan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": "Zimbabwe (Rhodesia)",
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1990,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": 552,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo", "Zimbabwe (Rhodesia)"],
      "TXT": "MozambiqueRenamoZimbabwe (Rhodesia)nan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": null,
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 541,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo"],
      "TXT": "MozambiqueRenamonannan"
    }, {
      "ID": 136,
      "Location": "Mozambique",
      "SideA": "Mozambique",
      "SideA2nd": null,
      "SideB": "Renamo",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 220924800000,
      "StartPrec": 6,
      "StartDate2": 220924800000,
      "Startprec2": 6,
      "EpEnd": 1,
      "EpEndDate": 718156800000,
      "EpEndPrec": -99.0,
      "GWNOA": 541,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 541,
      "Region": 4,
      "Version": null,
      "Array": ["Mozambique", "Renamo"],
      "TXT": "MozambiqueRenamonannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "Hizb-i Demokratik-i Khalq-i Afghanistan",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1978,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Hizb-i Demokratik-i Khalq-i Afghanistan"],
      "TXT": "AfghanistanHizb-i Demokratik-i Khalq-i Afghanistannannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "Jam'iyyat-i Islami-yi Afghanistan",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1979,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Jam'iyyat-i Islami-yi Afghanistan"],
      "TXT": "AfghanistanJam'iyyat-i Islami-yi Afghanistannannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Russia (Soviet Union)",
      "SideB": "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1980,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": 365,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan", "Russia (Soviet Union)"],
      "TXT": "AfghanistanJam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi AfghanistanRussia (Soviet Union)nan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Russia (Soviet Union)",
      "SideB": "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Ittih",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1981,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": 365,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Ittih", "Russia (Soviet Union)"],
      "TXT": "AfghanistanJam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, IttihRussia (Soviet Union)nan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Russia (Soviet Union)",
      "SideB": "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Ittih",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1982,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": 365,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Ittih", "Russia (Soviet Union)"],
      "TXT": "AfghanistanJam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, IttihRussia (Soviet Union)nan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Russia (Soviet Union)",
      "SideB": "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Ittih",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1983,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": 365,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Ittih", "Russia (Soviet Union)"],
      "TXT": "AfghanistanJam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, IttihRussia (Soviet Union)nan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Russia (Soviet Union)",
      "SideB": "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Ittih",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1984,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": 365,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Ittih", "Russia (Soviet Union)"],
      "TXT": "AfghanistanJam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, IttihRussia (Soviet Union)nan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Russia (Soviet Union)",
      "SideB": "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Ittih",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1985,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": 365,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Ittih", "Russia (Soviet Union)"],
      "TXT": "AfghanistanJam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, IttihRussia (Soviet Union)nan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Russia (Soviet Union)",
      "SideB": "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan,",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1986,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": 365,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Jam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan,", "Russia (Soviet Union)"],
      "TXT": "AfghanistanJam'iyyat-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan-Khalis faction, Mahaz-i Milli-yi Islami-yi Afghanistan, Harakat-i Inqilab-i Islami-yi Afghanistan,Russia (Soviet Union)nan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Russia (Soviet Union)",
      "SideB": "Harakat-i Inqilab-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan - Khalis faction, Ittihad-i Islami Bara-yi Azadi-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Jam'iyyat-i Islami-yi Afghanistan, Mahaz-i Milli-yi Islami-yi Afghanistan   ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1987,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": 365,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Harakat-i Inqilab-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan - Khalis faction, Ittihad-i Islami Bara-yi Azadi-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Jam'iyyat-i Islami-yi Afghanistan, Mahaz-i Milli-yi Islami-yi Afghanistan   ", "Russia (Soviet Union)"],
      "TXT": "AfghanistanHarakat-i Inqilab-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan - Khalis faction, Ittihad-i Islami Bara-yi Azadi-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Jam'iyyat-i Islami-yi Afghanistan, Mahaz-i Milli-yi Islami-yi Afghanistan   Russia (Soviet Union)nan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Russia (Soviet Union)",
      "SideB": "Harakat-i Inqilab-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan - Khalis faction, Ittihad-i Islami Bara-yi Azadi-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Jam'iyyat-i Islami-yi Afghanistan, Mahaz-i Milli-yi Islami-yi Afghanistan   ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1988,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": 365,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Harakat-i Inqilab-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan - Khalis faction, Ittihad-i Islami Bara-yi Azadi-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Jam'iyyat-i Islami-yi Afghanistan, Mahaz-i Milli-yi Islami-yi Afghanistan   ", "Russia (Soviet Union)"],
      "TXT": "AfghanistanHarakat-i Inqilab-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan, Hizb-i Islami-yi Afghanistan - Khalis faction, Ittihad-i Islami Bara-yi Azadi-yi Afghanistan, Jabha-yi Nijat-i Milli-yi Afghanistan, Jam'iyyat-i Islami-yi Afghanistan, Mahaz-i Milli-yi Islami-yi Afghanistan   Russia (Soviet Union)nan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Jam'iyyat-i Islami-yi Afghanistan",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1989,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Jam'iyyat-i Islami-yi Afghanistan"],
      "TXT": "AfghanistanHizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Jam'iyyat-i Islami-yi Afghanistannannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Jam'iyyat-i Islami-yi Afghanistan, Military faction",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1990,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Jam'iyyat-i Islami-yi Afghanistan, Military faction"],
      "TXT": "AfghanistanHizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Jam'iyyat-i Islami-yi Afghanistan, Military factionnannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Jam'iyyat-i Islami-yi Afghanistan",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Jam'iyyat-i Islami-yi Afghanistan"],
      "TXT": "AfghanistanHizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Jam'iyyat-i Islami-yi Afghanistannannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Jam'iyyat-i Islami-yi Afghanistan, Junbish-i Milli-yi Islami, Military faction",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Jam'iyyat-i Islami-yi Afghanistan, Junbish-i Milli-yi Islami, Military faction"],
      "TXT": "AfghanistanHizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Jam'iyyat-i Islami-yi Afghanistan, Junbish-i Milli-yi Islami, Military factionnannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Junbish-i Milli-yi Islami",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Junbish-i Milli-yi Islami"],
      "TXT": "AfghanistanHizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Junbish-i Milli-yi Islaminannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Junbish-i Milli-yi Islami",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1994,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Junbish-i Milli-yi Islami"],
      "TXT": "AfghanistanHizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Junbish-i Milli-yi Islaminannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Junbish-i Milli-yi Islami, Taleban",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1995,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Hizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Junbish-i Milli-yi Islami, Taleban"],
      "TXT": "AfghanistanHizb-i Islami-yi Afghanistan, Hizb-i Wahdat, Junbish-i Milli-yi Islami, Talebannannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "Jam'iyyat-i Islami-yi Afghanistan, Taleban, UIFSA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1996,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Jam'iyyat-i Islami-yi Afghanistan, Taleban, UIFSA"],
      "TXT": "AfghanistanJam'iyyat-i Islami-yi Afghanistan, Taleban, UIFSAnannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "UIFSA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1997,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "UIFSA"],
      "TXT": "AfghanistanUIFSAnannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "UIFSA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1998,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "UIFSA"],
      "TXT": "AfghanistanUIFSAnannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "UIFSA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1999,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "UIFSA"],
      "TXT": "AfghanistanUIFSAnannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "UIFSA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2000,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "UIFSA"],
      "TXT": "AfghanistanUIFSAnannan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "UIFSA",
      "SideB2nd": "Australia, Canada, France, German Federal Republic, Italy\/Sardinia, Japan, Jordan, Netherlands, Poland, Russia (Soviet Union), Turkey\/Ottoman Empire, United Kingdom, United States of America",
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2001,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 262483200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1007683200000,
      "EpEndPrec": -99.0,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": "900, 20, 220, 260, 325, 740, 663, 210, 290, 365, 640, 200, 2",
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "UIFSA", "Australia, Canada, France, German Federal Republic, Italy\/Sardinia, Japan, Jordan, Netherlands, Poland, Russia (Soviet Union), Turkey\/Ottoman Empire, United Kingdom, United States of America"],
      "TXT": "AfghanistanUIFSAnanAustralia, Canada, France, German Federal Republic, Italy\/Sardinia, Japan, Jordan, Netherlands, Poland, Russia (Soviet Union), Turkey\/Ottoman Empire, United Kingdom, United States of America"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Australia, Denmark, France, German Federal Republic, Italy\/Sardinia, Netherlands, New Zealand, Norway, Poland, Rumania, United Kingdom, United States of America",
      "SideB": "Taleban",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 1054684800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": "900, 390, 220, 260, 325, 210, 920, 385, 290, 360, 200, 2",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Taleban", "Australia, Denmark, France, German Federal Republic, Italy\/Sardinia, Netherlands, New Zealand, Norway, Poland, Rumania, United Kingdom, United States of America"],
      "TXT": "AfghanistanTalebanAustralia, Denmark, France, German Federal Republic, Italy\/Sardinia, Netherlands, New Zealand, Norway, Poland, Rumania, United Kingdom, United States of Americanan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Belgium, Canada, Czech Republic, France, German Federal Republic, Italy\/Sardinia, Pakistan, Poland, Portugal, Rumania, Slovakia, Spain, United Kingdom, United States of America",
      "SideB": "Taleban",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 1054684800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": "211, 20, 316, 220, 260, 325, 770, 290, 235, 360, 317, 230, 200, 2",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Taleban", "Belgium, Canada, Czech Republic, France, German Federal Republic, Italy\/Sardinia, Pakistan, Poland, Portugal, Rumania, Slovakia, Spain, United Kingdom, United States of America"],
      "TXT": "AfghanistanTalebanBelgium, Canada, Czech Republic, France, German Federal Republic, Italy\/Sardinia, Pakistan, Poland, Portugal, Rumania, Slovakia, Spain, United Kingdom, United States of Americanan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Australia, Belgium, Canada, Denmark, France, German Federal Republic, Italy\/Sardinia, Netherlands, Norway, Pakistan, Poland, Rumania, Slovakia, Spain, United Kingdom, United States of America",
      "SideB": "Taleban",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2005,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 1054684800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": "900, 211, 20, 390, 220, 260, 325, 210, 385, 770, 290, 360, 317, 230, 200, 2",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Taleban", "Australia, Belgium, Canada, Denmark, France, German Federal Republic, Italy\/Sardinia, Netherlands, Norway, Pakistan, Poland, Rumania, Slovakia, Spain, United Kingdom, United States of America"],
      "TXT": "AfghanistanTalebanAustralia, Belgium, Canada, Denmark, France, German Federal Republic, Italy\/Sardinia, Netherlands, Norway, Pakistan, Poland, Rumania, Slovakia, Spain, United Kingdom, United States of Americanan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Albania, Australia, Austria, Azerbaijan, Belgium, Bulgaria, Canada, Croatia, Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Iceland, Ireland, Italy, Latvia, Lithuania, Luxembourg, Macedonia (former Yugoslav Republic of), the Netherlands, New Zealand, Norway, Pakistan, Poland, Portugal, Rumania, Slovakia, Slovenia, Spain, Sweden, Switzerland, Turkey, United Kingdom, United States of America ",
      "SideB": "Taleban",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2006,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 1054684800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": "339, 900, 305, 373, 211, 355, 20, 344, 316, 390, 366, 375, 220, 260, 350, 310, 395, 205, 325, 367, 368, 212, 343, 210, 920, 385, 770, 290, 235, 360, 317, 349, 230, 380, 225, 640, 200, 2",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Taleban", "Albania, Australia, Austria, Azerbaijan, Belgium, Bulgaria, Canada, Croatia, Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Iceland, Ireland, Italy, Latvia, Lithuania, Luxembourg, Macedonia (former Yugoslav Republic of), the Netherlands, New Zealand, Norway, Pakistan, Poland, Portugal, Rumania, Slovakia, Slovenia, Spain, Sweden, Switzerland, Turkey, United Kingdom, United States of America "],
      "TXT": "AfghanistanTalebanAlbania, Australia, Austria, Azerbaijan, Belgium, Bulgaria, Canada, Croatia, Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Iceland, Ireland, Italy, Latvia, Lithuania, Luxembourg, Macedonia (former Yugoslav Republic of), the Netherlands, New Zealand, Norway, Pakistan, Poland, Portugal, Rumania, Slovakia, Slovenia, Spain, Sweden, Switzerland, Turkey, United Kingdom, United States of America nan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Albania, Australia, Austria, Azerbaijan, Belgium, Bulgaria, Canada, Croatia, Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Iceland, Ireland, Italy, Jordan, Latvia, Lithuania, Luxembourg, Macedonia (former Yugoslav Republic of), the Netherlands, New Zealand, Norway, Pakistan, Poland, Portugal, Rumania, Slovakia, Slovenia, Spain, Sweden, Switzerland, Turkey, United Kingdom, United States of America ",
      "SideB": "Taleban",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2007,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 1054684800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": "339, 900, 305, 373, 211, 355, 20, 344, 316, 390, 366, 375, 220, 260, 350, 310, 395, 205, 325, 663, 367, 368, 212, 343, 210, 920, 385, 770, 290, 235, 360, 317, 349, 230, 380, 225, 640, 200, 2",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Taleban", "Albania, Australia, Austria, Azerbaijan, Belgium, Bulgaria, Canada, Croatia, Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Iceland, Ireland, Italy, Jordan, Latvia, Lithuania, Luxembourg, Macedonia (former Yugoslav Republic of), the Netherlands, New Zealand, Norway, Pakistan, Poland, Portugal, Rumania, Slovakia, Slovenia, Spain, Sweden, Switzerland, Turkey, United Kingdom, United States of America "],
      "TXT": "AfghanistanTalebanAlbania, Australia, Austria, Azerbaijan, Belgium, Bulgaria, Canada, Croatia, Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Iceland, Ireland, Italy, Jordan, Latvia, Lithuania, Luxembourg, Macedonia (former Yugoslav Republic of), the Netherlands, New Zealand, Norway, Pakistan, Poland, Portugal, Rumania, Slovakia, Slovenia, Spain, Sweden, Switzerland, Turkey, United Kingdom, United States of America nan"
    }, {
      "ID": 137,
      "Location": "Afghanistan",
      "SideA": "Afghanistan",
      "SideA2nd": "Albania, Australia, Austria, Azerbaijan, Belgium, Bulgaria, Canada, Croatia, Czech Republic, Denmark, Estonia, Finland, France, Georgia, Germany, Greece, Hungary, Iceland, Ireland, Italy, Latvia, Lithuania, Luxembourg, the Netherlands, New Zealand, Norway, Pakistan, Poland, Portugal, Rumania, Slovakia, Slovenia, Spain, Sweden, Turkey, United Kingdom, United States of America ",
      "SideB": "Hizb-i Islami-yi Afghanistan, Taleban",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2008,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 262483200000,
      "StartPrec": 1,
      "StartDate2": 1054684800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 700,
      "GWNOA2nd": "339, 900, 305, 373, 211, 355, 20, 344, 316, 390, 366, 375, 220, 372, 260, 350, 310, 395, 205, 325, 367, 368, 212, 210, 920, 385, 770, 290, 235, 360, 317, 349, 230, 380, 640, 200, 2",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 700,
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Hizb-i Islami-yi Afghanistan, Taleban", "Albania, Australia, Austria, Azerbaijan, Belgium, Bulgaria, Canada, Croatia, Czech Republic, Denmark, Estonia, Finland, France, Georgia, Germany, Greece, Hungary, Iceland, Ireland, Italy, Latvia, Lithuania, Luxembourg, the Netherlands, New Zealand, Norway, Pakistan, Poland, Portugal, Rumania, Slovakia, Slovenia, Spain, Sweden, Turkey, United Kingdom, United States of America "],
      "TXT": "AfghanistanHizb-i Islami-yi Afghanistan, TalebanAlbania, Australia, Austria, Azerbaijan, Belgium, Bulgaria, Canada, Croatia, Czech Republic, Denmark, Estonia, Finland, France, Georgia, Germany, Greece, Hungary, Iceland, Ireland, Italy, Latvia, Lithuania, Luxembourg, the Netherlands, New Zealand, Norway, Pakistan, Poland, Portugal, Rumania, Slovakia, Slovenia, Spain, Sweden, Turkey, United Kingdom, United States of America nan"
    }, {
      "ID": 138,
      "Location": "China, Vietnam",
      "SideA": "China",
      "SideA2nd": null,
      "SideB": "Vietnam",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Various",
      "YEAR": 1978,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 127785600000,
      "StartPrec": 1,
      "StartDate2": 252460800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 710,
      "GWNOA2nd": null,
      "GWNOB": 816,
      "GWNOB2nd": null,
      "GWNOLoc": "710, 816",
      "Region": 3,
      "Version": null,
      "Array": ["China", "Vietnam"],
      "TXT": "ChinaVietnamnannan"
    }, {
      "ID": 138,
      "Location": "China, Vietnam",
      "SideA": "China",
      "SideA2nd": null,
      "SideB": "Vietnam",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Various",
      "YEAR": 1979,
      "Int": 2,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 127785600000,
      "StartPrec": 1,
      "StartDate2": 252460800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 710,
      "GWNOA2nd": null,
      "GWNOB": 816,
      "GWNOB2nd": null,
      "GWNOLoc": "710, 816",
      "Region": 3,
      "Version": null,
      "Array": ["China", "Vietnam"],
      "TXT": "ChinaVietnamnannan"
    }, {
      "ID": 138,
      "Location": "China, Vietnam",
      "SideA": "China",
      "SideA2nd": null,
      "SideB": "Vietnam",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Various",
      "YEAR": 1980,
      "Int": 1,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 127785600000,
      "StartPrec": 1,
      "StartDate2": 252460800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 710,
      "GWNOA2nd": null,
      "GWNOB": 816,
      "GWNOB2nd": null,
      "GWNOLoc": "710, 816",
      "Region": 3,
      "Version": null,
      "Array": ["China", "Vietnam"],
      "TXT": "ChinaVietnamnannan"
    }, {
      "ID": 138,
      "Location": "China, Vietnam",
      "SideA": "China",
      "SideA2nd": null,
      "SideB": "Vietnam",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Various",
      "YEAR": 1981,
      "Int": 1,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 127785600000,
      "StartPrec": 1,
      "StartDate2": 252460800000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 378604800000,
      "EpEndPrec": -99.0,
      "GWNOA": 710,
      "GWNOA2nd": null,
      "GWNOB": 816,
      "GWNOB2nd": null,
      "GWNOLoc": "710, 816",
      "Region": 3,
      "Version": null,
      "Array": ["China", "Vietnam"],
      "TXT": "ChinaVietnamnannan"
    }, {
      "ID": 138,
      "Location": "China, Vietnam",
      "SideA": "China",
      "SideA2nd": null,
      "SideB": "Vietnam",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Various",
      "YEAR": 1983,
      "Int": 1,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 127785600000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 710,
      "GWNOA2nd": null,
      "GWNOB": 816,
      "GWNOB2nd": null,
      "GWNOLoc": "710, 816",
      "Region": 3,
      "Version": null,
      "Array": ["China", "Vietnam"],
      "TXT": "ChinaVietnamnannan"
    }, {
      "ID": 138,
      "Location": "China, Vietnam",
      "SideA": "China",
      "SideA2nd": null,
      "SideB": "Vietnam",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Various",
      "YEAR": 1984,
      "Int": 1,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 127785600000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 473299200000,
      "EpEndPrec": -99.0,
      "GWNOA": 710,
      "GWNOA2nd": null,
      "GWNOB": 816,
      "GWNOB2nd": null,
      "GWNOLoc": "710, 816",
      "Region": 3,
      "Version": null,
      "Array": ["China", "Vietnam"],
      "TXT": "ChinaVietnamnannan"
    }, {
      "ID": 138,
      "Location": "China, Vietnam",
      "SideA": "China",
      "SideA2nd": null,
      "SideB": "Vietnam",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Various",
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 127785600000,
      "StartPrec": 1,
      "StartDate2": 504921600000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 710,
      "GWNOA2nd": null,
      "GWNOB": 816,
      "GWNOB2nd": null,
      "GWNOLoc": "710, 816",
      "Region": 3,
      "Version": null,
      "Array": ["China", "Vietnam"],
      "TXT": "ChinaVietnamnannan"
    }, {
      "ID": 138,
      "Location": "China, Vietnam",
      "SideA": "China",
      "SideA2nd": null,
      "SideB": "Vietnam",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Various",
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 127785600000,
      "StartPrec": 1,
      "StartDate2": 504921600000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 710,
      "GWNOA2nd": null,
      "GWNOB": 816,
      "GWNOB2nd": null,
      "GWNOLoc": "710, 816",
      "Region": 3,
      "Version": null,
      "Array": ["China", "Vietnam"],
      "TXT": "ChinaVietnamnannan"
    }, {
      "ID": 138,
      "Location": "China, Vietnam",
      "SideA": "China",
      "SideA2nd": null,
      "SideB": "Vietnam",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Various",
      "YEAR": 1988,
      "Int": 1,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 127785600000,
      "StartPrec": 1,
      "StartDate2": 504921600000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 599529600000,
      "EpEndPrec": -99.0,
      "GWNOA": 710,
      "GWNOA2nd": null,
      "GWNOB": 816,
      "GWNOB2nd": null,
      "GWNOLoc": "710, 816",
      "Region": 3,
      "Version": null,
      "Array": ["China", "Vietnam"],
      "TXT": "ChinaVietnamnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "TNV",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1978,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 252460800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "TNV"],
      "TXT": "IndiaTNVnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "TNV",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1979,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 252460800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "TNV"],
      "TXT": "IndiaTNVnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "TNV",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1980,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 252460800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "TNV"],
      "TXT": "IndiaTNVnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "TNV",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1981,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 252460800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "TNV"],
      "TXT": "IndiaTNVnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "TNV",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1982,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 252460800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "TNV"],
      "TXT": "IndiaTNVnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "TNV",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1983,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 252460800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "TNV"],
      "TXT": "IndiaTNVnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "TNV",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1984,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 252460800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "TNV"],
      "TXT": "IndiaTNVnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "TNV",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1985,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 252460800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "TNV"],
      "TXT": "IndiaTNVnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "TNV",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 252460800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "TNV"],
      "TXT": "IndiaTNVnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "TNV",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 252460800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "TNV"],
      "TXT": "IndiaTNVnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "TNV",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1988,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 252460800000,
      "Startprec2": 4,
      "EpEnd": 1,
      "EpEndDate": 587347200000,
      "EpEndPrec": -99.0,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "TNV"],
      "TXT": "IndiaTNVnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ATTF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 718848000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ATTF"],
      "TXT": "IndiaATTFnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ATTF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 718848000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 746064000000,
      "EpEndPrec": -99.0,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ATTF"],
      "TXT": "IndiaATTFnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NLFT",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 815097600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 820368000000,
      "EpEndPrec": -99.0,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NLFT"],
      "TXT": "IndiaNLFTnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ATTF, NLFT",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 852076800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ATTF, NLFT"],
      "TXT": "IndiaATTF, NLFTnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ATTF, NLFT",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 852076800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ATTF, NLFT"],
      "TXT": "IndiaATTF, NLFTnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ATTF, NLFT",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 852076800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ATTF, NLFT"],
      "TXT": "IndiaATTF, NLFTnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NLFT",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 852076800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NLFT"],
      "TXT": "IndiaNLFTnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NLFT",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 2001,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 852076800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NLFT"],
      "TXT": "IndiaNLFTnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NLFT",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 852076800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NLFT"],
      "TXT": "IndiaNLFTnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NLFT",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 852076800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NLFT"],
      "TXT": "IndiaNLFTnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NLFT",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 852076800000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 1104451200000,
      "EpEndPrec": -99.0,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NLFT"],
      "TXT": "IndiaNLFTnannan"
    }, {
      "ID": 139,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NLFT",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Tripura",
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 252460800000,
      "StartPrec": 4,
      "StartDate2": 1162857600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NLFT"],
      "TXT": "IndiaNLFTnannan"
    }, {
      "ID": 140,
      "Location": "Nicaragua",
      "SideA": "Nicaragua",
      "SideA2nd": null,
      "SideB": "FSLN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1978,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 157334400000,
      "StartPrec": 2,
      "StartDate2": 255312000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 93,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 93,
      "Region": 5,
      "Version": null,
      "Array": ["Nicaragua", "FSLN"],
      "TXT": "NicaraguaFSLNnannan"
    }, {
      "ID": 140,
      "Location": "Nicaragua",
      "SideA": "Nicaragua",
      "SideA2nd": null,
      "SideB": "FSLN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1979,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 157334400000,
      "StartPrec": 2,
      "StartDate2": 255312000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 301190400000,
      "EpEndPrec": -99.0,
      "GWNOA": 93,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 93,
      "Region": 5,
      "Version": null,
      "Array": ["Nicaragua", "FSLN"],
      "TXT": "NicaraguaFSLNnannan"
    }, {
      "ID": 140,
      "Location": "Nicaragua",
      "SideA": "Nicaragua",
      "SideA2nd": null,
      "SideB": "Contras\/FDN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1981,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 157334400000,
      "StartPrec": 2,
      "StartDate2": 376012800000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 93,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 93,
      "Region": 5,
      "Version": null,
      "Array": ["Nicaragua", "Contras\/FDN"],
      "TXT": "NicaraguaContras\/FDNnannan"
    }, {
      "ID": 140,
      "Location": "Nicaragua",
      "SideA": "Nicaragua",
      "SideA2nd": null,
      "SideB": "Contras\/FDN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1982,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 157334400000,
      "StartPrec": 2,
      "StartDate2": 376012800000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 93,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 93,
      "Region": 5,
      "Version": null,
      "Array": ["Nicaragua", "Contras\/FDN"],
      "TXT": "NicaraguaContras\/FDNnannan"
    }, {
      "ID": 140,
      "Location": "Nicaragua",
      "SideA": "Nicaragua",
      "SideA2nd": null,
      "SideB": "Contras\/FDN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1983,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 157334400000,
      "StartPrec": 2,
      "StartDate2": 376012800000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 93,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 93,
      "Region": 5,
      "Version": null,
      "Array": ["Nicaragua", "Contras\/FDN"],
      "TXT": "NicaraguaContras\/FDNnannan"
    }, {
      "ID": 140,
      "Location": "Nicaragua",
      "SideA": "Nicaragua",
      "SideA2nd": null,
      "SideB": "Contras\/FDN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1984,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 157334400000,
      "StartPrec": 2,
      "StartDate2": 376012800000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 93,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 93,
      "Region": 5,
      "Version": null,
      "Array": ["Nicaragua", "Contras\/FDN"],
      "TXT": "NicaraguaContras\/FDNnannan"
    }, {
      "ID": 140,
      "Location": "Nicaragua",
      "SideA": "Nicaragua",
      "SideA2nd": null,
      "SideB": "Contras\/FDN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1985,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 157334400000,
      "StartPrec": 2,
      "StartDate2": 376012800000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 93,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 93,
      "Region": 5,
      "Version": null,
      "Array": ["Nicaragua", "Contras\/FDN"],
      "TXT": "NicaraguaContras\/FDNnannan"
    }, {
      "ID": 140,
      "Location": "Nicaragua",
      "SideA": "Nicaragua",
      "SideA2nd": null,
      "SideB": "Contras\/FDN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1986,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 157334400000,
      "StartPrec": 2,
      "StartDate2": 376012800000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 93,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 93,
      "Region": 5,
      "Version": null,
      "Array": ["Nicaragua", "Contras\/FDN"],
      "TXT": "NicaraguaContras\/FDNnannan"
    }, {
      "ID": 140,
      "Location": "Nicaragua",
      "SideA": "Nicaragua",
      "SideA2nd": null,
      "SideB": "Contras\/FDN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1987,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 157334400000,
      "StartPrec": 2,
      "StartDate2": 376012800000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 93,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 93,
      "Region": 5,
      "Version": null,
      "Array": ["Nicaragua", "Contras\/FDN"],
      "TXT": "NicaraguaContras\/FDNnannan"
    }, {
      "ID": 140,
      "Location": "Nicaragua",
      "SideA": "Nicaragua",
      "SideA2nd": null,
      "SideB": "Contras\/FDN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1988,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 157334400000,
      "StartPrec": 2,
      "StartDate2": 376012800000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 93,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 93,
      "Region": 5,
      "Version": null,
      "Array": ["Nicaragua", "Contras\/FDN"],
      "TXT": "NicaraguaContras\/FDNnannan"
    }, {
      "ID": 140,
      "Location": "Nicaragua",
      "SideA": "Nicaragua",
      "SideA2nd": null,
      "SideB": "Contras\/FDN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 157334400000,
      "StartPrec": 2,
      "StartDate2": 376012800000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 624412800000,
      "EpEndPrec": -99.0,
      "GWNOA": 93,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 93,
      "Region": 5,
      "Version": null,
      "Array": ["Nicaragua", "Contras\/FDN"],
      "TXT": "NicaraguaContras\/FDNnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "Military faction (forces of Abdulaahi Yusuf)",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1978,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 260928000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 260928000000,
      "EpEndPrec": -99.0,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "Military faction (forces of Abdulaahi Yusuf)"],
      "TXT": "SomaliaMilitary faction (forces of Abdulaahi Yusuf)nannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "SSDF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1982,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 378691200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "SSDF"],
      "TXT": "SomaliaSSDFnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "SNM, SSDF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1983,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 378691200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "SNM, SSDF"],
      "TXT": "SomaliaSNM, SSDFnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "SNM, SSDF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1984,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 378691200000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 473299200000,
      "EpEndPrec": -99.0,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "SNM, SSDF"],
      "TXT": "SomaliaSNM, SSDFnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "SNM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 510192000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "SNM"],
      "TXT": "SomaliaSNMnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "SNM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 510192000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "SNM"],
      "TXT": "SomaliaSNMnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "SNM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1988,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 510192000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "SNM"],
      "TXT": "SomaliaSNMnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "SNM, SPM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 510192000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "SNM, SPM"],
      "TXT": "SomaliaSNM, SPMnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "SNM, SPM, USC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1990,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 510192000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "SNM, SPM, USC"],
      "TXT": "SomaliaSNM, SPM, USCnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "SNM, SPM, SSDF, USC, USC\/SNA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 510192000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "SNM, SPM, SSDF, USC, USC\/SNA"],
      "TXT": "SomaliaSNM, SPM, SSDF, USC, USC\/SNAnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "USC\/SNA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 510192000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "USC\/SNA"],
      "TXT": "SomaliaUSC\/SNAnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "USC\/SNA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 510192000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "USC\/SNA"],
      "TXT": "SomaliaUSC\/SNAnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "USC\/SNA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 510192000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "USC\/SNA"],
      "TXT": "SomaliaUSC\/SNAnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "USC\/SNA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 510192000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "USC\/SNA"],
      "TXT": "SomaliaUSC\/SNAnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "USC\/SNA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 510192000000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 851990400000,
      "EpEndPrec": -99.0,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "USC\/SNA"],
      "TXT": "SomaliaUSC\/SNAnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "SRRC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2001,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 989625600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "SRRC"],
      "TXT": "SomaliaSRRCnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": null,
      "SideB": "SRRC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 989625600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1041292800000,
      "EpEndPrec": -99.0,
      "GWNOA": 520,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "SRRC"],
      "TXT": "SomaliaSRRCnannan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": "Ethiopia",
      "SideB": "ARS\/UIC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 1161648000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": 530,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "ARS\/UIC", "Ethiopia"],
      "TXT": "SomaliaARS\/UICEthiopianan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": "Ethiopia",
      "SideB": "ARS\/UIC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2007,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 1161648000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": 530,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "ARS\/UIC", "Ethiopia"],
      "TXT": "SomaliaARS\/UICEthiopianan"
    }, {
      "ID": 141,
      "Location": "Somalia",
      "SideA": "Somalia",
      "SideA2nd": "Ethiopia",
      "SideB": "Al-Shabaab, ARS\/UIC, Harakat Ras Kamboni",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2008,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 260928000000,
      "StartPrec": 1,
      "StartDate2": 1161648000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 520,
      "GWNOA2nd": 530,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 520,
      "Region": 4,
      "Version": null,
      "Array": ["Somalia", "Al-Shabaab, ARS\/UIC, Harakat Ras Kamboni", "Ethiopia"],
      "TXT": "SomaliaAl-Shabaab, ARS\/UIC, Harakat Ras KamboniEthiopianan"
    }, {
      "ID": 142,
      "Location": "Equatorial Guinea",
      "SideA": "Equatorial Guinea",
      "SideA2nd": null,
      "SideB": "Military faction (forces of Teodoro Obiang Nguema Mbasogo)",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1979,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 302486400000,
      "StartPrec": 1,
      "StartDate2": 302486400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 302486400000,
      "EpEndPrec": -99.0,
      "GWNOA": 411,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 411,
      "Region": 4,
      "Version": null,
      "Array": ["Equatorial Guinea", "Military faction (forces of Teodoro Obiang Nguema Mbasogo)"],
      "TXT": "Equatorial GuineaMilitary faction (forces of Teodoro Obiang Nguema Mbasogo)nannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1979,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 283996800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1980,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 283996800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1981,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 283996800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1982,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 283996800000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 410140800000,
      "EpEndPrec": -99.0,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 504921600000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 504921600000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1988,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 504921600000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 599529600000,
      "EpEndPrec": -99.0,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 662688000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 662688000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 662688000000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 757296000000,
      "EpEndPrec": -99.0,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 852076800000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 883526400000,
      "EpEndPrec": -99.0,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 915148800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 915148800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "MEK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2001,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 915148800000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 1009756800000,
      "EpEndPrec": -99.0,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "MEK"],
      "TXT": "IranMEKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "PJAK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 1123372800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "PJAK"],
      "TXT": "IranPJAKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "Jondullah, PJAK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 1123372800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "Jondullah, PJAK"],
      "TXT": "IranJondullah, PJAKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "Jondullah, PJAK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 1123372800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "Jondullah, PJAK"],
      "TXT": "IranJondullah, PJAKnannan"
    }, {
      "ID": 143,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "Jondullah, PJAK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 82512000000,
      "StartPrec": 1,
      "StartDate2": 1123372800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "Jondullah, PJAK"],
      "TXT": "IranJondullah, PJAKnannan"
    }, {
      "ID": 144,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "APCO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Arabistan",
      "YEAR": 1979,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 307756800000,
      "StartPrec": 1,
      "StartDate2": 307756800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "APCO"],
      "TXT": "IranAPCOnannan"
    }, {
      "ID": 144,
      "Location": "Iran",
      "SideA": "Iran",
      "SideA2nd": null,
      "SideB": "APCO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Arabistan",
      "YEAR": 1980,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 307756800000,
      "StartPrec": 1,
      "StartDate2": 307756800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 347068800000,
      "EpEndPrec": -99.0,
      "GWNOA": 630,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 630,
      "Region": 2,
      "Version": null,
      "Array": ["Iran", "APCO"],
      "TXT": "IranAPCOnannan"
    }, {
      "ID": 145,
      "Location": "Saudi Arabia",
      "SideA": "Saudi Arabia",
      "SideA2nd": null,
      "SideB": "JSM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1979,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 312336000000,
      "StartPrec": 1,
      "StartDate2": 312336000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 314064000000,
      "EpEndPrec": -99.0,
      "GWNOA": 670,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 670,
      "Region": 2,
      "Version": null,
      "Array": ["Saudi Arabia", "JSM"],
      "TXT": "Saudi ArabiaJSMnannan"
    }, {
      "ID": 146,
      "Location": "Liberia",
      "SideA": "Liberia",
      "SideA2nd": null,
      "SideB": "Military faction (forces of Samuel Doe)",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1980,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 324345600000,
      "StartPrec": 1,
      "StartDate2": 324345600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 324518400000,
      "EpEndPrec": -99.0,
      "GWNOA": 450,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 450,
      "Region": 4,
      "Version": null,
      "Array": ["Liberia", "Military faction (forces of Samuel Doe)"],
      "TXT": "LiberiaMilitary faction (forces of Samuel Doe)nannan"
    }, {
      "ID": 146,
      "Location": "Liberia",
      "SideA": "Liberia",
      "SideA2nd": null,
      "SideB": "NPFL",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 324345600000,
      "StartPrec": 1,
      "StartDate2": 630892800000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 450,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 450,
      "Region": 4,
      "Version": null,
      "Array": ["Liberia", "NPFL"],
      "TXT": "LiberiaNPFLnannan"
    }, {
      "ID": 146,
      "Location": "Liberia",
      "SideA": "Liberia",
      "SideA2nd": null,
      "SideB": "INPFL, NPFL",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1990,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 324345600000,
      "StartPrec": 1,
      "StartDate2": 630892800000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 450,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 450,
      "Region": 4,
      "Version": null,
      "Array": ["Liberia", "INPFL, NPFL"],
      "TXT": "LiberiaINPFL, NPFLnannan"
    }, {
      "ID": 146,
      "Location": "Liberia",
      "SideA": "Liberia",
      "SideA2nd": null,
      "SideB": "INPFL, NPFL",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 324345600000,
      "StartPrec": 1,
      "StartDate2": 630892800000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 450,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 450,
      "Region": 4,
      "Version": null,
      "Array": ["Liberia", "INPFL, NPFL"],
      "TXT": "LiberiaINPFL, NPFLnannan"
    }, {
      "ID": 146,
      "Location": "Liberia",
      "SideA": "Liberia",
      "SideA2nd": null,
      "SideB": "INPFL, NPFL",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 324345600000,
      "StartPrec": 1,
      "StartDate2": 630892800000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 450,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 450,
      "Region": 4,
      "Version": null,
      "Array": ["Liberia", "INPFL, NPFL"],
      "TXT": "LiberiaINPFL, NPFLnannan"
    }, {
      "ID": 146,
      "Location": "Liberia",
      "SideA": "Liberia",
      "SideA2nd": null,
      "SideB": "INPFL, NPFL",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 324345600000,
      "StartPrec": 1,
      "StartDate2": 630892800000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 450,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 450,
      "Region": 4,
      "Version": null,
      "Array": ["Liberia", "INPFL, NPFL"],
      "TXT": "LiberiaINPFL, NPFLnannan"
    }, {
      "ID": 146,
      "Location": "Liberia",
      "SideA": "Liberia",
      "SideA2nd": null,
      "SideB": "INPFL, NPFL",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 324345600000,
      "StartPrec": 1,
      "StartDate2": 630892800000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 450,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 450,
      "Region": 4,
      "Version": null,
      "Array": ["Liberia", "INPFL, NPFL"],
      "TXT": "LiberiaINPFL, NPFLnannan"
    }, {
      "ID": 146,
      "Location": "Liberia",
      "SideA": "Liberia",
      "SideA2nd": null,
      "SideB": "INPFL, NPFL",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 324345600000,
      "StartPrec": 1,
      "StartDate2": 630892800000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 808790400000,
      "EpEndPrec": -99.0,
      "GWNOA": 450,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 450,
      "Region": 4,
      "Version": null,
      "Array": ["Liberia", "INPFL, NPFL"],
      "TXT": "LiberiaINPFL, NPFLnannan"
    }, {
      "ID": 146,
      "Location": "Liberia",
      "SideA": "Liberia",
      "SideA2nd": null,
      "SideB": "LURD",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 324345600000,
      "StartPrec": 1,
      "StartDate2": 965088000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 450,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 450,
      "Region": 4,
      "Version": null,
      "Array": ["Liberia", "LURD"],
      "TXT": "LiberiaLURDnannan"
    }, {
      "ID": 146,
      "Location": "Liberia",
      "SideA": "Liberia",
      "SideA2nd": null,
      "SideB": "LURD",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2001,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 324345600000,
      "StartPrec": 1,
      "StartDate2": 965088000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 450,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 450,
      "Region": 4,
      "Version": null,
      "Array": ["Liberia", "LURD"],
      "TXT": "LiberiaLURDnannan"
    }, {
      "ID": 146,
      "Location": "Liberia",
      "SideA": "Liberia",
      "SideA2nd": null,
      "SideB": "LURD",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 324345600000,
      "StartPrec": 1,
      "StartDate2": 965088000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 450,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 450,
      "Region": 4,
      "Version": null,
      "Array": ["Liberia", "LURD"],
      "TXT": "LiberiaLURDnannan"
    }, {
      "ID": 146,
      "Location": "Liberia",
      "SideA": "Liberia",
      "SideA2nd": null,
      "SideB": "LURD, MODEL",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2003,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 324345600000,
      "StartPrec": 1,
      "StartDate2": 965088000000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 1061164800000,
      "EpEndPrec": -99.0,
      "GWNOA": 450,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 450,
      "Region": 4,
      "Version": null,
      "Array": ["Liberia", "LURD, MODEL"],
      "TXT": "LiberiaLURD, MODELnannan"
    }, {
      "ID": 147,
      "Location": "Spain",
      "SideA": "Spain",
      "SideA2nd": null,
      "SideB": "ETA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Basque",
      "YEAR": 1980,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": -49507200000,
      "StartPrec": 1,
      "StartDate2": 339379200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 230,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 230,
      "Region": 1,
      "Version": null,
      "Array": ["Spain", "ETA"],
      "TXT": "SpainETAnannan"
    }, {
      "ID": 147,
      "Location": "Spain",
      "SideA": "Spain",
      "SideA2nd": null,
      "SideB": "ETA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Basque",
      "YEAR": 1981,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": -49507200000,
      "StartPrec": 1,
      "StartDate2": 339379200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 378604800000,
      "EpEndPrec": -99.0,
      "GWNOA": 230,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 230,
      "Region": 1,
      "Version": null,
      "Array": ["Spain", "ETA"],
      "TXT": "SpainETAnannan"
    }, {
      "ID": 147,
      "Location": "Spain",
      "SideA": "Spain",
      "SideA2nd": null,
      "SideB": "ETA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Basque",
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": -49507200000,
      "StartPrec": 1,
      "StartDate2": 536457600000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 567907200000,
      "EpEndPrec": -99.0,
      "GWNOA": 230,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 230,
      "Region": 1,
      "Version": null,
      "Array": ["Spain", "ETA"],
      "TXT": "SpainETAnannan"
    }, {
      "ID": 147,
      "Location": "Spain",
      "SideA": "Spain",
      "SideA2nd": null,
      "SideB": "ETA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Basque",
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": -49507200000,
      "StartPrec": 1,
      "StartDate2": 662688000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 230,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 230,
      "Region": 1,
      "Version": null,
      "Array": ["Spain", "ETA"],
      "TXT": "SpainETAnannan"
    }, {
      "ID": 147,
      "Location": "Spain",
      "SideA": "Spain",
      "SideA2nd": null,
      "SideB": "ETA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Basque",
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": -49507200000,
      "StartPrec": 1,
      "StartDate2": 662688000000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 725760000000,
      "EpEndPrec": -99.0,
      "GWNOA": 230,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 230,
      "Region": 1,
      "Version": null,
      "Array": ["Spain", "ETA"],
      "TXT": "SpainETAnannan"
    }, {
      "ID": 148,
      "Location": "Tunisia",
      "SideA": "Tunisia",
      "SideA2nd": null,
      "SideB": "R\xE9sistance Arm\xE9e Tunisienne",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1980,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 317779200000,
      "StartPrec": 1,
      "StartDate2": 317779200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 317779200000,
      "EpEndPrec": -99.0,
      "GWNOA": 616,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 616,
      "Region": 4,
      "Version": null,
      "Array": ["Tunisia", "R\xE9sistance Arm\xE9e Tunisienne"],
      "TXT": "TunisiaR\xE9sistance Arm\xE9e Tunisiennenannan"
    }, {
      "ID": 149,
      "Location": "Gambia",
      "SideA": "Gambia",
      "SideA2nd": "Senegal",
      "SideB": "NRC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1981,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 365299200000,
      "StartPrec": 1,
      "StartDate2": 365299200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 365817600000,
      "EpEndPrec": -99.0,
      "GWNOA": 420,
      "GWNOA2nd": 433,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 420,
      "Region": 4,
      "Version": null,
      "Array": ["Gambia", "NRC", "Senegal"],
      "TXT": "GambiaNRCSenegalnan"
    }, {
      "ID": 150,
      "Location": "South Africa",
      "SideA": "South Africa",
      "SideA2nd": null,
      "SideB": "ANC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1981,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 189302400000,
      "StartPrec": 6,
      "StartDate2": 347155200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 560,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 560,
      "Region": 4,
      "Version": null,
      "Array": ["South Africa", "ANC"],
      "TXT": "South AfricaANCnannan"
    }, {
      "ID": 150,
      "Location": "South Africa",
      "SideA": "South Africa",
      "SideA2nd": null,
      "SideB": "ANC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1982,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 189302400000,
      "StartPrec": 6,
      "StartDate2": 347155200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 560,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 560,
      "Region": 4,
      "Version": null,
      "Array": ["South Africa", "ANC"],
      "TXT": "South AfricaANCnannan"
    }, {
      "ID": 150,
      "Location": "South Africa",
      "SideA": "South Africa",
      "SideA2nd": null,
      "SideB": "ANC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1983,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 189302400000,
      "StartPrec": 6,
      "StartDate2": 347155200000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 441676800000,
      "EpEndPrec": -99.0,
      "GWNOA": 560,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 560,
      "Region": 4,
      "Version": null,
      "Array": ["South Africa", "ANC"],
      "TXT": "South AfricaANCnannan"
    }, {
      "ID": 150,
      "Location": "South Africa",
      "SideA": "South Africa",
      "SideA2nd": null,
      "SideB": "ANC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1985,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 189302400000,
      "StartPrec": 6,
      "StartDate2": 488592000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 560,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 560,
      "Region": 4,
      "Version": null,
      "Array": ["South Africa", "ANC"],
      "TXT": "South AfricaANCnannan"
    }, {
      "ID": 150,
      "Location": "South Africa",
      "SideA": "South Africa",
      "SideA2nd": null,
      "SideB": "ANC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 189302400000,
      "StartPrec": 6,
      "StartDate2": 488592000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 560,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 560,
      "Region": 4,
      "Version": null,
      "Array": ["South Africa", "ANC"],
      "TXT": "South AfricaANCnannan"
    }, {
      "ID": 150,
      "Location": "South Africa",
      "SideA": "South Africa",
      "SideA2nd": null,
      "SideB": "ANC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 189302400000,
      "StartPrec": 6,
      "StartDate2": 488592000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 560,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 560,
      "Region": 4,
      "Version": null,
      "Array": ["South Africa", "ANC"],
      "TXT": "South AfricaANCnannan"
    }, {
      "ID": 150,
      "Location": "South Africa",
      "SideA": "South Africa",
      "SideA2nd": null,
      "SideB": "ANC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1988,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 189302400000,
      "StartPrec": 6,
      "StartDate2": 488592000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 599529600000,
      "EpEndPrec": -99.0,
      "GWNOA": 560,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 560,
      "Region": 4,
      "Version": null,
      "Array": ["South Africa", "ANC"],
      "TXT": "South AfricaANCnannan"
    }, {
      "ID": 151,
      "Location": "Argentina, United Kingdom",
      "SideA": "Argentina",
      "SideA2nd": null,
      "SideB": "United Kingdom",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Malvinas\/Falkland Islands",
      "YEAR": 1982,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 386553600000,
      "StartPrec": 1,
      "StartDate2": 386553600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 392860800000,
      "EpEndPrec": -99.0,
      "GWNOA": 160,
      "GWNOA2nd": null,
      "GWNOB": 200,
      "GWNOB2nd": null,
      "GWNOLoc": "160, 200",
      "Region": 1,
      "Version": null,
      "Array": ["Argentina", "United Kingdom"],
      "TXT": "ArgentinaUnited Kingdomnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1982,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 394329600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1983,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 394329600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1984,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 394329600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1985,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 394329600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 394329600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 394329600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1988,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 394329600000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 599529600000,
      "EpEndPrec": -99.0,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 694224000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 694224000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "UNLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 694224000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "UNLF"],
      "TXT": "IndiaUNLFnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 694224000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 694224000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "KNF, UNLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 694224000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "KNF, UNLF"],
      "TXT": "IndiaKNF, UNLFnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 694224000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "UNLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 694224000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "UNLF"],
      "TXT": "IndiaUNLFnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 694224000000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 978220800000,
      "EpEndPrec": -99.0,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA"],
      "TXT": "IndiaPLAnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "UNLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 1041379200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "UNLF"],
      "TXT": "IndiaUNLFnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA, UNLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 1041379200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA, UNLF"],
      "TXT": "IndiaPLA, UNLFnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "UNLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 1041379200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "UNLF"],
      "TXT": "IndiaUNLFnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PLA, UNLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 1041379200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PLA, UNLF"],
      "TXT": "IndiaPLA, UNLFnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "UNLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 1041379200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "UNLF"],
      "TXT": "IndiaUNLFnannan"
    }, {
      "ID": 152,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "KCP, PREPAK ",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Manipur",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 293932800000,
      "StartPrec": 1,
      "StartDate2": 1041379200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "KCP, PREPAK "],
      "TXT": "IndiaKCP, PREPAK nannan"
    }, {
      "ID": 153,
      "Location": "Kenya",
      "SideA": "Kenya",
      "SideA2nd": null,
      "SideB": "Military faction (forces of Hezekiah Ochuka)",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1982,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 397008000000,
      "StartPrec": 1,
      "StartDate2": 397008000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 398736000000,
      "EpEndPrec": -99.0,
      "GWNOA": 501,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 501,
      "Region": 4,
      "Version": null,
      "Array": ["Kenya", "Military faction (forces of Hezekiah Ochuka)"],
      "TXT": "KenyaMilitary faction (forces of Hezekiah Ochuka)nannan"
    }, {
      "ID": 154,
      "Location": "Chad, Nigeria",
      "SideA": "Chad",
      "SideA2nd": null,
      "SideB": "Nigeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Lake Chad",
      "YEAR": 1983,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 418003200000,
      "StartPrec": 3,
      "StartDate2": 418003200000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 436492800000,
      "EpEndPrec": -99.0,
      "GWNOA": 483,
      "GWNOA2nd": null,
      "GWNOB": 475,
      "GWNOB2nd": null,
      "GWNOLoc": "483, 475",
      "Region": 4,
      "Version": null,
      "Array": ["Chad", "Nigeria"],
      "TXT": "ChadNigerianannan"
    }, {
      "ID": 155,
      "Location": "Grenada, United States of America",
      "SideA": "Grenada",
      "SideA2nd": null,
      "SideB": "United States of America",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1983,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 435888000000,
      "StartPrec": 1,
      "StartDate2": 435888000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 436060800000,
      "EpEndPrec": -99.0,
      "GWNOA": 55,
      "GWNOA2nd": null,
      "GWNOB": 2,
      "GWNOB2nd": null,
      "GWNOLoc": "55, 2",
      "Region": 5,
      "Version": null,
      "Array": ["Grenada", "United States of America"],
      "TXT": "GrenadaUnited States of Americanannan"
    }, {
      "ID": 156,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Sikh insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Punjab\/Khalistan",
      "YEAR": 1983,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 369792000000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Sikh insurgents"],
      "TXT": "IndiaSikh insurgentsnannan"
    }, {
      "ID": 156,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Sikh insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Punjab\/Khalistan",
      "YEAR": 1984,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 369792000000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Sikh insurgents"],
      "TXT": "IndiaSikh insurgentsnannan"
    }, {
      "ID": 156,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Sikh insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Punjab\/Khalistan",
      "YEAR": 1985,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 369792000000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Sikh insurgents"],
      "TXT": "IndiaSikh insurgentsnannan"
    }, {
      "ID": 156,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Sikh insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Punjab\/Khalistan",
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 369792000000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Sikh insurgents"],
      "TXT": "IndiaSikh insurgentsnannan"
    }, {
      "ID": 156,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Sikh insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Punjab\/Khalistan",
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 369792000000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Sikh insurgents"],
      "TXT": "IndiaSikh insurgentsnannan"
    }, {
      "ID": 156,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Sikh insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Punjab\/Khalistan",
      "YEAR": 1988,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 369792000000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Sikh insurgents"],
      "TXT": "IndiaSikh insurgentsnannan"
    }, {
      "ID": 156,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Sikh insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Punjab\/Khalistan",
      "YEAR": 1989,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 369792000000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Sikh insurgents"],
      "TXT": "IndiaSikh insurgentsnannan"
    }, {
      "ID": 156,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Sikh insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Punjab\/Khalistan",
      "YEAR": 1990,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 369792000000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Sikh insurgents"],
      "TXT": "IndiaSikh insurgentsnannan"
    }, {
      "ID": 156,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Sikh insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Punjab\/Khalistan",
      "YEAR": 1991,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 369792000000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Sikh insurgents"],
      "TXT": "IndiaSikh insurgentsnannan"
    }, {
      "ID": 156,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Sikh insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Punjab\/Khalistan",
      "YEAR": 1992,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 369792000000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Sikh insurgents"],
      "TXT": "IndiaSikh insurgentsnannan"
    }, {
      "ID": 156,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Sikh insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Punjab\/Khalistan",
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 369792000000,
      "StartPrec": 1,
      "StartDate2": 410227200000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 757296000000,
      "EpEndPrec": -99.0,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Sikh insurgents"],
      "TXT": "IndiaSikh insurgentsnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE, TELO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1984,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE, TELO"],
      "TXT": "Sri Lanka (Ceylon)LTTE, TELOnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "EPRLF, LTTE, TELO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1985,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "EPRLF, LTTE, TELO"],
      "TXT": "Sri Lanka (Ceylon)EPRLF, LTTE, TELOnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1987,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1988,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1990,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1991,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1992,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1993,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1994,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1995,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1996,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1997,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1998,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 1999,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 2000,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 2001,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 463622400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1009152000000,
      "EpEndPrec": -99.0,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 1056326400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1072828800000,
      "EpEndPrec": -99.0,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 1133481600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 2006,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 1133481600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 2007,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 1133481600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 157,
      "Location": "Sri Lanka (Ceylon)",
      "SideA": "Sri Lanka (Ceylon)",
      "SideA2nd": null,
      "SideB": "LTTE",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eelam",
      "YEAR": 2008,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 175651200000,
      "StartPrec": 1,
      "StartDate2": 1133481600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 780,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 780,
      "Region": 3,
      "Version": null,
      "Array": ["Sri Lanka (Ceylon)", "LTTE"],
      "TXT": "Sri Lanka (Ceylon)LTTEnannan"
    }, {
      "ID": 158,
      "Location": "Cameroon",
      "SideA": "Cameroon",
      "SideA2nd": "France",
      "SideB": "UPC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1960,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": -315619200000,
      "StartPrec": 4,
      "StartDate2": -315619200000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 471,
      "GWNOA2nd": 220,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 471,
      "Region": 4,
      "Version": null,
      "Array": ["Cameroon", "UPC", "France"],
      "TXT": "CameroonUPCFrancenan"
    }, {
      "ID": 158,
      "Location": "Cameroon",
      "SideA": "Cameroon",
      "SideA2nd": null,
      "SideB": "UPC",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1961,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": -315619200000,
      "StartPrec": 4,
      "StartDate2": -315619200000,
      "Startprec2": 4,
      "EpEnd": 1,
      "EpEndDate": -252547200000,
      "EpEndPrec": -99.0,
      "GWNOA": 471,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 471,
      "Region": 4,
      "Version": null,
      "Array": ["Cameroon", "UPC"],
      "TXT": "CameroonUPCnannan"
    }, {
      "ID": 158,
      "Location": "Cameroon",
      "SideA": "Cameroon",
      "SideA2nd": null,
      "SideB": "Military faction (forces of Ibrahim Saleh)",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1984,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": -315619200000,
      "StartPrec": 4,
      "StartDate2": 450057600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 450316800000,
      "EpEndPrec": -99.0,
      "GWNOA": 471,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 471,
      "Region": 4,
      "Version": null,
      "Array": ["Cameroon", "Military faction (forces of Ibrahim Saleh)"],
      "TXT": "CameroonMilitary faction (forces of Ibrahim Saleh)nannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1984,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1985,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1988,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1992,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1993,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1994,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1995,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1996,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1997,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1998,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 1999,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 2001,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 159,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "PKK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kurdistan",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 420595200000,
      "StartPrec": 1,
      "StartDate2": 461376000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "PKK"],
      "TXT": "Turkey\/Ottoman EmpirePKKnannan"
    }, {
      "ID": 160,
      "Location": "Burkina Faso, Mali",
      "SideA": "Burkina Faso",
      "SideA2nd": null,
      "SideB": "Mali",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Agacher Strip",
      "YEAR": 1985,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 504316800000,
      "StartPrec": 1,
      "StartDate2": 504316800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 504748800000,
      "EpEndPrec": -99.0,
      "GWNOA": 439,
      "GWNOA2nd": null,
      "GWNOB": 432,
      "GWNOB2nd": null,
      "GWNOLoc": "439, 432",
      "Region": 4,
      "Version": null,
      "Array": ["Burkina Faso", "Mali"],
      "TXT": "Burkina FasoMalinannan"
    }, {
      "ID": 161,
      "Location": "Laos, Thailand",
      "SideA": "Laos",
      "SideA2nd": null,
      "SideB": "Thailand",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Common Border",
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 452217600000,
      "StartPrec": 3,
      "StartDate2": 504921600000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 812,
      "GWNOA2nd": null,
      "GWNOB": 800,
      "GWNOB2nd": null,
      "GWNOLoc": "812, 800",
      "Region": 3,
      "Version": null,
      "Array": ["Laos", "Thailand"],
      "TXT": "LaosThailandnannan"
    }, {
      "ID": 161,
      "Location": "Laos, Thailand",
      "SideA": "Laos",
      "SideA2nd": null,
      "SideB": "Thailand",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Common Border",
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 452217600000,
      "StartPrec": 3,
      "StartDate2": 504921600000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 812,
      "GWNOA2nd": null,
      "GWNOB": 800,
      "GWNOB2nd": null,
      "GWNOLoc": "812, 800",
      "Region": 3,
      "Version": null,
      "Array": ["Laos", "Thailand"],
      "TXT": "LaosThailandnannan"
    }, {
      "ID": 161,
      "Location": "Laos, Thailand",
      "SideA": "Laos",
      "SideA2nd": null,
      "SideB": "Thailand",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Common Border",
      "YEAR": 1988,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 452217600000,
      "StartPrec": 3,
      "StartDate2": 504921600000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 572054400000,
      "EpEndPrec": -99.0,
      "GWNOA": 812,
      "GWNOA2nd": null,
      "GWNOB": 800,
      "GWNOB2nd": null,
      "GWNOLoc": "812, 800",
      "Region": 3,
      "Version": null,
      "Array": ["Laos", "Thailand"],
      "TXT": "LaosThailandnannan"
    }, {
      "ID": 162,
      "Location": "Surinam",
      "SideA": "Surinam",
      "SideA2nd": null,
      "SideB": "SLA\/Jungle Commando",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 520560000000,
      "StartPrec": 4,
      "StartDate2": 520560000000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 115,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 115,
      "Region": 5,
      "Version": null,
      "Array": ["Surinam", "SLA\/Jungle Commando"],
      "TXT": "SurinamSLA\/Jungle Commandonannan"
    }, {
      "ID": 162,
      "Location": "Surinam",
      "SideA": "Surinam",
      "SideA2nd": null,
      "SideB": "SLA\/Jungle Commando",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 520560000000,
      "StartPrec": 4,
      "StartDate2": 520560000000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 115,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 115,
      "Region": 5,
      "Version": null,
      "Array": ["Surinam", "SLA\/Jungle Commando"],
      "TXT": "SurinamSLA\/Jungle Commandonannan"
    }, {
      "ID": 162,
      "Location": "Surinam",
      "SideA": "Surinam",
      "SideA2nd": null,
      "SideB": "SLA\/Jungle Commando",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1988,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 520560000000,
      "StartPrec": 4,
      "StartDate2": 520560000000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 599529600000,
      "EpEndPrec": -99.0,
      "GWNOA": 115,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 115,
      "Region": 5,
      "Version": null,
      "Array": ["Surinam", "SLA\/Jungle Commando"],
      "TXT": "SurinamSLA\/Jungle Commandonannan"
    }, {
      "ID": 163,
      "Location": "Togo",
      "SideA": "Togo",
      "SideA2nd": null,
      "SideB": "MTD",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1986,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 527817600000,
      "StartPrec": 2,
      "StartDate2": 527817600000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 527904000000,
      "EpEndPrec": -99.0,
      "GWNOA": 461,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 461,
      "Region": 4,
      "Version": null,
      "Array": ["Togo", "MTD"],
      "TXT": "TogoMTDnannan"
    }, {
      "ID": 163,
      "Location": "Togo",
      "SideA": "Togo",
      "SideA2nd": null,
      "SideB": "Military faction (forces loyal to Gnassingbe Eyadema)",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 527817600000,
      "StartPrec": 2,
      "StartDate2": 691286400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 691804800000,
      "EpEndPrec": -99.0,
      "GWNOA": 461,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 461,
      "Region": 4,
      "Version": null,
      "Array": ["Togo", "Military faction (forces loyal to Gnassingbe Eyadema)"],
      "TXT": "TogoMilitary faction (forces loyal to Gnassingbe Eyadema)nannan"
    }, {
      "ID": 164,
      "Location": "South Yemen",
      "SideA": "South Yemen",
      "SideA2nd": null,
      "SideB": "Yemenite Socialist Party - Abdul Fattah Ismail faction",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1986,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 505958400000,
      "StartPrec": 1,
      "StartDate2": 505958400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 506822400000,
      "EpEndPrec": -99.0,
      "GWNOA": 680,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 680,
      "Region": 2,
      "Version": null,
      "Array": ["South Yemen", "Yemenite Socialist Party - Abdul Fattah Ismail faction"],
      "TXT": "South YemenYemenite Socialist Party - Abdul Fattah Ismail factionnannan"
    }, {
      "ID": 165,
      "Location": "Burkina Faso",
      "SideA": "Burkina Faso",
      "SideA2nd": null,
      "SideB": "Popular Front",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 561254400000,
      "StartPrec": 1,
      "StartDate2": 561254400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 561254400000,
      "EpEndPrec": -99.0,
      "GWNOA": 439,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 439,
      "Region": 4,
      "Version": null,
      "Array": ["Burkina Faso", "Popular Front"],
      "TXT": "Burkina FasoPopular Frontnannan"
    }, {
      "ID": 166,
      "Location": "Chad, Libya",
      "SideA": "Chad",
      "SideA2nd": null,
      "SideB": "Libya",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Aozou strip",
      "YEAR": 1987,
      "Int": 2,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 555379200000,
      "StartPrec": 1,
      "StartDate2": 555379200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 567907200000,
      "EpEndPrec": -99.0,
      "GWNOA": 483,
      "GWNOA2nd": null,
      "GWNOB": 620,
      "GWNOB2nd": null,
      "GWNOLoc": "483, 620",
      "Region": 4,
      "Version": null,
      "Array": ["Chad", "Libya"],
      "TXT": "ChadLibyanannan"
    }, {
      "ID": 167,
      "Location": "Comoros",
      "SideA": "Comoros",
      "SideA2nd": null,
      "SideB": "Presidential guard",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 628128000000,
      "StartPrec": 1,
      "StartDate2": 628300800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 628300800000,
      "EpEndPrec": -99.0,
      "GWNOA": 581,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 581,
      "Region": 4,
      "Version": null,
      "Array": ["Comoros", "Presidential guard"],
      "TXT": "ComorosPresidential guardnannan"
    }, {
      "ID": 168,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "ALF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Afar",
      "YEAR": 1975,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 170812800000,
      "StartPrec": 3,
      "StartDate2": 170812800000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "ALF"],
      "TXT": "EthiopiaALFnannan"
    }, {
      "ID": 168,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "ALF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Afar",
      "YEAR": 1976,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 170812800000,
      "StartPrec": 3,
      "StartDate2": 170812800000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 220838400000,
      "EpEndPrec": -99.0,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "ALF"],
      "TXT": "EthiopiaALFnannan"
    }, {
      "ID": 168,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "ALF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Afar",
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 170812800000,
      "StartPrec": 3,
      "StartDate2": 599616000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "ALF"],
      "TXT": "EthiopiaALFnannan"
    }, {
      "ID": 168,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "ALF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Afar",
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 170812800000,
      "StartPrec": 3,
      "StartDate2": 599616000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "ALF"],
      "TXT": "EthiopiaALFnannan"
    }, {
      "ID": 168,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "ALF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Afar",
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 170812800000,
      "StartPrec": 3,
      "StartDate2": 599616000000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 675388800000,
      "EpEndPrec": -99.0,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "ALF"],
      "TXT": "EthiopiaALFnannan"
    }, {
      "ID": 168,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "ARDUF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Afar",
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 170812800000,
      "StartPrec": 3,
      "StartDate2": 833587200000,
      "Startprec2": 4,
      "EpEnd": 1,
      "EpEndDate": 851990400000,
      "EpEndPrec": -99.0,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "ARDUF"],
      "TXT": "EthiopiaARDUFnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 1990,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 1991,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 1992,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 1993,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 1999,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 2000,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 2001,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 2002,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 2003,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 2004,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 2005,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 169,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "Kashmir Insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kashmir",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 444873600000,
      "StartPrec": 1,
      "StartDate2": 629337600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "Kashmir Insurgents"],
      "TXT": "IndiaKashmir Insurgentsnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 643939200000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 643939200000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 694137600000,
      "EpEndPrec": -99.0,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 2001,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 170,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ULFA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Assam",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 410227200000,
      "StartPrec": 5,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ULFA"],
      "TXT": "IndiaULFAnannan"
    }, {
      "ID": 171,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "GAM",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Aceh",
      "YEAR": 1990,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 609984000000,
      "StartPrec": 2,
      "StartDate2": 652752000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "GAM"],
      "TXT": "IndonesiaGAMnannan"
    }, {
      "ID": 171,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "GAM",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Aceh",
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 609984000000,
      "StartPrec": 2,
      "StartDate2": 652752000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 680918400000,
      "EpEndPrec": -99.0,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "GAM"],
      "TXT": "IndonesiaGAMnannan"
    }, {
      "ID": 171,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "GAM",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Aceh",
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 609984000000,
      "StartPrec": 2,
      "StartDate2": 929750400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "GAM"],
      "TXT": "IndonesiaGAMnannan"
    }, {
      "ID": 171,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "GAM",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Aceh",
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 609984000000,
      "StartPrec": 2,
      "StartDate2": 929750400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "GAM"],
      "TXT": "IndonesiaGAMnannan"
    }, {
      "ID": 171,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "GAM",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Aceh",
      "YEAR": 2001,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 609984000000,
      "StartPrec": 2,
      "StartDate2": 929750400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "GAM"],
      "TXT": "IndonesiaGAMnannan"
    }, {
      "ID": 171,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "GAM",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Aceh",
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 609984000000,
      "StartPrec": 2,
      "StartDate2": 929750400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "GAM"],
      "TXT": "IndonesiaGAMnannan"
    }, {
      "ID": 171,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "GAM",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Aceh",
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 609984000000,
      "StartPrec": 2,
      "StartDate2": 929750400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "GAM"],
      "TXT": "IndonesiaGAMnannan"
    }, {
      "ID": 171,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "GAM",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Aceh",
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 609984000000,
      "StartPrec": 2,
      "StartDate2": 929750400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "GAM"],
      "TXT": "IndonesiaGAMnannan"
    }, {
      "ID": 171,
      "Location": "Indonesia",
      "SideA": "Indonesia",
      "SideA2nd": null,
      "SideB": "GAM",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Aceh",
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 609984000000,
      "StartPrec": 2,
      "StartDate2": 929750400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1129075200000,
      "EpEndPrec": -99.0,
      "GWNOA": 850,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 850,
      "Region": 3,
      "Version": null,
      "Array": ["Indonesia", "GAM"],
      "TXT": "IndonesiaGAMnannan"
    }, {
      "ID": 172,
      "Location": "Panama",
      "SideA": "Panama",
      "SideA2nd": null,
      "SideB": "Military faction (forces of Mois\xE9s Giroldi) ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 623376000000,
      "StartPrec": 1,
      "StartDate2": 623376000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 623376000000,
      "EpEndPrec": -99.0,
      "GWNOA": 95,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 95,
      "Region": 5,
      "Version": null,
      "Array": ["Panama", "Military faction (forces of Mois\xE9s Giroldi) "],
      "TXT": "PanamaMilitary faction (forces of Mois\xE9s Giroldi) nannan"
    }, {
      "ID": 173,
      "Location": "Panama, United States of America",
      "SideA": "Panama",
      "SideA2nd": null,
      "SideB": "United States of America",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 629769600000,
      "StartPrec": 1,
      "StartDate2": 630115200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 631065600000,
      "EpEndPrec": -99.0,
      "GWNOA": 95,
      "GWNOA2nd": null,
      "GWNOB": 2,
      "GWNOB2nd": null,
      "GWNOLoc": "95, 2",
      "Region": 5,
      "Version": null,
      "Array": ["Panama", "United States of America"],
      "TXT": "PanamaUnited States of Americanannan"
    }, {
      "ID": 174,
      "Location": "Papua New Guinea",
      "SideA": "Papua New Guinea",
      "SideA2nd": null,
      "SideB": "BRA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bougainville",
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 625536000000,
      "StartPrec": 1,
      "StartDate2": 625536000000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 910,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 910,
      "Region": 3,
      "Version": null,
      "Array": ["Papua New Guinea", "BRA"],
      "TXT": "Papua New GuineaBRAnannan"
    }, {
      "ID": 174,
      "Location": "Papua New Guinea",
      "SideA": "Papua New Guinea",
      "SideA2nd": null,
      "SideB": "BRA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bougainville",
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 625536000000,
      "StartPrec": 1,
      "StartDate2": 625536000000,
      "Startprec2": 4,
      "EpEnd": 1,
      "EpEndDate": 662601600000,
      "EpEndPrec": -99.0,
      "GWNOA": 910,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 910,
      "Region": 3,
      "Version": null,
      "Array": ["Papua New Guinea", "BRA"],
      "TXT": "Papua New GuineaBRAnannan"
    }, {
      "ID": 174,
      "Location": "Papua New Guinea",
      "SideA": "Papua New Guinea",
      "SideA2nd": null,
      "SideB": "BRA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bougainville",
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 625536000000,
      "StartPrec": 1,
      "StartDate2": 712713600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 910,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 910,
      "Region": 3,
      "Version": null,
      "Array": ["Papua New Guinea", "BRA"],
      "TXT": "Papua New GuineaBRAnannan"
    }, {
      "ID": 174,
      "Location": "Papua New Guinea",
      "SideA": "Papua New Guinea",
      "SideA2nd": null,
      "SideB": "BRA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bougainville",
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 625536000000,
      "StartPrec": 1,
      "StartDate2": 712713600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 910,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 910,
      "Region": 3,
      "Version": null,
      "Array": ["Papua New Guinea", "BRA"],
      "TXT": "Papua New GuineaBRAnannan"
    }, {
      "ID": 174,
      "Location": "Papua New Guinea",
      "SideA": "Papua New Guinea",
      "SideA2nd": null,
      "SideB": "BRA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bougainville",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 625536000000,
      "StartPrec": 1,
      "StartDate2": 712713600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 910,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 910,
      "Region": 3,
      "Version": null,
      "Array": ["Papua New Guinea", "BRA"],
      "TXT": "Papua New GuineaBRAnannan"
    }, {
      "ID": 174,
      "Location": "Papua New Guinea",
      "SideA": "Papua New Guinea",
      "SideA2nd": null,
      "SideB": "BRA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bougainville",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 625536000000,
      "StartPrec": 1,
      "StartDate2": 712713600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 910,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 910,
      "Region": 3,
      "Version": null,
      "Array": ["Papua New Guinea", "BRA"],
      "TXT": "Papua New GuineaBRAnannan"
    }, {
      "ID": 174,
      "Location": "Papua New Guinea",
      "SideA": "Papua New Guinea",
      "SideA2nd": null,
      "SideB": "BRA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bougainville",
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 625536000000,
      "StartPrec": 1,
      "StartDate2": 712713600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 851990400000,
      "EpEndPrec": -99.0,
      "GWNOA": 910,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 910,
      "Region": 3,
      "Version": null,
      "Array": ["Papua New Guinea", "BRA"],
      "TXT": "Papua New GuineaBRAnannan"
    }, {
      "ID": 175,
      "Location": "Rumania",
      "SideA": "Rumania",
      "SideA2nd": null,
      "SideB": "NSF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 630288000000,
      "StartPrec": 2,
      "StartDate2": 630288000000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 630374400000,
      "EpEndPrec": -99.0,
      "GWNOA": 360,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 360,
      "Region": 1,
      "Version": null,
      "Array": ["Rumania", "NSF"],
      "TXT": "RumaniaNSFnannan"
    }, {
      "ID": 176,
      "Location": "Iraq, Kuwait",
      "SideA": "Iraq",
      "SideA2nd": null,
      "SideB": "Kuwait",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kuwait",
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 649555200000,
      "StartPrec": 1,
      "StartDate2": 649555200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 645,
      "GWNOA2nd": null,
      "GWNOB": 690,
      "GWNOB2nd": null,
      "GWNOLoc": "645, 690",
      "Region": 2,
      "Version": null,
      "Array": ["Iraq", "Kuwait"],
      "TXT": "IraqKuwaitnannan"
    }, {
      "ID": 176,
      "Location": "Iraq, Kuwait",
      "SideA": "Iraq",
      "SideA2nd": null,
      "SideB": "Kuwait",
      "SideB2nd": "Argentina, Australia, Bahrain, Bangladesh, Belgium, Canada, Czechoslovakia, Denmark, Egypt, France, Greece, Honduras, Italy\/Sardinia, Morocco, Netherlands, Niger, Norway, Oman, Pakistan, Portugal, Qatar, Saudi Arabia, Senegal, Spain, Syria, UAE, UK, USA",
      "Incomp": 1,
      "Terr": "Kuwait",
      "YEAR": 1991,
      "Int": 2,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 649555200000,
      "StartPrec": 1,
      "StartDate2": 649555200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 667872000000,
      "EpEndPrec": -99.0,
      "GWNOA": 645,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": "160, 900, 692, 771, 211, 20, 315, 390, 651, 220, 350, 91, 325, 600, 210, 436, 385, 698, 770, 235, 694, 670, 433, 230, 652, 200",
      "GWNOLoc": "645, 690",
      "Region": 2,
      "Version": null,
      "Array": ["Iraq", "Kuwait", "Argentina, Australia, Bahrain, Bangladesh, Belgium, Canada, Czechoslovakia, Denmark, Egypt, France, Greece, Honduras, Italy\/Sardinia, Morocco, Netherlands, Niger, Norway, Oman, Pakistan, Portugal, Qatar, Saudi Arabia, Senegal, Spain, Syria, UAE, UK, USA"],
      "TXT": "IraqKuwaitnanArgentina, Australia, Bahrain, Bangladesh, Belgium, Canada, Czechoslovakia, Denmark, Egypt, France, Greece, Honduras, Italy\/Sardinia, Morocco, Netherlands, Niger, Norway, Oman, Pakistan, Portugal, Qatar, Saudi Arabia, Senegal, Spain, Syria, UAE, UK, USA"
    }, {
      "ID": 177,
      "Location": "Mali",
      "SideA": "Mali",
      "SideA2nd": null,
      "SideB": "MPA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Azawad",
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 646531200000,
      "StartPrec": 1,
      "StartDate2": 648518400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 662601600000,
      "EpEndPrec": -99.0,
      "GWNOA": 432,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 432,
      "Region": 4,
      "Version": null,
      "Array": ["Mali", "MPA"],
      "TXT": "MaliMPAnannan"
    }, {
      "ID": 177,
      "Location": "Mali",
      "SideA": "Mali",
      "SideA2nd": null,
      "SideB": "FIAA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Azawad",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 646531200000,
      "StartPrec": 1,
      "StartDate2": 781228800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 788832000000,
      "EpEndPrec": -99.0,
      "GWNOA": 432,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 432,
      "Region": 4,
      "Version": null,
      "Array": ["Mali", "FIAA"],
      "TXT": "MaliFIAAnannan"
    }, {
      "ID": 177,
      "Location": "Mali",
      "SideA": "Mali",
      "SideA2nd": null,
      "SideB": "ATNMC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Azawad",
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 646531200000,
      "StartPrec": 1,
      "StartDate2": 1188518400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 432,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 432,
      "Region": 4,
      "Version": null,
      "Array": ["Mali", "ATNMC"],
      "TXT": "MaliATNMCnannan"
    }, {
      "ID": 177,
      "Location": "Mali",
      "SideA": "Mali",
      "SideA2nd": null,
      "SideB": "ATNMC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Azawad",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 646531200000,
      "StartPrec": 1,
      "StartDate2": 1188518400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 432,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 432,
      "Region": 4,
      "Version": null,
      "Array": ["Mali", "ATNMC"],
      "TXT": "MaliATNMCnannan"
    }, {
      "ID": 178,
      "Location": "Niger",
      "SideA": "Niger",
      "SideA2nd": null,
      "SideB": "CRA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Air and Azawad",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 757209600000,
      "StartPrec": 1,
      "StartDate2": 769046400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 781660800000,
      "EpEndPrec": -99.0,
      "GWNOA": 436,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 436,
      "Region": 4,
      "Version": null,
      "Array": ["Niger", "CRA"],
      "TXT": "NigerCRAnannan"
    }, {
      "ID": 179,
      "Location": "Rwanda",
      "SideA": "Rwanda",
      "SideA2nd": "Democratic Republic of Congo (Zaire) ",
      "SideB": "FPR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 654739200000,
      "StartPrec": 1,
      "StartDate2": 654739200000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 517,
      "GWNOA2nd": 490,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 517,
      "Region": 4,
      "Version": null,
      "Array": ["Rwanda", "FPR", "Democratic Republic of Congo (Zaire) "],
      "TXT": "RwandaFPRDemocratic Republic of Congo (Zaire) nan"
    }, {
      "ID": 179,
      "Location": "Rwanda",
      "SideA": "Rwanda",
      "SideA2nd": null,
      "SideB": "FPR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 654739200000,
      "StartPrec": 1,
      "StartDate2": 654739200000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 517,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 517,
      "Region": 4,
      "Version": null,
      "Array": ["Rwanda", "FPR"],
      "TXT": "RwandaFPRnannan"
    }, {
      "ID": 179,
      "Location": "Rwanda",
      "SideA": "Rwanda",
      "SideA2nd": null,
      "SideB": "FPR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 654739200000,
      "StartPrec": 1,
      "StartDate2": 654739200000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 517,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 517,
      "Region": 4,
      "Version": null,
      "Array": ["Rwanda", "FPR"],
      "TXT": "RwandaFPRnannan"
    }, {
      "ID": 179,
      "Location": "Rwanda",
      "SideA": "Rwanda",
      "SideA2nd": null,
      "SideB": "FPR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 654739200000,
      "StartPrec": 1,
      "StartDate2": 654739200000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 517,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 517,
      "Region": 4,
      "Version": null,
      "Array": ["Rwanda", "FPR"],
      "TXT": "RwandaFPRnannan"
    }, {
      "ID": 179,
      "Location": "Rwanda",
      "SideA": "Rwanda",
      "SideA2nd": null,
      "SideB": "FPR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 654739200000,
      "StartPrec": 1,
      "StartDate2": 654739200000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 774576000000,
      "EpEndPrec": -99.0,
      "GWNOA": 517,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 517,
      "Region": 4,
      "Version": null,
      "Array": ["Rwanda", "FPR"],
      "TXT": "RwandaFPRnannan"
    }, {
      "ID": 179,
      "Location": "Rwanda",
      "SideA": "Rwanda",
      "SideA2nd": null,
      "SideB": "FDLR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 654739200000,
      "StartPrec": 1,
      "StartDate2": 864518400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 517,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 517,
      "Region": 4,
      "Version": null,
      "Array": ["Rwanda", "FDLR"],
      "TXT": "RwandaFDLRnannan"
    }, {
      "ID": 179,
      "Location": "Rwanda",
      "SideA": "Rwanda",
      "SideA2nd": null,
      "SideB": "FDLR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1998,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 654739200000,
      "StartPrec": 1,
      "StartDate2": 864518400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 517,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 517,
      "Region": 4,
      "Version": null,
      "Array": ["Rwanda", "FDLR"],
      "TXT": "RwandaFDLRnannan"
    }, {
      "ID": 179,
      "Location": "Rwanda",
      "SideA": "Rwanda",
      "SideA2nd": null,
      "SideB": "FDLR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 654739200000,
      "StartPrec": 1,
      "StartDate2": 864518400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 517,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 517,
      "Region": 4,
      "Version": null,
      "Array": ["Rwanda", "FDLR"],
      "TXT": "RwandaFDLRnannan"
    }, {
      "ID": 179,
      "Location": "Rwanda",
      "SideA": "Rwanda",
      "SideA2nd": null,
      "SideB": "FDLR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 654739200000,
      "StartPrec": 1,
      "StartDate2": 864518400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 517,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 517,
      "Region": 4,
      "Version": null,
      "Array": ["Rwanda", "FDLR"],
      "TXT": "RwandaFDLRnannan"
    }, {
      "ID": 179,
      "Location": "Rwanda",
      "SideA": "Rwanda",
      "SideA2nd": null,
      "SideB": "FDLR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2001,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 654739200000,
      "StartPrec": 1,
      "StartDate2": 864518400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 517,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 517,
      "Region": 4,
      "Version": null,
      "Array": ["Rwanda", "FDLR"],
      "TXT": "RwandaFDLRnannan"
    }, {
      "ID": 179,
      "Location": "Rwanda",
      "SideA": "Rwanda",
      "SideA2nd": null,
      "SideB": "FDLR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 654739200000,
      "StartPrec": 1,
      "StartDate2": 864518400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1041292800000,
      "EpEndPrec": -99.0,
      "GWNOA": 517,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 517,
      "Region": 4,
      "Version": null,
      "Array": ["Rwanda", "FDLR"],
      "TXT": "RwandaFDLRnannan"
    }, {
      "ID": 180,
      "Location": "Senegal",
      "SideA": "Senegal",
      "SideA2nd": null,
      "SideB": "MFDC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Casamance",
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 596937600000,
      "StartPrec": 3,
      "StartDate2": 649468800000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 662601600000,
      "EpEndPrec": -99.0,
      "GWNOA": 433,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 433,
      "Region": 4,
      "Version": null,
      "Array": ["Senegal", "MFDC"],
      "TXT": "SenegalMFDCnannan"
    }, {
      "ID": 180,
      "Location": "Senegal",
      "SideA": "Senegal",
      "SideA2nd": null,
      "SideB": "MFDC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Casamance",
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 596937600000,
      "StartPrec": 3,
      "StartDate2": 715305600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 433,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 433,
      "Region": 4,
      "Version": null,
      "Array": ["Senegal", "MFDC"],
      "TXT": "SenegalMFDCnannan"
    }, {
      "ID": 180,
      "Location": "Senegal",
      "SideA": "Senegal",
      "SideA2nd": null,
      "SideB": "MFDC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Casamance",
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 596937600000,
      "StartPrec": 3,
      "StartDate2": 715305600000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 742089600000,
      "EpEndPrec": -99.0,
      "GWNOA": 433,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 433,
      "Region": 4,
      "Version": null,
      "Array": ["Senegal", "MFDC"],
      "TXT": "SenegalMFDCnannan"
    }, {
      "ID": 180,
      "Location": "Senegal",
      "SideA": "Senegal",
      "SideA2nd": null,
      "SideB": "MFDC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Casamance",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 596937600000,
      "StartPrec": 3,
      "StartDate2": 798940800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 820368000000,
      "EpEndPrec": -99.0,
      "GWNOA": 433,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 433,
      "Region": 4,
      "Version": null,
      "Array": ["Senegal", "MFDC"],
      "TXT": "SenegalMFDCnannan"
    }, {
      "ID": 180,
      "Location": "Senegal",
      "SideA": "Senegal",
      "SideA2nd": null,
      "SideB": "MFDC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Casamance",
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 596937600000,
      "StartPrec": 3,
      "StartDate2": 859075200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 433,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 433,
      "Region": 4,
      "Version": null,
      "Array": ["Senegal", "MFDC"],
      "TXT": "SenegalMFDCnannan"
    }, {
      "ID": 180,
      "Location": "Senegal",
      "SideA": "Senegal",
      "SideA2nd": null,
      "SideB": "MFDC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Casamance",
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 596937600000,
      "StartPrec": 3,
      "StartDate2": 859075200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 883526400000,
      "EpEndPrec": -99.0,
      "GWNOA": 433,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 433,
      "Region": 4,
      "Version": null,
      "Array": ["Senegal", "MFDC"],
      "TXT": "SenegalMFDCnannan"
    }, {
      "ID": 180,
      "Location": "Senegal",
      "SideA": "Senegal",
      "SideA2nd": null,
      "SideB": "MFDC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Casamance",
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 596937600000,
      "StartPrec": 3,
      "StartDate2": 955411200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 433,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 433,
      "Region": 4,
      "Version": null,
      "Array": ["Senegal", "MFDC"],
      "TXT": "SenegalMFDCnannan"
    }, {
      "ID": 180,
      "Location": "Senegal",
      "SideA": "Senegal",
      "SideA2nd": null,
      "SideB": "MFDC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Casamance",
      "YEAR": 2001,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 596937600000,
      "StartPrec": 3,
      "StartDate2": 955411200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1009756800000,
      "EpEndPrec": -99.0,
      "GWNOA": 433,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 433,
      "Region": 4,
      "Version": null,
      "Array": ["Senegal", "MFDC"],
      "TXT": "SenegalMFDCnannan"
    }, {
      "ID": 180,
      "Location": "Senegal",
      "SideA": "Senegal",
      "SideA2nd": null,
      "SideB": "MFDC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Casamance",
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 596937600000,
      "StartPrec": 3,
      "StartDate2": 1041379200000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 1072828800000,
      "EpEndPrec": -99.0,
      "GWNOA": 433,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 433,
      "Region": 4,
      "Version": null,
      "Array": ["Senegal", "MFDC"],
      "TXT": "SenegalMFDCnannan"
    }, {
      "ID": 181,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Republic of Armenia",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Nagorno-Karabakh",
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 594345600000,
      "StartPrec": 3,
      "StartDate2": 649468800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Republic of Armenia"],
      "TXT": "Russia (Soviet Union)Republic of Armenianannan"
    }, {
      "ID": 181,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Republic of Armenia",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Nagorno-Karabakh",
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 594345600000,
      "StartPrec": 3,
      "StartDate2": 649468800000,
      "Startprec2": 4,
      "EpEnd": 1,
      "EpEndDate": 687744000000,
      "EpEndPrec": -99.0,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Republic of Armenia"],
      "TXT": "Russia (Soviet Union)Republic of Armenianannan"
    }, {
      "ID": 182,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "APF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Azerbaijan",
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 632707200000,
      "StartPrec": 1,
      "StartDate2": 632707200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 632793600000,
      "EpEndPrec": -99.0,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "APF"],
      "TXT": "Russia (Soviet Union)APFnannan"
    }, {
      "ID": 183,
      "Location": "Trinidad and Tobago",
      "SideA": "Trinidad and Tobago",
      "SideA2nd": null,
      "SideB": "Jamaat al-Muslimeen",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 649036800000,
      "StartPrec": 1,
      "StartDate2": 649296000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 649468800000,
      "EpEndPrec": -99.0,
      "GWNOA": 52,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 52,
      "Region": 5,
      "Version": null,
      "Array": ["Trinidad and Tobago", "Jamaat al-Muslimeen"],
      "TXT": "Trinidad and TobagoJamaat al-Muslimeennannan"
    }, {
      "ID": 184,
      "Location": "Djibouti",
      "SideA": "Djibouti",
      "SideA2nd": null,
      "SideB": "FRUD",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 689904000000,
      "StartPrec": 1,
      "StartDate2": 689990400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 522,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 522,
      "Region": 4,
      "Version": null,
      "Array": ["Djibouti", "FRUD"],
      "TXT": "DjiboutiFRUDnannan"
    }, {
      "ID": 184,
      "Location": "Djibouti",
      "SideA": "Djibouti",
      "SideA2nd": null,
      "SideB": "FRUD",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 689904000000,
      "StartPrec": 1,
      "StartDate2": 689990400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 522,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 522,
      "Region": 4,
      "Version": null,
      "Array": ["Djibouti", "FRUD"],
      "TXT": "DjiboutiFRUDnannan"
    }, {
      "ID": 184,
      "Location": "Djibouti",
      "SideA": "Djibouti",
      "SideA2nd": null,
      "SideB": "FRUD",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 689904000000,
      "StartPrec": 1,
      "StartDate2": 689990400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 522,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 522,
      "Region": 4,
      "Version": null,
      "Array": ["Djibouti", "FRUD"],
      "TXT": "DjiboutiFRUDnannan"
    }, {
      "ID": 184,
      "Location": "Djibouti",
      "SideA": "Djibouti",
      "SideA2nd": null,
      "SideB": "FRUD",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 689904000000,
      "StartPrec": 1,
      "StartDate2": 689990400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 788400000000,
      "EpEndPrec": -99.0,
      "GWNOA": 522,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 522,
      "Region": 4,
      "Version": null,
      "Array": ["Djibouti", "FRUD"],
      "TXT": "DjiboutiFRUDnannan"
    }, {
      "ID": 184,
      "Location": "Djibouti",
      "SideA": "Djibouti",
      "SideA2nd": null,
      "SideB": "FRUD \u2013 AD",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 689904000000,
      "StartPrec": 1,
      "StartDate2": 932774400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 946598400000,
      "EpEndPrec": -99.0,
      "GWNOA": 522,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 522,
      "Region": 4,
      "Version": null,
      "Array": ["Djibouti", "FRUD \u2013 AD"],
      "TXT": "DjiboutiFRUD \u2013 ADnannan"
    }, {
      "ID": 185,
      "Location": "Georgia",
      "SideA": "Georgia",
      "SideA2nd": null,
      "SideB": "Anti-government alliance",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 685756800000,
      "StartPrec": 1,
      "StartDate2": 693446400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 372,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 372,
      "Region": 1,
      "Version": null,
      "Array": ["Georgia", "Anti-government alliance"],
      "TXT": "GeorgiaAnti-government alliancenannan"
    }, {
      "ID": 185,
      "Location": "Georgia",
      "SideA": "Georgia",
      "SideA2nd": null,
      "SideB": "Anti-government alliance, Zviadists",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 685756800000,
      "StartPrec": 1,
      "StartDate2": 693446400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 372,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 372,
      "Region": 1,
      "Version": null,
      "Array": ["Georgia", "Anti-government alliance, Zviadists"],
      "TXT": "GeorgiaAnti-government alliance, Zviadistsnannan"
    }, {
      "ID": 185,
      "Location": "Georgia",
      "SideA": "Georgia",
      "SideA2nd": null,
      "SideB": "Zviadists",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 685756800000,
      "StartPrec": 1,
      "StartDate2": 693446400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 757296000000,
      "EpEndPrec": -99.0,
      "GWNOA": 372,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 372,
      "Region": 1,
      "Version": null,
      "Array": ["Georgia", "Zviadists"],
      "TXT": "GeorgiaZviadistsnannan"
    }, {
      "ID": 186,
      "Location": "Haiti",
      "SideA": "Haiti",
      "SideA2nd": null,
      "SideB": "Military faction (forces of Himmler Rebu and Guy Francois) ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 607564800000,
      "StartPrec": 1,
      "StartDate2": 607996800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 608256000000,
      "EpEndPrec": -99.0,
      "GWNOA": 41,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 41,
      "Region": 5,
      "Version": null,
      "Array": ["Haiti", "Military faction (forces of Himmler Rebu and Guy Francois) "],
      "TXT": "HaitiMilitary faction (forces of Himmler Rebu and Guy Francois) nannan"
    }, {
      "ID": 186,
      "Location": "Haiti",
      "SideA": "Haiti",
      "SideA2nd": null,
      "SideB": "Military faction (forces of Raol Cedras) ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 607564800000,
      "StartPrec": 1,
      "StartDate2": 686361600000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 686361600000,
      "EpEndPrec": -99.0,
      "GWNOA": 41,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 41,
      "Region": 5,
      "Version": null,
      "Array": ["Haiti", "Military faction (forces of Raol Cedras) "],
      "TXT": "HaitiMilitary faction (forces of Raol Cedras) nannan"
    }, {
      "ID": 186,
      "Location": "Haiti",
      "SideA": "Haiti",
      "SideA2nd": null,
      "SideB": "FLRN, OP Lavalas (Chim\xE8res) ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 607564800000,
      "StartPrec": 1,
      "StartDate2": 1076284800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1104451200000,
      "EpEndPrec": -99.0,
      "GWNOA": 41,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 41,
      "Region": 5,
      "Version": null,
      "Array": ["Haiti", "FLRN, OP Lavalas (Chim\xE8res) "],
      "TXT": "HaitiFLRN, OP Lavalas (Chim\xE8res) nannan"
    }, {
      "ID": 187,
      "Location": "Sierra Leone",
      "SideA": "Sierra Leone",
      "SideA2nd": null,
      "SideB": "RUF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 669686400000,
      "StartPrec": 1,
      "StartDate2": 670464000000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 451,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 451,
      "Region": 4,
      "Version": null,
      "Array": ["Sierra Leone", "RUF"],
      "TXT": "Sierra LeoneRUFnannan"
    }, {
      "ID": 187,
      "Location": "Sierra Leone",
      "SideA": "Sierra Leone",
      "SideA2nd": null,
      "SideB": "RUF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 669686400000,
      "StartPrec": 1,
      "StartDate2": 670464000000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 451,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 451,
      "Region": 4,
      "Version": null,
      "Array": ["Sierra Leone", "RUF"],
      "TXT": "Sierra LeoneRUFnannan"
    }, {
      "ID": 187,
      "Location": "Sierra Leone",
      "SideA": "Sierra Leone",
      "SideA2nd": null,
      "SideB": "RUF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 669686400000,
      "StartPrec": 1,
      "StartDate2": 670464000000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 451,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 451,
      "Region": 4,
      "Version": null,
      "Array": ["Sierra Leone", "RUF"],
      "TXT": "Sierra LeoneRUFnannan"
    }, {
      "ID": 187,
      "Location": "Sierra Leone",
      "SideA": "Sierra Leone",
      "SideA2nd": null,
      "SideB": "RUF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 669686400000,
      "StartPrec": 1,
      "StartDate2": 670464000000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 451,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 451,
      "Region": 4,
      "Version": null,
      "Array": ["Sierra Leone", "RUF"],
      "TXT": "Sierra LeoneRUFnannan"
    }, {
      "ID": 187,
      "Location": "Sierra Leone",
      "SideA": "Sierra Leone",
      "SideA2nd": null,
      "SideB": "RUF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 669686400000,
      "StartPrec": 1,
      "StartDate2": 670464000000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 451,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 451,
      "Region": 4,
      "Version": null,
      "Array": ["Sierra Leone", "RUF"],
      "TXT": "Sierra LeoneRUFnannan"
    }, {
      "ID": 187,
      "Location": "Sierra Leone",
      "SideA": "Sierra Leone",
      "SideA2nd": null,
      "SideB": "RUF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 669686400000,
      "StartPrec": 1,
      "StartDate2": 670464000000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 451,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 451,
      "Region": 4,
      "Version": null,
      "Array": ["Sierra Leone", "RUF"],
      "TXT": "Sierra LeoneRUFnannan"
    }, {
      "ID": 187,
      "Location": "Sierra Leone",
      "SideA": "Sierra Leone",
      "SideA2nd": null,
      "SideB": "AFRC, Kamajors, RUF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 669686400000,
      "StartPrec": 1,
      "StartDate2": 670464000000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 451,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 451,
      "Region": 4,
      "Version": null,
      "Array": ["Sierra Leone", "AFRC, Kamajors, RUF"],
      "TXT": "Sierra LeoneAFRC, Kamajors, RUFnannan"
    }, {
      "ID": 187,
      "Location": "Sierra Leone",
      "SideA": "Sierra Leone",
      "SideA2nd": null,
      "SideB": "AFRC, Kamajors, RUF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1998,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 669686400000,
      "StartPrec": 1,
      "StartDate2": 670464000000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 451,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 451,
      "Region": 4,
      "Version": null,
      "Array": ["Sierra Leone", "AFRC, Kamajors, RUF"],
      "TXT": "Sierra LeoneAFRC, Kamajors, RUFnannan"
    }, {
      "ID": 187,
      "Location": "Sierra Leone",
      "SideA": "Sierra Leone",
      "SideA2nd": null,
      "SideB": "AFRC, RUF",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1999,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 669686400000,
      "StartPrec": 1,
      "StartDate2": 670464000000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 451,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 451,
      "Region": 4,
      "Version": null,
      "Array": ["Sierra Leone", "AFRC, RUF"],
      "TXT": "Sierra LeoneAFRC, RUFnannan"
    }, {
      "ID": 187,
      "Location": "Sierra Leone",
      "SideA": "Sierra Leone",
      "SideA2nd": "United Kingdom",
      "SideB": "RUF, WSB",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 669686400000,
      "StartPrec": 1,
      "StartDate2": 670464000000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 973814400000,
      "EpEndPrec": -99.0,
      "GWNOA": 451,
      "GWNOA2nd": 200,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 451,
      "Region": 4,
      "Version": null,
      "Array": ["Sierra Leone", "RUF, WSB", "United Kingdom"],
      "TXT": "Sierra LeoneRUF, WSBUnited Kingdomnan"
    }, {
      "ID": 188,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "Devrimci Sol",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 536457600000,
      "StartPrec": 5,
      "StartDate2": 679363200000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "Devrimci Sol"],
      "TXT": "Turkey\/Ottoman EmpireDevrimci Solnannan"
    }, {
      "ID": 188,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "Devrimci Sol",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 536457600000,
      "StartPrec": 5,
      "StartDate2": 679363200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 725760000000,
      "EpEndPrec": -99.0,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "Devrimci Sol"],
      "TXT": "Turkey\/Ottoman EmpireDevrimci Solnannan"
    }, {
      "ID": 188,
      "Location": "Turkey\/Ottoman Empire",
      "SideA": "Turkey\/Ottoman Empire",
      "SideA2nd": null,
      "SideB": "MKP",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 536457600000,
      "StartPrec": 5,
      "StartDate2": 1119052800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1129507200000,
      "EpEndPrec": -99.0,
      "GWNOA": 640,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 640,
      "Region": 2,
      "Version": null,
      "Array": ["Turkey\/Ottoman Empire", "MKP"],
      "TXT": "Turkey\/Ottoman EmpireMKPnannan"
    }, {
      "ID": 189,
      "Location": "Yugoslavia (Serbia)",
      "SideA": "Yugoslavia (Serbia)",
      "SideA2nd": null,
      "SideB": "Republic of Slovenia",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Slovenia",
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 677980800000,
      "StartPrec": 1,
      "StartDate2": 678585600000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 679276800000,
      "EpEndPrec": -99.0,
      "GWNOA": 345,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 345,
      "Region": 1,
      "Version": null,
      "Array": ["Yugoslavia (Serbia)", "Republic of Slovenia"],
      "TXT": "Yugoslavia (Serbia)Republic of Slovenianannan"
    }, {
      "ID": 190,
      "Location": "Yugoslavia (Serbia)",
      "SideA": "Yugoslavia (Serbia)",
      "SideA2nd": null,
      "SideB": "Croatian irregulars, Republic of Croatia",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Croatia",
      "YEAR": 1991,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 679104000000,
      "StartPrec": 1,
      "StartDate2": 681091200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 694137600000,
      "EpEndPrec": -99.0,
      "GWNOA": 345,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 345,
      "Region": 1,
      "Version": null,
      "Array": ["Yugoslavia (Serbia)", "Croatian irregulars, Republic of Croatia"],
      "TXT": "Yugoslavia (Serbia)Croatian irregulars, Republic of Croatianannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "Takfir wa'l Hijra",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "Takfir wa'l Hijra"],
      "TXT": "AlgeriaTakfir wa'l Hijranannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "AIS",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "AIS"],
      "TXT": "AlgeriaAISnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "GIA, AIS",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "GIA, AIS"],
      "TXT": "AlgeriaGIA, AISnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "GIA, AIS",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1994,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "GIA, AIS"],
      "TXT": "AlgeriaGIA, AISnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "GIA, AIS",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1995,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "GIA, AIS"],
      "TXT": "AlgeriaGIA, AISnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "GIA, AIS",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1996,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "GIA, AIS"],
      "TXT": "AlgeriaGIA, AISnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "GIA, AIS",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1997,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "GIA, AIS"],
      "TXT": "AlgeriaGIA, AISnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "GIA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1998,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "GIA"],
      "TXT": "AlgeriaGIAnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "GIA, AQIM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1999,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "GIA, AQIM"],
      "TXT": "AlgeriaGIA, AQIMnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "GIA, AQIM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2000,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "GIA, AQIM"],
      "TXT": "AlgeriaGIA, AQIMnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "GIA, AQIM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2001,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "GIA, AQIM"],
      "TXT": "AlgeriaGIA, AQIMnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "GIA, AQIM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "GIA, AQIM"],
      "TXT": "AlgeriaGIA, AQIMnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "GIA, AQIM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "GIA, AQIM"],
      "TXT": "AlgeriaGIA, AQIMnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": "Chad, Mali, Niger",
      "SideB": "AQIM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": "483, 432, 436",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "AQIM", "Chad, Mali, Niger"],
      "TXT": "AlgeriaAQIMChad, Mali, Nigernan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "AQIM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "AQIM"],
      "TXT": "AlgeriaAQIMnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "AQIM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "AQIM"],
      "TXT": "AlgeriaAQIMnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "AQIM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "AQIM"],
      "TXT": "AlgeriaAQIMnannan"
    }, {
      "ID": 191,
      "Location": "Algeria",
      "SideA": "Algeria",
      "SideA2nd": null,
      "SideB": "AQIM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 675734400000,
      "StartPrec": 1,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 615,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 615,
      "Region": 4,
      "Version": null,
      "Array": ["Algeria", "AQIM"],
      "TXT": "AlgeriaAQIMnannan"
    }, {
      "ID": 192,
      "Location": "Angola",
      "SideA": "Angola",
      "SideA2nd": null,
      "SideB": "FLEC\u2013R",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Cabinda",
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 662688000000,
      "StartPrec": 7,
      "StartDate2": 675734400000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 694137600000,
      "EpEndPrec": -99.0,
      "GWNOA": 540,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 540,
      "Region": 4,
      "Version": null,
      "Array": ["Angola", "FLEC\u2013R"],
      "TXT": "AngolaFLEC\u2013Rnannan"
    }, {
      "ID": 192,
      "Location": "Angola",
      "SideA": "Angola",
      "SideA2nd": null,
      "SideB": "FLEC\u2013FAC, FLEC\u2013R",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Cabinda",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 662688000000,
      "StartPrec": 7,
      "StartDate2": 757382400000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 788832000000,
      "EpEndPrec": -99.0,
      "GWNOA": 540,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 540,
      "Region": 4,
      "Version": null,
      "Array": ["Angola", "FLEC\u2013FAC, FLEC\u2013R"],
      "TXT": "AngolaFLEC\u2013FAC, FLEC\u2013Rnannan"
    }, {
      "ID": 192,
      "Location": "Angola",
      "SideA": "Angola",
      "SideA2nd": null,
      "SideB": "FLEC\u2013FAC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Cabinda",
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 662688000000,
      "StartPrec": 7,
      "StartDate2": 820454400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 540,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 540,
      "Region": 4,
      "Version": null,
      "Array": ["Angola", "FLEC\u2013FAC"],
      "TXT": "AngolaFLEC\u2013FACnannan"
    }, {
      "ID": 192,
      "Location": "Angola",
      "SideA": "Angola",
      "SideA2nd": null,
      "SideB": "FLEC\u2013FAC, FLEC\u2013R",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Cabinda",
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 662688000000,
      "StartPrec": 7,
      "StartDate2": 820454400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 540,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 540,
      "Region": 4,
      "Version": null,
      "Array": ["Angola", "FLEC\u2013FAC, FLEC\u2013R"],
      "TXT": "AngolaFLEC\u2013FAC, FLEC\u2013Rnannan"
    }, {
      "ID": 192,
      "Location": "Angola",
      "SideA": "Angola",
      "SideA2nd": null,
      "SideB": "FLEC\u2013FAC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Cabinda",
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 662688000000,
      "StartPrec": 7,
      "StartDate2": 820454400000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 915062400000,
      "EpEndPrec": -99.0,
      "GWNOA": 540,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 540,
      "Region": 4,
      "Version": null,
      "Array": ["Angola", "FLEC\u2013FAC"],
      "TXT": "AngolaFLEC\u2013FACnannan"
    }, {
      "ID": 192,
      "Location": "Angola",
      "SideA": "Angola",
      "SideA2nd": null,
      "SideB": "FLEC\u2013FAC, FLEC\u2013R",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Cabinda",
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 662688000000,
      "StartPrec": 7,
      "StartDate2": 1009843200000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 1041292800000,
      "EpEndPrec": -99.0,
      "GWNOA": 540,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 540,
      "Region": 4,
      "Version": null,
      "Array": ["Angola", "FLEC\u2013FAC, FLEC\u2013R"],
      "TXT": "AngolaFLEC\u2013FAC, FLEC\u2013Rnannan"
    }, {
      "ID": 192,
      "Location": "Angola",
      "SideA": "Angola",
      "SideA2nd": null,
      "SideB": "FLEC\u2013FAC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Cabinda",
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 662688000000,
      "StartPrec": 7,
      "StartDate2": 1072915200000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 1104451200000,
      "EpEndPrec": -99.0,
      "GWNOA": 540,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 540,
      "Region": 4,
      "Version": null,
      "Array": ["Angola", "FLEC\u2013FAC"],
      "TXT": "AngolaFLEC\u2013FACnannan"
    }, {
      "ID": 192,
      "Location": "Angola",
      "SideA": "Angola",
      "SideA2nd": null,
      "SideB": "FLEC\u2013FAC",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Cabinda",
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 662688000000,
      "StartPrec": 7,
      "StartDate2": 1167609600000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 540,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 540,
      "Region": 4,
      "Version": null,
      "Array": ["Angola", "FLEC\u2013FAC"],
      "TXT": "AngolaFLEC\u2013FACnannan"
    }, {
      "ID": 193,
      "Location": "Azerbaijan",
      "SideA": "Azerbaijan",
      "SideA2nd": null,
      "SideB": "Republic of Nagorno-Karabakh",
      "SideB2nd": "Armenia",
      "Incomp": 1,
      "Terr": "Nagorno-Karabakh",
      "YEAR": 1992,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 693964800000,
      "StartPrec": 3,
      "StartDate2": 694224000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 373,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": 371,
      "GWNOLoc": 373,
      "Region": 1,
      "Version": null,
      "Array": ["Azerbaijan", "Republic of Nagorno-Karabakh", "Armenia"],
      "TXT": "AzerbaijanRepublic of Nagorno-KarabakhnanArmenia"
    }, {
      "ID": 193,
      "Location": "Azerbaijan",
      "SideA": "Azerbaijan",
      "SideA2nd": null,
      "SideB": "Republic of Nagorno-Karabakh",
      "SideB2nd": "Armenia",
      "Incomp": 1,
      "Terr": "Nagorno-Karabakh",
      "YEAR": 1993,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 693964800000,
      "StartPrec": 3,
      "StartDate2": 694224000000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 373,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": 371,
      "GWNOLoc": 373,
      "Region": 1,
      "Version": null,
      "Array": ["Azerbaijan", "Republic of Nagorno-Karabakh", "Armenia"],
      "TXT": "AzerbaijanRepublic of Nagorno-KarabakhnanArmenia"
    }, {
      "ID": 193,
      "Location": "Azerbaijan",
      "SideA": "Azerbaijan",
      "SideA2nd": null,
      "SideB": "Republic of Nagorno-Karabakh",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Nagorno-Karabakh",
      "YEAR": 1994,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 693964800000,
      "StartPrec": 3,
      "StartDate2": 694224000000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 768441600000,
      "EpEndPrec": -99.0,
      "GWNOA": 373,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 373,
      "Region": 1,
      "Version": null,
      "Array": ["Azerbaijan", "Republic of Nagorno-Karabakh"],
      "TXT": "AzerbaijanRepublic of Nagorno-Karabakhnannan"
    }, {
      "ID": 193,
      "Location": "Azerbaijan",
      "SideA": "Azerbaijan",
      "SideA2nd": null,
      "SideB": "Republic of Nagorno-Karabakh",
      "SideB2nd": "Armenia",
      "Incomp": 1,
      "Terr": "Nagorno-Karabakh",
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 693964800000,
      "StartPrec": 3,
      "StartDate2": 1128816000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1133740800000,
      "EpEndPrec": -99.0,
      "GWNOA": 373,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": 371,
      "GWNOLoc": 373,
      "Region": 1,
      "Version": null,
      "Array": ["Azerbaijan", "Republic of Nagorno-Karabakh", "Armenia"],
      "TXT": "AzerbaijanRepublic of Nagorno-KarabakhnanArmenia"
    }, {
      "ID": 194,
      "Location": "Bosnia and Herzegovina",
      "SideA": "Bosnia and Herzegovina",
      "SideA2nd": " ",
      "SideB": "Serbian irregulars, Serbian Republic of Bosnia and Herzegovina",
      "SideB2nd": "Yugoslavia (Serbia)",
      "Incomp": 1,
      "Terr": "Serb",
      "YEAR": 1992,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 704332800000,
      "StartPrec": 1,
      "StartDate2": 704678400000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 346,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": 345,
      "GWNOLoc": 346,
      "Region": 1,
      "Version": null,
      "Array": ["Bosnia and Herzegovina", "Serbian irregulars, Serbian Republic of Bosnia and Herzegovina", " ", "Yugoslavia (Serbia)"],
      "TXT": "Bosnia and HerzegovinaSerbian irregulars, Serbian Republic of Bosnia and Herzegovina Yugoslavia (Serbia)"
    }, {
      "ID": 194,
      "Location": "Bosnia and Herzegovina",
      "SideA": "Bosnia and Herzegovina",
      "SideA2nd": " ",
      "SideB": "Serbian irregulars, Serbian Republic of Bosnia and Herzegovina",
      "SideB2nd": "Yugoslavia (Serbia)",
      "Incomp": 1,
      "Terr": "Serb",
      "YEAR": 1993,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 704332800000,
      "StartPrec": 1,
      "StartDate2": 704678400000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 346,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": 345,
      "GWNOLoc": 346,
      "Region": 1,
      "Version": null,
      "Array": ["Bosnia and Herzegovina", "Serbian irregulars, Serbian Republic of Bosnia and Herzegovina", " ", "Yugoslavia (Serbia)"],
      "TXT": "Bosnia and HerzegovinaSerbian irregulars, Serbian Republic of Bosnia and Herzegovina Yugoslavia (Serbia)"
    }, {
      "ID": 194,
      "Location": "Bosnia and Herzegovina",
      "SideA": "Bosnia and Herzegovina",
      "SideA2nd": " ",
      "SideB": "Serbian irregulars, Serbian Republic of Bosnia and Herzegovina",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Serb",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 704332800000,
      "StartPrec": 1,
      "StartDate2": 704678400000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 346,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 346,
      "Region": 1,
      "Version": null,
      "Array": ["Bosnia and Herzegovina", "Serbian irregulars, Serbian Republic of Bosnia and Herzegovina", " "],
      "TXT": "Bosnia and HerzegovinaSerbian irregulars, Serbian Republic of Bosnia and Herzegovina nan"
    }, {
      "ID": 194,
      "Location": "Bosnia and Herzegovina",
      "SideA": "Bosnia and Herzegovina",
      "SideA2nd": " ",
      "SideB": "Serbian irregulars, Serbian Republic of Bosnia and Herzegovina",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Serb",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 704332800000,
      "StartPrec": 1,
      "StartDate2": 704678400000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 816912000000,
      "EpEndPrec": -99.0,
      "GWNOA": 346,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 346,
      "Region": 1,
      "Version": null,
      "Array": ["Bosnia and Herzegovina", "Serbian irregulars, Serbian Republic of Bosnia and Herzegovina", " "],
      "TXT": "Bosnia and HerzegovinaSerbian irregulars, Serbian Republic of Bosnia and Herzegovina nan"
    }, {
      "ID": 195,
      "Location": "Croatia",
      "SideA": "Croatia",
      "SideA2nd": null,
      "SideB": "Serbian irregulars, Serbian Republic of Krajina",
      "SideB2nd": "Yugoslavia (Serbia)",
      "Incomp": 1,
      "Terr": "Serb",
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 704678400000,
      "StartPrec": 3,
      "StartDate2": 709948800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 344,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": 345,
      "GWNOLoc": 344,
      "Region": 1,
      "Version": null,
      "Array": ["Croatia", "Serbian irregulars, Serbian Republic of Krajina", "Yugoslavia (Serbia)"],
      "TXT": "CroatiaSerbian irregulars, Serbian Republic of KrajinananYugoslavia (Serbia)"
    }, {
      "ID": 195,
      "Location": "Croatia",
      "SideA": "Croatia",
      "SideA2nd": null,
      "SideB": "Serbian Republic of Krajina",
      "SideB2nd": "Yugoslavia (Serbia)",
      "Incomp": 1,
      "Terr": "Serb",
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 704678400000,
      "StartPrec": 3,
      "StartDate2": 709948800000,
      "Startprec2": 4,
      "EpEnd": 1,
      "EpEndDate": 756604800000,
      "EpEndPrec": -99.0,
      "GWNOA": 344,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": 345,
      "GWNOLoc": 344,
      "Region": 1,
      "Version": null,
      "Array": ["Croatia", "Serbian Republic of Krajina", "Yugoslavia (Serbia)"],
      "TXT": "CroatiaSerbian Republic of KrajinananYugoslavia (Serbia)"
    }, {
      "ID": 195,
      "Location": "Croatia",
      "SideA": "Croatia",
      "SideA2nd": null,
      "SideB": "Serbian Republic of Krajina",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Serb",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 704678400000,
      "StartPrec": 3,
      "StartDate2": 799459200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 816134400000,
      "EpEndPrec": -99.0,
      "GWNOA": 344,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 344,
      "Region": 1,
      "Version": null,
      "Array": ["Croatia", "Serbian Republic of Krajina"],
      "TXT": "CroatiaSerbian Republic of Krajinanannan"
    }, {
      "ID": 196,
      "Location": "Egypt",
      "SideA": "Egypt",
      "SideA2nd": null,
      "SideB": "al-Gama'a al-Islamiyya",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 371347200000,
      "StartPrec": 1,
      "StartDate2": 731721600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 651,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 651,
      "Region": 2,
      "Version": null,
      "Array": ["Egypt", "al-Gama'a al-Islamiyya"],
      "TXT": "Egyptal-Gama'a al-Islamiyyanannan"
    }, {
      "ID": 196,
      "Location": "Egypt",
      "SideA": "Egypt",
      "SideA2nd": null,
      "SideB": "al-Gama'a al-Islamiyya",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 371347200000,
      "StartPrec": 1,
      "StartDate2": 731721600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 651,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 651,
      "Region": 2,
      "Version": null,
      "Array": ["Egypt", "al-Gama'a al-Islamiyya"],
      "TXT": "Egyptal-Gama'a al-Islamiyyanannan"
    }, {
      "ID": 196,
      "Location": "Egypt",
      "SideA": "Egypt",
      "SideA2nd": null,
      "SideB": "al-Gama'a al-Islamiyya",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 371347200000,
      "StartPrec": 1,
      "StartDate2": 731721600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 651,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 651,
      "Region": 2,
      "Version": null,
      "Array": ["Egypt", "al-Gama'a al-Islamiyya"],
      "TXT": "Egyptal-Gama'a al-Islamiyyanannan"
    }, {
      "ID": 196,
      "Location": "Egypt",
      "SideA": "Egypt",
      "SideA2nd": null,
      "SideB": "al-Gama'a al-Islamiyya",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 371347200000,
      "StartPrec": 1,
      "StartDate2": 731721600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 651,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 651,
      "Region": 2,
      "Version": null,
      "Array": ["Egypt", "al-Gama'a al-Islamiyya"],
      "TXT": "Egyptal-Gama'a al-Islamiyyanannan"
    }, {
      "ID": 196,
      "Location": "Egypt",
      "SideA": "Egypt",
      "SideA2nd": null,
      "SideB": "al-Gama'a al-Islamiyya",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 371347200000,
      "StartPrec": 1,
      "StartDate2": 731721600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 651,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 651,
      "Region": 2,
      "Version": null,
      "Array": ["Egypt", "al-Gama'a al-Islamiyya"],
      "TXT": "Egyptal-Gama'a al-Islamiyyanannan"
    }, {
      "ID": 196,
      "Location": "Egypt",
      "SideA": "Egypt",
      "SideA2nd": null,
      "SideB": "al-Gama'a al-Islamiyya",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 371347200000,
      "StartPrec": 1,
      "StartDate2": 731721600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 915062400000,
      "EpEndPrec": -99.0,
      "GWNOA": 651,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 651,
      "Region": 2,
      "Version": null,
      "Array": ["Egypt", "al-Gama'a al-Islamiyya"],
      "TXT": "Egyptal-Gama'a al-Islamiyyanannan"
    }, {
      "ID": 197,
      "Location": "Georgia",
      "SideA": "Georgia",
      "SideA2nd": null,
      "SideB": "Republic of Abkhazia",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Abkhazia",
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 713750400000,
      "StartPrec": 1,
      "StartDate2": 714096000000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 372,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 372,
      "Region": 1,
      "Version": null,
      "Array": ["Georgia", "Republic of Abkhazia"],
      "TXT": "GeorgiaRepublic of Abkhazianannan"
    }, {
      "ID": 197,
      "Location": "Georgia",
      "SideA": "Georgia",
      "SideA2nd": null,
      "SideB": "Republic of Abkhazia",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Abkhazia",
      "YEAR": 1993,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 713750400000,
      "StartPrec": 1,
      "StartDate2": 714096000000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 754704000000,
      "EpEndPrec": -99.0,
      "GWNOA": 372,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 372,
      "Region": 1,
      "Version": null,
      "Array": ["Georgia", "Republic of Abkhazia"],
      "TXT": "GeorgiaRepublic of Abkhazianannan"
    }, {
      "ID": 198,
      "Location": "Georgia",
      "SideA": "Georgia",
      "SideA2nd": null,
      "SideB": "Republic of South Ossetia",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "South Ossetia",
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 693360000000,
      "StartPrec": 1,
      "StartDate2": 707961600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 711072000000,
      "EpEndPrec": -99.0,
      "GWNOA": 372,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 372,
      "Region": 1,
      "Version": null,
      "Array": ["Georgia", "Republic of South Ossetia"],
      "TXT": "GeorgiaRepublic of South Ossetianannan"
    }, {
      "ID": 198,
      "Location": "Georgia",
      "SideA": "Georgia",
      "SideA2nd": null,
      "SideB": "Republic of South Ossetia",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "South Ossetia",
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 693360000000,
      "StartPrec": 1,
      "StartDate2": 1092873600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1092873600000,
      "EpEndPrec": -99.0,
      "GWNOA": 372,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 372,
      "Region": 1,
      "Version": null,
      "Array": ["Georgia", "Republic of South Ossetia"],
      "TXT": "GeorgiaRepublic of South Ossetianannan"
    }, {
      "ID": 198,
      "Location": "Georgia",
      "SideA": "Georgia",
      "SideA2nd": null,
      "SideB": "Republic of South Ossetia",
      "SideB2nd": "Russia (Soviet Union)",
      "Incomp": 1,
      "Terr": "South Ossetia",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 693360000000,
      "StartPrec": 1,
      "StartDate2": 1218153600000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 372,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": 365,
      "GWNOLoc": 372,
      "Region": 1,
      "Version": null,
      "Array": ["Georgia", "Republic of South Ossetia", "Russia (Soviet Union)"],
      "TXT": "GeorgiaRepublic of South OssetiananRussia (Soviet Union)"
    }, {
      "ID": 199,
      "Location": "Moldova",
      "SideA": "Moldova",
      "SideA2nd": null,
      "SideB": "Dniestr Republic",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Dniestr",
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 692582400000,
      "StartPrec": 1,
      "StartDate2": 700790400000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 711676800000,
      "EpEndPrec": -99.0,
      "GWNOA": 359,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 359,
      "Region": 1,
      "Version": null,
      "Array": ["Moldova", "Dniestr Republic"],
      "TXT": "MoldovaDniestr Republicnannan"
    }, {
      "ID": 200,
      "Location": "Tajikistan",
      "SideA": "Tajikistan",
      "SideA2nd": null,
      "SideB": "UTO",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 705456000000,
      "StartPrec": 1,
      "StartDate2": 709776000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 702,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 702,
      "Region": 3,
      "Version": null,
      "Array": ["Tajikistan", "UTO"],
      "TXT": "TajikistanUTOnannan"
    }, {
      "ID": 200,
      "Location": "Tajikistan",
      "SideA": "Tajikistan",
      "SideA2nd": "Russia (Soviet Union), Uzbekistan",
      "SideB": "UTO",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 705456000000,
      "StartPrec": 1,
      "StartDate2": 709776000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 702,
      "GWNOA2nd": "365, 704",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 702,
      "Region": 3,
      "Version": null,
      "Array": ["Tajikistan", "UTO", "Russia (Soviet Union), Uzbekistan"],
      "TXT": "TajikistanUTORussia (Soviet Union), Uzbekistannan"
    }, {
      "ID": 200,
      "Location": "Tajikistan",
      "SideA": "Tajikistan",
      "SideA2nd": "Russia (Soviet Union), Uzbekistan",
      "SideB": "UTO",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 705456000000,
      "StartPrec": 1,
      "StartDate2": 709776000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 702,
      "GWNOA2nd": "365, 704",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 702,
      "Region": 3,
      "Version": null,
      "Array": ["Tajikistan", "UTO", "Russia (Soviet Union), Uzbekistan"],
      "TXT": "TajikistanUTORussia (Soviet Union), Uzbekistannan"
    }, {
      "ID": 200,
      "Location": "Tajikistan",
      "SideA": "Tajikistan",
      "SideA2nd": "Russia (Soviet Union)",
      "SideB": "UTO",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 705456000000,
      "StartPrec": 1,
      "StartDate2": 709776000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 702,
      "GWNOA2nd": 365,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 702,
      "Region": 3,
      "Version": null,
      "Array": ["Tajikistan", "UTO", "Russia (Soviet Union)"],
      "TXT": "TajikistanUTORussia (Soviet Union)nan"
    }, {
      "ID": 200,
      "Location": "Tajikistan",
      "SideA": "Tajikistan",
      "SideA2nd": "Russia (Soviet Union)",
      "SideB": "UTO",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 705456000000,
      "StartPrec": 1,
      "StartDate2": 709776000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 851299200000,
      "EpEndPrec": -99.0,
      "GWNOA": 702,
      "GWNOA2nd": 365,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 702,
      "Region": 3,
      "Version": null,
      "Array": ["Tajikistan", "UTO", "Russia (Soviet Union)"],
      "TXT": "TajikistanUTORussia (Soviet Union)nan"
    }, {
      "ID": 200,
      "Location": "Tajikistan",
      "SideA": "Tajikistan",
      "SideA2nd": null,
      "SideB": "UTO, Movement for Peace in Tajikistan",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 705456000000,
      "StartPrec": 1,
      "StartDate2": 890697600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 910569600000,
      "EpEndPrec": -99.0,
      "GWNOA": 702,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 702,
      "Region": 3,
      "Version": null,
      "Array": ["Tajikistan", "UTO, Movement for Peace in Tajikistan"],
      "TXT": "TajikistanUTO, Movement for Peace in Tajikistannannan"
    }, {
      "ID": 201,
      "Location": "Azerbaijan",
      "SideA": "Azerbaijan",
      "SideA2nd": null,
      "SideB": "Military faction (Forces of Suret Husseinov)",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 739152000000,
      "StartPrec": 1,
      "StartDate2": 739152000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 740361600000,
      "EpEndPrec": -99.0,
      "GWNOA": 373,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 373,
      "Region": 1,
      "Version": null,
      "Array": ["Azerbaijan", "Military faction (Forces of Suret Husseinov)"],
      "TXT": "AzerbaijanMilitary faction (Forces of Suret Husseinov)nannan"
    }, {
      "ID": 201,
      "Location": "Azerbaijan",
      "SideA": "Azerbaijan",
      "SideA2nd": null,
      "SideB": "OPON forces",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 739152000000,
      "StartPrec": 1,
      "StartDate2": 795398400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 795398400000,
      "EpEndPrec": -99.0,
      "GWNOA": 373,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 373,
      "Region": 1,
      "Version": null,
      "Array": ["Azerbaijan", "OPON forces"],
      "TXT": "AzerbaijanOPON forcesnannan"
    }, {
      "ID": 202,
      "Location": "Bosnia and Herzegovina",
      "SideA": "Bosnia and Herzegovina",
      "SideA2nd": " ",
      "SideB": "Autonomous Province of Western Bosnia",
      "SideB2nd": " ",
      "Incomp": 1,
      "Terr": "Bihaca Krajina",
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 749606400000,
      "StartPrec": 1,
      "StartDate2": 749952000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 346,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 346,
      "Region": 1,
      "Version": null,
      "Array": ["Bosnia and Herzegovina", "Autonomous Province of Western Bosnia", " ", " "],
      "TXT": "Bosnia and HerzegovinaAutonomous Province of Western Bosnia  "
    }, {
      "ID": 202,
      "Location": "Bosnia and Herzegovina",
      "SideA": "Bosnia and Herzegovina",
      "SideA2nd": " ",
      "SideB": "Autonomous Province of Western Bosnia",
      "SideB2nd": " ",
      "Incomp": 1,
      "Terr": "Bihaca Krajina",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 749606400000,
      "StartPrec": 1,
      "StartDate2": 749952000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 346,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 346,
      "Region": 1,
      "Version": null,
      "Array": ["Bosnia and Herzegovina", "Autonomous Province of Western Bosnia", " ", " "],
      "TXT": "Bosnia and HerzegovinaAutonomous Province of Western Bosnia  "
    }, {
      "ID": 202,
      "Location": "Bosnia and Herzegovina",
      "SideA": "Bosnia and Herzegovina",
      "SideA2nd": " ",
      "SideB": "Autonomous Province of Western Bosnia",
      "SideB2nd": " ",
      "Incomp": 1,
      "Terr": "Bihaca Krajina",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 749606400000,
      "StartPrec": 1,
      "StartDate2": 749952000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 807753600000,
      "EpEndPrec": -99.0,
      "GWNOA": 346,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 346,
      "Region": 1,
      "Version": null,
      "Array": ["Bosnia and Herzegovina", "Autonomous Province of Western Bosnia", " ", " "],
      "TXT": "Bosnia and HerzegovinaAutonomous Province of Western Bosnia  "
    }, {
      "ID": 203,
      "Location": "Bosnia and Herzegovina",
      "SideA": "Bosnia and Herzegovina",
      "SideA2nd": " ",
      "SideB": "Croatian irregulars, Croatian Republic of Bosnia and Herzegovina",
      "SideB2nd": "Croatia",
      "Incomp": 1,
      "Terr": "Croat",
      "YEAR": 1993,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 719539200000,
      "StartPrec": 1,
      "StartDate2": 736128000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 346,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": 344,
      "GWNOLoc": 346,
      "Region": 1,
      "Version": null,
      "Array": ["Bosnia and Herzegovina", "Croatian irregulars, Croatian Republic of Bosnia and Herzegovina", " ", "Croatia"],
      "TXT": "Bosnia and HerzegovinaCroatian irregulars, Croatian Republic of Bosnia and Herzegovina Croatia"
    }, {
      "ID": 203,
      "Location": "Bosnia and Herzegovina",
      "SideA": "Bosnia and Herzegovina",
      "SideA2nd": " ",
      "SideB": "Croatian irregulars, Croatian Republic of Bosnia and Herzegovina",
      "SideB2nd": " ",
      "Incomp": 1,
      "Terr": "Croat",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 719539200000,
      "StartPrec": 1,
      "StartDate2": 736128000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 762480000000,
      "EpEndPrec": -99.0,
      "GWNOA": 346,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 346,
      "Region": 1,
      "Version": null,
      "Array": ["Bosnia and Herzegovina", "Croatian irregulars, Croatian Republic of Bosnia and Herzegovina", " ", " "],
      "TXT": "Bosnia and HerzegovinaCroatian irregulars, Croatian Republic of Bosnia and Herzegovina  "
    }, {
      "ID": 204,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Parliamentary forces",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 748742400000,
      "StartPrec": 1,
      "StartDate2": 749606400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 749692800000,
      "EpEndPrec": -99.0,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Parliamentary forces"],
      "TXT": "Russia (Soviet Union)Parliamentary forcesnannan"
    }, {
      "ID": 205,
      "Location": "Mexico",
      "SideA": "Mexico",
      "SideA2nd": null,
      "SideB": "EZLN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 757382400000,
      "StartPrec": 1,
      "StartDate2": 757382400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 758332800000,
      "EpEndPrec": -99.0,
      "GWNOA": 70,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 70,
      "Region": 5,
      "Version": null,
      "Array": ["Mexico", "EZLN"],
      "TXT": "MexicoEZLNnannan"
    }, {
      "ID": 205,
      "Location": "Mexico",
      "SideA": "Mexico",
      "SideA2nd": null,
      "SideB": "EPR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 757382400000,
      "StartPrec": 1,
      "StartDate2": 842832000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 851990400000,
      "EpEndPrec": -99.0,
      "GWNOA": 70,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 70,
      "Region": 5,
      "Version": null,
      "Array": ["Mexico", "EPR"],
      "TXT": "MexicoEPRnannan"
    }, {
      "ID": 206,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Chechen Republic of Ichkeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Chechnya",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 787104000000,
      "StartPrec": 1,
      "StartDate2": 787104000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Chechen Republic of Ichkeria"],
      "TXT": "Russia (Soviet Union)Chechen Republic of Ichkerianannan"
    }, {
      "ID": 206,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Chechen Republic of Ichkeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Chechnya",
      "YEAR": 1995,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 787104000000,
      "StartPrec": 1,
      "StartDate2": 787104000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Chechen Republic of Ichkeria"],
      "TXT": "Russia (Soviet Union)Chechen Republic of Ichkerianannan"
    }, {
      "ID": 206,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Chechen Republic of Ichkeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Chechnya",
      "YEAR": 1996,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 787104000000,
      "StartPrec": 1,
      "StartDate2": 787104000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 841449600000,
      "EpEndPrec": -99.0,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Chechen Republic of Ichkeria"],
      "TXT": "Russia (Soviet Union)Chechen Republic of Ichkerianannan"
    }, {
      "ID": 206,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Chechen Republic of Ichkeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Chechnya",
      "YEAR": 1999,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 787104000000,
      "StartPrec": 1,
      "StartDate2": 934329600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Chechen Republic of Ichkeria"],
      "TXT": "Russia (Soviet Union)Chechen Republic of Ichkerianannan"
    }, {
      "ID": 206,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Chechen Republic of Ichkeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Chechnya",
      "YEAR": 2000,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 787104000000,
      "StartPrec": 1,
      "StartDate2": 934329600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Chechen Republic of Ichkeria"],
      "TXT": "Russia (Soviet Union)Chechen Republic of Ichkerianannan"
    }, {
      "ID": 206,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Chechen Republic of Ichkeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Chechnya",
      "YEAR": 2001,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 787104000000,
      "StartPrec": 1,
      "StartDate2": 934329600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Chechen Republic of Ichkeria"],
      "TXT": "Russia (Soviet Union)Chechen Republic of Ichkerianannan"
    }, {
      "ID": 206,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Chechen Republic of Ichkeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Chechnya",
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 787104000000,
      "StartPrec": 1,
      "StartDate2": 934329600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Chechen Republic of Ichkeria"],
      "TXT": "Russia (Soviet Union)Chechen Republic of Ichkerianannan"
    }, {
      "ID": 206,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Chechen Republic of Ichkeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Chechnya",
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 787104000000,
      "StartPrec": 1,
      "StartDate2": 934329600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Chechen Republic of Ichkeria"],
      "TXT": "Russia (Soviet Union)Chechen Republic of Ichkerianannan"
    }, {
      "ID": 206,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Chechen Republic of Ichkeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Chechnya",
      "YEAR": 2004,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 787104000000,
      "StartPrec": 1,
      "StartDate2": 934329600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Chechen Republic of Ichkeria"],
      "TXT": "Russia (Soviet Union)Chechen Republic of Ichkerianannan"
    }, {
      "ID": 206,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Chechen Republic of Ichkeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Chechnya",
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 787104000000,
      "StartPrec": 1,
      "StartDate2": 934329600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Chechen Republic of Ichkeria"],
      "TXT": "Russia (Soviet Union)Chechen Republic of Ichkerianannan"
    }, {
      "ID": 206,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Chechen Republic of Ichkeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Chechnya",
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 787104000000,
      "StartPrec": 1,
      "StartDate2": 934329600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Chechen Republic of Ichkeria"],
      "TXT": "Russia (Soviet Union)Chechen Republic of Ichkerianannan"
    }, {
      "ID": 206,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Chechen Republic of Ichkeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Chechnya",
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 787104000000,
      "StartPrec": 1,
      "StartDate2": 934329600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Chechen Republic of Ichkeria"],
      "TXT": "Russia (Soviet Union)Chechen Republic of Ichkerianannan"
    }, {
      "ID": 207,
      "Location": "Yemen",
      "SideA": "Yemen ",
      "SideA2nd": null,
      "SideB": "Democratic Republic of Yemen",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "South Yemen",
      "YEAR": 1994,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 762134400000,
      "StartPrec": 1,
      "StartDate2": 767491200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 773539200000,
      "EpEndPrec": -99.0,
      "GWNOA": 678,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 678,
      "Region": 2,
      "Version": null,
      "Array": ["Yemen ", "Democratic Republic of Yemen"],
      "TXT": "Yemen Democratic Republic of Yemennannan"
    }, {
      "ID": 208,
      "Location": "Ecuador, Peru",
      "SideA": "Ecuador",
      "SideA2nd": null,
      "SideB": "Peru",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Cordillera del Condor",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 791078400000,
      "StartPrec": 1,
      "StartDate2": 791424000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 792979200000,
      "EpEndPrec": -99.0,
      "GWNOA": 130,
      "GWNOA2nd": null,
      "GWNOB": 135,
      "GWNOB2nd": null,
      "GWNOLoc": "130, 135",
      "Region": 5,
      "Version": null,
      "Array": ["Ecuador", "Peru"],
      "TXT": "EcuadorPerunannan"
    }, {
      "ID": 209,
      "Location": "Pakistan",
      "SideA": "Pakistan",
      "SideA2nd": null,
      "SideB": "MQM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 634348800000,
      "StartPrec": 1,
      "StartDate2": 644198400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 662601600000,
      "EpEndPrec": -99.0,
      "GWNOA": 770,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 770,
      "Region": 3,
      "Version": null,
      "Array": ["Pakistan", "MQM"],
      "TXT": "PakistanMQMnannan"
    }, {
      "ID": 209,
      "Location": "Pakistan",
      "SideA": "Pakistan",
      "SideA2nd": null,
      "SideB": "MQM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 634348800000,
      "StartPrec": 1,
      "StartDate2": 788918400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 770,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 770,
      "Region": 3,
      "Version": null,
      "Array": ["Pakistan", "MQM"],
      "TXT": "PakistanMQMnannan"
    }, {
      "ID": 209,
      "Location": "Pakistan",
      "SideA": "Pakistan",
      "SideA2nd": null,
      "SideB": "MQM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 634348800000,
      "StartPrec": 1,
      "StartDate2": 788918400000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 851990400000,
      "EpEndPrec": -99.0,
      "GWNOA": 770,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 770,
      "Region": 3,
      "Version": null,
      "Array": ["Pakistan", "MQM"],
      "TXT": "PakistanMQMnannan"
    }, {
      "ID": 209,
      "Location": "Pakistan",
      "SideA": "Pakistan",
      "SideA2nd": null,
      "SideB": "TNSM",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 634348800000,
      "StartPrec": 1,
      "StartDate2": 1184457600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 770,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 770,
      "Region": 3,
      "Version": null,
      "Array": ["Pakistan", "TNSM"],
      "TXT": "PakistanTNSMnannan"
    }, {
      "ID": 209,
      "Location": "Pakistan",
      "SideA": "Pakistan",
      "SideA2nd": null,
      "SideB": "TTP",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2008,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 634348800000,
      "StartPrec": 1,
      "StartDate2": 1184457600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 770,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 770,
      "Region": 3,
      "Version": null,
      "Array": ["Pakistan", "TTP"],
      "TXT": "PakistanTTPnannan"
    }, {
      "ID": 210,
      "Location": "Cameroon, Nigeria",
      "SideA": "Cameroon",
      "SideA2nd": null,
      "SideB": "Nigeria",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bakassi",
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 761529600000,
      "StartPrec": 1,
      "StartDate2": 828316800000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 851990400000,
      "EpEndPrec": -99.0,
      "GWNOA": 471,
      "GWNOA2nd": null,
      "GWNOB": 475,
      "GWNOB2nd": null,
      "GWNOLoc": "471, 475",
      "Region": 4,
      "Version": null,
      "Array": ["Cameroon", "Nigeria"],
      "TXT": "CameroonNigerianannan"
    }, {
      "ID": 211,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "al-Itahad al-Islami",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Somali",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 804556800000,
      "StartPrec": 3,
      "StartDate2": 804556800000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "al-Itahad al-Islami"],
      "TXT": "Ethiopiaal-Itahad al-Islaminannan"
    }, {
      "ID": 211,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "al-Itahad al-Islami",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Somali",
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 804556800000,
      "StartPrec": 3,
      "StartDate2": 804556800000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 851990400000,
      "EpEndPrec": -99.0,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "al-Itahad al-Islami"],
      "TXT": "Ethiopiaal-Itahad al-Islaminannan"
    }, {
      "ID": 211,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "al-Itahad al-Islami",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Somali",
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 804556800000,
      "StartPrec": 3,
      "StartDate2": 915148800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 946598400000,
      "EpEndPrec": -99.0,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "al-Itahad al-Islami"],
      "TXT": "Ethiopiaal-Itahad al-Islaminannan"
    }, {
      "ID": 212,
      "Location": "Niger",
      "SideA": "Niger",
      "SideA2nd": null,
      "SideB": "FDR",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eastern Niger",
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 795916800000,
      "StartPrec": 2,
      "StartDate2": 823564800000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 436,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 436,
      "Region": 4,
      "Version": null,
      "Array": ["Niger", "FDR"],
      "TXT": "NigerFDRnannan"
    }, {
      "ID": 212,
      "Location": "Niger",
      "SideA": "Niger",
      "SideA2nd": null,
      "SideB": "FARS",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Eastern Niger",
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 795916800000,
      "StartPrec": 2,
      "StartDate2": 823564800000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 880761600000,
      "EpEndPrec": -99.0,
      "GWNOA": 436,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 436,
      "Region": 4,
      "Version": null,
      "Array": ["Niger", "FARS"],
      "TXT": "NigerFARSnannan"
    }, {
      "ID": 213,
      "Location": "Comoros",
      "SideA": "Comoros",
      "SideA2nd": null,
      "SideB": "MPA\/Republic of Anjouan",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Anjouan",
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 873244800000,
      "StartPrec": 1,
      "StartDate2": 873417600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 881971200000,
      "EpEndPrec": -99.0,
      "GWNOA": 581,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 581,
      "Region": 4,
      "Version": null,
      "Array": ["Comoros", "MPA\/Republic of Anjouan"],
      "TXT": "ComorosMPA\/Republic of Anjouannannan"
    }, {
      "ID": 214,
      "Location": "Congo",
      "SideA": "Congo",
      "SideA2nd": null,
      "SideB": "Cobras, Ninjas",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 752371200000,
      "StartPrec": 2,
      "StartDate2": 752371200000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 484,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 484,
      "Region": 4,
      "Version": null,
      "Array": ["Congo", "Cobras, Ninjas"],
      "TXT": "CongoCobras, Ninjasnannan"
    }, {
      "ID": 214,
      "Location": "Congo",
      "SideA": "Congo",
      "SideA2nd": null,
      "SideB": "Ninjas",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 752371200000,
      "StartPrec": 2,
      "StartDate2": 752371200000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 759888000000,
      "EpEndPrec": -99.0,
      "GWNOA": 484,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 484,
      "Region": 4,
      "Version": null,
      "Array": ["Congo", "Ninjas"],
      "TXT": "CongoNinjasnannan"
    }, {
      "ID": 214,
      "Location": "Congo",
      "SideA": "Congo",
      "SideA2nd": "Angola, Chad",
      "SideB": "Cobras, Cocoyes",
      "SideB2nd": "Angola, Chad",
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1997,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 752371200000,
      "StartPrec": 2,
      "StartDate2": 865555200000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 484,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": "540, 483",
      "GWNOLoc": 484,
      "Region": 4,
      "Version": null,
      "Array": ["Congo", "Cobras, Cocoyes", "Angola, Chad", "Angola, Chad"],
      "TXT": "CongoCobras, CocoyesAngola, ChadAngola, Chad"
    }, {
      "ID": 214,
      "Location": "Congo",
      "SideA": "Congo",
      "SideA2nd": "Angola, Chad",
      "SideB": "Cocoyes, Ninjas, Ntsiloulous",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1998,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 752371200000,
      "StartPrec": 2,
      "StartDate2": 865555200000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 484,
      "GWNOA2nd": "540, 483",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 484,
      "Region": 4,
      "Version": null,
      "Array": ["Congo", "Cocoyes, Ninjas, Ntsiloulous", "Angola, Chad"],
      "TXT": "CongoCocoyes, Ninjas, NtsiloulousAngola, Chadnan"
    }, {
      "ID": 214,
      "Location": "Congo",
      "SideA": "Congo",
      "SideA2nd": "Angola, Chad",
      "SideB": "Cocoyes, Ninjas, Ntsiloulous",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 752371200000,
      "StartPrec": 2,
      "StartDate2": 865555200000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 946425600000,
      "EpEndPrec": -99.0,
      "GWNOA": 484,
      "GWNOA2nd": "540, 483",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 484,
      "Region": 4,
      "Version": null,
      "Array": ["Congo", "Cocoyes, Ninjas, Ntsiloulous", "Angola, Chad"],
      "TXT": "CongoCocoyes, Ninjas, NtsiloulousAngola, Chadnan"
    }, {
      "ID": 214,
      "Location": "Congo",
      "SideA": "Congo",
      "SideA2nd": "Angola",
      "SideB": "Ntsiloulous",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 752371200000,
      "StartPrec": 2,
      "StartDate2": 1018396800000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 1041292800000,
      "EpEndPrec": -99.0,
      "GWNOA": 484,
      "GWNOA2nd": 540,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 484,
      "Region": 4,
      "Version": null,
      "Array": ["Congo", "Ntsiloulous", "Angola"],
      "TXT": "CongoNtsiloulousAngolanan"
    }, {
      "ID": 215,
      "Location": "Eritrea, Ethiopia",
      "SideA": "Eritrea",
      "SideA2nd": null,
      "SideB": "Ethiopia",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Badme",
      "YEAR": 1998,
      "Int": 2,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 894412800000,
      "StartPrec": 1,
      "StartDate2": 896572800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 531,
      "GWNOA2nd": null,
      "GWNOB": 530,
      "GWNOB2nd": null,
      "GWNOLoc": "531, 530",
      "Region": 4,
      "Version": null,
      "Array": ["Eritrea", "Ethiopia"],
      "TXT": "EritreaEthiopianannan"
    }, {
      "ID": 215,
      "Location": "Eritrea, Ethiopia",
      "SideA": "Eritrea",
      "SideA2nd": null,
      "SideB": "Ethiopia",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Badme",
      "YEAR": 1999,
      "Int": 2,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 894412800000,
      "StartPrec": 1,
      "StartDate2": 896572800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 531,
      "GWNOA2nd": null,
      "GWNOB": 530,
      "GWNOB2nd": null,
      "GWNOLoc": "531, 530",
      "Region": 4,
      "Version": null,
      "Array": ["Eritrea", "Ethiopia"],
      "TXT": "EritreaEthiopianannan"
    }, {
      "ID": 215,
      "Location": "Eritrea, Ethiopia",
      "SideA": "Eritrea",
      "SideA2nd": null,
      "SideB": "Ethiopia",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Badme",
      "YEAR": 2000,
      "Int": 2,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 894412800000,
      "StartPrec": 1,
      "StartDate2": 896572800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 976579200000,
      "EpEndPrec": -99.0,
      "GWNOA": 531,
      "GWNOA2nd": null,
      "GWNOB": 530,
      "GWNOB2nd": null,
      "GWNOLoc": "531, 530",
      "Region": 4,
      "Version": null,
      "Array": ["Eritrea", "Ethiopia"],
      "TXT": "EritreaEthiopianannan"
    }, {
      "ID": 216,
      "Location": "Guinea-Bissau",
      "SideA": "Guinea-Bissau",
      "SideA2nd": "Guinea, Senegal",
      "SideB": "Military Junta for the Consolidation of Democracy, Peace and Justice",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 897177600000,
      "StartPrec": 1,
      "StartDate2": 897177600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 404,
      "GWNOA2nd": "438, 433",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 404,
      "Region": 4,
      "Version": null,
      "Array": ["Guinea-Bissau", "Military Junta for the Consolidation of Democracy, Peace and Justice", "Guinea, Senegal"],
      "TXT": "Guinea-BissauMilitary Junta for the Consolidation of Democracy, Peace and JusticeGuinea, Senegalnan"
    }, {
      "ID": 216,
      "Location": "Guinea-Bissau",
      "SideA": "Guinea-Bissau",
      "SideA2nd": "Guinea, Senegal",
      "SideB": "Military Junta for the Consolidation of Democracy, Peace and Justice",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 897177600000,
      "StartPrec": 1,
      "StartDate2": 897177600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 926294400000,
      "EpEndPrec": -99.0,
      "GWNOA": 404,
      "GWNOA2nd": "438, 433",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 404,
      "Region": 4,
      "Version": null,
      "Array": ["Guinea-Bissau", "Military Junta for the Consolidation of Democracy, Peace and Justice", "Guinea, Senegal"],
      "TXT": "Guinea-BissauMilitary Junta for the Consolidation of Democracy, Peace and JusticeGuinea, Senegalnan"
    }, {
      "ID": 217,
      "Location": "Lesotho",
      "SideA": "Lesotho",
      "SideA2nd": "Botswana, South Africa",
      "SideB": "Military faction",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 904867200000,
      "StartPrec": 1,
      "StartDate2": 906508800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 912384000000,
      "EpEndPrec": -99.0,
      "GWNOA": 570,
      "GWNOA2nd": "571, 560",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 570,
      "Region": 4,
      "Version": null,
      "Array": ["Lesotho", "Military faction", "Botswana, South Africa"],
      "TXT": "LesothoMilitary factionBotswana, South Africanan"
    }, {
      "ID": 218,
      "Location": "Yugoslavia (Serbia)",
      "SideA": "Yugoslavia (Serbia)",
      "SideA2nd": null,
      "SideB": "UCK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kosovo",
      "YEAR": 1998,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 830131200000,
      "StartPrec": 1,
      "StartDate2": 888710400000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 345,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 345,
      "Region": 1,
      "Version": null,
      "Array": ["Yugoslavia (Serbia)", "UCK"],
      "TXT": "Yugoslavia (Serbia)UCKnannan"
    }, {
      "ID": 218,
      "Location": "Yugoslavia (Serbia)",
      "SideA": "Yugoslavia (Serbia)",
      "SideA2nd": null,
      "SideB": "UCK",
      "SideB2nd": "Belgium, Canada, Czech Republic, Denmark, France, German Federal Republic, Greece, Hungary, Iceland, Italy\/Sardinia, Luxembourg, Netherlands, Norway, Poland, Portugal, Spain, Turkey\/Ottoman Empire, United Kingdom, United States of America",
      "Incomp": 1,
      "Terr": "Kosovo",
      "YEAR": 1999,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 830131200000,
      "StartPrec": 1,
      "StartDate2": 888710400000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 928368000000,
      "EpEndPrec": -99.0,
      "GWNOA": 345,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": "211, 20, 316, 390, 220, 260, 350, 310, 395, 325, 212, 210, 385, 290, 235, 230, 640, 200, 2",
      "GWNOLoc": 345,
      "Region": 1,
      "Version": null,
      "Array": ["Yugoslavia (Serbia)", "UCK", "Belgium, Canada, Czech Republic, Denmark, France, German Federal Republic, Greece, Hungary, Iceland, Italy\/Sardinia, Luxembourg, Netherlands, Norway, Poland, Portugal, Spain, Turkey\/Ottoman Empire, United Kingdom, United States of America"],
      "TXT": "Yugoslavia (Serbia)UCKnanBelgium, Canada, Czech Republic, Denmark, France, German Federal Republic, Greece, Hungary, Iceland, Italy\/Sardinia, Luxembourg, Netherlands, Norway, Poland, Portugal, Spain, Turkey\/Ottoman Empire, United Kingdom, United States of America"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1977,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 220924800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1978,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 220924800000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 283910400000,
      "EpEndPrec": -99.0,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1980,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 315532800000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1981,
      "Int": 2,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 315532800000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 378604800000,
      "EpEndPrec": -99.0,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1983,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 425865600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1984,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 425865600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1985,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 425865600000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 504835200000,
      "EpEndPrec": -99.0,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1987,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 562723200000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1988,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 562723200000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 562723200000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 562723200000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 562723200000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 562723200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 725760000000,
      "EpEndPrec": -99.0,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 757382400000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 757382400000,
      "Startprec2": 4,
      "EpEnd": 1,
      "EpEndDate": 820368000000,
      "EpEndPrec": -99.0,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 883612800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 883612800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 883612800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 2001,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 883612800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 883612800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 883612800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 883612800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 883612800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 883612800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 883612800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 219,
      "Location": "Ethiopia",
      "SideA": "Ethiopia",
      "SideA2nd": null,
      "SideB": "OLF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Oromiya",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 144547200000,
      "StartPrec": 4,
      "StartDate2": 883612800000,
      "Startprec2": 4,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 530,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 530,
      "Region": 4,
      "Version": null,
      "Array": ["Ethiopia", "OLF"],
      "TXT": "EthiopiaOLFnannan"
    }, {
      "ID": 220,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Wahhabi movement of the Buinaksk district",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Dagestan",
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 935884800000,
      "StartPrec": 1,
      "StartDate2": 936230400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 938131200000,
      "EpEndPrec": -99.0,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Wahhabi movement of the Buinaksk district"],
      "TXT": "Russia (Soviet Union)Wahhabi movement of the Buinaksk districtnannan"
    }, {
      "ID": 221,
      "Location": "Uzbekistan",
      "SideA": "Uzbekistan",
      "SideA2nd": null,
      "SideB": "IMU",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 919123200000,
      "StartPrec": 1,
      "StartDate2": 922752000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 704,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 704,
      "Region": 3,
      "Version": null,
      "Array": ["Uzbekistan", "IMU"],
      "TXT": "UzbekistanIMUnannan"
    }, {
      "ID": 221,
      "Location": "Uzbekistan",
      "SideA": "Uzbekistan",
      "SideA2nd": "Kyrgyz Republic",
      "SideB": "IMU",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 919123200000,
      "StartPrec": 1,
      "StartDate2": 922752000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 978220800000,
      "EpEndPrec": -99.0,
      "GWNOA": 704,
      "GWNOA2nd": 703,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 704,
      "Region": 3,
      "Version": null,
      "Array": ["Uzbekistan", "IMU", "Kyrgyz Republic"],
      "TXT": "UzbekistanIMUKyrgyz Republicnan"
    }, {
      "ID": 221,
      "Location": "Uzbekistan",
      "SideA": "Uzbekistan",
      "SideA2nd": "Kyrgyz Republic",
      "SideB": "JIG",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 919123200000,
      "StartPrec": 1,
      "StartDate2": 1080604800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1096502400000,
      "EpEndPrec": -99.0,
      "GWNOA": 704,
      "GWNOA2nd": 703,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 704,
      "Region": 3,
      "Version": null,
      "Array": ["Uzbekistan", "JIG", "Kyrgyz Republic"],
      "TXT": "UzbekistanJIGKyrgyz Republicnan"
    }, {
      "ID": 222,
      "Location": "Central African Republic",
      "SideA": "Central African Republic",
      "SideA2nd": "France",
      "SideB": "Military faction (forces of Cyriac Souke)",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 829872000000,
      "StartPrec": 1,
      "StartDate2": 832377600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 482,
      "GWNOA2nd": 220,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 482,
      "Region": 4,
      "Version": null,
      "Array": ["Central African Republic", "Military faction (forces of Cyriac Souke)", "France"],
      "TXT": "Central African RepublicMilitary faction (forces of Cyriac Souke)Francenan"
    }, {
      "ID": 222,
      "Location": "Central African Republic",
      "SideA": "Central African Republic",
      "SideA2nd": "France",
      "SideB": "Military faction (forces of Cyriac Souke)",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 829872000000,
      "StartPrec": 1,
      "StartDate2": 832377600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 854150400000,
      "EpEndPrec": -99.0,
      "GWNOA": 482,
      "GWNOA2nd": 220,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 482,
      "Region": 4,
      "Version": null,
      "Array": ["Central African Republic", "Military faction (forces of Cyriac Souke)", "France"],
      "TXT": "Central African RepublicMilitary faction (forces of Cyriac Souke)Francenan"
    }, {
      "ID": 222,
      "Location": "Central African Republic",
      "SideA": "Central African Republic",
      "SideA2nd": "Libya",
      "SideB": "Military faction (forces of Andr\xE9 Kolingba)",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2001,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 829872000000,
      "StartPrec": 1,
      "StartDate2": 1001894400000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 482,
      "GWNOA2nd": 620,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 482,
      "Region": 4,
      "Version": null,
      "Array": ["Central African Republic", "Military faction (forces of Andr\xE9 Kolingba)", "Libya"],
      "TXT": "Central African RepublicMilitary faction (forces of Andr\xE9 Kolingba)Libyanan"
    }, {
      "ID": 222,
      "Location": "Central African Republic",
      "SideA": "Central African Republic",
      "SideA2nd": null,
      "SideB": "Forces of Francois Bozize",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 829872000000,
      "StartPrec": 1,
      "StartDate2": 1001894400000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 1041292800000,
      "EpEndPrec": -99.0,
      "GWNOA": 482,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 482,
      "Region": 4,
      "Version": null,
      "Array": ["Central African Republic", "Forces of Francois Bozize"],
      "TXT": "Central African RepublicForces of Francois Bozizenannan"
    }, {
      "ID": 222,
      "Location": "Central African Republic",
      "SideA": "Central African Republic",
      "SideA2nd": "France",
      "SideB": "UFDR",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 829872000000,
      "StartPrec": 1,
      "StartDate2": 1164585600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1167523200000,
      "EpEndPrec": -99.0,
      "GWNOA": 482,
      "GWNOA2nd": 220,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 482,
      "Region": 4,
      "Version": null,
      "Array": ["Central African Republic", "UFDR", "France"],
      "TXT": "Central African RepublicUFDRFrancenan"
    }, {
      "ID": 223,
      "Location": "Macedonia",
      "SideA": "Macedonia",
      "SideA2nd": null,
      "SideB": "UCK",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2001,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 947548800000,
      "StartPrec": 1,
      "StartDate2": 988675200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 997660800000,
      "EpEndPrec": -99.0,
      "GWNOA": 343,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 343,
      "Region": 1,
      "Version": null,
      "Array": ["Macedonia", "UCK"],
      "TXT": "MacedoniaUCKnannan"
    }, {
      "ID": 224,
      "Location": "United States of America",
      "SideA": "United States of America",
      "SideA2nd": "Australia, Canada, France, German Federal Republic, Italy\/Sardinia, Poland, Turkey\/Ottoman Empire, United Kingdom",
      "SideB": "al-Qaida ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2001,
      "Int": 2,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 1000166400000,
      "StartPrec": 1,
      "StartDate2": 1000166400000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 2,
      "GWNOA2nd": "900, 20, 220, 260, 325, 290, 640, 200",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 2,
      "Region": 5,
      "Version": null,
      "Array": ["United States of America", "al-Qaida ", "Australia, Canada, France, German Federal Republic, Italy\/Sardinia, Poland, Turkey\/Ottoman Empire, United Kingdom"],
      "TXT": "United States of Americaal-Qaida Australia, Canada, France, German Federal Republic, Italy\/Sardinia, Poland, Turkey\/Ottoman Empire, United Kingdomnan"
    }, {
      "ID": 224,
      "Location": "United States of America",
      "SideA": "United States of America",
      "SideA2nd": "Afghanistan, Australia, Canada, Denmark, France, German Federal Republic, Greece, Italy\/Sardinia, Japan, Jordan, Lithuania, Netherlands, New Zealand, Norway, Pakistan, Poland, Rumania, Spain, Turkey\/Ottoman Empire, United Kingdom",
      "SideB": "al-Qaida ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 1000166400000,
      "StartPrec": 1,
      "StartDate2": 1000166400000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1041292800000,
      "EpEndPrec": -99.0,
      "GWNOA": 2,
      "GWNOA2nd": "700, 900, 20, 390, 220, 260, 350, 325, 740, 663, 368, 210, 920, 385, 770, 290, 360, 230, 640, 200",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 2,
      "Region": 5,
      "Version": null,
      "Array": ["United States of America", "al-Qaida ", "Afghanistan, Australia, Canada, Denmark, France, German Federal Republic, Greece, Italy\/Sardinia, Japan, Jordan, Lithuania, Netherlands, New Zealand, Norway, Pakistan, Poland, Rumania, Spain, Turkey\/Ottoman Empire, United Kingdom"],
      "TXT": "United States of Americaal-Qaida Afghanistan, Australia, Canada, Denmark, France, German Federal Republic, Greece, Italy\/Sardinia, Japan, Jordan, Lithuania, Netherlands, New Zealand, Norway, Pakistan, Poland, Rumania, Spain, Turkey\/Ottoman Empire, United Kingdomnan"
    }, {
      "ID": 224,
      "Location": "United States of America",
      "SideA": "United States of America",
      "SideA2nd": "Afghanistan, Belgium, Canada, Czech Republic, France, German Federal Republic, Italy\/Sardinia, Pakistan, Poland, Portugal, Rumania, Saudi Arabia, Slovakia, Spain, United Kingdom",
      "SideB": "al-Qaida ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 1000166400000,
      "StartPrec": 1,
      "StartDate2": 1072915200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 2,
      "GWNOA2nd": "700, 211, 20, 316, 220, 260, 325, 770, 290, 235, 360, 670, 317, 230, 200",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 2,
      "Region": 5,
      "Version": null,
      "Array": ["United States of America", "al-Qaida ", "Afghanistan, Belgium, Canada, Czech Republic, France, German Federal Republic, Italy\/Sardinia, Pakistan, Poland, Portugal, Rumania, Saudi Arabia, Slovakia, Spain, United Kingdom"],
      "TXT": "United States of Americaal-Qaida Afghanistan, Belgium, Canada, Czech Republic, France, German Federal Republic, Italy\/Sardinia, Pakistan, Poland, Portugal, Rumania, Saudi Arabia, Slovakia, Spain, United Kingdomnan"
    }, {
      "ID": 224,
      "Location": "United States of America",
      "SideA": "United States of America",
      "SideA2nd": "Belgium, Canada, Croatia, Denmark, Estonia, France, Italy\/Sardinia, Kuwait, Netherlands, Norway, Pakistan, Poland, Rumania, Saudi Arabia, Slovakia, Spain, United Kingdom",
      "SideB": "al-Qaida ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 1000166400000,
      "StartPrec": 1,
      "StartDate2": 1072915200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 2,
      "GWNOA2nd": "211, 20, 344, 390, 366, 220, 325, 690, 210, 385, 770, 290, 360, 670, 317, 230, 200",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 2,
      "Region": 5,
      "Version": null,
      "Array": ["United States of America", "al-Qaida ", "Belgium, Canada, Croatia, Denmark, Estonia, France, Italy\/Sardinia, Kuwait, Netherlands, Norway, Pakistan, Poland, Rumania, Saudi Arabia, Slovakia, Spain, United Kingdom"],
      "TXT": "United States of Americaal-Qaida Belgium, Canada, Croatia, Denmark, Estonia, France, Italy\/Sardinia, Kuwait, Netherlands, Norway, Pakistan, Poland, Rumania, Saudi Arabia, Slovakia, Spain, United Kingdomnan"
    }, {
      "ID": 224,
      "Location": "United States of America",
      "SideA": "United States of America",
      "SideA2nd": "Afghanistan, Pakistan, Saudi Arabia, United Kingdom",
      "SideB": "al-Qaida ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 1000166400000,
      "StartPrec": 1,
      "StartDate2": 1072915200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 2,
      "GWNOA2nd": "700, 770, 670, 200",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 2,
      "Region": 5,
      "Version": null,
      "Array": ["United States of America", "al-Qaida ", "Afghanistan, Pakistan, Saudi Arabia, United Kingdom"],
      "TXT": "United States of Americaal-Qaida Afghanistan, Pakistan, Saudi Arabia, United Kingdomnan"
    }, {
      "ID": 224,
      "Location": "United States of America",
      "SideA": "United States of America",
      "SideA2nd": "Afghanistan, Pakistan, Saudi Arabia, United Kingdom",
      "SideB": "al-Qaida ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 1000166400000,
      "StartPrec": 1,
      "StartDate2": 1072915200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 2,
      "GWNOA2nd": "700, 770, 670, 200",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 2,
      "Region": 5,
      "Version": null,
      "Array": ["United States of America", "al-Qaida ", "Afghanistan, Pakistan, Saudi Arabia, United Kingdom"],
      "TXT": "United States of Americaal-Qaida Afghanistan, Pakistan, Saudi Arabia, United Kingdomnan"
    }, {
      "ID": 224,
      "Location": "United States of America",
      "SideA": "United States of America",
      "SideA2nd": "Afghanistan, Pakistan, Rumania",
      "SideB": "al-Qaida ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 1,
      "Type": 4,
      "StartDate": 1000166400000,
      "StartPrec": 1,
      "StartDate2": 1072915200000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 2,
      "GWNOA2nd": "700, 770, 360",
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 2,
      "Region": 5,
      "Version": null,
      "Array": ["United States of America", "al-Qaida ", "Afghanistan, Pakistan, Rumania"],
      "TXT": "United States of Americaal-Qaida Afghanistan, Pakistan, Rumanianan"
    }, {
      "ID": 225,
      "Location": "Cote D\u2019Ivoire",
      "SideA": "Cote D\u2019Ivoire",
      "SideA2nd": null,
      "SideB": "MJP, MPCI, MPIGO",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 1032393600000,
      "StartPrec": 1,
      "StartDate2": 1032393600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 437,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 437,
      "Region": 4,
      "Version": null,
      "Array": ["Cote D\u2019Ivoire", "MJP, MPCI, MPIGO"],
      "TXT": "Cote D\u2019IvoireMJP, MPCI, MPIGOnannan"
    }, {
      "ID": 225,
      "Location": "Cote D\u2019Ivoire",
      "SideA": "Cote D\u2019Ivoire",
      "SideA2nd": null,
      "SideB": "MJP, MPIGO",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 1032393600000,
      "StartPrec": 1,
      "StartDate2": 1032393600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 437,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 437,
      "Region": 4,
      "Version": null,
      "Array": ["Cote D\u2019Ivoire", "MJP, MPIGO"],
      "TXT": "Cote D\u2019IvoireMJP, MPIGOnannan"
    }, {
      "ID": 225,
      "Location": "Cote D\u2019Ivoire",
      "SideA": "Cote D\u2019Ivoire",
      "SideA2nd": null,
      "SideB": "FN",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 1032393600000,
      "StartPrec": 1,
      "StartDate2": 1032393600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1104451200000,
      "EpEndPrec": -99.0,
      "GWNOA": 437,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 437,
      "Region": 4,
      "Version": null,
      "Array": ["Cote D\u2019Ivoire", "FN"],
      "TXT": "Cote D\u2019IvoireFNnannan"
    }, {
      "ID": 226,
      "Location": "Australia, Iraq, United Kingdom, United States of America",
      "SideA": "Iraq",
      "SideA2nd": null,
      "SideB": "Australia, United Kingdom, United States of America",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2003,
      "Int": 2,
      "CumInt": 1,
      "Type": 2,
      "StartDate": 1048118400000,
      "StartPrec": 1,
      "StartDate2": 1048291200000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 1049846400000,
      "EpEndPrec": -99.0,
      "GWNOA": 645,
      "GWNOA2nd": null,
      "GWNOB": "900, 200, 2",
      "GWNOB2nd": null,
      "GWNOLoc": "900, 645, 200, 2",
      "Region": 3,
      "Version": null,
      "Array": ["Iraq", "Australia, United Kingdom, United States of America"],
      "TXT": "IraqAustralia, United Kingdom, United States of Americanannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ABSU",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 1989,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 606009600000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ABSU"],
      "TXT": "IndiaABSUnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "ABSU",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 606009600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 662601600000,
      "EpEndPrec": -99.0,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "ABSU"],
      "TXT": "IndiaABSUnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NDFB",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 725846400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NDFB"],
      "TXT": "IndiaNDFBnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NDFB",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 725846400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NDFB"],
      "TXT": "IndiaNDFBnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NDFB",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 725846400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NDFB"],
      "TXT": "IndiaNDFBnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NDFB",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 725846400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NDFB"],
      "TXT": "IndiaNDFBnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NDFB",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 725846400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NDFB"],
      "TXT": "IndiaNDFBnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NDFB",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 725846400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NDFB"],
      "TXT": "IndiaNDFBnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NDFB",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 725846400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NDFB"],
      "TXT": "IndiaNDFBnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NDFB",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 2000,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 725846400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NDFB"],
      "TXT": "IndiaNDFBnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NDFB",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 2001,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 725846400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NDFB"],
      "TXT": "IndiaNDFBnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NDFB",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 2002,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 725846400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NDFB"],
      "TXT": "IndiaNDFBnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NDFB",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 725846400000,
      "Startprec2": 5,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NDFB"],
      "TXT": "IndiaNDFBnannan"
    }, {
      "ID": 227,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "NDFB",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Bodoland",
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 606009600000,
      "StartPrec": 1,
      "StartDate2": 725846400000,
      "Startprec2": 5,
      "EpEnd": 1,
      "EpEndDate": 1097798400000,
      "EpEndPrec": -99.0,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "NDFB"],
      "TXT": "IndiaNDFBnannan"
    }, {
      "ID": 228,
      "Location": "Myanmar",
      "SideA": "Myanmar",
      "SideA2nd": null,
      "SideB": "UWSA",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Wa",
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 857174400000,
      "StartPrec": 3,
      "StartDate2": 858470400000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 883526400000,
      "EpEndPrec": -99.0,
      "GWNOA": 775,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 775,
      "Region": 3,
      "Version": null,
      "Array": ["Myanmar", "UWSA"],
      "TXT": "MyanmarUWSAnannan"
    }, {
      "ID": 248,
      "Location": "Thailand",
      "SideA": "Thailand",
      "SideA2nd": null,
      "SideB": "Patani insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Patani",
      "YEAR": 2003,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": -157766400000,
      "StartPrec": 5,
      "StartDate2": 1067040000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 800,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 800,
      "Region": 3,
      "Version": null,
      "Array": ["Thailand", "Patani insurgents"],
      "TXT": "ThailandPatani insurgentsnannan"
    }, {
      "ID": 248,
      "Location": "Thailand",
      "SideA": "Thailand",
      "SideA2nd": null,
      "SideB": "Patani insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Patani",
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": -157766400000,
      "StartPrec": 5,
      "StartDate2": 1067040000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 800,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 800,
      "Region": 3,
      "Version": null,
      "Array": ["Thailand", "Patani insurgents"],
      "TXT": "ThailandPatani insurgentsnannan"
    }, {
      "ID": 248,
      "Location": "Thailand",
      "SideA": "Thailand",
      "SideA2nd": null,
      "SideB": "Patani insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Patani",
      "YEAR": 2005,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": -157766400000,
      "StartPrec": 5,
      "StartDate2": 1067040000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 800,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 800,
      "Region": 3,
      "Version": null,
      "Array": ["Thailand", "Patani insurgents"],
      "TXT": "ThailandPatani insurgentsnannan"
    }, {
      "ID": 248,
      "Location": "Thailand",
      "SideA": "Thailand",
      "SideA2nd": null,
      "SideB": "Patani insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Patani",
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": -157766400000,
      "StartPrec": 5,
      "StartDate2": 1067040000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 800,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 800,
      "Region": 3,
      "Version": null,
      "Array": ["Thailand", "Patani insurgents"],
      "TXT": "ThailandPatani insurgentsnannan"
    }, {
      "ID": 248,
      "Location": "Thailand",
      "SideA": "Thailand",
      "SideA2nd": null,
      "SideB": "Patani insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Patani",
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": -157766400000,
      "StartPrec": 5,
      "StartDate2": 1067040000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 800,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 800,
      "Region": 3,
      "Version": null,
      "Array": ["Thailand", "Patani insurgents"],
      "TXT": "ThailandPatani insurgentsnannan"
    }, {
      "ID": 248,
      "Location": "Thailand",
      "SideA": "Thailand",
      "SideA2nd": null,
      "SideB": "Patani insurgents",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Patani",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": -157766400000,
      "StartPrec": 5,
      "StartDate2": 1067040000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 800,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 800,
      "Region": 3,
      "Version": null,
      "Array": ["Thailand", "Patani insurgents"],
      "TXT": "ThailandPatani insurgentsnannan"
    }, {
      "ID": 249,
      "Location": "Nigeria",
      "SideA": "Nigeria",
      "SideA2nd": null,
      "SideB": "Ahlul Sunnah Jamaa",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Northern Nigeria",
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 1101859200000,
      "StartPrec": 3,
      "StartDate2": 1101859200000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 1099094400000,
      "EpEndPrec": -99.0,
      "GWNOA": 475,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 475,
      "Region": 4,
      "Version": null,
      "Array": ["Nigeria", "Ahlul Sunnah Jamaa"],
      "TXT": "NigeriaAhlul Sunnah Jamaanannan"
    }, {
      "ID": 250,
      "Location": "Nigeria",
      "SideA": "Nigeria",
      "SideA2nd": null,
      "SideB": "NDPVF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Niger Delta",
      "YEAR": 2004,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 1086393600000,
      "StartPrec": 1,
      "StartDate2": 1086393600000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1096416000000,
      "EpEndPrec": -99.0,
      "GWNOA": 475,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 475,
      "Region": 4,
      "Version": null,
      "Array": ["Nigeria", "NDPVF"],
      "TXT": "NigeriaNDPVFnannan"
    }, {
      "ID": 251,
      "Location": "Israel",
      "SideA": "Israel",
      "SideA2nd": null,
      "SideB": "Hezbollah",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Southern Lebanon",
      "YEAR": 1990,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 525916800000,
      "StartPrec": 4,
      "StartDate2": 647568000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 666,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 666,
      "Region": 2,
      "Version": null,
      "Array": ["Israel", "Hezbollah"],
      "TXT": "IsraelHezbollahnannan"
    }, {
      "ID": 251,
      "Location": "Israel",
      "SideA": "Israel",
      "SideA2nd": null,
      "SideB": "Hezbollah",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Southern Lebanon",
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 525916800000,
      "StartPrec": 4,
      "StartDate2": 647568000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 666,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 666,
      "Region": 2,
      "Version": null,
      "Array": ["Israel", "Hezbollah"],
      "TXT": "IsraelHezbollahnannan"
    }, {
      "ID": 251,
      "Location": "Israel",
      "SideA": "Israel",
      "SideA2nd": null,
      "SideB": "Hezbollah",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Southern Lebanon",
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 525916800000,
      "StartPrec": 4,
      "StartDate2": 647568000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 666,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 666,
      "Region": 2,
      "Version": null,
      "Array": ["Israel", "Hezbollah"],
      "TXT": "IsraelHezbollahnannan"
    }, {
      "ID": 251,
      "Location": "Israel",
      "SideA": "Israel",
      "SideA2nd": null,
      "SideB": "Hezbollah",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Southern Lebanon",
      "YEAR": 1993,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 525916800000,
      "StartPrec": 4,
      "StartDate2": 647568000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 666,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 666,
      "Region": 2,
      "Version": null,
      "Array": ["Israel", "Hezbollah"],
      "TXT": "IsraelHezbollahnannan"
    }, {
      "ID": 251,
      "Location": "Israel",
      "SideA": "Israel",
      "SideA2nd": null,
      "SideB": "Hezbollah",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Southern Lebanon",
      "YEAR": 1994,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 525916800000,
      "StartPrec": 4,
      "StartDate2": 647568000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 666,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 666,
      "Region": 2,
      "Version": null,
      "Array": ["Israel", "Hezbollah"],
      "TXT": "IsraelHezbollahnannan"
    }, {
      "ID": 251,
      "Location": "Israel",
      "SideA": "Israel",
      "SideA2nd": null,
      "SideB": "Hezbollah",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Southern Lebanon",
      "YEAR": 1995,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 525916800000,
      "StartPrec": 4,
      "StartDate2": 647568000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 666,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 666,
      "Region": 2,
      "Version": null,
      "Array": ["Israel", "Hezbollah"],
      "TXT": "IsraelHezbollahnannan"
    }, {
      "ID": 251,
      "Location": "Israel",
      "SideA": "Israel",
      "SideA2nd": null,
      "SideB": "Hezbollah",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Southern Lebanon",
      "YEAR": 1996,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 525916800000,
      "StartPrec": 4,
      "StartDate2": 647568000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 666,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 666,
      "Region": 2,
      "Version": null,
      "Array": ["Israel", "Hezbollah"],
      "TXT": "IsraelHezbollahnannan"
    }, {
      "ID": 251,
      "Location": "Israel",
      "SideA": "Israel",
      "SideA2nd": null,
      "SideB": "Hezbollah",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Southern Lebanon",
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 525916800000,
      "StartPrec": 4,
      "StartDate2": 647568000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 666,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 666,
      "Region": 2,
      "Version": null,
      "Array": ["Israel", "Hezbollah"],
      "TXT": "IsraelHezbollahnannan"
    }, {
      "ID": 251,
      "Location": "Israel",
      "SideA": "Israel",
      "SideA2nd": null,
      "SideB": "Hezbollah",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Southern Lebanon",
      "YEAR": 1998,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 525916800000,
      "StartPrec": 4,
      "StartDate2": 647568000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 666,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 666,
      "Region": 2,
      "Version": null,
      "Array": ["Israel", "Hezbollah"],
      "TXT": "IsraelHezbollahnannan"
    }, {
      "ID": 251,
      "Location": "Israel",
      "SideA": "Israel",
      "SideA2nd": null,
      "SideB": "Hezbollah",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Southern Lebanon",
      "YEAR": 1999,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 525916800000,
      "StartPrec": 4,
      "StartDate2": 647568000000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 946598400000,
      "EpEndPrec": -99.0,
      "GWNOA": 666,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 666,
      "Region": 2,
      "Version": null,
      "Array": ["Israel", "Hezbollah"],
      "TXT": "IsraelHezbollahnannan"
    }, {
      "ID": 251,
      "Location": "Israel",
      "SideA": "Israel",
      "SideA2nd": null,
      "SideB": "Hezbollah",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Southern Lebanon",
      "YEAR": 2006,
      "Int": 1,
      "CumInt": 1,
      "Type": 3,
      "StartDate": 525916800000,
      "StartPrec": 4,
      "StartDate2": 1152748800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 1155513600000,
      "EpEndPrec": -99.0,
      "GWNOA": 666,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 666,
      "Region": 2,
      "Version": null,
      "Array": ["Israel", "Hezbollah"],
      "TXT": "IsraelHezbollahnannan"
    }, {
      "ID": 252,
      "Location": "Tanzania, Uganda",
      "SideA": "Tanzania",
      "SideA2nd": null,
      "SideB": "Uganda",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kagera Salient",
      "YEAR": 1978,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 279590400000,
      "StartPrec": 2,
      "StartDate2": 279936000000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 283910400000,
      "EpEndPrec": -99.0,
      "GWNOA": 510,
      "GWNOA2nd": null,
      "GWNOB": 500,
      "GWNOB2nd": null,
      "GWNOLoc": "510, 500",
      "Region": 4,
      "Version": null,
      "Array": ["Tanzania", "Uganda"],
      "TXT": "TanzaniaUgandanannan"
    }, {
      "ID": 253,
      "Location": "Mauritania",
      "SideA": "Mauritania",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1975,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 187833600000,
      "StartPrec": 2,
      "StartDate2": 187833600000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 435,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 435,
      "Region": 4,
      "Version": null,
      "Array": ["Mauritania", "POLISARIO"],
      "TXT": "MauritaniaPOLISARIOnannan"
    }, {
      "ID": 253,
      "Location": "Mauritania",
      "SideA": "Mauritania",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1976,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 187833600000,
      "StartPrec": 2,
      "StartDate2": 187833600000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 435,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 435,
      "Region": 4,
      "Version": null,
      "Array": ["Mauritania", "POLISARIO"],
      "TXT": "MauritaniaPOLISARIOnannan"
    }, {
      "ID": 253,
      "Location": "Mauritania",
      "SideA": "Mauritania",
      "SideA2nd": "France",
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1977,
      "Int": 1,
      "CumInt": 0,
      "Type": 4,
      "StartDate": 187833600000,
      "StartPrec": 2,
      "StartDate2": 187833600000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 435,
      "GWNOA2nd": 220,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 435,
      "Region": 4,
      "Version": null,
      "Array": ["Mauritania", "POLISARIO", "France"],
      "TXT": "MauritaniaPOLISARIOFrancenan"
    }, {
      "ID": 253,
      "Location": "Mauritania",
      "SideA": "Mauritania",
      "SideA2nd": null,
      "SideB": "POLISARIO",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Western Sahara",
      "YEAR": 1978,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 187833600000,
      "StartPrec": 2,
      "StartDate2": 187833600000,
      "Startprec2": 2,
      "EpEnd": 1,
      "EpEndDate": 283910400000,
      "EpEndPrec": -99.0,
      "GWNOA": 435,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 435,
      "Region": 4,
      "Version": null,
      "Array": ["Mauritania", "POLISARIO"],
      "TXT": "MauritaniaPOLISARIOnannan"
    }, {
      "ID": 254,
      "Location": "Democratic Republic of Congo (Zaire)",
      "SideA": "Democratic Republic of Congo (Zaire) ",
      "SideA2nd": null,
      "SideB": "BDK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kongo Kingdom",
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 899337600000,
      "StartPrec": 1,
      "StartDate2": 1170288000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 490,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 490,
      "Region": 4,
      "Version": null,
      "Array": ["Democratic Republic of Congo (Zaire) ", "BDK"],
      "TXT": "Democratic Republic of Congo (Zaire) BDKnannan"
    }, {
      "ID": 254,
      "Location": "Democratic Republic of Congo (Zaire)",
      "SideA": "Democratic Republic of Congo (Zaire) ",
      "SideA2nd": null,
      "SideB": "BDK",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Kongo Kingdom",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 899337600000,
      "StartPrec": 1,
      "StartDate2": 1170288000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 490,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 490,
      "Region": 4,
      "Version": null,
      "Array": ["Democratic Republic of Congo (Zaire) ", "BDK"],
      "TXT": "Democratic Republic of Congo (Zaire) BDKnannan"
    }, {
      "ID": 255,
      "Location": "Niger",
      "SideA": "Niger",
      "SideA2nd": null,
      "SideB": "FLAA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1991,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 686275200000,
      "StartPrec": 3,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 436,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": "436",
      "Region": 4,
      "Version": null,
      "Array": ["Niger", "FLAA"],
      "TXT": "NigerFLAAnannan"
    }, {
      "ID": 255,
      "Location": "Niger",
      "SideA": "Niger",
      "SideA2nd": null,
      "SideB": "FLAA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1992,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 686275200000,
      "StartPrec": 3,
      "StartDate2": 691545600000,
      "Startprec2": 3,
      "EpEnd": 1,
      "EpEndDate": 725760000000,
      "EpEndPrec": -99.0,
      "GWNOA": 436,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": "436",
      "Region": 4,
      "Version": null,
      "Array": ["Niger", "FLAA"],
      "TXT": "NigerFLAAnannan"
    }, {
      "ID": 255,
      "Location": "Niger",
      "SideA": "Niger",
      "SideA2nd": null,
      "SideB": "UFRA",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1997,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 686275200000,
      "StartPrec": 3,
      "StartDate2": 877219200000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 880761600000,
      "EpEndPrec": -99.0,
      "GWNOA": 436,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": "436",
      "Region": 4,
      "Version": null,
      "Array": ["Niger", "UFRA"],
      "TXT": "NigerUFRAnannan"
    }, {
      "ID": 255,
      "Location": "Niger",
      "SideA": "Niger",
      "SideA2nd": null,
      "SideB": "MNJ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 686275200000,
      "StartPrec": 3,
      "StartDate2": 1183248000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 436,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 436,
      "Region": 4,
      "Version": null,
      "Array": ["Niger", "MNJ"],
      "TXT": "NigerMNJnannan"
    }, {
      "ID": 255,
      "Location": "Niger",
      "SideA": "Niger",
      "SideA2nd": null,
      "SideB": "MNJ",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 686275200000,
      "StartPrec": 3,
      "StartDate2": 1183248000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 436,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 436,
      "Region": 4,
      "Version": null,
      "Array": ["Niger", "MNJ"],
      "TXT": "NigerMNJnannan"
    }, {
      "ID": 256,
      "Location": "Afghanistan, Russia (Soviet Union)",
      "SideA": "Afghanistan",
      "SideA2nd": null,
      "SideB": "Russia (Soviet Union)",
      "SideB2nd": null,
      "Incomp": 2,
      "Terr": null,
      "YEAR": 1979,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 314841600000,
      "StartPrec": 1,
      "StartDate2": 315100800000,
      "Startprec2": 1,
      "EpEnd": 1,
      "EpEndDate": 315187200000,
      "EpEndPrec": -99.0,
      "GWNOA": 700,
      "GWNOA2nd": null,
      "GWNOB": 365,
      "GWNOB2nd": null,
      "GWNOLoc": "700, 365",
      "Region": 3,
      "Version": null,
      "Array": ["Afghanistan", "Russia (Soviet Union)"],
      "TXT": "AfghanistanRussia (Soviet Union)nannan"
    }, {
      "ID": 257,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Forces of the Caucasus Emirate",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Caucasus Emirate",
      "YEAR": 2007,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 1191888000000,
      "StartPrec": 1,
      "StartDate2": 1196208000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Forces of the Caucasus Emirate"],
      "TXT": "Russia (Soviet Union)Forces of the Caucasus Emiratenannan"
    }, {
      "ID": 257,
      "Location": "Russia (Soviet Union)",
      "SideA": "Russia (Soviet Union)",
      "SideA2nd": null,
      "SideB": "Forces of the Caucasus Emirate",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Caucasus Emirate",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 1191888000000,
      "StartPrec": 1,
      "StartDate2": 1196208000000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 365,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 365,
      "Region": 1,
      "Version": null,
      "Array": ["Russia (Soviet Union)", "Forces of the Caucasus Emirate"],
      "TXT": "Russia (Soviet Union)Forces of the Caucasus Emiratenannan"
    }, {
      "ID": 258,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "DHD \u2013 BW",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Dimaraji",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 1133827200000,
      "StartPrec": 1,
      "StartDate2": 1225324800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "DHD \u2013 BW"],
      "TXT": "IndiaDHD \u2013 BWnannan"
    }, {
      "ID": 259,
      "Location": "India",
      "SideA": "India",
      "SideA2nd": null,
      "SideB": "PULF",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Islamic State",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 0,
      "Type": 3,
      "StartDate": 1102896000000,
      "StartPrec": 1,
      "StartDate2": 1226188800000,
      "Startprec2": 1,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 750,
      "GWNOA2nd": null,
      "GWNOB": null,
      "GWNOB2nd": null,
      "GWNOLoc": 750,
      "Region": 3,
      "Version": null,
      "Array": ["India", "PULF"],
      "TXT": "IndiaPULFnannan"
    }, {
      "ID": 260,
      "Location": "Djibouti, Eritrea",
      "SideA": "Djibouti",
      "SideA2nd": null,
      "SideB": "Eritrea",
      "SideB2nd": null,
      "Incomp": 1,
      "Terr": "Common border",
      "YEAR": 2008,
      "Int": 1,
      "CumInt": 0,
      "Type": 2,
      "StartDate": 1213056000000,
      "StartPrec": 1,
      "StartDate2": 1213228800000,
      "Startprec2": 2,
      "EpEnd": 0,
      "EpEndDate": null,
      "EpEndPrec": null,
      "GWNOA": 522,
      "GWNOA2nd": null,
      "GWNOB": 531,
      "GWNOB2nd": null,
      "GWNOLoc": "522, 531",
      "Region": 4,
      "Version": null,
      "Array": ["Djibouti", "Eritrea"],
      "TXT": "DjiboutiEritreanannan"
    }];
  };

  return DummyData;
}();

exports.DummyData = DummyData;
},{}],"typescript/PreProcessing.ts":[function(require,module,exports) {
"use strict";

var __spreadArrays = this && this.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Types_1 = require("./Types");

var PreProcessing =
/** @class */
function () {
  function PreProcessing() {}
  /**
  * This function prepares the data for the processing from a
  * JSON object array containing two range fields. It ignores
  * undefined and null values. This form of input contains no additional
  * information of the xLayers except for the id.
  */


  PreProcessing.fromRanges = function (data, yField, fromField, toField) {
    var xs = new Set();
    var yData = new Map();
    data.forEach(function (d) {
      if (d[fromField]) xs.add(d[fromField]);
      if (d[toField]) xs.add(d[toField]);
      yData.set(d[yField], new Types_1.YLayer(d[yField], d));
    });
    var sortedXs = Array.from(xs).sort(function (a, b) {
      return a - b;
    });
    var xData = sortedXs.map(function (x) {
      var xLayer = new Types_1.XLayer(x, {});
      data.forEach(function (d) {
        if ((d[fromField] <= x || !d[fromField]) && (d[toField] >= x || !d[toField])) {
          var yID = d[yField];
          xLayer.group.push(yID);
          var yVal = yData.get(yID);
          yVal.layers.push(xLayer);
          yData.set(yID, yVal);
        }
      });
      return xLayer;
    });
    return {
      xData: xData,
      yData: yData
    };
  };
  /**
  * This function prepares the data for the processing from a
  * JSON object array. It removes duplicates in groups and ignores
  * undefined and null values. This form of input contains no additional
  * information of the yLayers except for the id.
  */


  PreProcessing.fromArray = function (inputData, xField, yFields, splitFunction) {
    inputData.sort(function (a, b) {
      return a[xField] - b[xField];
    });
    var yData = new Map();
    var xData = inputData.map(function (x, i) {
      var xObj = new Types_1.XLayer(x[xField], x);
      xObj.id = i;
      xObj.group = __spreadArrays(Array.from(yFields.reduce(function (acc, y) {
        if (x[y]) splitFunction ? splitFunction(x[y]).forEach(function (p) {
          if (p) acc.add(p);
        }) : acc.add(x[y]);
        return acc;
      }, new Set())));
      xObj.group = xObj.group.map(function (y) {
        var yObj = yData.get(y);

        if (!yObj) {
          // create the y object
          yObj = new Types_1.YLayer(y, {});
        }

        yObj.layers.push(xObj);
        yData.set(y, yObj);
        return y;
      });
      return xObj;
    });
    return {
      xData: xData,
      yData: yData
    };
  };

  return PreProcessing;
}();

exports.PreProcessing = PreProcessing;
},{"./Types":"typescript/Types.ts"}],"typescript/Templates.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var DummyData_1 = require("./DummyData");

var PreProcessing_1 = require("./PreProcessing");

var Templates =
/** @class */
function () {
  function Templates() {}

  Templates.getTemplate1 = function () {
    var data = PreProcessing_1.PreProcessing.fromArray(DummyData_1.DummyData.warData(), 'YEAR', ['SideA', 'SideA2nd', 'SideB', 'SideB2nd'], function (d) {
      return d ? d.split(', ') : [];
    });
    var config = {
      xDescription: function xDescription(xLayer) {
        return xLayer.data.YEAR + ', ' + xLayer.data.Location;
      },
      mustContain: ['United Kingdom'],
      filterXValue: [undefined, undefined],
      filterGroupSize: [1, undefined],
      filterGroupAmt: [2, undefined],
      xValueScaling: 0.5
    };
    return [data, config];
  };

  Templates.getTemplate2 = function () {
    var data = PreProcessing_1.PreProcessing.fromArray(DummyData_1.DummyData.testData(), 'id', ['a', 'b', 'c', 'd']);
    var config = {
      xDescription: function xDescription(xLayer) {
        return String(xLayer.xValue);
      },
      filterGroupAmt: [3, undefined]
    };
    return [data, config];
  };

  Templates.getTemplate3 = function () {
    var data = PreProcessing_1.PreProcessing.fromRanges(DummyData_1.DummyData.bundesraete(), 'Name', 'Amtsantritt', 'Amtsende');
    var config = {
      xDescription: function xDescription(xLayer) {
        return String(xLayer.xValue);
      },
      xValueScaling: 0.,
      continuousStart: false,
      continuousEnd: false,
      generationAmt: 10,
      populationSize: 10
    };
    return [data, config];
  };

  return Templates;
}();

exports.Templates = Templates;
},{"./DummyData":"typescript/DummyData.ts","./PreProcessing":"typescript/PreProcessing.ts"}],"index.ts":[function(require,module,exports) {
"use strict";

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = this && this.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var vega_embed_1 = __importDefault(require("vega-embed"));

var KnotDiagram_1 = require("./typescript/KnotDiagram");

var Templates_1 = require("./typescript/Templates");
/**
* Testing
* Gui: Highlighting, Stability
*/


function main() {
  return __awaiter(this, void 0, void 0, function () {
    var template, KD;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          template = Templates_1.Templates.getTemplate3();
          KD = new KnotDiagram_1.KnotDiagram(template[0], template[1]);
          return [4
          /*yield*/
          , vega_embed_1.default("#viz", KD.spec)];

        case 1:
          _a.sent();

          return [2
          /*return*/
          ];
      }
    });
  });
}

main();
},{"vega-embed":"node_modules/vega-embed/build/src/embed.js","./typescript/KnotDiagram":"typescript/KnotDiagram.ts","./typescript/Templates":"typescript/Templates.ts"}],"../../../../../usr/local/lib/node_modules/parcel/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "51433" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else {
        window.location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../../../../../usr/local/lib/node_modules/parcel/src/builtins/hmr-runtime.js","index.ts"], null)
//# sourceMappingURL=/knot-diagram.77de5100.js.map